
PDB_MCU_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f104  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c3c  0800f304  0800f304  0001f304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f40  08011f40  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08011f40  08011f40  00021f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f48  08011f48  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f48  08011f48  00021f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f4c  08011f4c  00021f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08011f50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068e8  20000078  08011fc8  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006960  08011fc8  00036960  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017acc  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b11  00000000  00000000  00047b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0004c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  0004d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032882  00000000  00000000  0004e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe95  00000000  00000000  000810aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105c94  00000000  00000000  000a0f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a6bd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d50  00000000  00000000  001a6c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f2ec 	.word	0x0800f2ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800f2ec 	.word	0x0800f2ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fda8 	bl	800114e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f831 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8a1 	bl	8000748 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000606:	f002 fecb 	bl	80033a0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udp_echoclient_connect();
 800060a:	f000 fcf1 	bl	8000ff0 <udp_echoclient_connect>
  gpio_reset();
 800060e:	f000 f9c7 	bl	80009a0 <gpio_reset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int i = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <main+0x64>)
 800061e:	f002 f999 	bl	8002954 <HAL_GPIO_WritePin>
	  MX_LWIP_Process();
 8000622:	f002 ffef 	bl	8003604 <MX_LWIP_Process>
	  udp_echoclient_send();
 8000626:	f000 fd11 	bl	800104c <udp_echoclient_send>

	  for(int i=1;i<33;i++){
 800062a:	2301      	movs	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	e00c      	b.n	800064a <main+0x56>
	  		data_rx.rx_buffer[i]=buffer[i];
 8000630:	4a0a      	ldr	r2, [pc, #40]	; (800065c <main+0x68>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	7819      	ldrb	r1, [r3, #0]
 8000638:	4a09      	ldr	r2, [pc, #36]	; (8000660 <main+0x6c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	3301      	adds	r3, #1
 8000640:	460a      	mov	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
	  for(int i=1;i<33;i++){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b20      	cmp	r3, #32
 800064e:	ddef      	ble.n	8000630 <main+0x3c>
	  	}
	  gpio_set();
 8000650:	f000 fa60 	bl	8000b14 <gpio_set>
  {
 8000654:	e7dd      	b.n	8000612 <main+0x1e>
 8000656:	bf00      	nop
 8000658:	40020400 	.word	0x40020400
 800065c:	200000bc 	.word	0x200000bc
 8000660:	20000094 	.word	0x20000094

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	; 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f00d fc1a 	bl	800deac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f002 f97e 	bl	8002988 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <SystemClock_Config+0xdc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <SystemClock_Config+0xdc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xe0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a25      	ldr	r2, [pc, #148]	; (8000744 <SystemClock_Config+0xe0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <SystemClock_Config+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006d8:	2360      	movs	r3, #96	; 0x60
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 f9ab 	bl	8002a48 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f8:	f000 fb4a 	bl	8000d90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006fc:	f002 f954 	bl	80029a8 <HAL_PWREx_EnableOverDrive>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000706:	f000 fb43 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fc3c 	bl	8002fa4 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000732:	f000 fb2d 	bl	8000d90 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	4b89      	ldr	r3, [pc, #548]	; (8000984 <MX_GPIO_Init+0x23c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a88      	ldr	r2, [pc, #544]	; (8000984 <MX_GPIO_Init+0x23c>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b86      	ldr	r3, [pc, #536]	; (8000984 <MX_GPIO_Init+0x23c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b83      	ldr	r3, [pc, #524]	; (8000984 <MX_GPIO_Init+0x23c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a82      	ldr	r2, [pc, #520]	; (8000984 <MX_GPIO_Init+0x23c>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b80      	ldr	r3, [pc, #512]	; (8000984 <MX_GPIO_Init+0x23c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b7d      	ldr	r3, [pc, #500]	; (8000984 <MX_GPIO_Init+0x23c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a7c      	ldr	r2, [pc, #496]	; (8000984 <MX_GPIO_Init+0x23c>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b7a      	ldr	r3, [pc, #488]	; (8000984 <MX_GPIO_Init+0x23c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b77      	ldr	r3, [pc, #476]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a76      	ldr	r2, [pc, #472]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b74      	ldr	r3, [pc, #464]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b71      	ldr	r3, [pc, #452]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a70      	ldr	r2, [pc, #448]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b6e      	ldr	r3, [pc, #440]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b6b      	ldr	r3, [pc, #428]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a6a      	ldr	r2, [pc, #424]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b68      	ldr	r3, [pc, #416]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	4b65      	ldr	r3, [pc, #404]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a64      	ldr	r2, [pc, #400]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b62      	ldr	r3, [pc, #392]	; (8000984 <MX_GPIO_Init+0x23c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000806:	2200      	movs	r2, #0
 8000808:	213f      	movs	r1, #63	; 0x3f
 800080a:	485f      	ldr	r0, [pc, #380]	; (8000988 <MX_GPIO_Init+0x240>)
 800080c:	f002 f8a2 	bl	8002954 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_4|GPIO_PIN_5
 8000810:	2200      	movs	r2, #0
 8000812:	f244 31f1 	movw	r1, #17393	; 0x43f1
 8000816:	485d      	ldr	r0, [pc, #372]	; (800098c <MX_GPIO_Init+0x244>)
 8000818:	f002 f89c 	bl	8002954 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
 800081c:	2200      	movs	r2, #0
 800081e:	f245 6140 	movw	r1, #22080	; 0x5640
 8000822:	485b      	ldr	r0, [pc, #364]	; (8000990 <MX_GPIO_Init+0x248>)
 8000824:	f002 f896 	bl	8002954 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800082e:	4859      	ldr	r0, [pc, #356]	; (8000994 <MX_GPIO_Init+0x24c>)
 8000830:	f002 f890 	bl	8002954 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000834:	2200      	movs	r2, #0
 8000836:	21ff      	movs	r1, #255	; 0xff
 8000838:	4857      	ldr	r0, [pc, #348]	; (8000998 <MX_GPIO_Init+0x250>)
 800083a:	f002 f88b 	bl	8002954 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800083e:	233f      	movs	r3, #63	; 0x3f
 8000840:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	484c      	ldr	r0, [pc, #304]	; (8000988 <MX_GPIO_Init+0x240>)
 8000856:	f001 fed1 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4846      	ldr	r0, [pc, #280]	; (8000988 <MX_GPIO_Init+0x240>)
 800086e:	f001 fec5 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000878:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4842      	ldr	r0, [pc, #264]	; (8000994 <MX_GPIO_Init+0x24c>)
 800088a:	f001 feb7 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4|GPIO_PIN_5
 800088e:	f244 33f1 	movw	r3, #17393	; 0x43f1
 8000892:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4839      	ldr	r0, [pc, #228]	; (800098c <MX_GPIO_Init+0x244>)
 80008a8:	f001 fea8 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008be:	2307      	movs	r3, #7
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4833      	ldr	r0, [pc, #204]	; (8000998 <MX_GPIO_Init+0x250>)
 80008ca:	f001 fe97 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG9 PG10 PG12
                           PG14 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
 80008ce:	f245 6340 	movw	r3, #22080	; 0x5640
 80008d2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	482a      	ldr	r0, [pc, #168]	; (8000990 <MX_GPIO_Init+0x248>)
 80008e8:	f001 fe88 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4824      	ldr	r0, [pc, #144]	; (8000990 <MX_GPIO_Init+0x248>)
 8000900:	f001 fe7c 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000904:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8000908:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481d      	ldr	r0, [pc, #116]	; (8000994 <MX_GPIO_Init+0x24c>)
 800091e:	f001 fe6d 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000922:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000934:	230a      	movs	r3, #10
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4817      	ldr	r0, [pc, #92]	; (800099c <MX_GPIO_Init+0x254>)
 8000940:	f001 fe5c 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4810      	ldr	r0, [pc, #64]	; (800099c <MX_GPIO_Init+0x254>)
 800095a:	f001 fe4f 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800095e:	23ff      	movs	r3, #255	; 0xff
 8000960:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <MX_GPIO_Init+0x250>)
 8000976:	f001 fe41 	bl	80025fc <HAL_GPIO_Init>

}
 800097a:	bf00      	nop
 800097c:	3730      	adds	r7, #48	; 0x30
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40021000 	.word	0x40021000
 800098c:	40020400 	.word	0x40020400
 8000990:	40021800 	.word	0x40021800
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40020000 	.word	0x40020000

080009a0 <gpio_reset>:

/* USER CODE BEGIN 4 */
void gpio_reset(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	4855      	ldr	r0, [pc, #340]	; (8000b00 <gpio_reset+0x160>)
 80009aa:	f001 ffd3 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2102      	movs	r1, #2
 80009b2:	4853      	ldr	r0, [pc, #332]	; (8000b00 <gpio_reset+0x160>)
 80009b4:	f001 ffce 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2104      	movs	r1, #4
 80009bc:	4850      	ldr	r0, [pc, #320]	; (8000b00 <gpio_reset+0x160>)
 80009be:	f001 ffc9 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2108      	movs	r1, #8
 80009c6:	484e      	ldr	r0, [pc, #312]	; (8000b00 <gpio_reset+0x160>)
 80009c8:	f001 ffc4 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2110      	movs	r1, #16
 80009d0:	484b      	ldr	r0, [pc, #300]	; (8000b00 <gpio_reset+0x160>)
 80009d2:	f001 ffbf 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	4849      	ldr	r0, [pc, #292]	; (8000b00 <gpio_reset+0x160>)
 80009dc:	f001 ffba 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	4846      	ldr	r0, [pc, #280]	; (8000b00 <gpio_reset+0x160>)
 80009e6:	f001 ffb5 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	4845      	ldr	r0, [pc, #276]	; (8000b04 <gpio_reset+0x164>)
 80009f0:	f001 ffb0 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2120      	movs	r1, #32
 80009f8:	4842      	ldr	r0, [pc, #264]	; (8000b04 <gpio_reset+0x164>)
 80009fa:	f001 ffab 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	4840      	ldr	r0, [pc, #256]	; (8000b04 <gpio_reset+0x164>)
 8000a04:	f001 ffa6 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	483d      	ldr	r0, [pc, #244]	; (8000b04 <gpio_reset+0x164>)
 8000a0e:	f001 ffa1 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a18:	483a      	ldr	r0, [pc, #232]	; (8000b04 <gpio_reset+0x164>)
 8000a1a:	f001 ff9b 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a24:	4837      	ldr	r0, [pc, #220]	; (8000b04 <gpio_reset+0x164>)
 8000a26:	f001 ff95 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a30:	4835      	ldr	r0, [pc, #212]	; (8000b08 <gpio_reset+0x168>)
 8000a32:	f001 ff8f 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3c:	4832      	ldr	r0, [pc, #200]	; (8000b08 <gpio_reset+0x168>)
 8000a3e:	f001 ff89 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a48:	482f      	ldr	r0, [pc, #188]	; (8000b08 <gpio_reset+0x168>)
 8000a4a:	f001 ff83 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a54:	482c      	ldr	r0, [pc, #176]	; (8000b08 <gpio_reset+0x168>)
 8000a56:	f001 ff7d 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a60:	4829      	ldr	r0, [pc, #164]	; (8000b08 <gpio_reset+0x168>)
 8000a62:	f001 ff77 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4828      	ldr	r0, [pc, #160]	; (8000b0c <gpio_reset+0x16c>)
 8000a6c:	f001 ff72 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2102      	movs	r1, #2
 8000a74:	4825      	ldr	r0, [pc, #148]	; (8000b0c <gpio_reset+0x16c>)
 8000a76:	f001 ff6d 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4823      	ldr	r0, [pc, #140]	; (8000b0c <gpio_reset+0x16c>)
 8000a80:	f001 ff68 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2108      	movs	r1, #8
 8000a88:	4820      	ldr	r0, [pc, #128]	; (8000b0c <gpio_reset+0x16c>)
 8000a8a:	f001 ff63 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2110      	movs	r1, #16
 8000a92:	481e      	ldr	r0, [pc, #120]	; (8000b0c <gpio_reset+0x16c>)
 8000a94:	f001 ff5e 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	481b      	ldr	r0, [pc, #108]	; (8000b0c <gpio_reset+0x16c>)
 8000a9e:	f001 ff59 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4819      	ldr	r0, [pc, #100]	; (8000b0c <gpio_reset+0x16c>)
 8000aa8:	f001 ff54 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	4816      	ldr	r0, [pc, #88]	; (8000b0c <gpio_reset+0x16c>)
 8000ab2:	f001 ff4f 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <gpio_reset+0x170>)
 8000abc:	f001 ff4a 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <gpio_reset+0x170>)
 8000ac8:	f001 ff44 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <gpio_reset+0x170>)
 8000ad4:	f001 ff3e 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <gpio_reset+0x170>)
 8000ae0:	f001 ff38 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <gpio_reset+0x170>)
 8000aec:	f001 ff32 	bl	8002954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <gpio_reset+0x170>)
 8000af8:	f001 ff2c 	bl	8002954 <HAL_GPIO_WritePin>

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40021800 	.word	0x40021800
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	40020800 	.word	0x40020800

08000b14 <gpio_set>:

void gpio_set(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	for(int i=0;i<32;i++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	e122      	b.n	8000d66 <gpio_set+0x252>
	{
		if(data_rx.rx_buffer[i]==true){
 8000b20:	4a95      	ldr	r2, [pc, #596]	; (8000d78 <gpio_set+0x264>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	3301      	adds	r3, #1
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b31      	cmp	r3, #49	; 0x31
 8000b2c:	f040 8117 	bne.w	8000d5e <gpio_set+0x24a>
			switch(i){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b1f      	cmp	r3, #31
 8000b34:	f200 8110 	bhi.w	8000d58 <gpio_set+0x244>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <gpio_set+0x2c>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000bc1 	.word	0x08000bc1
 8000b44:	08000bcd 	.word	0x08000bcd
 8000b48:	08000bd9 	.word	0x08000bd9
 8000b4c:	08000be5 	.word	0x08000be5
 8000b50:	08000bf1 	.word	0x08000bf1
 8000b54:	08000bfd 	.word	0x08000bfd
 8000b58:	08000c09 	.word	0x08000c09
 8000b5c:	08000c15 	.word	0x08000c15
 8000b60:	08000c21 	.word	0x08000c21
 8000b64:	08000c2d 	.word	0x08000c2d
 8000b68:	08000c39 	.word	0x08000c39
 8000b6c:	08000c45 	.word	0x08000c45
 8000b70:	08000c53 	.word	0x08000c53
 8000b74:	08000c61 	.word	0x08000c61
 8000b78:	08000c6f 	.word	0x08000c6f
 8000b7c:	08000c7d 	.word	0x08000c7d
 8000b80:	08000c8b 	.word	0x08000c8b
 8000b84:	08000c99 	.word	0x08000c99
 8000b88:	08000ca7 	.word	0x08000ca7
 8000b8c:	08000cb3 	.word	0x08000cb3
 8000b90:	08000cbf 	.word	0x08000cbf
 8000b94:	08000ccb 	.word	0x08000ccb
 8000b98:	08000cd7 	.word	0x08000cd7
 8000b9c:	08000ce3 	.word	0x08000ce3
 8000ba0:	08000cef 	.word	0x08000cef
 8000ba4:	08000cfb 	.word	0x08000cfb
 8000ba8:	08000d07 	.word	0x08000d07
 8000bac:	08000d13 	.word	0x08000d13
 8000bb0:	08000d21 	.word	0x08000d21
 8000bb4:	08000d2f 	.word	0x08000d2f
 8000bb8:	08000d3d 	.word	0x08000d3d
 8000bbc:	08000d4b 	.word	0x08000d4b
					case 0:HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	486d      	ldr	r0, [pc, #436]	; (8000d7c <gpio_set+0x268>)
 8000bc6:	f001 fec5 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000bca:	e0c9      	b.n	8000d60 <gpio_set+0x24c>
					case 1:HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2102      	movs	r1, #2
 8000bd0:	486a      	ldr	r0, [pc, #424]	; (8000d7c <gpio_set+0x268>)
 8000bd2:	f001 febf 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000bd6:	e0c3      	b.n	8000d60 <gpio_set+0x24c>
					case 2:HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4867      	ldr	r0, [pc, #412]	; (8000d7c <gpio_set+0x268>)
 8000bde:	f001 feb9 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000be2:	e0bd      	b.n	8000d60 <gpio_set+0x24c>
					case 3:HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2108      	movs	r1, #8
 8000be8:	4864      	ldr	r0, [pc, #400]	; (8000d7c <gpio_set+0x268>)
 8000bea:	f001 feb3 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000bee:	e0b7      	b.n	8000d60 <gpio_set+0x24c>
					case 4:HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	4861      	ldr	r0, [pc, #388]	; (8000d7c <gpio_set+0x268>)
 8000bf6:	f001 fead 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000bfa:	e0b1      	b.n	8000d60 <gpio_set+0x24c>
					case 5:HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2120      	movs	r1, #32
 8000c00:	485e      	ldr	r0, [pc, #376]	; (8000d7c <gpio_set+0x268>)
 8000c02:	f001 fea7 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c06:	e0ab      	b.n	8000d60 <gpio_set+0x24c>
					case 6:HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2140      	movs	r1, #64	; 0x40
 8000c0c:	485b      	ldr	r0, [pc, #364]	; (8000d7c <gpio_set+0x268>)
 8000c0e:	f001 fea1 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c12:	e0a5      	b.n	8000d60 <gpio_set+0x24c>
					case 7:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	4859      	ldr	r0, [pc, #356]	; (8000d80 <gpio_set+0x26c>)
 8000c1a:	f001 fe9b 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c1e:	e09f      	b.n	8000d60 <gpio_set+0x24c>
					case 8:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2120      	movs	r1, #32
 8000c24:	4856      	ldr	r0, [pc, #344]	; (8000d80 <gpio_set+0x26c>)
 8000c26:	f001 fe95 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c2a:	e099      	b.n	8000d60 <gpio_set+0x24c>
					case 9:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	4853      	ldr	r0, [pc, #332]	; (8000d80 <gpio_set+0x26c>)
 8000c32:	f001 fe8f 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c36:	e093      	b.n	8000d60 <gpio_set+0x24c>
					case 10:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	4850      	ldr	r0, [pc, #320]	; (8000d80 <gpio_set+0x26c>)
 8000c3e:	f001 fe89 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c42:	e08d      	b.n	8000d60 <gpio_set+0x24c>
					case 11:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4a:	484d      	ldr	r0, [pc, #308]	; (8000d80 <gpio_set+0x26c>)
 8000c4c:	f001 fe82 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c50:	e086      	b.n	8000d60 <gpio_set+0x24c>
					case 12:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	4849      	ldr	r0, [pc, #292]	; (8000d80 <gpio_set+0x26c>)
 8000c5a:	f001 fe7b 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c5e:	e07f      	b.n	8000d60 <gpio_set+0x24c>
					case 13:HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c66:	4847      	ldr	r0, [pc, #284]	; (8000d84 <gpio_set+0x270>)
 8000c68:	f001 fe74 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c6c:	e078      	b.n	8000d60 <gpio_set+0x24c>
					case 14:HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	4843      	ldr	r0, [pc, #268]	; (8000d84 <gpio_set+0x270>)
 8000c76:	f001 fe6d 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c7a:	e071      	b.n	8000d60 <gpio_set+0x24c>
					case 15:HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c82:	4840      	ldr	r0, [pc, #256]	; (8000d84 <gpio_set+0x270>)
 8000c84:	f001 fe66 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c88:	e06a      	b.n	8000d60 <gpio_set+0x24c>
					case 16:HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c90:	483c      	ldr	r0, [pc, #240]	; (8000d84 <gpio_set+0x270>)
 8000c92:	f001 fe5f 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000c96:	e063      	b.n	8000d60 <gpio_set+0x24c>
					case 17:HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9e:	4839      	ldr	r0, [pc, #228]	; (8000d84 <gpio_set+0x270>)
 8000ca0:	f001 fe58 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000ca4:	e05c      	b.n	8000d60 <gpio_set+0x24c>
					case 18:HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4837      	ldr	r0, [pc, #220]	; (8000d88 <gpio_set+0x274>)
 8000cac:	f001 fe52 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000cb0:	e056      	b.n	8000d60 <gpio_set+0x24c>
					case 19:HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4834      	ldr	r0, [pc, #208]	; (8000d88 <gpio_set+0x274>)
 8000cb8:	f001 fe4c 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000cbc:	e050      	b.n	8000d60 <gpio_set+0x24c>
					case 20:HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	4831      	ldr	r0, [pc, #196]	; (8000d88 <gpio_set+0x274>)
 8000cc4:	f001 fe46 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000cc8:	e04a      	b.n	8000d60 <gpio_set+0x24c>
					case 21:HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2108      	movs	r1, #8
 8000cce:	482e      	ldr	r0, [pc, #184]	; (8000d88 <gpio_set+0x274>)
 8000cd0:	f001 fe40 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000cd4:	e044      	b.n	8000d60 <gpio_set+0x24c>
					case 22:HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2110      	movs	r1, #16
 8000cda:	482b      	ldr	r0, [pc, #172]	; (8000d88 <gpio_set+0x274>)
 8000cdc:	f001 fe3a 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000ce0:	e03e      	b.n	8000d60 <gpio_set+0x24c>
					case 23:HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	4828      	ldr	r0, [pc, #160]	; (8000d88 <gpio_set+0x274>)
 8000ce8:	f001 fe34 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000cec:	e038      	b.n	8000d60 <gpio_set+0x24c>
					case 24:HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2140      	movs	r1, #64	; 0x40
 8000cf2:	4825      	ldr	r0, [pc, #148]	; (8000d88 <gpio_set+0x274>)
 8000cf4:	f001 fe2e 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000cf8:	e032      	b.n	8000d60 <gpio_set+0x24c>
					case 25:HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	4822      	ldr	r0, [pc, #136]	; (8000d88 <gpio_set+0x274>)
 8000d00:	f001 fe28 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000d04:	e02c      	b.n	8000d60 <gpio_set+0x24c>
					case 26:HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4820      	ldr	r0, [pc, #128]	; (8000d8c <gpio_set+0x278>)
 8000d0c:	f001 fe22 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000d10:	e026      	b.n	8000d60 <gpio_set+0x24c>
					case 27:HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d18:	481c      	ldr	r0, [pc, #112]	; (8000d8c <gpio_set+0x278>)
 8000d1a:	f001 fe1b 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000d1e:	e01f      	b.n	8000d60 <gpio_set+0x24c>
					case 28:HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d26:	4819      	ldr	r0, [pc, #100]	; (8000d8c <gpio_set+0x278>)
 8000d28:	f001 fe14 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000d2c:	e018      	b.n	8000d60 <gpio_set+0x24c>
					case 29:HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	4815      	ldr	r0, [pc, #84]	; (8000d8c <gpio_set+0x278>)
 8000d36:	f001 fe0d 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000d3a:	e011      	b.n	8000d60 <gpio_set+0x24c>
					case 30:HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <gpio_set+0x278>)
 8000d44:	f001 fe06 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000d48:	e00a      	b.n	8000d60 <gpio_set+0x24c>
					case 31:HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <gpio_set+0x278>)
 8000d52:	f001 fdff 	bl	8002954 <HAL_GPIO_WritePin>
					break;
 8000d56:	e003      	b.n	8000d60 <gpio_set+0x24c>
					default :gpio_reset();
 8000d58:	f7ff fe22 	bl	80009a0 <gpio_reset>
					break;
 8000d5c:	e000      	b.n	8000d60 <gpio_set+0x24c>

			}

		}
 8000d5e:	bf00      	nop
	for(int i=0;i<32;i++)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b1f      	cmp	r3, #31
 8000d6a:	f77f aed9 	ble.w	8000b20 <gpio_set+0xc>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000094 	.word	0x20000094
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40021800 	.word	0x40021800
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40020800 	.word	0x40020800

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_MspInit+0x44>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_MspInit+0x44>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_MspInit+0x44>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x44>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f9ca 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	return 1;
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_kill>:

int _kill(int pid, int sig)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <_kill+0x20>)
 8000e54:	2216      	movs	r2, #22
 8000e56:	601a      	str	r2, [r3, #0]
	return -1;
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	20006950 	.word	0x20006950

08000e6c <_exit>:

void _exit (int status)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ffe5 	bl	8000e48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e7e:	e7fe      	b.n	8000e7e <_exit+0x12>

08000e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00a      	b.n	8000ea8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e92:	f3af 8000 	nop.w
 8000e96:	4601      	mov	r1, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf0      	blt.n	8000e92 <_read+0x12>
	}

return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e009      	b.n	8000ee0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf1      	blt.n	8000ecc <_write+0x12>
	}
	return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_close>:

int _close(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return -1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_isatty>:

int _isatty(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	return 1;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d205      	bcs.n	8000f98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <_sbrk+0x6c>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f96:	e009      	b.n	8000fac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20080000 	.word	0x20080000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	200000b8 	.word	0x200000b8
 8000fc4:	20006960 	.word	0x20006960
 8000fc8:	20006950 	.word	0x20006950

08000fcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <udp_echoclient_connect>:
  * @brief  Connect to UDP echo server
  * @param  None
  * @retval None
  */
void udp_echoclient_connect(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  ip_addr_t DestIPaddr;
  err_t err;

  /* Create a new UDP control block  */
  upcb = udp_new();
 8000ff6:	f00a fbef 	bl	800b7d8 <udp_new>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <udp_echoclient_connect+0x50>)
 8000ffe:	6013      	str	r3, [r2, #0]

  if (upcb!=NULL)
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <udp_echoclient_connect+0x50>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d016      	beq.n	8001036 <udp_echoclient_connect+0x46>
  {
    /*assign destination IP address */
    IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <udp_echoclient_connect+0x54>)
 800100a:	603b      	str	r3, [r7, #0]

    /* configure destination IP address and port */
    err= udp_connect(upcb, &DestIPaddr, UDP_SERVER_PORT);
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <udp_echoclient_connect+0x50>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4639      	mov	r1, r7
 8001012:	f641 3239 	movw	r2, #6969	; 0x1b39
 8001016:	4618      	mov	r0, r3
 8001018:	f00a fb50 	bl	800b6bc <udp_connect>
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]

    if (err == ERR_OK)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d106      	bne.n	8001036 <udp_echoclient_connect+0x46>
    {
      /* Set a receive callback for the upcb */
      udp_recv(upcb, udp_receive_callback, NULL);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <udp_echoclient_connect+0x50>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2200      	movs	r2, #0
 800102e:	4906      	ldr	r1, [pc, #24]	; (8001048 <udp_echoclient_connect+0x58>)
 8001030:	4618      	mov	r0, r3
 8001032:	f00a fbb1 	bl	800b798 <udp_recv>
    }
  }
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000148 	.word	0x20000148
 8001044:	89010101 	.word	0x89010101
 8001048:	080010bd 	.word	0x080010bd

0800104c <udp_echoclient_send>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoclient_send(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  struct pbuf *p;

  sprintf((char*)data, "sending udp client message %d", (int)message_count);
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <udp_echoclient_send+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4915      	ldr	r1, [pc, #84]	; (80010b0 <udp_echoclient_send+0x64>)
 800105a:	4816      	ldr	r0, [pc, #88]	; (80010b4 <udp_echoclient_send+0x68>)
 800105c:	f00c ff84 	bl	800df68 <siprintf>

  /* allocate pbuf from pool*/
  p = pbuf_alloc(PBUF_TRANSPORT,strlen((char*)data), PBUF_POOL);
 8001060:	4814      	ldr	r0, [pc, #80]	; (80010b4 <udp_echoclient_send+0x68>)
 8001062:	f7ff f8ed 	bl	8000240 <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	b29b      	uxth	r3, r3
 800106a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800106e:	4619      	mov	r1, r3
 8001070:	2036      	movs	r0, #54	; 0x36
 8001072:	f003 fe35 	bl	8004ce0 <pbuf_alloc>
 8001076:	6078      	str	r0, [r7, #4]

  if (p != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d012      	beq.n	80010a4 <udp_echoclient_send+0x58>
  {
    /* copy data to pbuf */
    pbuf_take(p, (char*)data, strlen((char*)data));
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <udp_echoclient_send+0x68>)
 8001080:	f7ff f8de 	bl	8000240 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	b29b      	uxth	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	490a      	ldr	r1, [pc, #40]	; (80010b4 <udp_echoclient_send+0x68>)
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f004 fb77 	bl	8005780 <pbuf_take>

    /* send udp data */
    udp_send(upcb, p);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <udp_echoclient_send+0x6c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	f00a f89d 	bl	800b1d8 <udp_send>

    /* free pbuf */
    pbuf_free(p);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f004 f902 	bl	80052a8 <pbuf_free>
  }
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000144 	.word	0x20000144
 80010b0:	0800f304 	.word	0x0800f304
 80010b4:	200000e0 	.word	0x200000e0
 80010b8:	20000148 	.word	0x20000148

080010bc <udp_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
	strncpy ((char *)buffer, p->payload, p->len);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6859      	ldr	r1, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	895b      	ldrh	r3, [r3, #10]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <udp_receive_callback+0x38>)
 80010d6:	f00c ff67 	bl	800dfa8 <strncpy>

  /*increment message count */
  message_count++;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <udp_receive_callback+0x3c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <udp_receive_callback+0x3c>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* Free receive pbuf */
  pbuf_free(p);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f004 f8df 	bl	80052a8 <pbuf_free>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200000bc 	.word	0x200000bc
 80010f8:	20000144 	.word	0x20000144

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001102:	490e      	ldr	r1, [pc, #56]	; (800113c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001118:	4c0b      	ldr	r4, [pc, #44]	; (8001148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001126:	f7ff ff51 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f00c fe63 	bl	800ddf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fa61 	bl	80005f4 <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001140:	08011f50 	.word	0x08011f50
  ldr r2, =_sbss
 8001144:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001148:	20006960 	.word	0x20006960

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>

0800114e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001152:	2003      	movs	r0, #3
 8001154:	f000 f92e 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001158:	2000      	movs	r0, #0
 800115a:	f000 f805 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115e:	f7ff fe1d 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f93b 	bl	8001402 <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a4:	f000 f911 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	2000014c 	.word	0x2000014c

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2000014c 	.word	0x2000014c

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	4313      	orrs	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	05fa0000 	.word	0x05fa0000

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff47 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff5c 	bl	8001298 <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff8e 	bl	8001308 <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5d 	bl	80012b4 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffb0 	bl	8001370 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800142c:	4ba0      	ldr	r3, [pc, #640]	; (80016b0 <HAL_ETH_Init+0x294>)
 800142e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e180      	b.n	8001744 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f002 f8e0 	bl	800361c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145c:	4b95      	ldr	r3, [pc, #596]	; (80016b4 <HAL_ETH_Init+0x298>)
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	4a94      	ldr	r2, [pc, #592]	; (80016b4 <HAL_ETH_Init+0x298>)
 8001462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001466:	6453      	str	r3, [r2, #68]	; 0x44
 8001468:	4b92      	ldr	r3, [pc, #584]	; (80016b4 <HAL_ETH_Init+0x298>)
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001474:	4b90      	ldr	r3, [pc, #576]	; (80016b8 <HAL_ETH_Init+0x29c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a8f      	ldr	r2, [pc, #572]	; (80016b8 <HAL_ETH_Init+0x29c>)
 800147a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800147e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001480:	4b8d      	ldr	r3, [pc, #564]	; (80016b8 <HAL_ETH_Init+0x29c>)
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	498b      	ldr	r1, [pc, #556]	; (80016b8 <HAL_ETH_Init+0x29c>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014a4:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014a6:	f7ff fea3 	bl	80011f0 <HAL_GetTick>
 80014aa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014ac:	e011      	b.n	80014d2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014ae:	f7ff fe9f 	bl	80011f0 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014bc:	d909      	bls.n	80014d2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e138      	b.n	8001744 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e4      	bne.n	80014ae <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f023 031c 	bic.w	r3, r3, #28
 80014f2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014f4:	f001 ff48 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80014f8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4a6f      	ldr	r2, [pc, #444]	; (80016bc <HAL_ETH_Init+0x2a0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d908      	bls.n	8001514 <HAL_ETH_Init+0xf8>
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4a6e      	ldr	r2, [pc, #440]	; (80016c0 <HAL_ETH_Init+0x2a4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d804      	bhi.n	8001514 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e027      	b.n	8001564 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <HAL_ETH_Init+0x2a4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d908      	bls.n	800152e <HAL_ETH_Init+0x112>
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	4a64      	ldr	r2, [pc, #400]	; (80016b0 <HAL_ETH_Init+0x294>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d204      	bcs.n	800152e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f043 030c 	orr.w	r3, r3, #12
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	e01a      	b.n	8001564 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	4a5f      	ldr	r2, [pc, #380]	; (80016b0 <HAL_ETH_Init+0x294>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d303      	bcc.n	800153e <HAL_ETH_Init+0x122>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4a62      	ldr	r2, [pc, #392]	; (80016c4 <HAL_ETH_Init+0x2a8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d911      	bls.n	8001562 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4a60      	ldr	r2, [pc, #384]	; (80016c4 <HAL_ETH_Init+0x2a8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d908      	bls.n	8001558 <HAL_ETH_Init+0x13c>
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4a5f      	ldr	r2, [pc, #380]	; (80016c8 <HAL_ETH_Init+0x2ac>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d804      	bhi.n	8001558 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e005      	b.n	8001564 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	e000      	b.n	8001564 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001562:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800156c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fb94 	bl	8001ca0 <HAL_ETH_WritePHYRegister>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001582:	6939      	ldr	r1, [r7, #16]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fd49 	bl	800201c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0d6      	b.n	8001744 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001596:	20ff      	movs	r0, #255	; 0xff
 8001598:	f7ff fe36 	bl	8001208 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a4 	beq.w	80016ee <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015a6:	f7ff fe23 	bl	80011f0 <HAL_GetTick>
 80015aa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	461a      	mov	r2, r3
 80015b2:	2101      	movs	r1, #1
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fb0b 	bl	8001bd0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015ba:	f7ff fe19 	bl	80011f0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d90f      	bls.n	80015ec <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015d0:	6939      	ldr	r1, [r7, #16]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fd22 	bl	800201c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e0ab      	b.n	8001744 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0da      	beq.n	80015ac <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fa:	2100      	movs	r1, #0
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb4f 	bl	8001ca0 <HAL_ETH_WritePHYRegister>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00b      	beq.n	8001620 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800160c:	6939      	ldr	r1, [r7, #16]
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fd04 	bl	800201c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800161c:	2301      	movs	r3, #1
 800161e:	e091      	b.n	8001744 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff fde6 	bl	80011f0 <HAL_GetTick>
 8001624:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	461a      	mov	r2, r3
 800162c:	2101      	movs	r1, #1
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 face 	bl	8001bd0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001634:	f7ff fddc 	bl	80011f0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d90f      	bls.n	8001666 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fce5 	bl	800201c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e06e      	b.n	8001744 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0da      	beq.n	8001626 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	461a      	mov	r2, r3
 8001676:	2110      	movs	r1, #16
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 faa9 	bl	8001bd0 <HAL_ETH_ReadPHYRegister>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fcc6 	bl	800201c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001698:	2301      	movs	r3, #1
 800169a:	e053      	b.n	8001744 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d012      	beq.n	80016cc <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	e010      	b.n	80016d2 <HAL_ETH_Init+0x2b6>
 80016b0:	03938700 	.word	0x03938700
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40013800 	.word	0x40013800
 80016bc:	01312cff 	.word	0x01312cff
 80016c0:	02160ebf 	.word	0x02160ebf
 80016c4:	05f5e0ff 	.word	0x05f5e0ff
 80016c8:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	e026      	b.n	8001732 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	e021      	b.n	8001732 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	08db      	lsrs	r3, r3, #3
 80016f4:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016fe:	4313      	orrs	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	2100      	movs	r1, #0
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 faca 	bl	8001ca0 <HAL_ETH_WritePHYRegister>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001716:	6939      	ldr	r1, [r7, #16]
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fc7f 	bl	800201c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e00c      	b.n	8001744 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800172a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800172e:	f7ff fd6b 	bl	8001208 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001732:	6939      	ldr	r1, [r7, #16]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fc71 	bl	800201c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ETH_DMATxDescListInit+0x20>
 8001768:	2302      	movs	r3, #2
 800176a:	e051      	b.n	8001810 <HAL_ETH_DMATxDescListInit+0xc4>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e030      	b.n	80017ea <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	4413      	add	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001798:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d105      	bne.n	80017c2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d208      	bcs.n	80017de <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	015b      	lsls	r3, r3, #5
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4413      	add	r3, r2
 80017d6:	461a      	mov	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	e002      	b.n	80017e4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3ca      	bcc.n	8001788 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017fc:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_ETH_DMARxDescListInit+0x20>
 8001838:	2302      	movs	r3, #2
 800183a:	e055      	b.n	80018e8 <HAL_ETH_DMARxDescListInit+0xcc>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2202      	movs	r2, #2
 8001848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e034      	b.n	80018c2 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	015b      	lsls	r3, r3, #5
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4413      	add	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001868:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001870:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	461a      	mov	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	3b01      	subs	r3, #1
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d208      	bcs.n	80018b6 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	015b      	lsls	r3, r3, #5
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	4413      	add	r3, r2
 80018ae:	461a      	mov	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	e002      	b.n	80018bc <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d3c6      	bcc.n	8001858 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d4:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ETH_TransmitFrame+0x24>
 8001914:	2302      	movs	r3, #2
 8001916:	e0cc      	b.n	8001ab2 <HAL_ETH_TransmitFrame+0x1be>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800193e:	2301      	movs	r3, #1
 8001940:	e0b7      	b.n	8001ab2 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	da09      	bge.n	8001960 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2212      	movs	r2, #18
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0a8      	b.n	8001ab2 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001966:	4293      	cmp	r3, r2
 8001968:	d915      	bls.n	8001996 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4a54      	ldr	r2, [pc, #336]	; (8001ac0 <HAL_ETH_TransmitFrame+0x1cc>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <HAL_ETH_TransmitFrame+0x1cc>)
 800197a:	fba3 1302 	umull	r1, r3, r3, r2
 800197e:	0a9b      	lsrs	r3, r3, #10
 8001980:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e001      	b.n	800199a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d11c      	bne.n	80019da <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019ae:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ba:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019ca:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d8:	e04b      	b.n	8001a72 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e044      	b.n	8001a6a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ee:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d107      	bne.n	8001a06 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a04:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a0e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d116      	bne.n	8001a48 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a28:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a2e:	fb03 f202 	mul.w	r2, r3, r2
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a3a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a46:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a56:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	3301      	adds	r3, #1
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d3b6      	bcc.n	80019e0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2304      	movs	r3, #4
 8001a90:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	ac02b00b 	.word	0xac02b00b
 8001ac4:	fffffa0c 	.word	0xfffffa0c

08001ac8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ETH_GetReceivedFrame+0x1a>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e070      	b.n	8001bc4 <HAL_ETH_GetReceivedFrame+0xfc>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db5a      	blt.n	8001bb2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d030      	beq.n	8001b6c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d103      	bne.n	8001b24 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b38:	3b04      	subs	r3, #4
 8001b3a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	461a      	mov	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e02b      	b.n	8001bc4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d010      	beq.n	8001b9c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	461a      	mov	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
 8001b9a:	e00a      	b.n	8001bb2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b82      	cmp	r3, #130	; 0x82
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e050      	b.n	8001c98 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2282      	movs	r2, #130	; 0x82
 8001bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 031c 	and.w	r3, r3, #28
 8001c0c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8a1b      	ldrh	r3, [r3, #16]
 8001c12:	02db      	lsls	r3, r3, #11
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	019b      	lsls	r3, r3, #6
 8001c20:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f023 0302 	bic.w	r3, r3, #2
 8001c30:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c42:	f7ff fad5 	bl	80011f0 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c48:	e015      	b.n	8001c76 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c4a:	f7ff fad1 	bl	80011f0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d309      	bcc.n	8001c6e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e014      	b.n	8001c98 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e4      	bne.n	8001c4a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b42      	cmp	r3, #66	; 0x42
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e04e      	b.n	8001d64 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2242      	movs	r2, #66	; 0x42
 8001cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 031c 	and.w	r3, r3, #28
 8001cdc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8a1b      	ldrh	r3, [r3, #16]
 8001ce2:	02db      	lsls	r3, r3, #11
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001cec:	897b      	ldrh	r3, [r7, #10]
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1c:	f7ff fa68 	bl	80011f0 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d22:	e015      	b.n	8001d50 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d24:	f7ff fa64 	bl	80011f0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d309      	bcc.n	8001d48 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e00d      	b.n	8001d64 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e4      	bne.n	8001d24 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ETH_Start+0x16>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e01f      	b.n	8001dc2 <HAL_ETH_Start+0x56>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fb40 	bl	8002418 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fb77 	bl	800248c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fc06 	bl	80025b0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fbab 	bl	8002500 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fbd4 	bl	8002558 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ETH_Stop+0x16>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e01f      	b.n	8001e20 <HAL_ETH_Stop+0x56>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fb9b 	bl	800252c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fbc4 	bl	8002584 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fb62 	bl	80024c6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fbd4 	bl	80025b0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fb22 	bl	8002452 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_ETH_ConfigMAC+0x1c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e0e4      	b.n	800200e <HAL_ETH_ConfigMAC+0x1e6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80b1 	beq.w	8001fbe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <HAL_ETH_ConfigMAC+0x1f0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e74:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e7a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e80:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e86:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001e8c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e92:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e98:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e9e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001ea4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001eaa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001eb0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001eb6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f7ff f99a 	bl	8001208 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ee4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001eea:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ef0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ef6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001efc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f02:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f0e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f10:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7ff f974 	bl	8001208 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f30:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f3a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f58:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001f5e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f64:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f6a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f70:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff f93d 	bl	8001208 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff f92a 	bl	8001208 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	61da      	str	r2, [r3, #28]
 8001fbc:	e01e      	b.n	8001ffc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001fcc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7ff f90a 	bl	8001208 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	ff20810f 	.word	0xff20810f

0800201c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0b0      	sub	sp, #192	; 0xc0
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002038:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002040:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800204a:	2300      	movs	r3, #0
 800204c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002066:	663b      	str	r3, [r7, #96]	; 0x60
 8002068:	e001      	b.n	800206e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800206e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002078:	2300      	movs	r3, #0
 800207a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002088:	2340      	movs	r3, #64	; 0x40
 800208a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80020f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f4:	4ba9      	ldr	r3, [pc, #676]	; (800239c <ETH_MACDMAConfig+0x380>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80020fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002100:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002104:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002108:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800210e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002112:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002116:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800211c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800211e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002120:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002124:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002128:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800212a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800212c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800212e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002130:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002132:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002144:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff f859 	bl	8001208 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002160:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002164:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002166:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002168:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800216a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800216e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002174:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002176:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800217a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800217c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002180:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002184:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800218c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800218e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff f834 	bl	8001208 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021b2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021bc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80021c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021cc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021d0:	4013      	ands	r3, r2
 80021d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021da:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80021dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021e0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80021e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80021e6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80021e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021ec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80021f2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80021f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80021f8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002218:	2001      	movs	r0, #1
 800221a:	f7fe fff5 	bl	8001208 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002226:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002228:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800222c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002242:	2001      	movs	r0, #1
 8002244:	f7fe ffe0 	bl	8001208 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002250:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002260:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002264:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002276:	2304      	movs	r3, #4
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800227a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800228c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002296:	2300      	movs	r3, #0
 8002298:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800229a:	2300      	movs	r3, #0
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80022ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b0:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <ETH_MACDMAConfig+0x384>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022b8:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80022ba:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022bc:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80022be:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80022c0:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80022c2:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80022c4:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80022c6:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80022c8:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80022ca:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80022cc:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80022ce:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80022d0:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80022d4:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80022d8:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ec:	461a      	mov	r2, r3
 80022ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022f2:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002302:	2001      	movs	r0, #1
 8002304:	f7fe ff80 	bl	8001208 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002310:	461a      	mov	r2, r3
 8002312:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002316:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800231c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002320:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002324:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002328:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800232e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002332:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800233c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002340:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe ff59 	bl	8001208 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235e:	461a      	mov	r2, r3
 8002360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002364:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10b      	bne.n	8002386 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	69d9      	ldr	r1, [r3, #28]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <ETH_MACDMAConfig+0x388>)
 800237e:	430b      	orrs	r3, r1
 8002380:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002384:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	461a      	mov	r2, r3
 800238c:	2100      	movs	r1, #0
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f80a 	bl	80023a8 <ETH_MACAddressConfig>
}
 8002394:	bf00      	nop
 8002396:	37c0      	adds	r7, #192	; 0xc0
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	ff20810f 	.word	0xff20810f
 80023a0:	f8de3f23 	.word	0xf8de3f23
 80023a4:	00010040 	.word	0x00010040

080023a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3305      	adds	r3, #5
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	3204      	adds	r2, #4
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <ETH_MACAddressConfig+0x68>)
 80023ca:	4413      	add	r3, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3303      	adds	r3, #3
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	061a      	lsls	r2, r3, #24
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3302      	adds	r3, #2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3301      	adds	r3, #1
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	4313      	orrs	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <ETH_MACAddressConfig+0x6c>)
 80023fa:	4413      	add	r3, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	6013      	str	r3, [r2, #0]
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40028040 	.word	0x40028040
 8002414:	40028044 	.word	0x40028044

08002418 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0208 	orr.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800243c:	2001      	movs	r0, #1
 800243e:	f7fe fee3 	bl	8001208 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0208 	bic.w	r2, r2, #8
 800246c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002476:	2001      	movs	r0, #1
 8002478:	f7fe fec6 	bl	8001208 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0204 	orr.w	r2, r2, #4
 80024a6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7fe fea9 	bl	8001208 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	601a      	str	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0204 	bic.w	r2, r2, #4
 80024e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7fe fe8c 	bl	8001208 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800251a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800251e:	6193      	str	r3, [r2, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800254a:	6193      	str	r3, [r2, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002576:	6193      	str	r3, [r2, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	f023 0302 	bic.w	r3, r3, #2
 800259e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025a2:	6193      	str	r3, [r2, #24]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025d2:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7fe fe11 	bl	8001208 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025f0:	6193      	str	r3, [r2, #24]
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e175      	b.n	8002908 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8164 	bne.w	8002902 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x56>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80be 	beq.w	8002902 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_GPIO_Init+0x324>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a65      	ldr	r2, [pc, #404]	; (8002920 <HAL_GPIO_Init+0x324>)
 800278c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b63      	ldr	r3, [pc, #396]	; (8002920 <HAL_GPIO_Init+0x324>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800279e:	4a61      	ldr	r2, [pc, #388]	; (8002924 <HAL_GPIO_Init+0x328>)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_GPIO_Init+0x32c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d037      	beq.n	800283a <HAL_GPIO_Init+0x23e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a57      	ldr	r2, [pc, #348]	; (800292c <HAL_GPIO_Init+0x330>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d031      	beq.n	8002836 <HAL_GPIO_Init+0x23a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a56      	ldr	r2, [pc, #344]	; (8002930 <HAL_GPIO_Init+0x334>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d02b      	beq.n	8002832 <HAL_GPIO_Init+0x236>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a55      	ldr	r2, [pc, #340]	; (8002934 <HAL_GPIO_Init+0x338>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d025      	beq.n	800282e <HAL_GPIO_Init+0x232>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_GPIO_Init+0x33c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01f      	beq.n	800282a <HAL_GPIO_Init+0x22e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a53      	ldr	r2, [pc, #332]	; (800293c <HAL_GPIO_Init+0x340>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d019      	beq.n	8002826 <HAL_GPIO_Init+0x22a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_GPIO_Init+0x344>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0x226>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a51      	ldr	r2, [pc, #324]	; (8002944 <HAL_GPIO_Init+0x348>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00d      	beq.n	800281e <HAL_GPIO_Init+0x222>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a50      	ldr	r2, [pc, #320]	; (8002948 <HAL_GPIO_Init+0x34c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d007      	beq.n	800281a <HAL_GPIO_Init+0x21e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4f      	ldr	r2, [pc, #316]	; (800294c <HAL_GPIO_Init+0x350>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d101      	bne.n	8002816 <HAL_GPIO_Init+0x21a>
 8002812:	2309      	movs	r3, #9
 8002814:	e012      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002816:	230a      	movs	r3, #10
 8002818:	e010      	b.n	800283c <HAL_GPIO_Init+0x240>
 800281a:	2308      	movs	r3, #8
 800281c:	e00e      	b.n	800283c <HAL_GPIO_Init+0x240>
 800281e:	2307      	movs	r3, #7
 8002820:	e00c      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002822:	2306      	movs	r3, #6
 8002824:	e00a      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002826:	2305      	movs	r3, #5
 8002828:	e008      	b.n	800283c <HAL_GPIO_Init+0x240>
 800282a:	2304      	movs	r3, #4
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x240>
 800282e:	2303      	movs	r3, #3
 8002830:	e004      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002832:	2302      	movs	r3, #2
 8002834:	e002      	b.n	800283c <HAL_GPIO_Init+0x240>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_GPIO_Init+0x240>
 800283a:	2300      	movs	r3, #0
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f002 0203 	and.w	r2, r2, #3
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	4093      	lsls	r3, r2
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800284c:	4935      	ldr	r1, [pc, #212]	; (8002924 <HAL_GPIO_Init+0x328>)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_GPIO_Init+0x354>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287e:	4a34      	ldr	r2, [pc, #208]	; (8002950 <HAL_GPIO_Init+0x354>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_GPIO_Init+0x354>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a8:	4a29      	ldr	r2, [pc, #164]	; (8002950 <HAL_GPIO_Init+0x354>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_GPIO_Init+0x354>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_GPIO_Init+0x354>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_GPIO_Init+0x354>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_GPIO_Init+0x354>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3301      	adds	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2b0f      	cmp	r3, #15
 800290c:	f67f ae86 	bls.w	800261c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	40013800 	.word	0x40013800
 8002928:	40020000 	.word	0x40020000
 800292c:	40020400 	.word	0x40020400
 8002930:	40020800 	.word	0x40020800
 8002934:	40020c00 	.word	0x40020c00
 8002938:	40021000 	.word	0x40021000
 800293c:	40021400 	.word	0x40021400
 8002940:	40021800 	.word	0x40021800
 8002944:	40021c00 	.word	0x40021c00
 8002948:	40022000 	.word	0x40022000
 800294c:	40022400 	.word	0x40022400
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40007000 	.word	0x40007000

080029a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029ca:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d6:	f7fe fc0b 	bl	80011f0 <HAL_GetTick>
 80029da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029dc:	e009      	b.n	80029f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029de:	f7fe fc07 	bl	80011f0 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ec:	d901      	bls.n	80029f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e022      	b.n	8002a38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fe:	d1ee      	bne.n	80029de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a0c:	f7fe fbf0 	bl	80011f0 <HAL_GetTick>
 8002a10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a12:	e009      	b.n	8002a28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a14:	f7fe fbec 	bl	80011f0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a22:	d901      	bls.n	8002a28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e007      	b.n	8002a38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a34:	d1ee      	bne.n	8002a14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000

08002a48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e29b      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8087 	beq.w	8002b7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a6c:	4b96      	ldr	r3, [pc, #600]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d00c      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a78:	4b93      	ldr	r3, [pc, #588]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d112      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62>
 8002a84:	4b90      	ldr	r3, [pc, #576]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a90:	d10b      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a92:	4b8d      	ldr	r3, [pc, #564]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d06c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x130>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d168      	bne.n	8002b78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e275      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x7a>
 8002ab4:	4b84      	ldr	r3, [pc, #528]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a83      	ldr	r2, [pc, #524]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	e02e      	b.n	8002b20 <HAL_RCC_OscConfig+0xd8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x9c>
 8002aca:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7e      	ldr	r2, [pc, #504]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b7c      	ldr	r3, [pc, #496]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7b      	ldr	r2, [pc, #492]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e01d      	b.n	8002b20 <HAL_RCC_OscConfig+0xd8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0xc0>
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a75      	ldr	r2, [pc, #468]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a72      	ldr	r2, [pc, #456]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0xd8>
 8002b08:	4b6f      	ldr	r3, [pc, #444]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6e      	ldr	r2, [pc, #440]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b6c      	ldr	r3, [pc, #432]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6b      	ldr	r2, [pc, #428]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe fb62 	bl	80011f0 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe fb5e 	bl	80011f0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e229      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe8>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fb4e 	bl	80011f0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fb4a 	bl	80011f0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e215      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x110>
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d069      	beq.n	8002c5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b86:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b92:	4b4d      	ldr	r3, [pc, #308]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d11c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x190>
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d116      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x17a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e1e9      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc2:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	493d      	ldr	r1, [pc, #244]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd6:	e040      	b.n	8002c5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be0:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a38      	ldr	r2, [pc, #224]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fb00 	bl	80011f0 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7fe fafc 	bl	80011f0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1c7      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4929      	ldr	r1, [pc, #164]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
 8002c26:	e018      	b.n	8002c5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fadc 	bl	80011f0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fad8 	bl	80011f0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1a3      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d038      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d019      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fab9 	bl	80011f0 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c82:	f7fe fab5 	bl	80011f0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e180      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x23a>
 8002ca0:	e01a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe fa9f 	bl	80011f0 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fa9b 	bl	80011f0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d903      	bls.n	8002ccc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e166      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
 8002cc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	4b92      	ldr	r3, [pc, #584]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80a4 	beq.w	8002e2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4b8c      	ldr	r3, [pc, #560]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a88      	ldr	r2, [pc, #544]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b86      	ldr	r3, [pc, #536]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0e:	4b83      	ldr	r3, [pc, #524]	; (8002f1c <HAL_RCC_OscConfig+0x4d4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d1a:	4b80      	ldr	r3, [pc, #512]	; (8002f1c <HAL_RCC_OscConfig+0x4d4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7f      	ldr	r2, [pc, #508]	; (8002f1c <HAL_RCC_OscConfig+0x4d4>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7fe fa63 	bl	80011f0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7fe fa5f 	bl	80011f0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e12a      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d40:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x4d4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x31a>
 8002d54:	4b70      	ldr	r3, [pc, #448]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	4a6f      	ldr	r2, [pc, #444]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d60:	e02d      	b.n	8002dbe <HAL_RCC_OscConfig+0x376>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x33c>
 8002d6a:	4b6b      	ldr	r3, [pc, #428]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a6a      	ldr	r2, [pc, #424]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
 8002d76:	4b68      	ldr	r3, [pc, #416]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a67      	ldr	r2, [pc, #412]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70
 8002d82:	e01c      	b.n	8002dbe <HAL_RCC_OscConfig+0x376>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCC_OscConfig+0x35e>
 8002d8c:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4a61      	ldr	r2, [pc, #388]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6713      	str	r3, [r2, #112]	; 0x70
 8002d98:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a5e      	ldr	r2, [pc, #376]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_OscConfig+0x376>
 8002da6:	4b5c      	ldr	r3, [pc, #368]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a5b      	ldr	r2, [pc, #364]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70
 8002db2:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a58      	ldr	r2, [pc, #352]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d015      	beq.n	8002df2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fa13 	bl	80011f0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fa0f 	bl	80011f0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0d8      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ee      	beq.n	8002dce <HAL_RCC_OscConfig+0x386>
 8002df0:	e014      	b.n	8002e1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7fe f9fd 	bl	80011f0 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fe f9f9 	bl	80011f0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0c2      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ee      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d105      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a3c      	ldr	r2, [pc, #240]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80ae 	beq.w	8002f94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e38:	4b37      	ldr	r3, [pc, #220]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d06d      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d14b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a31      	ldr	r2, [pc, #196]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f9ca 	bl	80011f0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe f9c6 	bl	80011f0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e091      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	071b      	lsls	r3, r3, #28
 8002eaa:	491b      	ldr	r1, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f998 	bl	80011f0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe f994 	bl	80011f0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e05f      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x47c>
 8002ee2:	e057      	b.n	8002f94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f97e 	bl	80011f0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe f97a 	bl	80011f0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e045      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x4b0>
 8002f16:	e03d      	b.n	8002f94 <HAL_RCC_OscConfig+0x54c>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_RCC_OscConfig+0x558>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d030      	beq.n	8002f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d129      	bne.n	8002f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d122      	bne.n	8002f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f50:	4013      	ands	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d119      	bne.n	8002f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d10f      	bne.n	8002f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800

08002fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0d0      	b.n	800315e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d910      	bls.n	8002fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 020f 	bic.w	r2, r3, #15
 8002fd2:	4965      	ldr	r1, [pc, #404]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003004:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800300e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003026:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	494d      	ldr	r1, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d040      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d115      	bne.n	8003086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e07f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e073      	b.n	800315e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06b      	b.n	800315e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4936      	ldr	r1, [pc, #216]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003098:	f7fe f8aa 	bl	80011f0 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7fe f8a6 	bl	80011f0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e053      	b.n	800315e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 020c 	and.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1eb      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d210      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 020f 	bic.w	r2, r3, #15
 80030de:	4922      	ldr	r1, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e032      	b.n	800315e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003136:	f000 f821 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x1cc>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1d0>)
 8003150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1d4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe f806 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00
 800316c:	40023800 	.word	0x40023800
 8003170:	08011d04 	.word	0x08011d04
 8003174:	20000000 	.word	0x20000000
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b094      	sub	sp, #80	; 0x50
 8003182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	647b      	str	r3, [r7, #68]	; 0x44
 8003188:	2300      	movs	r3, #0
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	2300      	movs	r3, #0
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003194:	4b79      	ldr	r3, [pc, #484]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d00d      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x40>
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	f200 80e1 	bhi.w	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x34>
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ae:	e0db      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b73      	ldr	r3, [pc, #460]	; (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031b4:	e0db      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_GetSysClockFreq+0x208>)
 80031b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ba:	e0d8      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031bc:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031c6:	4b6d      	ldr	r3, [pc, #436]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d063      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d2:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	2200      	movs	r2, #0
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
 80031dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
 80031e6:	2300      	movs	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031ee:	4622      	mov	r2, r4
 80031f0:	462b      	mov	r3, r5
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	0159      	lsls	r1, r3, #5
 80031fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003200:	0150      	lsls	r0, r2, #5
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4621      	mov	r1, r4
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	6139      	str	r1, [r7, #16]
 800320c:	4629      	mov	r1, r5
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003220:	4659      	mov	r1, fp
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322a:	4651      	mov	r1, sl
 800322c:	018a      	lsls	r2, r1, #6
 800322e:	4651      	mov	r1, sl
 8003230:	ebb2 0801 	subs.w	r8, r2, r1
 8003234:	4659      	mov	r1, fp
 8003236:	eb63 0901 	sbc.w	r9, r3, r1
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800324a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800324e:	4690      	mov	r8, r2
 8003250:	4699      	mov	r9, r3
 8003252:	4623      	mov	r3, r4
 8003254:	eb18 0303 	adds.w	r3, r8, r3
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	462b      	mov	r3, r5
 800325c:	eb49 0303 	adc.w	r3, r9, r3
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800326e:	4629      	mov	r1, r5
 8003270:	024b      	lsls	r3, r1, #9
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003278:	4621      	mov	r1, r4
 800327a:	024a      	lsls	r2, r1, #9
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
 8003286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800328c:	f7fd f830 	bl	80002f0 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003298:	e058      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	2200      	movs	r2, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	4611      	mov	r1, r2
 80032a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	f04f 0000 	mov.w	r0, #0
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	0159      	lsls	r1, r3, #5
 80032c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c6:	0150      	lsls	r0, r2, #5
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4641      	mov	r1, r8
 80032ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80032d2:	4649      	mov	r1, r9
 80032d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032ec:	ebb2 040a 	subs.w	r4, r2, sl
 80032f0:	eb63 050b 	sbc.w	r5, r3, fp
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	464b      	mov	r3, r9
 8003310:	eb45 0303 	adc.w	r3, r5, r3
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003322:	4629      	mov	r1, r5
 8003324:	028b      	lsls	r3, r1, #10
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332c:	4621      	mov	r1, r4
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	61fa      	str	r2, [r7, #28]
 800333c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003340:	f7fc ffd6 	bl	80002f0 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800335c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003370:	4618      	mov	r0, r3
 8003372:	3750      	adds	r7, #80	; 0x50
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000000 	.word	0x20000000

080033a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 1;
 80033a6:	4b8d      	ldr	r3, [pc, #564]	; (80035dc <MX_LWIP_Init+0x23c>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 1;
 80033ac:	4b8b      	ldr	r3, [pc, #556]	; (80035dc <MX_LWIP_Init+0x23c>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80033b2:	4b8a      	ldr	r3, [pc, #552]	; (80035dc <MX_LWIP_Init+0x23c>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80033b8:	4b88      	ldr	r3, [pc, #544]	; (80035dc <MX_LWIP_Init+0x23c>)
 80033ba:	226f      	movs	r2, #111	; 0x6f
 80033bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <MX_LWIP_Init+0x240>)
 80033c0:	22ff      	movs	r2, #255	; 0xff
 80033c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80033c4:	4b86      	ldr	r3, [pc, #536]	; (80035e0 <MX_LWIP_Init+0x240>)
 80033c6:	22ff      	movs	r2, #255	; 0xff
 80033c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80033ca:	4b85      	ldr	r3, [pc, #532]	; (80035e0 <MX_LWIP_Init+0x240>)
 80033cc:	22ff      	movs	r2, #255	; 0xff
 80033ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80033d0:	4b83      	ldr	r3, [pc, #524]	; (80035e0 <MX_LWIP_Init+0x240>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80033d6:	4b83      	ldr	r3, [pc, #524]	; (80035e4 <MX_LWIP_Init+0x244>)
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80033dc:	4b81      	ldr	r3, [pc, #516]	; (80035e4 <MX_LWIP_Init+0x244>)
 80033de:	2200      	movs	r2, #0
 80033e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80033e2:	4b80      	ldr	r3, [pc, #512]	; (80035e4 <MX_LWIP_Init+0x244>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80033e8:	4b7e      	ldr	r3, [pc, #504]	; (80035e4 <MX_LWIP_Init+0x244>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80033ee:	f000 fcd5 	bl	8003d9c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80033f2:	4b7a      	ldr	r3, [pc, #488]	; (80035dc <MX_LWIP_Init+0x23c>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	061a      	lsls	r2, r3, #24
 80033f8:	4b78      	ldr	r3, [pc, #480]	; (80035dc <MX_LWIP_Init+0x23c>)
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	431a      	orrs	r2, r3
 8003400:	4b76      	ldr	r3, [pc, #472]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003402:	789b      	ldrb	r3, [r3, #2]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	4313      	orrs	r3, r2
 8003408:	4a74      	ldr	r2, [pc, #464]	; (80035dc <MX_LWIP_Init+0x23c>)
 800340a:	78d2      	ldrb	r2, [r2, #3]
 800340c:	4313      	orrs	r3, r2
 800340e:	061a      	lsls	r2, r3, #24
 8003410:	4b72      	ldr	r3, [pc, #456]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	0619      	lsls	r1, r3, #24
 8003416:	4b71      	ldr	r3, [pc, #452]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	4319      	orrs	r1, r3
 800341e:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003420:	789b      	ldrb	r3, [r3, #2]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	430b      	orrs	r3, r1
 8003426:	496d      	ldr	r1, [pc, #436]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003428:	78c9      	ldrb	r1, [r1, #3]
 800342a:	430b      	orrs	r3, r1
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003432:	431a      	orrs	r2, r3
 8003434:	4b69      	ldr	r3, [pc, #420]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	0619      	lsls	r1, r3, #24
 800343a:	4b68      	ldr	r3, [pc, #416]	; (80035dc <MX_LWIP_Init+0x23c>)
 800343c:	785b      	ldrb	r3, [r3, #1]
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	4319      	orrs	r1, r3
 8003442:	4b66      	ldr	r3, [pc, #408]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003444:	789b      	ldrb	r3, [r3, #2]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	430b      	orrs	r3, r1
 800344a:	4964      	ldr	r1, [pc, #400]	; (80035dc <MX_LWIP_Init+0x23c>)
 800344c:	78c9      	ldrb	r1, [r1, #3]
 800344e:	430b      	orrs	r3, r1
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003456:	431a      	orrs	r2, r3
 8003458:	4b60      	ldr	r3, [pc, #384]	; (80035dc <MX_LWIP_Init+0x23c>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	0619      	lsls	r1, r3, #24
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	4319      	orrs	r1, r3
 8003466:	4b5d      	ldr	r3, [pc, #372]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003468:	789b      	ldrb	r3, [r3, #2]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	430b      	orrs	r3, r1
 800346e:	495b      	ldr	r1, [pc, #364]	; (80035dc <MX_LWIP_Init+0x23c>)
 8003470:	78c9      	ldrb	r1, [r1, #3]
 8003472:	430b      	orrs	r3, r1
 8003474:	0e1b      	lsrs	r3, r3, #24
 8003476:	4313      	orrs	r3, r2
 8003478:	4a5b      	ldr	r2, [pc, #364]	; (80035e8 <MX_LWIP_Init+0x248>)
 800347a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800347c:	4b58      	ldr	r3, [pc, #352]	; (80035e0 <MX_LWIP_Init+0x240>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	061a      	lsls	r2, r3, #24
 8003482:	4b57      	ldr	r3, [pc, #348]	; (80035e0 <MX_LWIP_Init+0x240>)
 8003484:	785b      	ldrb	r3, [r3, #1]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	4b55      	ldr	r3, [pc, #340]	; (80035e0 <MX_LWIP_Init+0x240>)
 800348c:	789b      	ldrb	r3, [r3, #2]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	4313      	orrs	r3, r2
 8003492:	4a53      	ldr	r2, [pc, #332]	; (80035e0 <MX_LWIP_Init+0x240>)
 8003494:	78d2      	ldrb	r2, [r2, #3]
 8003496:	4313      	orrs	r3, r2
 8003498:	061a      	lsls	r2, r3, #24
 800349a:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <MX_LWIP_Init+0x240>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	0619      	lsls	r1, r3, #24
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	4319      	orrs	r1, r3
 80034a8:	4b4d      	ldr	r3, [pc, #308]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034aa:	789b      	ldrb	r3, [r3, #2]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	430b      	orrs	r3, r1
 80034b0:	494b      	ldr	r1, [pc, #300]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034b2:	78c9      	ldrb	r1, [r1, #3]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034bc:	431a      	orrs	r2, r3
 80034be:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	0619      	lsls	r1, r3, #24
 80034c4:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	4319      	orrs	r1, r3
 80034cc:	4b44      	ldr	r3, [pc, #272]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034ce:	789b      	ldrb	r3, [r3, #2]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	430b      	orrs	r3, r1
 80034d4:	4942      	ldr	r1, [pc, #264]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034d6:	78c9      	ldrb	r1, [r1, #3]
 80034d8:	430b      	orrs	r3, r1
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034e0:	431a      	orrs	r2, r3
 80034e2:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	0619      	lsls	r1, r3, #24
 80034e8:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	4319      	orrs	r1, r3
 80034f0:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034f2:	789b      	ldrb	r3, [r3, #2]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	430b      	orrs	r3, r1
 80034f8:	4939      	ldr	r1, [pc, #228]	; (80035e0 <MX_LWIP_Init+0x240>)
 80034fa:	78c9      	ldrb	r1, [r1, #3]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	0e1b      	lsrs	r3, r3, #24
 8003500:	4313      	orrs	r3, r2
 8003502:	4a3a      	ldr	r2, [pc, #232]	; (80035ec <MX_LWIP_Init+0x24c>)
 8003504:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	061a      	lsls	r2, r3, #24
 800350c:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <MX_LWIP_Init+0x244>)
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	041b      	lsls	r3, r3, #16
 8003512:	431a      	orrs	r2, r3
 8003514:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003516:	789b      	ldrb	r3, [r3, #2]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	4313      	orrs	r3, r2
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <MX_LWIP_Init+0x244>)
 800351e:	78d2      	ldrb	r2, [r2, #3]
 8003520:	4313      	orrs	r3, r2
 8003522:	061a      	lsls	r2, r3, #24
 8003524:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	0619      	lsls	r1, r3, #24
 800352a:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <MX_LWIP_Init+0x244>)
 800352c:	785b      	ldrb	r3, [r3, #1]
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	4319      	orrs	r1, r3
 8003532:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003534:	789b      	ldrb	r3, [r3, #2]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	430b      	orrs	r3, r1
 800353a:	492a      	ldr	r1, [pc, #168]	; (80035e4 <MX_LWIP_Init+0x244>)
 800353c:	78c9      	ldrb	r1, [r1, #3]
 800353e:	430b      	orrs	r3, r1
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003546:	431a      	orrs	r2, r3
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <MX_LWIP_Init+0x244>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	0619      	lsls	r1, r3, #24
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	4319      	orrs	r1, r3
 8003556:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	430b      	orrs	r3, r1
 800355e:	4921      	ldr	r1, [pc, #132]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003560:	78c9      	ldrb	r1, [r1, #3]
 8003562:	430b      	orrs	r3, r1
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800356a:	431a      	orrs	r2, r3
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <MX_LWIP_Init+0x244>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	0619      	lsls	r1, r3, #24
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	4319      	orrs	r1, r3
 800357a:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <MX_LWIP_Init+0x244>)
 800357c:	789b      	ldrb	r3, [r3, #2]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	430b      	orrs	r3, r1
 8003582:	4918      	ldr	r1, [pc, #96]	; (80035e4 <MX_LWIP_Init+0x244>)
 8003584:	78c9      	ldrb	r1, [r1, #3]
 8003586:	430b      	orrs	r3, r1
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	4313      	orrs	r3, r2
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <MX_LWIP_Init+0x250>)
 800358e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <MX_LWIP_Init+0x254>)
 8003592:	9302      	str	r3, [sp, #8]
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <MX_LWIP_Init+0x258>)
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	2300      	movs	r3, #0
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <MX_LWIP_Init+0x250>)
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <MX_LWIP_Init+0x24c>)
 80035a0:	4911      	ldr	r1, [pc, #68]	; (80035e8 <MX_LWIP_Init+0x248>)
 80035a2:	4816      	ldr	r0, [pc, #88]	; (80035fc <MX_LWIP_Init+0x25c>)
 80035a4:	f001 f8a0 	bl	80046e8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80035a8:	4814      	ldr	r0, [pc, #80]	; (80035fc <MX_LWIP_Init+0x25c>)
 80035aa:	f001 fa4f 	bl	8004a4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <MX_LWIP_Init+0x25c>)
 80035b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80035c0:	480e      	ldr	r0, [pc, #56]	; (80035fc <MX_LWIP_Init+0x25c>)
 80035c2:	f001 fa53 	bl	8004a6c <netif_set_up>
 80035c6:	e002      	b.n	80035ce <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80035c8:	480c      	ldr	r0, [pc, #48]	; (80035fc <MX_LWIP_Init+0x25c>)
 80035ca:	f001 fabb 	bl	8004b44 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80035ce:	490c      	ldr	r1, [pc, #48]	; (8003600 <MX_LWIP_Init+0x260>)
 80035d0:	480a      	ldr	r0, [pc, #40]	; (80035fc <MX_LWIP_Init+0x25c>)
 80035d2:	f001 fae9 	bl	8004ba8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000190 	.word	0x20000190
 80035e0:	20000194 	.word	0x20000194
 80035e4:	20000198 	.word	0x20000198
 80035e8:	20000184 	.word	0x20000184
 80035ec:	20000188 	.word	0x20000188
 80035f0:	2000018c 	.word	0x2000018c
 80035f4:	0800dc49 	.word	0x0800dc49
 80035f8:	08003bc9 	.word	0x08003bc9
 80035fc:	20000150 	.word	0x20000150
 8003600:	08003c35 	.word	0x08003c35

08003604 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003608:	4803      	ldr	r0, [pc, #12]	; (8003618 <MX_LWIP_Process+0x14>)
 800360a:	f000 fabd 	bl	8003b88 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800360e:	f007 fbdf 	bl	800add0 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000150 	.word	0x20000150

0800361c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08e      	sub	sp, #56	; 0x38
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a4e      	ldr	r2, [pc, #312]	; (8003774 <HAL_ETH_MspInit+0x158>)
 800363a:	4293      	cmp	r3, r2
 800363c:	f040 8096 	bne.w	800376c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003640:	4b4d      	ldr	r3, [pc, #308]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	4a4c      	ldr	r2, [pc, #304]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 8003646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364a:	6313      	str	r3, [r2, #48]	; 0x30
 800364c:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	4a46      	ldr	r2, [pc, #280]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 800365e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003662:	6313      	str	r3, [r2, #48]	; 0x30
 8003664:	4b44      	ldr	r3, [pc, #272]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4b41      	ldr	r3, [pc, #260]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	4a40      	ldr	r2, [pc, #256]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 8003676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800367a:	6313      	str	r3, [r2, #48]	; 0x30
 800367c:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003688:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	6313      	str	r3, [r2, #48]	; 0x30
 8003694:	4b38      	ldr	r3, [pc, #224]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a0:	4b35      	ldr	r3, [pc, #212]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	4a34      	ldr	r2, [pc, #208]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6313      	str	r3, [r2, #48]	; 0x30
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b8:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4a2e      	ldr	r2, [pc, #184]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	6313      	str	r3, [r2, #48]	; 0x30
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4a28      	ldr	r2, [pc, #160]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036da:	6313      	str	r3, [r2, #48]	; 0x30
 80036dc:	4b26      	ldr	r3, [pc, #152]	; (8003778 <HAL_ETH_MspInit+0x15c>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80036e8:	2332      	movs	r3, #50	; 0x32
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f4:	2303      	movs	r3, #3
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036f8:	230b      	movs	r3, #11
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003700:	4619      	mov	r1, r3
 8003702:	481e      	ldr	r0, [pc, #120]	; (800377c <HAL_ETH_MspInit+0x160>)
 8003704:	f7fe ff7a 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003708:	2386      	movs	r3, #134	; 0x86
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370c:	2302      	movs	r3, #2
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003714:	2303      	movs	r3, #3
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003718:	230b      	movs	r3, #11
 800371a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003720:	4619      	mov	r1, r3
 8003722:	4817      	ldr	r0, [pc, #92]	; (8003780 <HAL_ETH_MspInit+0x164>)
 8003724:	f7fe ff6a 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003736:	2303      	movs	r3, #3
 8003738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800373a:	230b      	movs	r3, #11
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800373e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003742:	4619      	mov	r1, r3
 8003744:	480f      	ldr	r0, [pc, #60]	; (8003784 <HAL_ETH_MspInit+0x168>)
 8003746:	f7fe ff59 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800374a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800375c:	230b      	movs	r3, #11
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003764:	4619      	mov	r1, r3
 8003766:	4808      	ldr	r0, [pc, #32]	; (8003788 <HAL_ETH_MspInit+0x16c>)
 8003768:	f7fe ff48 	bl	80025fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800376c:	bf00      	nop
 800376e:	3738      	adds	r7, #56	; 0x38
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40028000 	.word	0x40028000
 8003778:	40023800 	.word	0x40023800
 800377c:	40020800 	.word	0x40020800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	40021800 	.word	0x40021800

0800378c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003798:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <low_level_init+0x144>)
 800379a:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <low_level_init+0x148>)
 800379c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800379e:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <low_level_init+0x144>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80037a4:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <low_level_init+0x144>)
 80037a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037aa:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80037ac:	4b48      	ldr	r3, [pc, #288]	; (80038d0 <low_level_init+0x144>)
 80037ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <low_level_init+0x144>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80037ba:	2300      	movs	r3, #0
 80037bc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80037c2:	23e1      	movs	r3, #225	; 0xe1
 80037c4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80037c6:	2300      	movs	r3, #0
 80037c8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80037ca:	2300      	movs	r3, #0
 80037cc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80037ce:	2300      	movs	r3, #0
 80037d0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80037d2:	4a3f      	ldr	r2, [pc, #252]	; (80038d0 <low_level_init+0x144>)
 80037d4:	f107 0308 	add.w	r3, r7, #8
 80037d8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80037da:	4b3d      	ldr	r3, [pc, #244]	; (80038d0 <low_level_init+0x144>)
 80037dc:	2200      	movs	r2, #0
 80037de:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80037e0:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <low_level_init+0x144>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80037e6:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <low_level_init+0x144>)
 80037e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037ec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80037ee:	4838      	ldr	r0, [pc, #224]	; (80038d0 <low_level_init+0x144>)
 80037f0:	f7fd fe14 	bl	800141c <HAL_ETH_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d108      	bne.n	8003810 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	b2da      	uxtb	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003810:	2304      	movs	r3, #4
 8003812:	4a31      	ldr	r2, [pc, #196]	; (80038d8 <low_level_init+0x14c>)
 8003814:	4931      	ldr	r1, [pc, #196]	; (80038dc <low_level_init+0x150>)
 8003816:	482e      	ldr	r0, [pc, #184]	; (80038d0 <low_level_init+0x144>)
 8003818:	f7fd ff98 	bl	800174c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800381c:	2304      	movs	r3, #4
 800381e:	4a30      	ldr	r2, [pc, #192]	; (80038e0 <low_level_init+0x154>)
 8003820:	4930      	ldr	r1, [pc, #192]	; (80038e4 <low_level_init+0x158>)
 8003822:	482b      	ldr	r0, [pc, #172]	; (80038d0 <low_level_init+0x144>)
 8003824:	f7fd fffa 	bl	800181c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2206      	movs	r2, #6
 800382c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <low_level_init+0x144>)
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <low_level_init+0x144>)
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	785a      	ldrb	r2, [r3, #1]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <low_level_init+0x144>)
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	789a      	ldrb	r2, [r3, #2]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <low_level_init+0x144>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	78da      	ldrb	r2, [r3, #3]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <low_level_init+0x144>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	791a      	ldrb	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <low_level_init+0x144>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	795a      	ldrb	r2, [r3, #5]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800387e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003886:	f043 030a 	orr.w	r3, r3, #10
 800388a:	b2da      	uxtb	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003892:	480f      	ldr	r0, [pc, #60]	; (80038d0 <low_level_init+0x144>)
 8003894:	f7fe fa6a 	bl	8001d6c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	461a      	mov	r2, r3
 800389e:	211d      	movs	r1, #29
 80038a0:	480b      	ldr	r0, [pc, #44]	; (80038d0 <low_level_init+0x144>)
 80038a2:	f7fe f995 	bl	8001bd0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f043 030b 	orr.w	r3, r3, #11
 80038ac:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	461a      	mov	r2, r3
 80038b2:	211d      	movs	r1, #29
 80038b4:	4806      	ldr	r0, [pc, #24]	; (80038d0 <low_level_init+0x144>)
 80038b6:	f7fe f9f3 	bl	8001ca0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80038ba:	f107 0310 	add.w	r3, r7, #16
 80038be:	461a      	mov	r2, r3
 80038c0:	211d      	movs	r1, #29
 80038c2:	4803      	ldr	r0, [pc, #12]	; (80038d0 <low_level_init+0x144>)
 80038c4:	f7fe f984 	bl	8001bd0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80038c8:	bf00      	nop
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	2000323c 	.word	0x2000323c
 80038d4:	40028000 	.word	0x40028000
 80038d8:	20001a6c 	.word	0x20001a6c
 80038dc:	2000021c 	.word	0x2000021c
 80038e0:	2000029c 	.word	0x2000029c
 80038e4:	2000019c 	.word	0x2000019c

080038e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80038f2:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <low_level_output+0x138>)
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800390a:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <low_level_output+0x138>)
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	e05a      	b.n	80039d0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	da03      	bge.n	800392a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003922:	23f8      	movs	r3, #248	; 0xf8
 8003924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003928:	e05c      	b.n	80039e4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	895b      	ldrh	r3, [r3, #10]
 800392e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003934:	e02f      	b.n	8003996 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	18d0      	adds	r0, r2, r3
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	18d1      	adds	r1, r2, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	461a      	mov	r2, r3
 800394e:	f00a fa85 	bl	800de5c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	da03      	bge.n	8003968 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003960:	23f8      	movs	r3, #248	; 0xf8
 8003962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003966:	e03d      	b.n	80039e4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003978:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003984:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003990:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4413      	add	r3, r2
 800399c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d8c8      	bhi.n	8003936 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	18d0      	adds	r0, r2, r3
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4413      	add	r3, r2
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f00a fa51 	bl	800de5c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	623b      	str	r3, [r7, #32]
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1a1      	bne.n	800391a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80039d6:	6979      	ldr	r1, [r7, #20]
 80039d8:	4811      	ldr	r0, [pc, #68]	; (8003a20 <low_level_output+0x138>)
 80039da:	f7fd ff8b 	bl	80018f4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <low_level_output+0x138>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <low_level_output+0x138>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039fe:	461a      	mov	r2, r3
 8003a00:	2320      	movs	r3, #32
 8003a02:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <low_level_output+0x138>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2300      	movs	r3, #0
 8003a10:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003a12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000323c 	.word	0x2000323c

08003a24 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003a48:	484e      	ldr	r0, [pc, #312]	; (8003b84 <low_level_input+0x160>)
 8003a4a:	f7fe f83d 	bl	8001ac8 <HAL_ETH_GetReceivedFrame>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <low_level_input+0x34>

    return NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e091      	b.n	8003b7c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003a58:	4b4a      	ldr	r3, [pc, #296]	; (8003b84 <low_level_input+0x160>)
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003a5e:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <low_level_input+0x160>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003a70:	4619      	mov	r1, r3
 8003a72:	2000      	movs	r0, #0
 8003a74:	f001 f934 	bl	8004ce0 <pbuf_alloc>
 8003a78:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d04b      	beq.n	8003b18 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a80:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <low_level_input+0x160>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8e:	e040      	b.n	8003b12 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	895b      	ldrh	r3, [r3, #10]
 8003a94:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003a9a:	e021      	b.n	8003ae0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	18d0      	adds	r0, r2, r3
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	18d1      	adds	r1, r2, r3
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f00a f9d2 	bl	800de5c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003ace:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ada:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d8d6      	bhi.n	8003a9c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	18d0      	adds	r0, r2, r3
 8003af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4619      	mov	r1, r3
 8003b00:	f00a f9ac 	bl	800de5c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4413      	add	r3, r2
 8003b0a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1bb      	bne.n	8003a90 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <low_level_input+0x160>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	e00b      	b.n	8003b3c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <low_level_input+0x160>)
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d3ee      	bcc.n	8003b24 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <low_level_input+0x160>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <low_level_input+0x160>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <low_level_input+0x160>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b66:	461a      	mov	r2, r3
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <low_level_input+0x160>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b74:	461a      	mov	r2, r3
 8003b76:	2300      	movs	r3, #0
 8003b78:	6093      	str	r3, [r2, #8]
  }
  return p;
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3730      	adds	r7, #48	; 0x30
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	2000323c 	.word	0x2000323c

08003b88 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff47 	bl	8003a24 <low_level_input>
 8003b96:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d010      	beq.n	8003bc0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	4798      	blx	r3
 8003ba8:	4603      	mov	r3, r0
 8003baa:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003bac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d006      	beq.n	8003bc2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f001 fb77 	bl	80052a8 <pbuf_free>
    p = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e000      	b.n	8003bc2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003bc0:	bf00      	nop
  }
}
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <ethernetif_init+0x1c>
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <ethernetif_init+0x48>)
 8003bd8:	f240 2212 	movw	r2, #530	; 0x212
 8003bdc:	490d      	ldr	r1, [pc, #52]	; (8003c14 <ethernetif_init+0x4c>)
 8003bde:	480e      	ldr	r0, [pc, #56]	; (8003c18 <ethernetif_init+0x50>)
 8003be0:	f00a f96c 	bl	800debc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2273      	movs	r2, #115	; 0x73
 8003be8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2274      	movs	r2, #116	; 0x74
 8003bf0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <ethernetif_init+0x54>)
 8003bf8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <ethernetif_init+0x58>)
 8003bfe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fdc3 	bl	800378c <low_level_init>

  return ERR_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	0800f324 	.word	0x0800f324
 8003c14:	0800f340 	.word	0x0800f340
 8003c18:	0800f350 	.word	0x0800f350
 8003c1c:	0800c101 	.word	0x0800c101
 8003c20:	080038e9 	.word	0x080038e9

08003c24 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003c28:	f7fd fae2 	bl	80011f0 <HAL_GetTick>
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d05d      	beq.n	8003d12 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003c56:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d03f      	beq.n	8003cde <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c62:	2100      	movs	r1, #0
 8003c64:	4830      	ldr	r0, [pc, #192]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003c66:	f7fe f81b 	bl	8001ca0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fac1 	bl	80011f0 <HAL_GetTick>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	461a      	mov	r2, r3
 8003c78:	2101      	movs	r1, #1
 8003c7a:	482b      	ldr	r0, [pc, #172]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003c7c:	f7fd ffa8 	bl	8001bd0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003c80:	f7fd fab6 	bl	80011f0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c8e:	d828      	bhi.n	8003ce2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0eb      	beq.n	8003c72 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2110      	movs	r1, #16
 8003ca2:	4821      	ldr	r0, [pc, #132]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003ca4:	f7fd ff94 	bl	8001bd0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	e002      	b.n	8003cc2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	e016      	b.n	8003d02 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003cd4:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	e011      	b.n	8003d02 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <ethernetif_update_config+0xb0>
          goto error;
 8003ce2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	480a      	ldr	r0, [pc, #40]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003cfe:	f7fd ffcf 	bl	8001ca0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003d02:	2100      	movs	r1, #0
 8003d04:	4808      	ldr	r0, [pc, #32]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003d06:	f7fe f88f 	bl	8001e28 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003d0a:	4807      	ldr	r0, [pc, #28]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003d0c:	f7fe f82e 	bl	8001d6c <HAL_ETH_Start>
 8003d10:	e002      	b.n	8003d18 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003d12:	4805      	ldr	r0, [pc, #20]	; (8003d28 <ethernetif_update_config+0xf4>)
 8003d14:	f7fe f859 	bl	8001dca <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f807 	bl	8003d2c <ethernetif_notify_conn_changed>
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	2000323c 	.word	0x2000323c

08003d2c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	b21b      	sxth	r3, r3
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	b29b      	uxth	r3, r3
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	061a      	lsls	r2, r3, #24
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0e1b      	lsrs	r3, r3, #24
 8003d8e:	4313      	orrs	r3, r2
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003da6:	f000 f8d5 	bl	8003f54 <mem_init>
  memp_init();
 8003daa:	f000 fbdb 	bl	8004564 <memp_init>
  pbuf_init();
  netif_init();
 8003dae:	f000 fc93 	bl	80046d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003db2:	f007 f84f 	bl	800ae54 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003db6:	f001 fda7 	bl	8005908 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003dba:	f006 ffc1 	bl	800ad40 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <ptr_to_mem+0x20>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	4413      	add	r3, r2
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	200038f0 	.word	0x200038f0

08003dec <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <mem_to_ptr+0x20>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	b29b      	uxth	r3, r3
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	200038f0 	.word	0x200038f0

08003e10 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003e18:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <plug_holes+0x120>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d206      	bcs.n	8003e30 <plug_holes+0x20>
 8003e22:	4b44      	ldr	r3, [pc, #272]	; (8003f34 <plug_holes+0x124>)
 8003e24:	f240 12df 	movw	r2, #479	; 0x1df
 8003e28:	4943      	ldr	r1, [pc, #268]	; (8003f38 <plug_holes+0x128>)
 8003e2a:	4844      	ldr	r0, [pc, #272]	; (8003f3c <plug_holes+0x12c>)
 8003e2c:	f00a f846 	bl	800debc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003e30:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <plug_holes+0x130>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d306      	bcc.n	8003e48 <plug_holes+0x38>
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <plug_holes+0x124>)
 8003e3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e40:	4940      	ldr	r1, [pc, #256]	; (8003f44 <plug_holes+0x134>)
 8003e42:	483e      	ldr	r0, [pc, #248]	; (8003f3c <plug_holes+0x12c>)
 8003e44:	f00a f83a 	bl	800debc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	791b      	ldrb	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <plug_holes+0x4e>
 8003e50:	4b38      	ldr	r3, [pc, #224]	; (8003f34 <plug_holes+0x124>)
 8003e52:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003e56:	493c      	ldr	r1, [pc, #240]	; (8003f48 <plug_holes+0x138>)
 8003e58:	4838      	ldr	r0, [pc, #224]	; (8003f3c <plug_holes+0x12c>)
 8003e5a:	f00a f82f 	bl	800debc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e66:	d906      	bls.n	8003e76 <plug_holes+0x66>
 8003e68:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <plug_holes+0x124>)
 8003e6a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003e6e:	4937      	ldr	r1, [pc, #220]	; (8003f4c <plug_holes+0x13c>)
 8003e70:	4832      	ldr	r0, [pc, #200]	; (8003f3c <plug_holes+0x12c>)
 8003e72:	f00a f823 	bl	800debc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ffa4 	bl	8003dc8 <ptr_to_mem>
 8003e80:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d024      	beq.n	8003ed4 <plug_holes+0xc4>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	791b      	ldrb	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d120      	bne.n	8003ed4 <plug_holes+0xc4>
 8003e92:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <plug_holes+0x130>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d01b      	beq.n	8003ed4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003e9c:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <plug_holes+0x140>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d102      	bne.n	8003eac <plug_holes+0x9c>
      lfree = mem;
 8003ea6:	4a2a      	ldr	r2, [pc, #168]	; (8003f50 <plug_holes+0x140>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ebc:	d00a      	beq.n	8003ed4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ff80 	bl	8003dc8 <ptr_to_mem>
 8003ec8:	4604      	mov	r4, r0
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ff8e 	bl	8003dec <mem_to_ptr>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	885b      	ldrh	r3, [r3, #2]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff75 	bl	8003dc8 <ptr_to_mem>
 8003ede:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d01f      	beq.n	8003f28 <plug_holes+0x118>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	791b      	ldrb	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11b      	bne.n	8003f28 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <plug_holes+0x140>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d102      	bne.n	8003f00 <plug_holes+0xf0>
      lfree = pmem;
 8003efa:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <plug_holes+0x140>)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	881a      	ldrh	r2, [r3, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f10:	d00a      	beq.n	8003f28 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ff56 	bl	8003dc8 <ptr_to_mem>
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	68b8      	ldr	r0, [r7, #8]
 8003f20:	f7ff ff64 	bl	8003dec <mem_to_ptr>
 8003f24:	4603      	mov	r3, r0
 8003f26:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	200038f0 	.word	0x200038f0
 8003f34:	0800f378 	.word	0x0800f378
 8003f38:	0800f3a8 	.word	0x0800f3a8
 8003f3c:	0800f3c0 	.word	0x0800f3c0
 8003f40:	200038f4 	.word	0x200038f4
 8003f44:	0800f3e8 	.word	0x0800f3e8
 8003f48:	0800f404 	.word	0x0800f404
 8003f4c:	0800f420 	.word	0x0800f420
 8003f50:	200038f8 	.word	0x200038f8

08003f54 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <mem_init+0x68>)
 8003f5c:	3303      	adds	r3, #3
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	461a      	mov	r2, r3
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <mem_init+0x6c>)
 8003f66:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003f68:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <mem_init+0x6c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003f74:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003f82:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8003f86:	f7ff ff1f 	bl	8003dc8 <ptr_to_mem>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <mem_init+0x70>)
 8003f8e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <mem_init+0x70>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2201      	movs	r2, #1
 8003f96:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <mem_init+0x70>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003fa0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <mem_init+0x70>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003faa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <mem_init+0x6c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <mem_init+0x74>)
 8003fb2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	2000329c 	.word	0x2000329c
 8003fc0:	200038f0 	.word	0x200038f0
 8003fc4:	200038f4 	.word	0x200038f4
 8003fc8:	200038f8 	.word	0x200038f8

08003fcc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff09 	bl	8003dec <mem_to_ptr>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fef0 	bl	8003dc8 <ptr_to_mem>
 8003fe8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	885b      	ldrh	r3, [r3, #2]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff feea 	bl	8003dc8 <ptr_to_mem>
 8003ff4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ffe:	d818      	bhi.n	8004032 <mem_link_valid+0x66>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	885b      	ldrh	r3, [r3, #2]
 8004004:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004008:	d813      	bhi.n	8004032 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800400e:	8afa      	ldrh	r2, [r7, #22]
 8004010:	429a      	cmp	r2, r3
 8004012:	d004      	beq.n	800401e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	8afa      	ldrh	r2, [r7, #22]
 800401a:	429a      	cmp	r2, r3
 800401c:	d109      	bne.n	8004032 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800401e:	4b08      	ldr	r3, [pc, #32]	; (8004040 <mem_link_valid+0x74>)
 8004020:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	429a      	cmp	r2, r3
 8004026:	d006      	beq.n	8004036 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	885b      	ldrh	r3, [r3, #2]
 800402c:	8afa      	ldrh	r2, [r7, #22]
 800402e:	429a      	cmp	r2, r3
 8004030:	d001      	beq.n	8004036 <mem_link_valid+0x6a>
    return 0;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <mem_link_valid+0x6c>
  }
  return 1;
 8004036:	2301      	movs	r3, #1
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200038f4 	.word	0x200038f4

08004044 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04c      	beq.n	80040ec <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <mem_free+0xb0>)
 800405e:	f240 2273 	movw	r2, #627	; 0x273
 8004062:	4925      	ldr	r1, [pc, #148]	; (80040f8 <mem_free+0xb4>)
 8004064:	4825      	ldr	r0, [pc, #148]	; (80040fc <mem_free+0xb8>)
 8004066:	f009 ff29 	bl	800debc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800406a:	e040      	b.n	80040ee <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3b08      	subs	r3, #8
 8004070:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <mem_free+0xbc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	429a      	cmp	r2, r3
 800407a:	d306      	bcc.n	800408a <mem_free+0x46>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f103 020c 	add.w	r2, r3, #12
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <mem_free+0xc0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d907      	bls.n	800409a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <mem_free+0xb0>)
 800408c:	f240 227f 	movw	r2, #639	; 0x27f
 8004090:	491d      	ldr	r1, [pc, #116]	; (8004108 <mem_free+0xc4>)
 8004092:	481a      	ldr	r0, [pc, #104]	; (80040fc <mem_free+0xb8>)
 8004094:	f009 ff12 	bl	800debc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004098:	e029      	b.n	80040ee <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	791b      	ldrb	r3, [r3, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <mem_free+0xb0>)
 80040a4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80040a8:	4918      	ldr	r1, [pc, #96]	; (800410c <mem_free+0xc8>)
 80040aa:	4814      	ldr	r0, [pc, #80]	; (80040fc <mem_free+0xb8>)
 80040ac:	f009 ff06 	bl	800debc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80040b0:	e01d      	b.n	80040ee <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff ff8a 	bl	8003fcc <mem_link_valid>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <mem_free+0xb0>)
 80040c0:	f240 2295 	movw	r2, #661	; 0x295
 80040c4:	4912      	ldr	r1, [pc, #72]	; (8004110 <mem_free+0xcc>)
 80040c6:	480d      	ldr	r0, [pc, #52]	; (80040fc <mem_free+0xb8>)
 80040c8:	f009 fef8 	bl	800debc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80040cc:	e00f      	b.n	80040ee <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <mem_free+0xd0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d202      	bcs.n	80040e4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80040de:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <mem_free+0xd0>)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff fe93 	bl	8003e10 <plug_holes>
 80040ea:	e000      	b.n	80040ee <mem_free+0xaa>
    return;
 80040ec:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	0800f378 	.word	0x0800f378
 80040f8:	0800f44c 	.word	0x0800f44c
 80040fc:	0800f3c0 	.word	0x0800f3c0
 8004100:	200038f0 	.word	0x200038f0
 8004104:	200038f4 	.word	0x200038f4
 8004108:	0800f470 	.word	0x0800f470
 800410c:	0800f48c 	.word	0x0800f48c
 8004110:	0800f4b4 	.word	0x0800f4b4
 8004114:	200038f8 	.word	0x200038f8

08004118 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	3303      	adds	r3, #3
 8004128:	b29b      	uxth	r3, r3
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004130:	8bfb      	ldrh	r3, [r7, #30]
 8004132:	2b0b      	cmp	r3, #11
 8004134:	d801      	bhi.n	800413a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004136:	230c      	movs	r3, #12
 8004138:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800413a:	8bfb      	ldrh	r3, [r7, #30]
 800413c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004140:	d803      	bhi.n	800414a <mem_trim+0x32>
 8004142:	8bfa      	ldrh	r2, [r7, #30]
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	429a      	cmp	r2, r3
 8004148:	d201      	bcs.n	800414e <mem_trim+0x36>
    return NULL;
 800414a:	2300      	movs	r3, #0
 800414c:	e0cc      	b.n	80042e8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800414e:	4b68      	ldr	r3, [pc, #416]	; (80042f0 <mem_trim+0x1d8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d304      	bcc.n	8004162 <mem_trim+0x4a>
 8004158:	4b66      	ldr	r3, [pc, #408]	; (80042f4 <mem_trim+0x1dc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	d306      	bcc.n	8004170 <mem_trim+0x58>
 8004162:	4b65      	ldr	r3, [pc, #404]	; (80042f8 <mem_trim+0x1e0>)
 8004164:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004168:	4964      	ldr	r1, [pc, #400]	; (80042fc <mem_trim+0x1e4>)
 800416a:	4865      	ldr	r0, [pc, #404]	; (8004300 <mem_trim+0x1e8>)
 800416c:	f009 fea6 	bl	800debc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004170:	4b5f      	ldr	r3, [pc, #380]	; (80042f0 <mem_trim+0x1d8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d304      	bcc.n	8004184 <mem_trim+0x6c>
 800417a:	4b5e      	ldr	r3, [pc, #376]	; (80042f4 <mem_trim+0x1dc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	d301      	bcc.n	8004188 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	e0af      	b.n	80042e8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3b08      	subs	r3, #8
 800418c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800418e:	69b8      	ldr	r0, [r7, #24]
 8004190:	f7ff fe2c 	bl	8003dec <mem_to_ptr>
 8004194:	4603      	mov	r3, r0
 8004196:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	881a      	ldrh	r2, [r3, #0]
 800419c:	8afb      	ldrh	r3, [r7, #22]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b08      	subs	r3, #8
 80041a4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80041a6:	8bfa      	ldrh	r2, [r7, #30]
 80041a8:	8abb      	ldrh	r3, [r7, #20]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d906      	bls.n	80041bc <mem_trim+0xa4>
 80041ae:	4b52      	ldr	r3, [pc, #328]	; (80042f8 <mem_trim+0x1e0>)
 80041b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80041b4:	4953      	ldr	r1, [pc, #332]	; (8004304 <mem_trim+0x1ec>)
 80041b6:	4852      	ldr	r0, [pc, #328]	; (8004300 <mem_trim+0x1e8>)
 80041b8:	f009 fe80 	bl	800debc <iprintf>
  if (newsize > size) {
 80041bc:	8bfa      	ldrh	r2, [r7, #30]
 80041be:	8abb      	ldrh	r3, [r7, #20]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d901      	bls.n	80041c8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e08f      	b.n	80042e8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80041c8:	8bfa      	ldrh	r2, [r7, #30]
 80041ca:	8abb      	ldrh	r3, [r7, #20]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d101      	bne.n	80041d4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	e089      	b.n	80042e8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fdf5 	bl	8003dc8 <ptr_to_mem>
 80041de:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d13f      	bne.n	8004268 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041f0:	d106      	bne.n	8004200 <mem_trim+0xe8>
 80041f2:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <mem_trim+0x1e0>)
 80041f4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80041f8:	4943      	ldr	r1, [pc, #268]	; (8004308 <mem_trim+0x1f0>)
 80041fa:	4841      	ldr	r0, [pc, #260]	; (8004300 <mem_trim+0x1e8>)
 80041fc:	f009 fe5e 	bl	800debc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004206:	8afa      	ldrh	r2, [r7, #22]
 8004208:	8bfb      	ldrh	r3, [r7, #30]
 800420a:	4413      	add	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	3308      	adds	r3, #8
 8004210:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004212:	4b3e      	ldr	r3, [pc, #248]	; (800430c <mem_trim+0x1f4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d106      	bne.n	800422a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800421c:	89fb      	ldrh	r3, [r7, #14]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fdd2 	bl	8003dc8 <ptr_to_mem>
 8004224:	4603      	mov	r3, r0
 8004226:	4a39      	ldr	r2, [pc, #228]	; (800430c <mem_trim+0x1f4>)
 8004228:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800422a:	89fb      	ldrh	r3, [r7, #14]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fdcb 	bl	8003dc8 <ptr_to_mem>
 8004232:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2200      	movs	r2, #0
 8004238:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	89ba      	ldrh	r2, [r7, #12]
 800423e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	8afa      	ldrh	r2, [r7, #22]
 8004244:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	89fa      	ldrh	r2, [r7, #14]
 800424a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004254:	d047      	beq.n	80042e6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fdb4 	bl	8003dc8 <ptr_to_mem>
 8004260:	4602      	mov	r2, r0
 8004262:	89fb      	ldrh	r3, [r7, #14]
 8004264:	8053      	strh	r3, [r2, #2]
 8004266:	e03e      	b.n	80042e6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004268:	8bfb      	ldrh	r3, [r7, #30]
 800426a:	f103 0214 	add.w	r2, r3, #20
 800426e:	8abb      	ldrh	r3, [r7, #20]
 8004270:	429a      	cmp	r2, r3
 8004272:	d838      	bhi.n	80042e6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004274:	8afa      	ldrh	r2, [r7, #22]
 8004276:	8bfb      	ldrh	r3, [r7, #30]
 8004278:	4413      	add	r3, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	3308      	adds	r3, #8
 800427e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004288:	d106      	bne.n	8004298 <mem_trim+0x180>
 800428a:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <mem_trim+0x1e0>)
 800428c:	f240 3216 	movw	r2, #790	; 0x316
 8004290:	491d      	ldr	r1, [pc, #116]	; (8004308 <mem_trim+0x1f0>)
 8004292:	481b      	ldr	r0, [pc, #108]	; (8004300 <mem_trim+0x1e8>)
 8004294:	f009 fe12 	bl	800debc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004298:	89fb      	ldrh	r3, [r7, #14]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fd94 	bl	8003dc8 <ptr_to_mem>
 80042a0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <mem_trim+0x1f4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d202      	bcs.n	80042b2 <mem_trim+0x19a>
      lfree = mem2;
 80042ac:	4a17      	ldr	r2, [pc, #92]	; (800430c <mem_trim+0x1f4>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2200      	movs	r2, #0
 80042b6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	881a      	ldrh	r2, [r3, #0]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	8afa      	ldrh	r2, [r7, #22]
 80042c4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	89fa      	ldrh	r2, [r7, #14]
 80042ca:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80042d4:	d007      	beq.n	80042e6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fd74 	bl	8003dc8 <ptr_to_mem>
 80042e0:	4602      	mov	r2, r0
 80042e2:	89fb      	ldrh	r3, [r7, #14]
 80042e4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80042e6:	687b      	ldr	r3, [r7, #4]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	200038f0 	.word	0x200038f0
 80042f4:	200038f4 	.word	0x200038f4
 80042f8:	0800f378 	.word	0x0800f378
 80042fc:	0800f4e8 	.word	0x0800f4e8
 8004300:	0800f3c0 	.word	0x0800f3c0
 8004304:	0800f500 	.word	0x0800f500
 8004308:	0800f520 	.word	0x0800f520
 800430c:	200038f8 	.word	0x200038f8

08004310 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <mem_malloc+0x14>
    return NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	e0d9      	b.n	80044d8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	3303      	adds	r3, #3
 8004328:	b29b      	uxth	r3, r3
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004330:	8bbb      	ldrh	r3, [r7, #28]
 8004332:	2b0b      	cmp	r3, #11
 8004334:	d801      	bhi.n	800433a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004336:	230c      	movs	r3, #12
 8004338:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800433a:	8bbb      	ldrh	r3, [r7, #28]
 800433c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004340:	d803      	bhi.n	800434a <mem_malloc+0x3a>
 8004342:	8bba      	ldrh	r2, [r7, #28]
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	429a      	cmp	r2, r3
 8004348:	d201      	bcs.n	800434e <mem_malloc+0x3e>
    return NULL;
 800434a:	2300      	movs	r3, #0
 800434c:	e0c4      	b.n	80044d8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800434e:	4b64      	ldr	r3, [pc, #400]	; (80044e0 <mem_malloc+0x1d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff fd4a 	bl	8003dec <mem_to_ptr>
 8004358:	4603      	mov	r3, r0
 800435a:	83fb      	strh	r3, [r7, #30]
 800435c:	e0b4      	b.n	80044c8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800435e:	8bfb      	ldrh	r3, [r7, #30]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fd31 	bl	8003dc8 <ptr_to_mem>
 8004366:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	791b      	ldrb	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 80a4 	bne.w	80044ba <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	8bfb      	ldrh	r3, [r7, #30]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f1a3 0208 	sub.w	r2, r3, #8
 8004380:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004382:	429a      	cmp	r2, r3
 8004384:	f0c0 8099 	bcc.w	80044ba <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	8bfb      	ldrh	r3, [r7, #30]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f1a3 0208 	sub.w	r2, r3, #8
 8004396:	8bbb      	ldrh	r3, [r7, #28]
 8004398:	3314      	adds	r3, #20
 800439a:	429a      	cmp	r2, r3
 800439c:	d333      	bcc.n	8004406 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800439e:	8bfa      	ldrh	r2, [r7, #30]
 80043a0:	8bbb      	ldrh	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3308      	adds	r3, #8
 80043a8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80043aa:	8a7b      	ldrh	r3, [r7, #18]
 80043ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043b0:	d106      	bne.n	80043c0 <mem_malloc+0xb0>
 80043b2:	4b4c      	ldr	r3, [pc, #304]	; (80044e4 <mem_malloc+0x1d4>)
 80043b4:	f240 3287 	movw	r2, #903	; 0x387
 80043b8:	494b      	ldr	r1, [pc, #300]	; (80044e8 <mem_malloc+0x1d8>)
 80043ba:	484c      	ldr	r0, [pc, #304]	; (80044ec <mem_malloc+0x1dc>)
 80043bc:	f009 fd7e 	bl	800debc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80043c0:	8a7b      	ldrh	r3, [r7, #18]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fd00 	bl	8003dc8 <ptr_to_mem>
 80043c8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	881a      	ldrh	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8bfa      	ldrh	r2, [r7, #30]
 80043dc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	8a7a      	ldrh	r2, [r7, #18]
 80043e2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2201      	movs	r2, #1
 80043e8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043f2:	d00b      	beq.n	800440c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fce5 	bl	8003dc8 <ptr_to_mem>
 80043fe:	4602      	mov	r2, r0
 8004400:	8a7b      	ldrh	r3, [r7, #18]
 8004402:	8053      	strh	r3, [r2, #2]
 8004404:	e002      	b.n	800440c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2201      	movs	r2, #1
 800440a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800440c:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <mem_malloc+0x1d0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	429a      	cmp	r2, r3
 8004414:	d127      	bne.n	8004466 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004416:	4b32      	ldr	r3, [pc, #200]	; (80044e0 <mem_malloc+0x1d0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800441c:	e005      	b.n	800442a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fcd0 	bl	8003dc8 <ptr_to_mem>
 8004428:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	791b      	ldrb	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <mem_malloc+0x12c>
 8004432:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <mem_malloc+0x1e0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	429a      	cmp	r2, r3
 800443a:	d1f0      	bne.n	800441e <mem_malloc+0x10e>
          }
          lfree = cur;
 800443c:	4a28      	ldr	r2, [pc, #160]	; (80044e0 <mem_malloc+0x1d0>)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004442:	4b27      	ldr	r3, [pc, #156]	; (80044e0 <mem_malloc+0x1d0>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <mem_malloc+0x1e0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d00b      	beq.n	8004466 <mem_malloc+0x156>
 800444e:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <mem_malloc+0x1d0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	791b      	ldrb	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <mem_malloc+0x156>
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <mem_malloc+0x1d4>)
 800445a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800445e:	4925      	ldr	r1, [pc, #148]	; (80044f4 <mem_malloc+0x1e4>)
 8004460:	4822      	ldr	r0, [pc, #136]	; (80044ec <mem_malloc+0x1dc>)
 8004462:	f009 fd2b 	bl	800debc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004466:	8bba      	ldrh	r2, [r7, #28]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4413      	add	r3, r2
 800446c:	3308      	adds	r3, #8
 800446e:	4a20      	ldr	r2, [pc, #128]	; (80044f0 <mem_malloc+0x1e0>)
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	4293      	cmp	r3, r2
 8004474:	d906      	bls.n	8004484 <mem_malloc+0x174>
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <mem_malloc+0x1d4>)
 8004478:	f240 32b9 	movw	r2, #953	; 0x3b9
 800447c:	491e      	ldr	r1, [pc, #120]	; (80044f8 <mem_malloc+0x1e8>)
 800447e:	481b      	ldr	r0, [pc, #108]	; (80044ec <mem_malloc+0x1dc>)
 8004480:	f009 fd1c 	bl	800debc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <mem_malloc+0x18c>
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <mem_malloc+0x1d4>)
 8004490:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004494:	4919      	ldr	r1, [pc, #100]	; (80044fc <mem_malloc+0x1ec>)
 8004496:	4815      	ldr	r0, [pc, #84]	; (80044ec <mem_malloc+0x1dc>)
 8004498:	f009 fd10 	bl	800debc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d006      	beq.n	80044b4 <mem_malloc+0x1a4>
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <mem_malloc+0x1d4>)
 80044a8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80044ac:	4914      	ldr	r1, [pc, #80]	; (8004500 <mem_malloc+0x1f0>)
 80044ae:	480f      	ldr	r0, [pc, #60]	; (80044ec <mem_malloc+0x1dc>)
 80044b0:	f009 fd04 	bl	800debc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3308      	adds	r3, #8
 80044b8:	e00e      	b.n	80044d8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80044ba:	8bfb      	ldrh	r3, [r7, #30]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fc83 	bl	8003dc8 <ptr_to_mem>
 80044c2:	4603      	mov	r3, r0
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80044c8:	8bfa      	ldrh	r2, [r7, #30]
 80044ca:	8bbb      	ldrh	r3, [r7, #28]
 80044cc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80044d0:	429a      	cmp	r2, r3
 80044d2:	f4ff af44 	bcc.w	800435e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	200038f8 	.word	0x200038f8
 80044e4:	0800f378 	.word	0x0800f378
 80044e8:	0800f520 	.word	0x0800f520
 80044ec:	0800f3c0 	.word	0x0800f3c0
 80044f0:	200038f4 	.word	0x200038f4
 80044f4:	0800f534 	.word	0x0800f534
 80044f8:	0800f550 	.word	0x0800f550
 80044fc:	0800f580 	.word	0x0800f580
 8004500:	0800f5b0 	.word	0x0800f5b0

08004504 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	3303      	adds	r3, #3
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e011      	b.n	800454a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3301      	adds	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	885b      	ldrh	r3, [r3, #2]
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4293      	cmp	r3, r2
 8004554:	dbe7      	blt.n	8004526 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800456a:	2300      	movs	r3, #0
 800456c:	80fb      	strh	r3, [r7, #6]
 800456e:	e009      	b.n	8004584 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	4a08      	ldr	r2, [pc, #32]	; (8004594 <memp_init+0x30>)
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ffc3 	bl	8004504 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	3301      	adds	r3, #1
 8004582:	80fb      	strh	r3, [r7, #6]
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	2b08      	cmp	r3, #8
 8004588:	d9f2      	bls.n	8004570 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	08011d80 	.word	0x08011d80

08004598 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d012      	beq.n	80045d4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <do_memp_malloc_pool+0x38>
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <do_memp_malloc_pool+0x48>)
 80045c4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80045c8:	4906      	ldr	r1, [pc, #24]	; (80045e4 <do_memp_malloc_pool+0x4c>)
 80045ca:	4807      	ldr	r0, [pc, #28]	; (80045e8 <do_memp_malloc_pool+0x50>)
 80045cc:	f009 fc76 	bl	800debc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	e000      	b.n	80045d6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	0800f5d4 	.word	0x0800f5d4
 80045e4:	0800f604 	.word	0x0800f604
 80045e8:	0800f628 	.word	0x0800f628

080045ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d908      	bls.n	800460e <memp_malloc+0x22>
 80045fc:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <memp_malloc+0x3c>)
 80045fe:	f240 1257 	movw	r2, #343	; 0x157
 8004602:	490a      	ldr	r1, [pc, #40]	; (800462c <memp_malloc+0x40>)
 8004604:	480a      	ldr	r0, [pc, #40]	; (8004630 <memp_malloc+0x44>)
 8004606:	f009 fc59 	bl	800debc <iprintf>
 800460a:	2300      	movs	r3, #0
 800460c:	e008      	b.n	8004620 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	4a08      	ldr	r2, [pc, #32]	; (8004634 <memp_malloc+0x48>)
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff ffbe 	bl	8004598 <do_memp_malloc_pool>
 800461c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	0800f5d4 	.word	0x0800f5d4
 800462c:	0800f664 	.word	0x0800f664
 8004630:	0800f628 	.word	0x0800f628
 8004634:	08011d80 	.word	0x08011d80

08004638 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d006      	beq.n	800465a <do_memp_free_pool+0x22>
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <do_memp_free_pool+0x40>)
 800464e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004652:	490a      	ldr	r1, [pc, #40]	; (800467c <do_memp_free_pool+0x44>)
 8004654:	480a      	ldr	r0, [pc, #40]	; (8004680 <do_memp_free_pool+0x48>)
 8004656:	f009 fc31 	bl	800debc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	0800f5d4 	.word	0x0800f5d4
 800467c:	0800f684 	.word	0x0800f684
 8004680:	0800f628 	.word	0x0800f628

08004684 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	6039      	str	r1, [r7, #0]
 800468e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b08      	cmp	r3, #8
 8004694:	d907      	bls.n	80046a6 <memp_free+0x22>
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <memp_free+0x44>)
 8004698:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800469c:	490b      	ldr	r1, [pc, #44]	; (80046cc <memp_free+0x48>)
 800469e:	480c      	ldr	r0, [pc, #48]	; (80046d0 <memp_free+0x4c>)
 80046a0:	f009 fc0c 	bl	800debc <iprintf>
 80046a4:	e00c      	b.n	80046c0 <memp_free+0x3c>

  if (mem == NULL) {
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <memp_free+0x50>)
 80046b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ffbe 	bl	8004638 <do_memp_free_pool>
 80046bc:	e000      	b.n	80046c0 <memp_free+0x3c>
    return;
 80046be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	0800f5d4 	.word	0x0800f5d4
 80046cc:	0800f6a4 	.word	0x0800f6a4
 80046d0:	0800f628 	.word	0x0800f628
 80046d4:	08011d80 	.word	0x08011d80

080046d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <netif_add+0x26>
 80046fc:	4b57      	ldr	r3, [pc, #348]	; (800485c <netif_add+0x174>)
 80046fe:	f240 1227 	movw	r2, #295	; 0x127
 8004702:	4957      	ldr	r1, [pc, #348]	; (8004860 <netif_add+0x178>)
 8004704:	4857      	ldr	r0, [pc, #348]	; (8004864 <netif_add+0x17c>)
 8004706:	f009 fbd9 	bl	800debc <iprintf>
 800470a:	2300      	movs	r3, #0
 800470c:	e0a2      	b.n	8004854 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	2b00      	cmp	r3, #0
 8004712:	d108      	bne.n	8004726 <netif_add+0x3e>
 8004714:	4b51      	ldr	r3, [pc, #324]	; (800485c <netif_add+0x174>)
 8004716:	f44f 7294 	mov.w	r2, #296	; 0x128
 800471a:	4953      	ldr	r1, [pc, #332]	; (8004868 <netif_add+0x180>)
 800471c:	4851      	ldr	r0, [pc, #324]	; (8004864 <netif_add+0x17c>)
 800471e:	f009 fbcd 	bl	800debc <iprintf>
 8004722:	2300      	movs	r3, #0
 8004724:	e096      	b.n	8004854 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800472c:	4b4f      	ldr	r3, [pc, #316]	; (800486c <netif_add+0x184>)
 800472e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004736:	4b4d      	ldr	r3, [pc, #308]	; (800486c <netif_add+0x184>)
 8004738:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004740:	4b4a      	ldr	r3, [pc, #296]	; (800486c <netif_add+0x184>)
 8004742:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a45      	ldr	r2, [pc, #276]	; (8004870 <netif_add+0x188>)
 800475a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a3a      	ldr	r2, [r7, #32]
 8004774:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <netif_add+0x18c>)
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004784:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f913 	bl	80049b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	4798      	blx	r3
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <netif_add+0xba>
    return NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	e058      	b.n	8004854 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047a8:	2bff      	cmp	r3, #255	; 0xff
 80047aa:	d103      	bne.n	80047b4 <netif_add+0xcc>
        netif->num = 0;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80047b8:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <netif_add+0x190>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e02b      	b.n	8004818 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d106      	bne.n	80047d6 <netif_add+0xee>
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <netif_add+0x174>)
 80047ca:	f240 128b 	movw	r2, #395	; 0x18b
 80047ce:	492b      	ldr	r1, [pc, #172]	; (800487c <netif_add+0x194>)
 80047d0:	4824      	ldr	r0, [pc, #144]	; (8004864 <netif_add+0x17c>)
 80047d2:	f009 fb73 	bl	800debc <iprintf>
        num_netifs++;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3301      	adds	r3, #1
 80047da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2bff      	cmp	r3, #255	; 0xff
 80047e0:	dd06      	ble.n	80047f0 <netif_add+0x108>
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <netif_add+0x174>)
 80047e4:	f240 128d 	movw	r2, #397	; 0x18d
 80047e8:	4925      	ldr	r1, [pc, #148]	; (8004880 <netif_add+0x198>)
 80047ea:	481e      	ldr	r0, [pc, #120]	; (8004864 <netif_add+0x17c>)
 80047ec:	f009 fb66 	bl	800debc <iprintf>
        if (netif2->num == netif->num) {
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d108      	bne.n	8004812 <netif_add+0x12a>
          netif->num++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004806:	3301      	adds	r3, #1
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004810:	e005      	b.n	800481e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1d0      	bne.n	80047c0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1be      	bne.n	80047a2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800482a:	2bfe      	cmp	r3, #254	; 0xfe
 800482c:	d103      	bne.n	8004836 <netif_add+0x14e>
    netif_num = 0;
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <netif_add+0x18c>)
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e006      	b.n	8004844 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800483c:	3301      	adds	r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <netif_add+0x18c>)
 8004842:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <netif_add+0x190>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800484c:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <netif_add+0x190>)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004852:	68fb      	ldr	r3, [r7, #12]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	0800f6c0 	.word	0x0800f6c0
 8004860:	0800f754 	.word	0x0800f754
 8004864:	0800f710 	.word	0x0800f710
 8004868:	0800f770 	.word	0x0800f770
 800486c:	08011de4 	.word	0x08011de4
 8004870:	08004bcb 	.word	0x08004bcb
 8004874:	200067f0 	.word	0x200067f0
 8004878:	200067e8 	.word	0x200067e8
 800487c:	0800f794 	.word	0x0800f794
 8004880:	0800f7a8 	.word	0x0800f7a8

08004884 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f002 fb81 	bl	8006f98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f006 ffb5 	bl	800b808 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <netif_do_set_ipaddr+0x20>
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <netif_do_set_ipaddr+0x88>)
 80048bc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80048c0:	491c      	ldr	r1, [pc, #112]	; (8004934 <netif_do_set_ipaddr+0x8c>)
 80048c2:	481d      	ldr	r0, [pc, #116]	; (8004938 <netif_do_set_ipaddr+0x90>)
 80048c4:	f009 fafa 	bl	800debc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <netif_do_set_ipaddr+0x34>
 80048ce:	4b18      	ldr	r3, [pc, #96]	; (8004930 <netif_do_set_ipaddr+0x88>)
 80048d0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80048d4:	4917      	ldr	r1, [pc, #92]	; (8004934 <netif_do_set_ipaddr+0x8c>)
 80048d6:	4818      	ldr	r0, [pc, #96]	; (8004938 <netif_do_set_ipaddr+0x90>)
 80048d8:	f009 faf0 	bl	800debc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3304      	adds	r3, #4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d01c      	beq.n	8004924 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3304      	adds	r3, #4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ffbf 	bl	8004884 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <netif_do_set_ipaddr+0x6a>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	e000      	b.n	8004914 <netif_do_set_ipaddr+0x6c>
 8004912:	2300      	movs	r3, #0
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004918:	2101      	movs	r1, #1
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f8d2 	bl	8004ac4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	0800f6c0 	.word	0x0800f6c0
 8004934:	0800f7d8 	.word	0x0800f7d8
 8004938:	0800f710 	.word	0x0800f710

0800493c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3308      	adds	r3, #8
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d00a      	beq.n	800496c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <netif_do_set_netmask+0x26>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	e000      	b.n	8004964 <netif_do_set_netmask+0x28>
 8004962:	2300      	movs	r3, #0
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	330c      	adds	r3, #12
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d00a      	beq.n	80049aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <netif_do_set_gw+0x26>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	e000      	b.n	80049a2 <netif_do_set_gw+0x28>
 80049a0:	2300      	movs	r3, #0
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80049d4:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <netif_set_addr+0x90>)
 80049d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <netif_set_addr+0x90>)
 80049e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80049e8:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <netif_set_addr+0x90>)
 80049ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <netif_set_addr+0x42>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <netif_set_addr+0x46>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <netif_set_addr+0x48>
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d006      	beq.n	8004a16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004a08:	f107 0310 	add.w	r3, r7, #16
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ff49 	bl	80048a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f7ff ff8e 	bl	800493c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	6839      	ldr	r1, [r7, #0]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff ffa8 	bl	800497a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004a30:	f107 0310 	add.w	r3, r7, #16
 8004a34:	461a      	mov	r2, r3
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff ff35 	bl	80048a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004a3e:	bf00      	nop
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	08011de4 	.word	0x08011de4

08004a4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004a54:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <netif_set_default+0x1c>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	200067ec 	.word	0x200067ec

08004a6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d107      	bne.n	8004a8a <netif_set_up+0x1e>
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <netif_set_up+0x4c>)
 8004a7c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004a80:	490e      	ldr	r1, [pc, #56]	; (8004abc <netif_set_up+0x50>)
 8004a82:	480f      	ldr	r0, [pc, #60]	; (8004ac0 <netif_set_up+0x54>)
 8004a84:	f009 fa1a 	bl	800debc <iprintf>
 8004a88:	e013      	b.n	8004ab2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10c      	bne.n	8004ab2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004aaa:	2103      	movs	r1, #3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f809 	bl	8004ac4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	0800f6c0 	.word	0x0800f6c0
 8004abc:	0800f848 	.word	0x0800f848
 8004ac0:	0800f710 	.word	0x0800f710

08004ac4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <netif_issue_reports+0x20>
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <netif_issue_reports+0x74>)
 8004ad8:	f240 326d 	movw	r2, #877	; 0x36d
 8004adc:	4917      	ldr	r1, [pc, #92]	; (8004b3c <netif_issue_reports+0x78>)
 8004ade:	4818      	ldr	r0, [pc, #96]	; (8004b40 <netif_issue_reports+0x7c>)
 8004ae0:	f009 f9ec 	bl	800debc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01e      	beq.n	8004b30 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004af8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d013      	beq.n	8004b32 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00e      	beq.n	8004b32 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f007 fdd7 	bl	800c6dc <etharp_request>
 8004b2e:	e000      	b.n	8004b32 <netif_issue_reports+0x6e>
    return;
 8004b30:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	0800f6c0 	.word	0x0800f6c0
 8004b3c:	0800f864 	.word	0x0800f864
 8004b40:	0800f710 	.word	0x0800f710

08004b44 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d107      	bne.n	8004b62 <netif_set_down+0x1e>
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <netif_set_down+0x58>)
 8004b54:	f240 329b 	movw	r2, #923	; 0x39b
 8004b58:	4911      	ldr	r1, [pc, #68]	; (8004ba0 <netif_set_down+0x5c>)
 8004b5a:	4812      	ldr	r0, [pc, #72]	; (8004ba4 <netif_set_down+0x60>)
 8004b5c:	f009 f9ae 	bl	800debc <iprintf>
 8004b60:	e019      	b.n	8004b96 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f007 f961 	bl	800be58 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	0800f6c0 	.word	0x0800f6c0
 8004ba0:	0800f888 	.word	0x0800f888
 8004ba4:	0800f710 	.word	0x0800f710

08004ba8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	61da      	str	r2, [r3, #28]
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004bd6:	f06f 030b 	mvn.w	r3, #11
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d013      	beq.n	8004c20 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <netif_get_by_index+0x48>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e00c      	b.n	8004c1a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c06:	3301      	adds	r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	79fa      	ldrb	r2, [r7, #7]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d101      	bne.n	8004c14 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	e006      	b.n	8004c22 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ef      	bne.n	8004c00 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	200067e8 	.word	0x200067e8

08004c34 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <pbuf_free_ooseq+0x38>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <pbuf_free_ooseq+0x3c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	e00a      	b.n	8004c5e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f002 f9df 	bl	8007014 <tcp_free_ooseq>
      return;
 8004c56:	e005      	b.n	8004c64 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f1      	bne.n	8004c48 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200067f1 	.word	0x200067f1
 8004c70:	20006800 	.word	0x20006800

08004c74 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <pbuf_pool_is_empty+0x14>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	200067f1 	.word	0x200067f1

08004c8c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	80fb      	strh	r3, [r7, #6]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88ba      	ldrh	r2, [r7, #4]
 8004cb8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004cba:	8b3b      	ldrh	r3, [r7, #24]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	7f3a      	ldrb	r2, [r7, #28]
 8004cc6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	73da      	strb	r2, [r3, #15]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08c      	sub	sp, #48	; 0x30
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
 8004cea:	460b      	mov	r3, r1
 8004cec:	80bb      	strh	r3, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004cfc:	d07f      	beq.n	8004dfe <pbuf_alloc+0x11e>
 8004cfe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004d02:	f300 80c8 	bgt.w	8004e96 <pbuf_alloc+0x1b6>
 8004d06:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004d0a:	d010      	beq.n	8004d2e <pbuf_alloc+0x4e>
 8004d0c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004d10:	f300 80c1 	bgt.w	8004e96 <pbuf_alloc+0x1b6>
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d002      	beq.n	8004d1e <pbuf_alloc+0x3e>
 8004d18:	2b41      	cmp	r3, #65	; 0x41
 8004d1a:	f040 80bc 	bne.w	8004e96 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	88bb      	ldrh	r3, [r7, #4]
 8004d22:	4619      	mov	r1, r3
 8004d24:	2000      	movs	r0, #0
 8004d26:	f000 f8d1 	bl	8004ecc <pbuf_alloc_reference>
 8004d2a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004d2c:	e0bd      	b.n	8004eaa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004d36:	88bb      	ldrh	r3, [r7, #4]
 8004d38:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004d3a:	2008      	movs	r0, #8
 8004d3c:	f7ff fc56 	bl	80045ec <memp_malloc>
 8004d40:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d109      	bne.n	8004d5c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004d48:	f7ff ff94 	bl	8004c74 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d54:	f000 faa8 	bl	80052a8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e0a7      	b.n	8004eac <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004d5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d5e:	3303      	adds	r3, #3
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8b7a      	ldrh	r2, [r7, #26]
 8004d70:	4293      	cmp	r3, r2
 8004d72:	bf28      	it	cs
 8004d74:	4613      	movcs	r3, r2
 8004d76:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d7a:	3310      	adds	r3, #16
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4413      	add	r3, r2
 8004d80:	3303      	adds	r3, #3
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	4618      	mov	r0, r3
 8004d88:	89f9      	ldrh	r1, [r7, #14]
 8004d8a:	8b7a      	ldrh	r2, [r7, #26]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	460b      	mov	r3, r1
 8004d96:	4601      	mov	r1, r0
 8004d98:	6938      	ldr	r0, [r7, #16]
 8004d9a:	f7ff ff77 	bl	8004c8c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <pbuf_alloc+0xd8>
 8004daa:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <pbuf_alloc+0x1d4>)
 8004dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004db0:	4941      	ldr	r1, [pc, #260]	; (8004eb8 <pbuf_alloc+0x1d8>)
 8004db2:	4842      	ldr	r0, [pc, #264]	; (8004ebc <pbuf_alloc+0x1dc>)
 8004db4:	f009 f882 	bl	800debc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004db8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dba:	3303      	adds	r3, #3
 8004dbc:	f023 0303 	bic.w	r3, r3, #3
 8004dc0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004dc4:	d106      	bne.n	8004dd4 <pbuf_alloc+0xf4>
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <pbuf_alloc+0x1d4>)
 8004dc8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004dcc:	493c      	ldr	r1, [pc, #240]	; (8004ec0 <pbuf_alloc+0x1e0>)
 8004dce:	483b      	ldr	r0, [pc, #236]	; (8004ebc <pbuf_alloc+0x1dc>)
 8004dd0:	f009 f874 	bl	800debc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dde:	e002      	b.n	8004de6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004dea:	8b7a      	ldrh	r2, [r7, #26]
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004df6:	8b7b      	ldrh	r3, [r7, #26]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d19e      	bne.n	8004d3a <pbuf_alloc+0x5a>
      break;
 8004dfc:	e055      	b.n	8004eaa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004dfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e00:	3303      	adds	r3, #3
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f023 0303 	bic.w	r3, r3, #3
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	88bb      	ldrh	r3, [r7, #4]
 8004e0c:	3303      	adds	r3, #3
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f023 0303 	bic.w	r3, r3, #3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004e1a:	8b3b      	ldrh	r3, [r7, #24]
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004e20:	8b3a      	ldrh	r2, [r7, #24]
 8004e22:	88bb      	ldrh	r3, [r7, #4]
 8004e24:	3303      	adds	r3, #3
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d306      	bcc.n	8004e3c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004e2e:	8afa      	ldrh	r2, [r7, #22]
 8004e30:	88bb      	ldrh	r3, [r7, #4]
 8004e32:	3303      	adds	r3, #3
 8004e34:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d201      	bcs.n	8004e40 <pbuf_alloc+0x160>
        return NULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e035      	b.n	8004eac <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004e40:	8afb      	ldrh	r3, [r7, #22]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fa64 	bl	8004310 <mem_malloc>
 8004e48:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <pbuf_alloc+0x174>
        return NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e02b      	b.n	8004eac <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e56:	3310      	adds	r3, #16
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3303      	adds	r3, #3
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	4618      	mov	r0, r3
 8004e64:	88b9      	ldrh	r1, [r7, #4]
 8004e66:	88ba      	ldrh	r2, [r7, #4]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	887b      	ldrh	r3, [r7, #2]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	460b      	mov	r3, r1
 8004e72:	4601      	mov	r1, r0
 8004e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e76:	f7ff ff09 	bl	8004c8c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <pbuf_alloc+0x1c8>
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <pbuf_alloc+0x1d4>)
 8004e88:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004e8c:	490d      	ldr	r1, [pc, #52]	; (8004ec4 <pbuf_alloc+0x1e4>)
 8004e8e:	480b      	ldr	r0, [pc, #44]	; (8004ebc <pbuf_alloc+0x1dc>)
 8004e90:	f009 f814 	bl	800debc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004e94:	e008      	b.n	8004ea8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <pbuf_alloc+0x1d4>)
 8004e98:	f240 1227 	movw	r2, #295	; 0x127
 8004e9c:	490a      	ldr	r1, [pc, #40]	; (8004ec8 <pbuf_alloc+0x1e8>)
 8004e9e:	4807      	ldr	r0, [pc, #28]	; (8004ebc <pbuf_alloc+0x1dc>)
 8004ea0:	f009 f80c 	bl	800debc <iprintf>
      return NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e001      	b.n	8004eac <pbuf_alloc+0x1cc>
      break;
 8004ea8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3728      	adds	r7, #40	; 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	0800f8f0 	.word	0x0800f8f0
 8004eb8:	0800f920 	.word	0x0800f920
 8004ebc:	0800f950 	.word	0x0800f950
 8004ec0:	0800f978 	.word	0x0800f978
 8004ec4:	0800f9ac 	.word	0x0800f9ac
 8004ec8:	0800f9d8 	.word	0x0800f9d8

08004ecc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004edc:	883b      	ldrh	r3, [r7, #0]
 8004ede:	2b41      	cmp	r3, #65	; 0x41
 8004ee0:	d009      	beq.n	8004ef6 <pbuf_alloc_reference+0x2a>
 8004ee2:	883b      	ldrh	r3, [r7, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d006      	beq.n	8004ef6 <pbuf_alloc_reference+0x2a>
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <pbuf_alloc_reference+0x5c>)
 8004eea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004eee:	490f      	ldr	r1, [pc, #60]	; (8004f2c <pbuf_alloc_reference+0x60>)
 8004ef0:	480f      	ldr	r0, [pc, #60]	; (8004f30 <pbuf_alloc_reference+0x64>)
 8004ef2:	f008 ffe3 	bl	800debc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004ef6:	2007      	movs	r0, #7
 8004ef8:	f7ff fb78 	bl	80045ec <memp_malloc>
 8004efc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	e00b      	b.n	8004f20 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004f08:	8879      	ldrh	r1, [r7, #2]
 8004f0a:	887a      	ldrh	r2, [r7, #2]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	883b      	ldrh	r3, [r7, #0]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	460b      	mov	r3, r1
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff feb7 	bl	8004c8c <pbuf_init_alloced_pbuf>
  return p;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	0800f8f0 	.word	0x0800f8f0
 8004f2c:	0800f9f4 	.word	0x0800f9f4
 8004f30:	0800f950 	.word	0x0800f950

08004f34 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	460b      	mov	r3, r1
 8004f42:	81bb      	strh	r3, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004f4c:	8a7b      	ldrh	r3, [r7, #18]
 8004f4e:	3303      	adds	r3, #3
 8004f50:	f023 0203 	bic.w	r2, r3, #3
 8004f54:	89bb      	ldrh	r3, [r7, #12]
 8004f56:	441a      	add	r2, r3
 8004f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d901      	bls.n	8004f62 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e018      	b.n	8004f94 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004f68:	8a7b      	ldrh	r3, [r7, #18]
 8004f6a:	3303      	adds	r3, #3
 8004f6c:	f023 0303 	bic.w	r3, r3, #3
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	4413      	add	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e001      	b.n	8004f7c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	89b9      	ldrh	r1, [r7, #12]
 8004f80:	89ba      	ldrh	r2, [r7, #12]
 8004f82:	2302      	movs	r3, #2
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	897b      	ldrh	r3, [r7, #10]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	6979      	ldr	r1, [r7, #20]
 8004f8e:	f7ff fe7d 	bl	8004c8c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004f92:	687b      	ldr	r3, [r7, #4]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <pbuf_realloc+0x20>
 8004fae:	4b3a      	ldr	r3, [pc, #232]	; (8005098 <pbuf_realloc+0xfc>)
 8004fb0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004fb4:	4939      	ldr	r1, [pc, #228]	; (800509c <pbuf_realloc+0x100>)
 8004fb6:	483a      	ldr	r0, [pc, #232]	; (80050a0 <pbuf_realloc+0x104>)
 8004fb8:	f008 ff80 	bl	800debc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	891b      	ldrh	r3, [r3, #8]
 8004fc0:	887a      	ldrh	r2, [r7, #2]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d263      	bcs.n	800508e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	891a      	ldrh	r2, [r3, #8]
 8004fca:	887b      	ldrh	r3, [r7, #2]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004fd0:	887b      	ldrh	r3, [r7, #2]
 8004fd2:	817b      	strh	r3, [r7, #10]
  q = p;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004fd8:	e018      	b.n	800500c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	895b      	ldrh	r3, [r3, #10]
 8004fde:	897a      	ldrh	r2, [r7, #10]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	891a      	ldrh	r2, [r3, #8]
 8004fe8:	893b      	ldrh	r3, [r7, #8]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <pbuf_realloc+0x70>
 8004ffe:	4b26      	ldr	r3, [pc, #152]	; (8005098 <pbuf_realloc+0xfc>)
 8005000:	f240 12af 	movw	r2, #431	; 0x1af
 8005004:	4927      	ldr	r1, [pc, #156]	; (80050a4 <pbuf_realloc+0x108>)
 8005006:	4826      	ldr	r0, [pc, #152]	; (80050a0 <pbuf_realloc+0x104>)
 8005008:	f008 ff58 	bl	800debc <iprintf>
  while (rem_len > q->len) {
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	895b      	ldrh	r3, [r3, #10]
 8005010:	897a      	ldrh	r2, [r7, #10]
 8005012:	429a      	cmp	r2, r3
 8005014:	d8e1      	bhi.n	8004fda <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	7b1b      	ldrb	r3, [r3, #12]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	2b00      	cmp	r3, #0
 8005020:	d121      	bne.n	8005066 <pbuf_realloc+0xca>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	895b      	ldrh	r3, [r3, #10]
 8005026:	897a      	ldrh	r2, [r7, #10]
 8005028:	429a      	cmp	r2, r3
 800502a:	d01c      	beq.n	8005066 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	7b5b      	ldrb	r3, [r3, #13]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d116      	bne.n	8005066 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	b29a      	uxth	r2, r3
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	4413      	add	r3, r2
 8005046:	b29b      	uxth	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff f864 	bl	8004118 <mem_trim>
 8005050:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <pbuf_realloc+0xca>
 8005058:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <pbuf_realloc+0xfc>)
 800505a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800505e:	4912      	ldr	r1, [pc, #72]	; (80050a8 <pbuf_realloc+0x10c>)
 8005060:	480f      	ldr	r0, [pc, #60]	; (80050a0 <pbuf_realloc+0x104>)
 8005062:	f008 ff2b 	bl	800debc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	897a      	ldrh	r2, [r7, #10]
 800506a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	895a      	ldrh	r2, [r3, #10]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f911 	bl	80052a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	e000      	b.n	8005090 <pbuf_realloc+0xf4>
    return;
 800508e:	bf00      	nop

}
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	0800f8f0 	.word	0x0800f8f0
 800509c:	0800fa08 	.word	0x0800fa08
 80050a0:	0800f950 	.word	0x0800f950
 80050a4:	0800fa20 	.word	0x0800fa20
 80050a8:	0800fa38 	.word	0x0800fa38

080050ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <pbuf_add_header_impl+0x22>
 80050c0:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <pbuf_add_header_impl+0xc4>)
 80050c2:	f240 12df 	movw	r2, #479	; 0x1df
 80050c6:	492b      	ldr	r1, [pc, #172]	; (8005174 <pbuf_add_header_impl+0xc8>)
 80050c8:	482b      	ldr	r0, [pc, #172]	; (8005178 <pbuf_add_header_impl+0xcc>)
 80050ca:	f008 fef7 	bl	800debc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <pbuf_add_header_impl+0x30>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050da:	d301      	bcc.n	80050e0 <pbuf_add_header_impl+0x34>
    return 1;
 80050dc:	2301      	movs	r3, #1
 80050de:	e043      	b.n	8005168 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <pbuf_add_header_impl+0x3e>
    return 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e03e      	b.n	8005168 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	891a      	ldrh	r2, [r3, #8]
 80050f2:	8a7b      	ldrh	r3, [r7, #18]
 80050f4:	4413      	add	r3, r2
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8a7a      	ldrh	r2, [r7, #18]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d901      	bls.n	8005102 <pbuf_add_header_impl+0x56>
    return 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	e032      	b.n	8005168 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	7b1b      	ldrb	r3, [r3, #12]
 8005106:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005108:	8a3b      	ldrh	r3, [r7, #16]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00c      	beq.n	800512c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	425b      	negs	r3, r3
 800511a:	4413      	add	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3310      	adds	r3, #16
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	429a      	cmp	r2, r3
 8005126:	d20d      	bcs.n	8005144 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005128:	2301      	movs	r3, #1
 800512a:	e01d      	b.n	8005168 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	425b      	negs	r3, r3
 800513a:	4413      	add	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e001      	b.n	8005144 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005140:	2301      	movs	r3, #1
 8005142:	e011      	b.n	8005168 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	895a      	ldrh	r2, [r3, #10]
 800514e:	8a7b      	ldrh	r3, [r7, #18]
 8005150:	4413      	add	r3, r2
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	891a      	ldrh	r2, [r3, #8]
 800515c:	8a7b      	ldrh	r3, [r7, #18]
 800515e:	4413      	add	r3, r2
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	811a      	strh	r2, [r3, #8]


  return 0;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	0800f8f0 	.word	0x0800f8f0
 8005174:	0800fa54 	.word	0x0800fa54
 8005178:	0800f950 	.word	0x0800f950

0800517c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005186:	2200      	movs	r2, #0
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff ff8e 	bl	80050ac <pbuf_add_header_impl>
 8005190:	4603      	mov	r3, r0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <pbuf_remove_header+0x1e>
 80051ac:	4b20      	ldr	r3, [pc, #128]	; (8005230 <pbuf_remove_header+0x94>)
 80051ae:	f240 224b 	movw	r2, #587	; 0x24b
 80051b2:	4920      	ldr	r1, [pc, #128]	; (8005234 <pbuf_remove_header+0x98>)
 80051b4:	4820      	ldr	r0, [pc, #128]	; (8005238 <pbuf_remove_header+0x9c>)
 80051b6:	f008 fe81 	bl	800debc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <pbuf_remove_header+0x2c>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d301      	bcc.n	80051cc <pbuf_remove_header+0x30>
    return 1;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e02c      	b.n	8005226 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <pbuf_remove_header+0x3a>
    return 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e027      	b.n	8005226 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	895b      	ldrh	r3, [r3, #10]
 80051de:	89fa      	ldrh	r2, [r7, #14]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d908      	bls.n	80051f6 <pbuf_remove_header+0x5a>
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <pbuf_remove_header+0x94>)
 80051e6:	f240 2255 	movw	r2, #597	; 0x255
 80051ea:	4914      	ldr	r1, [pc, #80]	; (800523c <pbuf_remove_header+0xa0>)
 80051ec:	4812      	ldr	r0, [pc, #72]	; (8005238 <pbuf_remove_header+0x9c>)
 80051ee:	f008 fe65 	bl	800debc <iprintf>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e017      	b.n	8005226 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	441a      	add	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	895a      	ldrh	r2, [r3, #10]
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	891a      	ldrh	r2, [r3, #8]
 800521a:	89fb      	ldrh	r3, [r7, #14]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	b29a      	uxth	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	0800f8f0 	.word	0x0800f8f0
 8005234:	0800fa54 	.word	0x0800fa54
 8005238:	0800f950 	.word	0x0800f950
 800523c:	0800fa60 	.word	0x0800fa60

08005240 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	807b      	strh	r3, [r7, #2]
 800524c:	4613      	mov	r3, r2
 800524e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005250:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005254:	2b00      	cmp	r3, #0
 8005256:	da08      	bge.n	800526a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800525c:	425b      	negs	r3, r3
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ff9b 	bl	800519c <pbuf_remove_header>
 8005266:	4603      	mov	r3, r0
 8005268:	e007      	b.n	800527a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800526a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800526e:	787a      	ldrb	r2, [r7, #1]
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ff1a 	bl	80050ac <pbuf_add_header_impl>
 8005278:	4603      	mov	r3, r0
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800528e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005292:	2201      	movs	r2, #1
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff ffd2 	bl	8005240 <pbuf_header_impl>
 800529c:	4603      	mov	r3, r0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <pbuf_free+0x22>
 80052bc:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <pbuf_free+0xf8>)
 80052be:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80052c2:	4938      	ldr	r1, [pc, #224]	; (80053a4 <pbuf_free+0xfc>)
 80052c4:	4838      	ldr	r0, [pc, #224]	; (80053a8 <pbuf_free+0x100>)
 80052c6:	f008 fdf9 	bl	800debc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e063      	b.n	8005396 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80052d2:	e05c      	b.n	800538e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	7b9b      	ldrb	r3, [r3, #14]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <pbuf_free+0x42>
 80052dc:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <pbuf_free+0xf8>)
 80052de:	f240 22f1 	movw	r2, #753	; 0x2f1
 80052e2:	4932      	ldr	r1, [pc, #200]	; (80053ac <pbuf_free+0x104>)
 80052e4:	4830      	ldr	r0, [pc, #192]	; (80053a8 <pbuf_free+0x100>)
 80052e6:	f008 fde9 	bl	800debc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	7b9b      	ldrb	r3, [r3, #14]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	739a      	strb	r2, [r3, #14]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7b9b      	ldrb	r3, [r3, #14]
 80052fa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80052fc:	7dbb      	ldrb	r3, [r7, #22]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d143      	bne.n	800538a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	7b1b      	ldrb	r3, [r3, #12]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7b5b      	ldrb	r3, [r3, #13]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d011      	beq.n	8005342 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <pbuf_free+0x90>
 800532a:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <pbuf_free+0xf8>)
 800532c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005330:	491f      	ldr	r1, [pc, #124]	; (80053b0 <pbuf_free+0x108>)
 8005332:	481d      	ldr	r0, [pc, #116]	; (80053a8 <pbuf_free+0x100>)
 8005334:	f008 fdc2 	bl	800debc <iprintf>
        pc->custom_free_function(p);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
 8005340:	e01d      	b.n	800537e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d104      	bne.n	8005352 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	2008      	movs	r0, #8
 800534c:	f7ff f99a 	bl	8004684 <memp_free>
 8005350:	e015      	b.n	800537e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d104      	bne.n	8005362 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	2007      	movs	r0, #7
 800535c:	f7ff f992 	bl	8004684 <memp_free>
 8005360:	e00d      	b.n	800537e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <pbuf_free+0xc8>
          mem_free(p);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fe fe6b 	bl	8004044 <mem_free>
 800536e:	e006      	b.n	800537e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <pbuf_free+0xf8>)
 8005372:	f240 320f 	movw	r2, #783	; 0x30f
 8005376:	490f      	ldr	r1, [pc, #60]	; (80053b4 <pbuf_free+0x10c>)
 8005378:	480b      	ldr	r0, [pc, #44]	; (80053a8 <pbuf_free+0x100>)
 800537a:	f008 fd9f 	bl	800debc <iprintf>
        }
      }
      count++;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	3301      	adds	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	e001      	b.n	800538e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d19f      	bne.n	80052d4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	0800f8f0 	.word	0x0800f8f0
 80053a4:	0800fa54 	.word	0x0800fa54
 80053a8:	0800f950 	.word	0x0800f950
 80053ac:	0800fa80 	.word	0x0800fa80
 80053b0:	0800fa98 	.word	0x0800fa98
 80053b4:	0800fabc 	.word	0x0800fabc

080053b8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80053c4:	e005      	b.n	80053d2 <pbuf_clen+0x1a>
    ++len;
 80053c6:	89fb      	ldrh	r3, [r7, #14]
 80053c8:	3301      	adds	r3, #1
 80053ca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f6      	bne.n	80053c6 <pbuf_clen+0xe>
  }
  return len;
 80053d8:	89fb      	ldrh	r3, [r7, #14]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d010      	beq.n	8005418 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	7b9b      	ldrb	r3, [r3, #14]
 80053fa:	3301      	adds	r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	7b9b      	ldrb	r3, [r3, #14]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <pbuf_ref+0x30>
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <pbuf_ref+0x38>)
 800540c:	f240 3242 	movw	r2, #834	; 0x342
 8005410:	4904      	ldr	r1, [pc, #16]	; (8005424 <pbuf_ref+0x3c>)
 8005412:	4805      	ldr	r0, [pc, #20]	; (8005428 <pbuf_ref+0x40>)
 8005414:	f008 fd52 	bl	800debc <iprintf>
  }
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	0800f8f0 	.word	0x0800f8f0
 8005424:	0800fad0 	.word	0x0800fad0
 8005428:	0800f950 	.word	0x0800f950

0800542c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <pbuf_cat+0x16>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d107      	bne.n	8005452 <pbuf_cat+0x26>
 8005442:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <pbuf_cat+0x98>)
 8005444:	f240 3259 	movw	r2, #857	; 0x359
 8005448:	491f      	ldr	r1, [pc, #124]	; (80054c8 <pbuf_cat+0x9c>)
 800544a:	4820      	ldr	r0, [pc, #128]	; (80054cc <pbuf_cat+0xa0>)
 800544c:	f008 fd36 	bl	800debc <iprintf>
 8005450:	e034      	b.n	80054bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e00a      	b.n	800546e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	891a      	ldrh	r2, [r3, #8]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	891b      	ldrh	r3, [r3, #8]
 8005460:	4413      	add	r3, r2
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	891a      	ldrh	r2, [r3, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	895b      	ldrh	r3, [r3, #10]
 800547e:	429a      	cmp	r2, r3
 8005480:	d006      	beq.n	8005490 <pbuf_cat+0x64>
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <pbuf_cat+0x98>)
 8005484:	f240 3262 	movw	r2, #866	; 0x362
 8005488:	4911      	ldr	r1, [pc, #68]	; (80054d0 <pbuf_cat+0xa4>)
 800548a:	4810      	ldr	r0, [pc, #64]	; (80054cc <pbuf_cat+0xa0>)
 800548c:	f008 fd16 	bl	800debc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d006      	beq.n	80054a6 <pbuf_cat+0x7a>
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <pbuf_cat+0x98>)
 800549a:	f240 3263 	movw	r2, #867	; 0x363
 800549e:	490d      	ldr	r1, [pc, #52]	; (80054d4 <pbuf_cat+0xa8>)
 80054a0:	480a      	ldr	r0, [pc, #40]	; (80054cc <pbuf_cat+0xa0>)
 80054a2:	f008 fd0b 	bl	800debc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	891a      	ldrh	r2, [r3, #8]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	891b      	ldrh	r3, [r3, #8]
 80054ae:	4413      	add	r3, r2
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	0800f8f0 	.word	0x0800f8f0
 80054c8:	0800fae4 	.word	0x0800fae4
 80054cc:	0800f950 	.word	0x0800f950
 80054d0:	0800fb1c 	.word	0x0800fb1c
 80054d4:	0800fb4c 	.word	0x0800fb4c

080054d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ffa1 	bl	800542c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80054ea:	6838      	ldr	r0, [r7, #0]
 80054ec:	f7ff ff7c 	bl	80053e8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <pbuf_copy+0x2a>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <pbuf_copy+0x2a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	891a      	ldrh	r2, [r3, #8]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	891b      	ldrh	r3, [r3, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	d209      	bcs.n	8005536 <pbuf_copy+0x3e>
 8005522:	4b57      	ldr	r3, [pc, #348]	; (8005680 <pbuf_copy+0x188>)
 8005524:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005528:	4956      	ldr	r1, [pc, #344]	; (8005684 <pbuf_copy+0x18c>)
 800552a:	4857      	ldr	r0, [pc, #348]	; (8005688 <pbuf_copy+0x190>)
 800552c:	f008 fcc6 	bl	800debc <iprintf>
 8005530:	f06f 030f 	mvn.w	r3, #15
 8005534:	e09f      	b.n	8005676 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	895b      	ldrh	r3, [r3, #10]
 800553a:	461a      	mov	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	895b      	ldrh	r3, [r3, #10]
 8005544:	4619      	mov	r1, r3
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1acb      	subs	r3, r1, r3
 800554a:	429a      	cmp	r2, r3
 800554c:	d306      	bcc.n	800555c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	895b      	ldrh	r3, [r3, #10]
 8005552:	461a      	mov	r2, r3
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	e005      	b.n	8005568 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	895b      	ldrh	r3, [r3, #10]
 8005560:	461a      	mov	r2, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	18d0      	adds	r0, r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4619      	mov	r1, r3
 800557c:	f008 fc6e 	bl	800de5c <memcpy>
    offset_to += len;
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	895b      	ldrh	r3, [r3, #10]
 8005594:	461a      	mov	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4293      	cmp	r3, r2
 800559a:	d906      	bls.n	80055aa <pbuf_copy+0xb2>
 800559c:	4b38      	ldr	r3, [pc, #224]	; (8005680 <pbuf_copy+0x188>)
 800559e:	f240 32d9 	movw	r2, #985	; 0x3d9
 80055a2:	493a      	ldr	r1, [pc, #232]	; (800568c <pbuf_copy+0x194>)
 80055a4:	4838      	ldr	r0, [pc, #224]	; (8005688 <pbuf_copy+0x190>)
 80055a6:	f008 fc89 	bl	800debc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	895b      	ldrh	r3, [r3, #10]
 80055ae:	461a      	mov	r2, r3
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d906      	bls.n	80055c4 <pbuf_copy+0xcc>
 80055b6:	4b32      	ldr	r3, [pc, #200]	; (8005680 <pbuf_copy+0x188>)
 80055b8:	f240 32da 	movw	r2, #986	; 0x3da
 80055bc:	4934      	ldr	r1, [pc, #208]	; (8005690 <pbuf_copy+0x198>)
 80055be:	4832      	ldr	r0, [pc, #200]	; (8005688 <pbuf_copy+0x190>)
 80055c0:	f008 fc7c 	bl	800debc <iprintf>
    if (offset_from >= p_from->len) {
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	895b      	ldrh	r3, [r3, #10]
 80055c8:	461a      	mov	r2, r3
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d304      	bcc.n	80055da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	895b      	ldrh	r3, [r3, #10]
 80055de:	461a      	mov	r2, r3
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d114      	bne.n	8005610 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10c      	bne.n	8005610 <pbuf_copy+0x118>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d009      	beq.n	8005610 <pbuf_copy+0x118>
 80055fc:	4b20      	ldr	r3, [pc, #128]	; (8005680 <pbuf_copy+0x188>)
 80055fe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005602:	4924      	ldr	r1, [pc, #144]	; (8005694 <pbuf_copy+0x19c>)
 8005604:	4820      	ldr	r0, [pc, #128]	; (8005688 <pbuf_copy+0x190>)
 8005606:	f008 fc59 	bl	800debc <iprintf>
 800560a:	f06f 030f 	mvn.w	r3, #15
 800560e:	e032      	b.n	8005676 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d013      	beq.n	800563e <pbuf_copy+0x146>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	895a      	ldrh	r2, [r3, #10]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	891b      	ldrh	r3, [r3, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	d10d      	bne.n	800563e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <pbuf_copy+0x146>
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <pbuf_copy+0x188>)
 800562c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005630:	4919      	ldr	r1, [pc, #100]	; (8005698 <pbuf_copy+0x1a0>)
 8005632:	4815      	ldr	r0, [pc, #84]	; (8005688 <pbuf_copy+0x190>)
 8005634:	f008 fc42 	bl	800debc <iprintf>
 8005638:	f06f 0305 	mvn.w	r3, #5
 800563c:	e01b      	b.n	8005676 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d013      	beq.n	800566c <pbuf_copy+0x174>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	895a      	ldrh	r2, [r3, #10]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	891b      	ldrh	r3, [r3, #8]
 800564c:	429a      	cmp	r2, r3
 800564e:	d10d      	bne.n	800566c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <pbuf_copy+0x174>
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <pbuf_copy+0x188>)
 800565a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800565e:	490e      	ldr	r1, [pc, #56]	; (8005698 <pbuf_copy+0x1a0>)
 8005660:	4809      	ldr	r0, [pc, #36]	; (8005688 <pbuf_copy+0x190>)
 8005662:	f008 fc2b 	bl	800debc <iprintf>
 8005666:	f06f 0305 	mvn.w	r3, #5
 800566a:	e004      	b.n	8005676 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f47f af61 	bne.w	8005536 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	0800f8f0 	.word	0x0800f8f0
 8005684:	0800fb98 	.word	0x0800fb98
 8005688:	0800f950 	.word	0x0800f950
 800568c:	0800fbc8 	.word	0x0800fbc8
 8005690:	0800fbe0 	.word	0x0800fbe0
 8005694:	0800fbfc 	.word	0x0800fbfc
 8005698:	0800fc0c 	.word	0x0800fc0c

0800569c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4611      	mov	r1, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	460b      	mov	r3, r1
 80056ac:	80fb      	strh	r3, [r7, #6]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <pbuf_copy_partial+0x36>
 80056c0:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <pbuf_copy_partial+0xd4>)
 80056c2:	f240 420a 	movw	r2, #1034	; 0x40a
 80056c6:	492b      	ldr	r1, [pc, #172]	; (8005774 <pbuf_copy_partial+0xd8>)
 80056c8:	482b      	ldr	r0, [pc, #172]	; (8005778 <pbuf_copy_partial+0xdc>)
 80056ca:	f008 fbf7 	bl	800debc <iprintf>
 80056ce:	2300      	movs	r3, #0
 80056d0:	e04a      	b.n	8005768 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <pbuf_copy_partial+0x4e>
 80056d8:	4b25      	ldr	r3, [pc, #148]	; (8005770 <pbuf_copy_partial+0xd4>)
 80056da:	f240 420b 	movw	r2, #1035	; 0x40b
 80056de:	4927      	ldr	r1, [pc, #156]	; (800577c <pbuf_copy_partial+0xe0>)
 80056e0:	4825      	ldr	r0, [pc, #148]	; (8005778 <pbuf_copy_partial+0xdc>)
 80056e2:	f008 fbeb 	bl	800debc <iprintf>
 80056e6:	2300      	movs	r3, #0
 80056e8:	e03e      	b.n	8005768 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e034      	b.n	800575a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80056f0:	88bb      	ldrh	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <pbuf_copy_partial+0x70>
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	895b      	ldrh	r3, [r3, #10]
 80056fa:	88ba      	ldrh	r2, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d305      	bcc.n	800570c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	895b      	ldrh	r3, [r3, #10]
 8005704:	88ba      	ldrh	r2, [r7, #4]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	80bb      	strh	r3, [r7, #4]
 800570a:	e023      	b.n	8005754 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	895a      	ldrh	r2, [r3, #10]
 8005710:	88bb      	ldrh	r3, [r7, #4]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005716:	8b3a      	ldrh	r2, [r7, #24]
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	429a      	cmp	r2, r3
 800571c:	d901      	bls.n	8005722 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005722:	8b7b      	ldrh	r3, [r7, #26]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	18d0      	adds	r0, r2, r3
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	88bb      	ldrh	r3, [r7, #4]
 800572e:	4413      	add	r3, r2
 8005730:	8b3a      	ldrh	r2, [r7, #24]
 8005732:	4619      	mov	r1, r3
 8005734:	f008 fb92 	bl	800de5c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005738:	8afa      	ldrh	r2, [r7, #22]
 800573a:	8b3b      	ldrh	r3, [r7, #24]
 800573c:	4413      	add	r3, r2
 800573e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005740:	8b7a      	ldrh	r2, [r7, #26]
 8005742:	8b3b      	ldrh	r3, [r7, #24]
 8005744:	4413      	add	r3, r2
 8005746:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005748:	88fa      	ldrh	r2, [r7, #6]
 800574a:	8b3b      	ldrh	r3, [r7, #24]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <pbuf_copy_partial+0xca>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1c4      	bne.n	80056f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005766:	8afb      	ldrh	r3, [r7, #22]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	0800f8f0 	.word	0x0800f8f0
 8005774:	0800fc38 	.word	0x0800fc38
 8005778:	0800f950 	.word	0x0800f950
 800577c:	0800fc58 	.word	0x0800fc58

08005780 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <pbuf_take+0x30>
 800579c:	4b3a      	ldr	r3, [pc, #232]	; (8005888 <pbuf_take+0x108>)
 800579e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80057a2:	493a      	ldr	r1, [pc, #232]	; (800588c <pbuf_take+0x10c>)
 80057a4:	483a      	ldr	r0, [pc, #232]	; (8005890 <pbuf_take+0x110>)
 80057a6:	f008 fb89 	bl	800debc <iprintf>
 80057aa:	f06f 030f 	mvn.w	r3, #15
 80057ae:	e067      	b.n	8005880 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <pbuf_take+0x4a>
 80057b6:	4b34      	ldr	r3, [pc, #208]	; (8005888 <pbuf_take+0x108>)
 80057b8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80057bc:	4935      	ldr	r1, [pc, #212]	; (8005894 <pbuf_take+0x114>)
 80057be:	4834      	ldr	r0, [pc, #208]	; (8005890 <pbuf_take+0x110>)
 80057c0:	f008 fb7c 	bl	800debc <iprintf>
 80057c4:	f06f 030f 	mvn.w	r3, #15
 80057c8:	e05a      	b.n	8005880 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	891b      	ldrh	r3, [r3, #8]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d909      	bls.n	80057e8 <pbuf_take+0x68>
 80057d4:	4b2c      	ldr	r3, [pc, #176]	; (8005888 <pbuf_take+0x108>)
 80057d6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80057da:	492f      	ldr	r1, [pc, #188]	; (8005898 <pbuf_take+0x118>)
 80057dc:	482c      	ldr	r0, [pc, #176]	; (8005890 <pbuf_take+0x110>)
 80057de:	f008 fb6d 	bl	800debc <iprintf>
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057e6:	e04b      	b.n	8005880 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <pbuf_take+0x7e>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <pbuf_take+0x7e>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	891b      	ldrh	r3, [r3, #8]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d902      	bls.n	8005804 <pbuf_take+0x84>
    return ERR_ARG;
 80057fe:	f06f 030f 	mvn.w	r3, #15
 8005802:	e03d      	b.n	8005880 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	e028      	b.n	800585c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <pbuf_take+0x9e>
 8005810:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <pbuf_take+0x108>)
 8005812:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005816:	4921      	ldr	r1, [pc, #132]	; (800589c <pbuf_take+0x11c>)
 8005818:	481d      	ldr	r0, [pc, #116]	; (8005890 <pbuf_take+0x110>)
 800581a:	f008 fb4f 	bl	800debc <iprintf>
    buf_copy_len = total_copy_len;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	895b      	ldrh	r3, [r3, #10]
 8005826:	461a      	mov	r2, r3
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	4293      	cmp	r3, r2
 800582c:	d902      	bls.n	8005834 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	895b      	ldrh	r3, [r3, #10]
 8005832:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	6858      	ldr	r0, [r3, #4]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4413      	add	r3, r2
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4619      	mov	r1, r3
 8005842:	f008 fb0b 	bl	800de5c <memcpy>
    total_copy_len -= buf_copy_len;
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	4413      	add	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1d3      	bne.n	800580a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <pbuf_take+0xf0>
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d006      	beq.n	800587e <pbuf_take+0xfe>
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <pbuf_take+0x108>)
 8005872:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005876:	490a      	ldr	r1, [pc, #40]	; (80058a0 <pbuf_take+0x120>)
 8005878:	4805      	ldr	r0, [pc, #20]	; (8005890 <pbuf_take+0x110>)
 800587a:	f008 fb1f 	bl	800debc <iprintf>
  return ERR_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	0800f8f0 	.word	0x0800f8f0
 800588c:	0800fcc8 	.word	0x0800fcc8
 8005890:	0800f950 	.word	0x0800f950
 8005894:	0800fce0 	.word	0x0800fce0
 8005898:	0800fcfc 	.word	0x0800fcfc
 800589c:	0800fd1c 	.word	0x0800fd1c
 80058a0:	0800fd34 	.word	0x0800fd34

080058a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	603a      	str	r2, [r7, #0]
 80058ae:	71fb      	strb	r3, [r7, #7]
 80058b0:	460b      	mov	r3, r1
 80058b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	8919      	ldrh	r1, [r3, #8]
 80058b8:	88ba      	ldrh	r2, [r7, #4]
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fa0f 	bl	8004ce0 <pbuf_alloc>
 80058c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <pbuf_clone+0x2a>
    return NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e011      	b.n	80058f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff fe11 	bl	80054f8 <pbuf_copy>
 80058d6:	4603      	mov	r3, r0
 80058d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80058da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d006      	beq.n	80058f0 <pbuf_clone+0x4c>
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <pbuf_clone+0x58>)
 80058e4:	f240 5224 	movw	r2, #1316	; 0x524
 80058e8:	4905      	ldr	r1, [pc, #20]	; (8005900 <pbuf_clone+0x5c>)
 80058ea:	4806      	ldr	r0, [pc, #24]	; (8005904 <pbuf_clone+0x60>)
 80058ec:	f008 fae6 	bl	800debc <iprintf>
  return q;
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	0800f8f0 	.word	0x0800f8f0
 8005900:	0800fd64 	.word	0x0800fd64
 8005904:	0800f950 	.word	0x0800f950

08005908 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800590c:	f008 faee 	bl	800deec <rand>
 8005910:	4603      	mov	r3, r0
 8005912:	b29b      	uxth	r3, r3
 8005914:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005918:	b29b      	uxth	r3, r3
 800591a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800591e:	b29a      	uxth	r2, r3
 8005920:	4b01      	ldr	r3, [pc, #4]	; (8005928 <tcp_init+0x20>)
 8005922:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2000000a 	.word	0x2000000a

0800592c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	7d1b      	ldrb	r3, [r3, #20]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d105      	bne.n	8005948 <tcp_free+0x1c>
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <tcp_free+0x2c>)
 800593e:	22d4      	movs	r2, #212	; 0xd4
 8005940:	4906      	ldr	r1, [pc, #24]	; (800595c <tcp_free+0x30>)
 8005942:	4807      	ldr	r0, [pc, #28]	; (8005960 <tcp_free+0x34>)
 8005944:	f008 faba 	bl	800debc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	2001      	movs	r0, #1
 800594c:	f7fe fe9a 	bl	8004684 <memp_free>
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	0800fdf0 	.word	0x0800fdf0
 800595c:	0800fe20 	.word	0x0800fe20
 8005960:	0800fe34 	.word	0x0800fe34

08005964 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	7d1b      	ldrb	r3, [r3, #20]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <tcp_free_listen+0x1c>
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <tcp_free_listen+0x2c>)
 8005976:	22df      	movs	r2, #223	; 0xdf
 8005978:	4906      	ldr	r1, [pc, #24]	; (8005994 <tcp_free_listen+0x30>)
 800597a:	4807      	ldr	r0, [pc, #28]	; (8005998 <tcp_free_listen+0x34>)
 800597c:	f008 fa9e 	bl	800debc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	2002      	movs	r0, #2
 8005984:	f7fe fe7e 	bl	8004684 <memp_free>
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	0800fdf0 	.word	0x0800fdf0
 8005994:	0800fe5c 	.word	0x0800fe5c
 8005998:	0800fe34 	.word	0x0800fe34

0800599c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80059a0:	f000 fea2 	bl	80066e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <tcp_tmr+0x28>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <tcp_tmr+0x28>)
 80059ae:	701a      	strb	r2, [r3, #0]
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <tcp_tmr+0x28>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80059bc:	f000 fb54 	bl	8006068 <tcp_slowtmr>
  }
}
 80059c0:	bf00      	nop
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20006809 	.word	0x20006809

080059c8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <tcp_remove_listener+0x1c>
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <tcp_remove_listener+0x48>)
 80059da:	22ff      	movs	r2, #255	; 0xff
 80059dc:	490d      	ldr	r1, [pc, #52]	; (8005a14 <tcp_remove_listener+0x4c>)
 80059de:	480e      	ldr	r0, [pc, #56]	; (8005a18 <tcp_remove_listener+0x50>)
 80059e0:	f008 fa6c 	bl	800debc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e00a      	b.n	8005a00 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d102      	bne.n	80059fa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f1      	bne.n	80059ea <tcp_remove_listener+0x22>
    }
  }
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	0800fdf0 	.word	0x0800fdf0
 8005a14:	0800fe78 	.word	0x0800fe78
 8005a18:	0800fe34 	.word	0x0800fe34

08005a1c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <tcp_listen_closed+0x1c>
 8005a2a:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <tcp_listen_closed+0x60>)
 8005a2c:	f240 1211 	movw	r2, #273	; 0x111
 8005a30:	4913      	ldr	r1, [pc, #76]	; (8005a80 <tcp_listen_closed+0x64>)
 8005a32:	4814      	ldr	r0, [pc, #80]	; (8005a84 <tcp_listen_closed+0x68>)
 8005a34:	f008 fa42 	bl	800debc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7d1b      	ldrb	r3, [r3, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d006      	beq.n	8005a4e <tcp_listen_closed+0x32>
 8005a40:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <tcp_listen_closed+0x60>)
 8005a42:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005a46:	4910      	ldr	r1, [pc, #64]	; (8005a88 <tcp_listen_closed+0x6c>)
 8005a48:	480e      	ldr	r0, [pc, #56]	; (8005a84 <tcp_listen_closed+0x68>)
 8005a4a:	f008 fa37 	bl	800debc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005a4e:	2301      	movs	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e00b      	b.n	8005a6c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <tcp_listen_closed+0x70>)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff ffb1 	bl	80059c8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d9f0      	bls.n	8005a54 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	0800fdf0 	.word	0x0800fdf0
 8005a80:	0800fea0 	.word	0x0800fea0
 8005a84:	0800fe34 	.word	0x0800fe34
 8005a88:	0800feac 	.word	0x0800feac
 8005a8c:	08011dbc 	.word	0x08011dbc

08005a90 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005a90:	b5b0      	push	{r4, r5, r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af04      	add	r7, sp, #16
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <tcp_close_shutdown+0x20>
 8005aa2:	4b63      	ldr	r3, [pc, #396]	; (8005c30 <tcp_close_shutdown+0x1a0>)
 8005aa4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005aa8:	4962      	ldr	r1, [pc, #392]	; (8005c34 <tcp_close_shutdown+0x1a4>)
 8005aaa:	4863      	ldr	r0, [pc, #396]	; (8005c38 <tcp_close_shutdown+0x1a8>)
 8005aac:	f008 fa06 	bl	800debc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d066      	beq.n	8005b84 <tcp_close_shutdown+0xf4>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7d1b      	ldrb	r3, [r3, #20]
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d003      	beq.n	8005ac6 <tcp_close_shutdown+0x36>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	7d1b      	ldrb	r3, [r3, #20]
 8005ac2:	2b07      	cmp	r3, #7
 8005ac4:	d15e      	bne.n	8005b84 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <tcp_close_shutdown+0x48>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005ad6:	d055      	beq.n	8005b84 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8b5b      	ldrh	r3, [r3, #26]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <tcp_close_shutdown+0x62>
 8005ae4:	4b52      	ldr	r3, [pc, #328]	; (8005c30 <tcp_close_shutdown+0x1a0>)
 8005ae6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005aea:	4954      	ldr	r1, [pc, #336]	; (8005c3c <tcp_close_shutdown+0x1ac>)
 8005aec:	4852      	ldr	r0, [pc, #328]	; (8005c38 <tcp_close_shutdown+0x1a8>)
 8005aee:	f008 f9e5 	bl	800debc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005afa:	687d      	ldr	r5, [r7, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	8ad2      	ldrh	r2, [r2, #22]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	8b09      	ldrh	r1, [r1, #24]
 8005b08:	9102      	str	r1, [sp, #8]
 8005b0a:	9201      	str	r2, [sp, #4]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	462b      	mov	r3, r5
 8005b10:	4622      	mov	r2, r4
 8005b12:	4601      	mov	r1, r0
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f004 fe91 	bl	800a83c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 f8c6 	bl	8006cac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005b20:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <tcp_close_shutdown+0x1b0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d105      	bne.n	8005b36 <tcp_close_shutdown+0xa6>
 8005b2a:	4b45      	ldr	r3, [pc, #276]	; (8005c40 <tcp_close_shutdown+0x1b0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a43      	ldr	r2, [pc, #268]	; (8005c40 <tcp_close_shutdown+0x1b0>)
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	e013      	b.n	8005b5e <tcp_close_shutdown+0xce>
 8005b36:	4b42      	ldr	r3, [pc, #264]	; (8005c40 <tcp_close_shutdown+0x1b0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	e00c      	b.n	8005b58 <tcp_close_shutdown+0xc8>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d104      	bne.n	8005b52 <tcp_close_shutdown+0xc2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	e005      	b.n	8005b5e <tcp_close_shutdown+0xce>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1ef      	bne.n	8005b3e <tcp_close_shutdown+0xae>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	4b37      	ldr	r3, [pc, #220]	; (8005c44 <tcp_close_shutdown+0x1b4>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005b6a:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <tcp_close_shutdown+0x1b8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d102      	bne.n	8005b7a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005b74:	f003 fd5e 	bl	8009634 <tcp_trigger_input_pcb_close>
 8005b78:	e002      	b.n	8005b80 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff fed6 	bl	800592c <tcp_free>
      }
      return ERR_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e050      	b.n	8005c26 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	7d1b      	ldrb	r3, [r3, #20]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d03b      	beq.n	8005c04 <tcp_close_shutdown+0x174>
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	dc44      	bgt.n	8005c1a <tcp_close_shutdown+0x18a>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <tcp_close_shutdown+0x10a>
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d02a      	beq.n	8005bee <tcp_close_shutdown+0x15e>
 8005b98:	e03f      	b.n	8005c1a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	8adb      	ldrh	r3, [r3, #22]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d021      	beq.n	8005be6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ba2:	4b2a      	ldr	r3, [pc, #168]	; (8005c4c <tcp_close_shutdown+0x1bc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d105      	bne.n	8005bb8 <tcp_close_shutdown+0x128>
 8005bac:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <tcp_close_shutdown+0x1bc>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4a26      	ldr	r2, [pc, #152]	; (8005c4c <tcp_close_shutdown+0x1bc>)
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e013      	b.n	8005be0 <tcp_close_shutdown+0x150>
 8005bb8:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <tcp_close_shutdown+0x1bc>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	e00c      	b.n	8005bda <tcp_close_shutdown+0x14a>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d104      	bne.n	8005bd4 <tcp_close_shutdown+0x144>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	e005      	b.n	8005be0 <tcp_close_shutdown+0x150>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ef      	bne.n	8005bc0 <tcp_close_shutdown+0x130>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff fea0 	bl	800592c <tcp_free>
      break;
 8005bec:	e01a      	b.n	8005c24 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff ff14 	bl	8005a1c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4816      	ldr	r0, [pc, #88]	; (8005c50 <tcp_close_shutdown+0x1c0>)
 8005bf8:	f001 f8a8 	bl	8006d4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff feb1 	bl	8005964 <tcp_free_listen>
      break;
 8005c02:	e00f      	b.n	8005c24 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	480e      	ldr	r0, [pc, #56]	; (8005c40 <tcp_close_shutdown+0x1b0>)
 8005c08:	f001 f8a0 	bl	8006d4c <tcp_pcb_remove>
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <tcp_close_shutdown+0x1b4>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fe8a 	bl	800592c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005c18:	e004      	b.n	8005c24 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f81a 	bl	8005c54 <tcp_close_shutdown_fin>
 8005c20:	4603      	mov	r3, r0
 8005c22:	e000      	b.n	8005c26 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	0800fdf0 	.word	0x0800fdf0
 8005c34:	0800fec4 	.word	0x0800fec4
 8005c38:	0800fe34 	.word	0x0800fe34
 8005c3c:	0800fee4 	.word	0x0800fee4
 8005c40:	20006800 	.word	0x20006800
 8005c44:	20006808 	.word	0x20006808
 8005c48:	20006840 	.word	0x20006840
 8005c4c:	200067f8 	.word	0x200067f8
 8005c50:	200067fc 	.word	0x200067fc

08005c54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <tcp_close_shutdown_fin+0x1c>
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <tcp_close_shutdown_fin+0xc8>)
 8005c64:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005c68:	492d      	ldr	r1, [pc, #180]	; (8005d20 <tcp_close_shutdown_fin+0xcc>)
 8005c6a:	482e      	ldr	r0, [pc, #184]	; (8005d24 <tcp_close_shutdown_fin+0xd0>)
 8005c6c:	f008 f926 	bl	800debc <iprintf>

  switch (pcb->state) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7d1b      	ldrb	r3, [r3, #20]
 8005c74:	2b07      	cmp	r3, #7
 8005c76:	d020      	beq.n	8005cba <tcp_close_shutdown_fin+0x66>
 8005c78:	2b07      	cmp	r3, #7
 8005c7a:	dc2b      	bgt.n	8005cd4 <tcp_close_shutdown_fin+0x80>
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d002      	beq.n	8005c86 <tcp_close_shutdown_fin+0x32>
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d00d      	beq.n	8005ca0 <tcp_close_shutdown_fin+0x4c>
 8005c84:	e026      	b.n	8005cd4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f003 fee6 	bl	8009a58 <tcp_send_fin>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11f      	bne.n	8005cd8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2205      	movs	r2, #5
 8005c9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c9e:	e01b      	b.n	8005cd8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f003 fed9 	bl	8009a58 <tcp_send_fin>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d114      	bne.n	8005cdc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2205      	movs	r2, #5
 8005cb6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005cb8:	e010      	b.n	8005cdc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f003 fecc 	bl	8009a58 <tcp_send_fin>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2209      	movs	r2, #9
 8005cd0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005cd2:	e005      	b.n	8005ce0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e01c      	b.n	8005d12 <tcp_close_shutdown_fin+0xbe>
      break;
 8005cd8:	bf00      	nop
 8005cda:	e002      	b.n	8005ce2 <tcp_close_shutdown_fin+0x8e>
      break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <tcp_close_shutdown_fin+0x8e>
      break;
 8005ce0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d103      	bne.n	8005cf2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f003 fff2 	bl	8009cd4 <tcp_output>
 8005cf0:	e00d      	b.n	8005d0e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cfa:	d108      	bne.n	8005d0e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8b5b      	ldrh	r3, [r3, #26]
 8005d00:	f043 0308 	orr.w	r3, r3, #8
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e001      	b.n	8005d12 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	0800fdf0 	.word	0x0800fdf0
 8005d20:	0800fea0 	.word	0x0800fea0
 8005d24:	0800fe34 	.word	0x0800fe34

08005d28 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <tcp_close+0x22>
 8005d36:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <tcp_close+0x4c>)
 8005d38:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005d3c:	490e      	ldr	r1, [pc, #56]	; (8005d78 <tcp_close+0x50>)
 8005d3e:	480f      	ldr	r0, [pc, #60]	; (8005d7c <tcp_close+0x54>)
 8005d40:	f008 f8bc 	bl	800debc <iprintf>
 8005d44:	f06f 030f 	mvn.w	r3, #15
 8005d48:	e00f      	b.n	8005d6a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	7d1b      	ldrb	r3, [r3, #20]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d006      	beq.n	8005d60 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	8b5b      	ldrh	r3, [r3, #26]
 8005d56:	f043 0310 	orr.w	r3, r3, #16
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005d60:	2101      	movs	r1, #1
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fe94 	bl	8005a90 <tcp_close_shutdown>
 8005d68:	4603      	mov	r3, r0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	0800fdf0 	.word	0x0800fdf0
 8005d78:	0800ff00 	.word	0x0800ff00
 8005d7c:	0800fe34 	.word	0x0800fe34

08005d80 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08e      	sub	sp, #56	; 0x38
 8005d84:	af04      	add	r7, sp, #16
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d107      	bne.n	8005da0 <tcp_abandon+0x20>
 8005d90:	4b52      	ldr	r3, [pc, #328]	; (8005edc <tcp_abandon+0x15c>)
 8005d92:	f240 223d 	movw	r2, #573	; 0x23d
 8005d96:	4952      	ldr	r1, [pc, #328]	; (8005ee0 <tcp_abandon+0x160>)
 8005d98:	4852      	ldr	r0, [pc, #328]	; (8005ee4 <tcp_abandon+0x164>)
 8005d9a:	f008 f88f 	bl	800debc <iprintf>
 8005d9e:	e099      	b.n	8005ed4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	7d1b      	ldrb	r3, [r3, #20]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d106      	bne.n	8005db6 <tcp_abandon+0x36>
 8005da8:	4b4c      	ldr	r3, [pc, #304]	; (8005edc <tcp_abandon+0x15c>)
 8005daa:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005dae:	494e      	ldr	r1, [pc, #312]	; (8005ee8 <tcp_abandon+0x168>)
 8005db0:	484c      	ldr	r0, [pc, #304]	; (8005ee4 <tcp_abandon+0x164>)
 8005db2:	f008 f883 	bl	800debc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	7d1b      	ldrb	r3, [r3, #20]
 8005dba:	2b0a      	cmp	r3, #10
 8005dbc:	d107      	bne.n	8005dce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	484a      	ldr	r0, [pc, #296]	; (8005eec <tcp_abandon+0x16c>)
 8005dc2:	f000 ffc3 	bl	8006d4c <tcp_pcb_remove>
    tcp_free(pcb);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fdb0 	bl	800592c <tcp_free>
 8005dcc:	e082      	b.n	8005ed4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dda:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	7d1b      	ldrb	r3, [r3, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d126      	bne.n	8005e46 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8adb      	ldrh	r3, [r3, #22]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d02e      	beq.n	8005e5e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005e00:	4b3b      	ldr	r3, [pc, #236]	; (8005ef0 <tcp_abandon+0x170>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d105      	bne.n	8005e16 <tcp_abandon+0x96>
 8005e0a:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <tcp_abandon+0x170>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4a37      	ldr	r2, [pc, #220]	; (8005ef0 <tcp_abandon+0x170>)
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e013      	b.n	8005e3e <tcp_abandon+0xbe>
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <tcp_abandon+0x170>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	e00c      	b.n	8005e38 <tcp_abandon+0xb8>
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d104      	bne.n	8005e32 <tcp_abandon+0xb2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	60da      	str	r2, [r3, #12]
 8005e30:	e005      	b.n	8005e3e <tcp_abandon+0xbe>
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1ef      	bne.n	8005e1e <tcp_abandon+0x9e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	60da      	str	r2, [r3, #12]
 8005e44:	e00b      	b.n	8005e5e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8adb      	ldrh	r3, [r3, #22]
 8005e4e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4828      	ldr	r0, [pc, #160]	; (8005ef4 <tcp_abandon+0x174>)
 8005e54:	f000 ff7a 	bl	8006d4c <tcp_pcb_remove>
 8005e58:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <tcp_abandon+0x178>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fd1c 	bl	80068a8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fd13 	bl	80068a8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fd0a 	bl	80068a8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	8b12      	ldrh	r2, [r2, #24]
 8005ea4:	9202      	str	r2, [sp, #8]
 8005ea6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005ea8:	9201      	str	r2, [sp, #4]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	460b      	mov	r3, r1
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	69b9      	ldr	r1, [r7, #24]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f004 fcc2 	bl	800a83c <tcp_rst>
    }
    last_state = pcb->state;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7d1b      	ldrb	r3, [r3, #20]
 8005ebc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fd34 	bl	800592c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <tcp_abandon+0x154>
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f06f 010c 	mvn.w	r1, #12
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	4798      	blx	r3
  }
}
 8005ed4:	3728      	adds	r7, #40	; 0x28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	0800fdf0 	.word	0x0800fdf0
 8005ee0:	0800ff34 	.word	0x0800ff34
 8005ee4:	0800fe34 	.word	0x0800fe34
 8005ee8:	0800ff50 	.word	0x0800ff50
 8005eec:	20006804 	.word	0x20006804
 8005ef0:	200067f8 	.word	0x200067f8
 8005ef4:	20006800 	.word	0x20006800
 8005ef8:	20006808 	.word	0x20006808

08005efc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005f04:	2101      	movs	r1, #1
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff ff3a 	bl	8005d80 <tcp_abandon>
}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <tcp_update_rcv_ann_wnd+0x1c>
 8005f22:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <tcp_update_rcv_ann_wnd+0xa4>)
 8005f24:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005f28:	4924      	ldr	r1, [pc, #144]	; (8005fbc <tcp_update_rcv_ann_wnd+0xa8>)
 8005f2a:	4825      	ldr	r0, [pc, #148]	; (8005fc0 <tcp_update_rcv_ann_wnd+0xac>)
 8005f2c:	f007 ffc6 	bl	800debc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005f38:	4413      	add	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005f44:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005f48:	bf28      	it	cs
 8005f4a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	4413      	add	r3, r2
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db08      	blt.n	8005f6c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	e020      	b.n	8005fae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dd03      	ble.n	8005f82 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f80:	e014      	b.n	8005fac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d306      	bcc.n	8005fa4 <tcp_update_rcv_ann_wnd+0x90>
 8005f96:	4b08      	ldr	r3, [pc, #32]	; (8005fb8 <tcp_update_rcv_ann_wnd+0xa4>)
 8005f98:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005f9c:	4909      	ldr	r1, [pc, #36]	; (8005fc4 <tcp_update_rcv_ann_wnd+0xb0>)
 8005f9e:	4808      	ldr	r0, [pc, #32]	; (8005fc0 <tcp_update_rcv_ann_wnd+0xac>)
 8005fa0:	f007 ff8c 	bl	800debc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005fac:	2300      	movs	r3, #0
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	0800fdf0 	.word	0x0800fdf0
 8005fbc:	0801004c 	.word	0x0801004c
 8005fc0:	0800fe34 	.word	0x0800fe34
 8005fc4:	08010070 	.word	0x08010070

08005fc8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d107      	bne.n	8005fea <tcp_recved+0x22>
 8005fda:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <tcp_recved+0x90>)
 8005fdc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005fe0:	491e      	ldr	r1, [pc, #120]	; (800605c <tcp_recved+0x94>)
 8005fe2:	481f      	ldr	r0, [pc, #124]	; (8006060 <tcp_recved+0x98>)
 8005fe4:	f007 ff6a 	bl	800debc <iprintf>
 8005fe8:	e032      	b.n	8006050 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	7d1b      	ldrb	r3, [r3, #20]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d106      	bne.n	8006000 <tcp_recved+0x38>
 8005ff2:	4b19      	ldr	r3, [pc, #100]	; (8006058 <tcp_recved+0x90>)
 8005ff4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005ff8:	491a      	ldr	r1, [pc, #104]	; (8006064 <tcp_recved+0x9c>)
 8005ffa:	4819      	ldr	r0, [pc, #100]	; (8006060 <tcp_recved+0x98>)
 8005ffc:	f007 ff5e 	bl	800debc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	4413      	add	r3, r2
 8006008:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800600a:	89fb      	ldrh	r3, [r7, #14]
 800600c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006010:	d804      	bhi.n	800601c <tcp_recved+0x54>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	89fa      	ldrh	r2, [r7, #14]
 8006018:	429a      	cmp	r2, r3
 800601a:	d204      	bcs.n	8006026 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006022:	851a      	strh	r2, [r3, #40]	; 0x28
 8006024:	e002      	b.n	800602c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	89fa      	ldrh	r2, [r7, #14]
 800602a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff ff71 	bl	8005f14 <tcp_update_rcv_ann_wnd>
 8006032:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800603a:	d309      	bcc.n	8006050 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8b5b      	ldrh	r3, [r3, #26]
 8006040:	f043 0302 	orr.w	r3, r3, #2
 8006044:	b29a      	uxth	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f003 fe42 	bl	8009cd4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	0800fdf0 	.word	0x0800fdf0
 800605c:	0801008c 	.word	0x0801008c
 8006060:	0800fe34 	.word	0x0800fe34
 8006064:	080100a4 	.word	0x080100a4

08006068 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006068:	b5b0      	push	{r4, r5, r7, lr}
 800606a:	b090      	sub	sp, #64	; 0x40
 800606c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006074:	4b94      	ldr	r3, [pc, #592]	; (80062c8 <tcp_slowtmr+0x260>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	4a93      	ldr	r2, [pc, #588]	; (80062c8 <tcp_slowtmr+0x260>)
 800607c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800607e:	4b93      	ldr	r3, [pc, #588]	; (80062cc <tcp_slowtmr+0x264>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	b2da      	uxtb	r2, r3
 8006086:	4b91      	ldr	r3, [pc, #580]	; (80062cc <tcp_slowtmr+0x264>)
 8006088:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800608e:	4b90      	ldr	r3, [pc, #576]	; (80062d0 <tcp_slowtmr+0x268>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006094:	e29d      	b.n	80065d2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	7d1b      	ldrb	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <tcp_slowtmr+0x44>
 800609e:	4b8d      	ldr	r3, [pc, #564]	; (80062d4 <tcp_slowtmr+0x26c>)
 80060a0:	f240 42be 	movw	r2, #1214	; 0x4be
 80060a4:	498c      	ldr	r1, [pc, #560]	; (80062d8 <tcp_slowtmr+0x270>)
 80060a6:	488d      	ldr	r0, [pc, #564]	; (80062dc <tcp_slowtmr+0x274>)
 80060a8:	f007 ff08 	bl	800debc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	7d1b      	ldrb	r3, [r3, #20]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d106      	bne.n	80060c2 <tcp_slowtmr+0x5a>
 80060b4:	4b87      	ldr	r3, [pc, #540]	; (80062d4 <tcp_slowtmr+0x26c>)
 80060b6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80060ba:	4989      	ldr	r1, [pc, #548]	; (80062e0 <tcp_slowtmr+0x278>)
 80060bc:	4887      	ldr	r0, [pc, #540]	; (80062dc <tcp_slowtmr+0x274>)
 80060be:	f007 fefd 	bl	800debc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	7d1b      	ldrb	r3, [r3, #20]
 80060c6:	2b0a      	cmp	r3, #10
 80060c8:	d106      	bne.n	80060d8 <tcp_slowtmr+0x70>
 80060ca:	4b82      	ldr	r3, [pc, #520]	; (80062d4 <tcp_slowtmr+0x26c>)
 80060cc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80060d0:	4984      	ldr	r1, [pc, #528]	; (80062e4 <tcp_slowtmr+0x27c>)
 80060d2:	4882      	ldr	r0, [pc, #520]	; (80062dc <tcp_slowtmr+0x274>)
 80060d4:	f007 fef2 	bl	800debc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	7f9a      	ldrb	r2, [r3, #30]
 80060dc:	4b7b      	ldr	r3, [pc, #492]	; (80062cc <tcp_slowtmr+0x264>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d105      	bne.n	80060f0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80060ee:	e270      	b.n	80065d2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80060f0:	4b76      	ldr	r3, [pc, #472]	; (80062cc <tcp_slowtmr+0x264>)
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	7d1b      	ldrb	r3, [r3, #20]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d10a      	bne.n	8006122 <tcp_slowtmr+0xba>
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006112:	2b05      	cmp	r3, #5
 8006114:	d905      	bls.n	8006122 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800611a:	3301      	adds	r3, #1
 800611c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006120:	e11e      	b.n	8006360 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006128:	2b0b      	cmp	r3, #11
 800612a:	d905      	bls.n	8006138 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800612c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006130:	3301      	adds	r3, #1
 8006132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006136:	e113      	b.n	8006360 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800613e:	2b00      	cmp	r3, #0
 8006140:	d075      	beq.n	800622e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <tcp_slowtmr+0xf0>
 800614a:	4b62      	ldr	r3, [pc, #392]	; (80062d4 <tcp_slowtmr+0x26c>)
 800614c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006150:	4965      	ldr	r1, [pc, #404]	; (80062e8 <tcp_slowtmr+0x280>)
 8006152:	4862      	ldr	r0, [pc, #392]	; (80062dc <tcp_slowtmr+0x274>)
 8006154:	f007 feb2 	bl	800debc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <tcp_slowtmr+0x106>
 8006160:	4b5c      	ldr	r3, [pc, #368]	; (80062d4 <tcp_slowtmr+0x26c>)
 8006162:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006166:	4961      	ldr	r1, [pc, #388]	; (80062ec <tcp_slowtmr+0x284>)
 8006168:	485c      	ldr	r0, [pc, #368]	; (80062dc <tcp_slowtmr+0x274>)
 800616a:	f007 fea7 	bl	800debc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006174:	2b0b      	cmp	r3, #11
 8006176:	d905      	bls.n	8006184 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800617c:	3301      	adds	r3, #1
 800617e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006182:	e0ed      	b.n	8006360 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800618a:	3b01      	subs	r3, #1
 800618c:	4a58      	ldr	r2, [pc, #352]	; (80062f0 <tcp_slowtmr+0x288>)
 800618e:	5cd3      	ldrb	r3, [r2, r3]
 8006190:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006198:	7c7a      	ldrb	r2, [r7, #17]
 800619a:	429a      	cmp	r2, r3
 800619c:	d907      	bls.n	80061ae <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80061a4:	3301      	adds	r3, #1
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80061b4:	7c7a      	ldrb	r2, [r7, #17]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	f200 80d2 	bhi.w	8006360 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80061bc:	2301      	movs	r3, #1
 80061be:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80061ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061cc:	f004 fc2a 	bl	800aa24 <tcp_zero_window_probe>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d014      	beq.n	8006200 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80061d6:	2300      	movs	r3, #0
 80061d8:	623b      	str	r3, [r7, #32]
 80061da:	e011      	b.n	8006200 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061e2:	4619      	mov	r1, r3
 80061e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061e6:	f003 faef 	bl	80097c8 <tcp_split_unsent_seg>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80061f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061f2:	f003 fd6f 	bl	8009cd4 <tcp_output>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80ac 	beq.w	8006360 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006216:	2b06      	cmp	r3, #6
 8006218:	f200 80a2 	bhi.w	8006360 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006222:	3301      	adds	r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800622c:	e098      	b.n	8006360 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006234:	2b00      	cmp	r3, #0
 8006236:	db0f      	blt.n	8006258 <tcp_slowtmr+0x1f0>
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800623e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006242:	4293      	cmp	r3, r2
 8006244:	d008      	beq.n	8006258 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800624c:	b29b      	uxth	r3, r3
 800624e:	3301      	adds	r3, #1
 8006250:	b29b      	uxth	r3, r3
 8006252:	b21a      	sxth	r2, r3
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006264:	429a      	cmp	r2, r3
 8006266:	db7b      	blt.n	8006360 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800626a:	f004 f825 	bl	800a2b8 <tcp_rexmit_rto_prepare>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <tcp_slowtmr+0x21c>
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	2b00      	cmp	r3, #0
 800627a:	d171      	bne.n	8006360 <tcp_slowtmr+0x2f8>
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d06d      	beq.n	8006360 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	7d1b      	ldrb	r3, [r3, #20]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d03a      	beq.n	8006302 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006292:	2b0c      	cmp	r3, #12
 8006294:	bf28      	it	cs
 8006296:	230c      	movcs	r3, #12
 8006298:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80062a0:	10db      	asrs	r3, r3, #3
 80062a2:	b21b      	sxth	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80062ac:	4413      	add	r3, r2
 80062ae:	7efa      	ldrb	r2, [r7, #27]
 80062b0:	4910      	ldr	r1, [pc, #64]	; (80062f4 <tcp_slowtmr+0x28c>)
 80062b2:	5c8a      	ldrb	r2, [r1, r2]
 80062b4:	4093      	lsls	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80062be:	4293      	cmp	r3, r2
 80062c0:	dc1a      	bgt.n	80062f8 <tcp_slowtmr+0x290>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	b21a      	sxth	r2, r3
 80062c6:	e019      	b.n	80062fc <tcp_slowtmr+0x294>
 80062c8:	200067f4 	.word	0x200067f4
 80062cc:	2000680a 	.word	0x2000680a
 80062d0:	20006800 	.word	0x20006800
 80062d4:	0800fdf0 	.word	0x0800fdf0
 80062d8:	08010134 	.word	0x08010134
 80062dc:	0800fe34 	.word	0x0800fe34
 80062e0:	08010160 	.word	0x08010160
 80062e4:	0801018c 	.word	0x0801018c
 80062e8:	080101bc 	.word	0x080101bc
 80062ec:	080101f0 	.word	0x080101f0
 80062f0:	08011db4 	.word	0x08011db4
 80062f4:	08011da4 	.word	0x08011da4
 80062f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	2200      	movs	r2, #0
 8006306:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006314:	4293      	cmp	r3, r2
 8006316:	bf28      	it	cs
 8006318:	4613      	movcs	r3, r2
 800631a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800631c:	8a7b      	ldrh	r3, [r7, #18]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	429a      	cmp	r2, r3
 8006338:	d206      	bcs.n	8006348 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	2200      	movs	r2, #0
 8006356:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800635a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800635c:	f004 f81c 	bl	800a398 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	7d1b      	ldrb	r3, [r3, #20]
 8006364:	2b06      	cmp	r3, #6
 8006366:	d111      	bne.n	800638c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	8b5b      	ldrh	r3, [r3, #26]
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006374:	4b9c      	ldr	r3, [pc, #624]	; (80065e8 <tcp_slowtmr+0x580>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b28      	cmp	r3, #40	; 0x28
 8006380:	d904      	bls.n	800638c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006386:	3301      	adds	r3, #1
 8006388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	7a5b      	ldrb	r3, [r3, #9]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d04a      	beq.n	800642e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800639c:	2b04      	cmp	r3, #4
 800639e:	d003      	beq.n	80063a8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80063a4:	2b07      	cmp	r3, #7
 80063a6:	d142      	bne.n	800642e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063a8:	4b8f      	ldr	r3, [pc, #572]	; (80065e8 <tcp_slowtmr+0x580>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80063b8:	4b8c      	ldr	r3, [pc, #560]	; (80065ec <tcp_slowtmr+0x584>)
 80063ba:	440b      	add	r3, r1
 80063bc:	498c      	ldr	r1, [pc, #560]	; (80065f0 <tcp_slowtmr+0x588>)
 80063be:	fba1 1303 	umull	r1, r3, r1, r3
 80063c2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d90a      	bls.n	80063de <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80063c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063cc:	3301      	adds	r3, #1
 80063ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80063d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063d6:	3301      	adds	r3, #1
 80063d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063dc:	e027      	b.n	800642e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063de:	4b82      	ldr	r3, [pc, #520]	; (80065e8 <tcp_slowtmr+0x580>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80063f4:	4618      	mov	r0, r3
 80063f6:	4b7f      	ldr	r3, [pc, #508]	; (80065f4 <tcp_slowtmr+0x58c>)
 80063f8:	fb00 f303 	mul.w	r3, r0, r3
 80063fc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80063fe:	497c      	ldr	r1, [pc, #496]	; (80065f0 <tcp_slowtmr+0x588>)
 8006400:	fba1 1303 	umull	r1, r3, r1, r3
 8006404:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006406:	429a      	cmp	r2, r3
 8006408:	d911      	bls.n	800642e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800640a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800640c:	f004 faca 	bl	800a9a4 <tcp_keepalive>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006416:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800641a:	2b00      	cmp	r3, #0
 800641c:	d107      	bne.n	800642e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006424:	3301      	adds	r3, #1
 8006426:	b2da      	uxtb	r2, r3
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006432:	2b00      	cmp	r3, #0
 8006434:	d011      	beq.n	800645a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006436:	4b6c      	ldr	r3, [pc, #432]	; (80065e8 <tcp_slowtmr+0x580>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006446:	4619      	mov	r1, r3
 8006448:	460b      	mov	r3, r1
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	440b      	add	r3, r1
 800644e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006450:	429a      	cmp	r2, r3
 8006452:	d302      	bcc.n	800645a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006456:	f000 fddd 	bl	8007014 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	7d1b      	ldrb	r3, [r3, #20]
 800645e:	2b03      	cmp	r3, #3
 8006460:	d10b      	bne.n	800647a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006462:	4b61      	ldr	r3, [pc, #388]	; (80065e8 <tcp_slowtmr+0x580>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b28      	cmp	r3, #40	; 0x28
 800646e:	d904      	bls.n	800647a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006474:	3301      	adds	r3, #1
 8006476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	7d1b      	ldrb	r3, [r3, #20]
 800647e:	2b09      	cmp	r3, #9
 8006480:	d10b      	bne.n	800649a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006482:	4b59      	ldr	r3, [pc, #356]	; (80065e8 <tcp_slowtmr+0x580>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2bf0      	cmp	r3, #240	; 0xf0
 800648e:	d904      	bls.n	800649a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8006490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006494:	3301      	adds	r3, #1
 8006496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800649a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d060      	beq.n	8006564 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80064aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ac:	f000 fbfe 	bl	8006cac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d010      	beq.n	80064d8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80064b6:	4b50      	ldr	r3, [pc, #320]	; (80065f8 <tcp_slowtmr+0x590>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064bc:	429a      	cmp	r2, r3
 80064be:	d106      	bne.n	80064ce <tcp_slowtmr+0x466>
 80064c0:	4b4e      	ldr	r3, [pc, #312]	; (80065fc <tcp_slowtmr+0x594>)
 80064c2:	f240 526d 	movw	r2, #1389	; 0x56d
 80064c6:	494e      	ldr	r1, [pc, #312]	; (8006600 <tcp_slowtmr+0x598>)
 80064c8:	484e      	ldr	r0, [pc, #312]	; (8006604 <tcp_slowtmr+0x59c>)
 80064ca:	f007 fcf7 	bl	800debc <iprintf>
        prev->next = pcb->next;
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	e00f      	b.n	80064f8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80064d8:	4b47      	ldr	r3, [pc, #284]	; (80065f8 <tcp_slowtmr+0x590>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d006      	beq.n	80064f0 <tcp_slowtmr+0x488>
 80064e2:	4b46      	ldr	r3, [pc, #280]	; (80065fc <tcp_slowtmr+0x594>)
 80064e4:	f240 5271 	movw	r2, #1393	; 0x571
 80064e8:	4947      	ldr	r1, [pc, #284]	; (8006608 <tcp_slowtmr+0x5a0>)
 80064ea:	4846      	ldr	r0, [pc, #280]	; (8006604 <tcp_slowtmr+0x59c>)
 80064ec:	f007 fce6 	bl	800debc <iprintf>
        tcp_active_pcbs = pcb->next;
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4a40      	ldr	r2, [pc, #256]	; (80065f8 <tcp_slowtmr+0x590>)
 80064f6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80064f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d013      	beq.n	8006528 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006508:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	3304      	adds	r3, #4
 800650e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006510:	8ad2      	ldrh	r2, [r2, #22]
 8006512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006514:	8b09      	ldrh	r1, [r1, #24]
 8006516:	9102      	str	r1, [sp, #8]
 8006518:	9201      	str	r2, [sp, #4]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	462b      	mov	r3, r5
 800651e:	4622      	mov	r2, r4
 8006520:	4601      	mov	r1, r0
 8006522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006524:	f004 f98a 	bl	800a83c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	7d1b      	ldrb	r3, [r3, #20]
 8006532:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800653e:	6838      	ldr	r0, [r7, #0]
 8006540:	f7ff f9f4 	bl	800592c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006544:	4b31      	ldr	r3, [pc, #196]	; (800660c <tcp_slowtmr+0x5a4>)
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <tcp_slowtmr+0x4f2>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f06f 010c 	mvn.w	r1, #12
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800655a:	4b2c      	ldr	r3, [pc, #176]	; (800660c <tcp_slowtmr+0x5a4>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d037      	beq.n	80065d2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8006562:	e592      	b.n	800608a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	7f1b      	ldrb	r3, [r3, #28]
 8006572:	3301      	adds	r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	7f1a      	ldrb	r2, [r3, #28]
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	7f5b      	ldrb	r3, [r3, #29]
 8006582:	429a      	cmp	r2, r3
 8006584:	d325      	bcc.n	80065d2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	2200      	movs	r2, #0
 800658a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <tcp_slowtmr+0x5a4>)
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <tcp_slowtmr+0x54c>
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a4:	6912      	ldr	r2, [r2, #16]
 80065a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80065b2:	e002      	b.n	80065ba <tcp_slowtmr+0x552>
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80065ba:	4b14      	ldr	r3, [pc, #80]	; (800660c <tcp_slowtmr+0x5a4>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d000      	beq.n	80065c4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80065c2:	e562      	b.n	800608a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80065c4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80065cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ce:	f003 fb81 	bl	8009cd4 <tcp_output>
  while (pcb != NULL) {
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f47f ad5e 	bne.w	8006096 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <tcp_slowtmr+0x5a8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80065e4:	e069      	b.n	80066ba <tcp_slowtmr+0x652>
 80065e6:	bf00      	nop
 80065e8:	200067f4 	.word	0x200067f4
 80065ec:	000a4cb8 	.word	0x000a4cb8
 80065f0:	10624dd3 	.word	0x10624dd3
 80065f4:	000124f8 	.word	0x000124f8
 80065f8:	20006800 	.word	0x20006800
 80065fc:	0800fdf0 	.word	0x0800fdf0
 8006600:	08010228 	.word	0x08010228
 8006604:	0800fe34 	.word	0x0800fe34
 8006608:	08010254 	.word	0x08010254
 800660c:	20006808 	.word	0x20006808
 8006610:	20006804 	.word	0x20006804
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	7d1b      	ldrb	r3, [r3, #20]
 8006618:	2b0a      	cmp	r3, #10
 800661a:	d006      	beq.n	800662a <tcp_slowtmr+0x5c2>
 800661c:	4b2b      	ldr	r3, [pc, #172]	; (80066cc <tcp_slowtmr+0x664>)
 800661e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006622:	492b      	ldr	r1, [pc, #172]	; (80066d0 <tcp_slowtmr+0x668>)
 8006624:	482b      	ldr	r0, [pc, #172]	; (80066d4 <tcp_slowtmr+0x66c>)
 8006626:	f007 fc49 	bl	800debc <iprintf>
    pcb_remove = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006630:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <tcp_slowtmr+0x670>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2bf0      	cmp	r3, #240	; 0xf0
 800663c:	d904      	bls.n	8006648 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800663e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006642:	3301      	adds	r3, #1
 8006644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02f      	beq.n	80066b0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006652:	f000 fb2b 	bl	8006cac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	d010      	beq.n	800667e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800665c:	4b1f      	ldr	r3, [pc, #124]	; (80066dc <tcp_slowtmr+0x674>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006662:	429a      	cmp	r2, r3
 8006664:	d106      	bne.n	8006674 <tcp_slowtmr+0x60c>
 8006666:	4b19      	ldr	r3, [pc, #100]	; (80066cc <tcp_slowtmr+0x664>)
 8006668:	f240 52af 	movw	r2, #1455	; 0x5af
 800666c:	491c      	ldr	r1, [pc, #112]	; (80066e0 <tcp_slowtmr+0x678>)
 800666e:	4819      	ldr	r0, [pc, #100]	; (80066d4 <tcp_slowtmr+0x66c>)
 8006670:	f007 fc24 	bl	800debc <iprintf>
        prev->next = pcb->next;
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	60da      	str	r2, [r3, #12]
 800667c:	e00f      	b.n	800669e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800667e:	4b17      	ldr	r3, [pc, #92]	; (80066dc <tcp_slowtmr+0x674>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006684:	429a      	cmp	r2, r3
 8006686:	d006      	beq.n	8006696 <tcp_slowtmr+0x62e>
 8006688:	4b10      	ldr	r3, [pc, #64]	; (80066cc <tcp_slowtmr+0x664>)
 800668a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800668e:	4915      	ldr	r1, [pc, #84]	; (80066e4 <tcp_slowtmr+0x67c>)
 8006690:	4810      	ldr	r0, [pc, #64]	; (80066d4 <tcp_slowtmr+0x66c>)
 8006692:	f007 fc13 	bl	800debc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	4a10      	ldr	r2, [pc, #64]	; (80066dc <tcp_slowtmr+0x674>)
 800669c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80066a8:	69f8      	ldr	r0, [r7, #28]
 80066aa:	f7ff f93f 	bl	800592c <tcp_free>
 80066ae:	e004      	b.n	80066ba <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1a9      	bne.n	8006614 <tcp_slowtmr+0x5ac>
    }
  }
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	3730      	adds	r7, #48	; 0x30
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bdb0      	pop	{r4, r5, r7, pc}
 80066ca:	bf00      	nop
 80066cc:	0800fdf0 	.word	0x0800fdf0
 80066d0:	08010280 	.word	0x08010280
 80066d4:	0800fe34 	.word	0x0800fe34
 80066d8:	200067f4 	.word	0x200067f4
 80066dc:	20006804 	.word	0x20006804
 80066e0:	080102b0 	.word	0x080102b0
 80066e4:	080102d8 	.word	0x080102d8

080066e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80066ee:	4b2d      	ldr	r3, [pc, #180]	; (80067a4 <tcp_fasttmr+0xbc>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <tcp_fasttmr+0xbc>)
 80066f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80066fa:	4b2b      	ldr	r3, [pc, #172]	; (80067a8 <tcp_fasttmr+0xc0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006700:	e048      	b.n	8006794 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	7f9a      	ldrb	r2, [r3, #30]
 8006706:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <tcp_fasttmr+0xbc>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d03f      	beq.n	800678e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800670e:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <tcp_fasttmr+0xbc>)
 8006710:	781a      	ldrb	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8b5b      	ldrh	r3, [r3, #26]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d010      	beq.n	8006744 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8b5b      	ldrh	r3, [r3, #26]
 8006726:	f043 0302 	orr.w	r3, r3, #2
 800672a:	b29a      	uxth	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f003 facf 	bl	8009cd4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8b5b      	ldrh	r3, [r3, #26]
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8b5b      	ldrh	r3, [r3, #26]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d009      	beq.n	8006764 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8b5b      	ldrh	r3, [r3, #26]
 8006754:	f023 0308 	bic.w	r3, r3, #8
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff fa78 	bl	8005c54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006772:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <tcp_fasttmr+0xc4>)
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f819 	bl	80067b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <tcp_fasttmr+0xc4>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d000      	beq.n	8006788 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006786:	e7b8      	b.n	80066fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	607b      	str	r3, [r7, #4]
 800678c:	e002      	b.n	8006794 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1b3      	bne.n	8006702 <tcp_fasttmr+0x1a>
    }
  }
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	2000680a 	.word	0x2000680a
 80067a8:	20006800 	.word	0x20006800
 80067ac:	20006808 	.word	0x20006808

080067b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <tcp_process_refused_data+0x22>
 80067be:	4b37      	ldr	r3, [pc, #220]	; (800689c <tcp_process_refused_data+0xec>)
 80067c0:	f240 6209 	movw	r2, #1545	; 0x609
 80067c4:	4936      	ldr	r1, [pc, #216]	; (80068a0 <tcp_process_refused_data+0xf0>)
 80067c6:	4837      	ldr	r0, [pc, #220]	; (80068a4 <tcp_process_refused_data+0xf4>)
 80067c8:	f007 fb78 	bl	800debc <iprintf>
 80067cc:	f06f 030f 	mvn.w	r3, #15
 80067d0:	e060      	b.n	8006894 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d6:	7b5b      	ldrb	r3, [r3, #13]
 80067d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <tcp_process_refused_data+0x58>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6918      	ldr	r0, [r3, #16]
 80067fa:	2300      	movs	r3, #0
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	47a0      	blx	r4
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
 8006806:	e007      	b.n	8006818 <tcp_process_refused_data+0x68>
 8006808:	2300      	movs	r3, #0
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	2000      	movs	r0, #0
 8006810:	f000 f8a4 	bl	800695c <tcp_recv_null>
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d12a      	bne.n	8006876 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d033      	beq.n	8006892 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006832:	d005      	beq.n	8006840 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006838:	3301      	adds	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <tcp_process_refused_data+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6918      	ldr	r0, [r3, #16]
 8006854:	2300      	movs	r3, #0
 8006856:	2200      	movs	r2, #0
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	47a0      	blx	r4
 800685c:	4603      	mov	r3, r0
 800685e:	73fb      	strb	r3, [r7, #15]
 8006860:	e001      	b.n	8006866 <tcp_process_refused_data+0xb6>
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800686a:	f113 0f0d 	cmn.w	r3, #13
 800686e:	d110      	bne.n	8006892 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006870:	f06f 030c 	mvn.w	r3, #12
 8006874:	e00e      	b.n	8006894 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800687a:	f113 0f0d 	cmn.w	r3, #13
 800687e:	d102      	bne.n	8006886 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006880:	f06f 030c 	mvn.w	r3, #12
 8006884:	e006      	b.n	8006894 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800688c:	f06f 0304 	mvn.w	r3, #4
 8006890:	e000      	b.n	8006894 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bd90      	pop	{r4, r7, pc}
 800689c:	0800fdf0 	.word	0x0800fdf0
 80068a0:	08010300 	.word	0x08010300
 80068a4:	0800fe34 	.word	0x0800fe34

080068a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80068b0:	e007      	b.n	80068c2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f80a 	bl	80068d2 <tcp_seg_free>
    seg = next;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1f4      	bne.n	80068b2 <tcp_segs_free+0xa>
  }
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00c      	beq.n	80068fa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe fcdb 	bl	80052a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	2003      	movs	r0, #3
 80068f6:	f7fd fec5 	bl	8004684 <memp_free>
  }
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <tcp_seg_copy+0x1c>
 8006912:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <tcp_seg_copy+0x4c>)
 8006914:	f240 6282 	movw	r2, #1666	; 0x682
 8006918:	490e      	ldr	r1, [pc, #56]	; (8006954 <tcp_seg_copy+0x50>)
 800691a:	480f      	ldr	r0, [pc, #60]	; (8006958 <tcp_seg_copy+0x54>)
 800691c:	f007 face 	bl	800debc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006920:	2003      	movs	r0, #3
 8006922:	f7fd fe63 	bl	80045ec <memp_malloc>
 8006926:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <tcp_seg_copy+0x2e>
    return NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	e00a      	b.n	8006948 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006932:	2210      	movs	r2, #16
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f007 fa90 	bl	800de5c <memcpy>
  pbuf_ref(cseg->p);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fd51 	bl	80053e8 <pbuf_ref>
  return cseg;
 8006946:	68fb      	ldr	r3, [r7, #12]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	0800fdf0 	.word	0x0800fdf0
 8006954:	08010344 	.word	0x08010344
 8006958:	0800fe34 	.word	0x0800fe34

0800695c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d109      	bne.n	8006984 <tcp_recv_null+0x28>
 8006970:	4b12      	ldr	r3, [pc, #72]	; (80069bc <tcp_recv_null+0x60>)
 8006972:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006976:	4912      	ldr	r1, [pc, #72]	; (80069c0 <tcp_recv_null+0x64>)
 8006978:	4812      	ldr	r0, [pc, #72]	; (80069c4 <tcp_recv_null+0x68>)
 800697a:	f007 fa9f 	bl	800debc <iprintf>
 800697e:	f06f 030f 	mvn.w	r3, #15
 8006982:	e016      	b.n	80069b2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	891b      	ldrh	r3, [r3, #8]
 800698e:	4619      	mov	r1, r3
 8006990:	68b8      	ldr	r0, [r7, #8]
 8006992:	f7ff fb19 	bl	8005fc8 <tcp_recved>
    pbuf_free(p);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fe fc86 	bl	80052a8 <pbuf_free>
 800699c:	e008      	b.n	80069b0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800699e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d104      	bne.n	80069b0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80069a6:	68b8      	ldr	r0, [r7, #8]
 80069a8:	f7ff f9be 	bl	8005d28 <tcp_close>
 80069ac:	4603      	mov	r3, r0
 80069ae:	e000      	b.n	80069b2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	0800fdf0 	.word	0x0800fdf0
 80069c0:	08010360 	.word	0x08010360
 80069c4:	0800fe34 	.word	0x0800fe34

080069c8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80069d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	db01      	blt.n	80069de <tcp_kill_prio+0x16>
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	e000      	b.n	80069e0 <tcp_kill_prio+0x18>
 80069de:	237f      	movs	r3, #127	; 0x7f
 80069e0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80069e2:	7afb      	ldrb	r3, [r7, #11]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d034      	beq.n	8006a52 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069f6:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <tcp_kill_prio+0x94>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e01f      	b.n	8006a3e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	7d5b      	ldrb	r3, [r3, #21]
 8006a02:	7afa      	ldrb	r2, [r7, #11]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d80c      	bhi.n	8006a22 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006a0c:	7afa      	ldrb	r2, [r7, #11]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d112      	bne.n	8006a38 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <tcp_kill_prio+0x98>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d80a      	bhi.n	8006a38 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006a22:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <tcp_kill_prio+0x98>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	7d5b      	ldrb	r3, [r3, #21]
 8006a36:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1dc      	bne.n	80069fe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f7ff fa56 	bl	8005efc <tcp_abort>
 8006a50:	e000      	b.n	8006a54 <tcp_kill_prio+0x8c>
    return;
 8006a52:	bf00      	nop
  }
}
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20006800 	.word	0x20006800
 8006a60:	200067f4 	.word	0x200067f4

08006a64 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d009      	beq.n	8006a88 <tcp_kill_state+0x24>
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	2b09      	cmp	r3, #9
 8006a78:	d006      	beq.n	8006a88 <tcp_kill_state+0x24>
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <tcp_kill_state+0x80>)
 8006a7c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006a80:	4919      	ldr	r1, [pc, #100]	; (8006ae8 <tcp_kill_state+0x84>)
 8006a82:	481a      	ldr	r0, [pc, #104]	; (8006aec <tcp_kill_state+0x88>)
 8006a84:	f007 fa1a 	bl	800debc <iprintf>

  inactivity = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <tcp_kill_state+0x8c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e017      	b.n	8006ac8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	7d1b      	ldrb	r3, [r3, #20]
 8006a9c:	79fa      	ldrb	r2, [r7, #7]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d10f      	bne.n	8006ac2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <tcp_kill_state+0x90>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d807      	bhi.n	8006ac2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <tcp_kill_state+0x90>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e4      	bne.n	8006a98 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	6938      	ldr	r0, [r7, #16]
 8006ad8:	f7ff f952 	bl	8005d80 <tcp_abandon>
  }
}
 8006adc:	bf00      	nop
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	0800fdf0 	.word	0x0800fdf0
 8006ae8:	0801037c 	.word	0x0801037c
 8006aec:	0800fe34 	.word	0x0800fe34
 8006af0:	20006800 	.word	0x20006800
 8006af4:	200067f4 	.word	0x200067f4

08006af8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <tcp_kill_timewait+0x58>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e012      	b.n	8006b34 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <tcp_kill_timewait+0x5c>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d807      	bhi.n	8006b2e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <tcp_kill_timewait+0x5c>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e9      	bne.n	8006b0e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006b40:	68b8      	ldr	r0, [r7, #8]
 8006b42:	f7ff f9db 	bl	8005efc <tcp_abort>
  }
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20006804 	.word	0x20006804
 8006b54:	200067f4 	.word	0x200067f4

08006b58 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <tcp_handle_closepend+0x48>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006b64:	e014      	b.n	8006b90 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8b5b      	ldrh	r3, [r3, #26]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8b5b      	ldrh	r3, [r3, #26]
 8006b7c:	f023 0308 	bic.w	r3, r3, #8
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff f864 	bl	8005c54 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e7      	bne.n	8006b66 <tcp_handle_closepend+0xe>
  }
}
 8006b96:	bf00      	nop
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20006800 	.word	0x20006800

08006ba4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f7fd fd1c 	bl	80045ec <memp_malloc>
 8006bb4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d126      	bne.n	8006c0a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006bbc:	f7ff ffcc 	bl	8006b58 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006bc0:	f7ff ff9a 	bl	8006af8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	f7fd fd11 	bl	80045ec <memp_malloc>
 8006bca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d11b      	bne.n	8006c0a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006bd2:	2009      	movs	r0, #9
 8006bd4:	f7ff ff46 	bl	8006a64 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006bd8:	2001      	movs	r0, #1
 8006bda:	f7fd fd07 	bl	80045ec <memp_malloc>
 8006bde:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d111      	bne.n	8006c0a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006be6:	2008      	movs	r0, #8
 8006be8:	f7ff ff3c 	bl	8006a64 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006bec:	2001      	movs	r0, #1
 8006bee:	f7fd fcfd 	bl	80045ec <memp_malloc>
 8006bf2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d107      	bne.n	8006c0a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fee3 	bl	80069c8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006c02:	2001      	movs	r0, #1
 8006c04:	f7fd fcf2 	bl	80045ec <memp_malloc>
 8006c08:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d03f      	beq.n	8006c90 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006c10:	229c      	movs	r2, #156	; 0x9c
 8006c12:	2100      	movs	r1, #0
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f007 f949 	bl	800deac <memset>
    pcb->prio = prio;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	79fa      	ldrb	r2, [r7, #7]
 8006c1e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006c26:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006c30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	22ff      	movs	r2, #255	; 0xff
 8006c3e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006c46:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2206      	movs	r2, #6
 8006c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2206      	movs	r2, #6
 8006c54:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c5c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006c66:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <tcp_alloc+0xf8>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <tcp_alloc+0xfc>)
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006c7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a08      	ldr	r2, [pc, #32]	; (8006ca4 <tcp_alloc+0x100>)
 8006c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a07      	ldr	r2, [pc, #28]	; (8006ca8 <tcp_alloc+0x104>)
 8006c8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006c90:	68fb      	ldr	r3, [r7, #12]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200067f4 	.word	0x200067f4
 8006ca0:	2000680a 	.word	0x2000680a
 8006ca4:	0800695d 	.word	0x0800695d
 8006ca8:	006ddd00 	.word	0x006ddd00

08006cac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d107      	bne.n	8006cca <tcp_pcb_purge+0x1e>
 8006cba:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <tcp_pcb_purge+0x94>)
 8006cbc:	f640 0251 	movw	r2, #2129	; 0x851
 8006cc0:	4920      	ldr	r1, [pc, #128]	; (8006d44 <tcp_pcb_purge+0x98>)
 8006cc2:	4821      	ldr	r0, [pc, #132]	; (8006d48 <tcp_pcb_purge+0x9c>)
 8006cc4:	f007 f8fa 	bl	800debc <iprintf>
 8006cc8:	e037      	b.n	8006d3a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	7d1b      	ldrb	r3, [r3, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d033      	beq.n	8006d3a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006cd6:	2b0a      	cmp	r3, #10
 8006cd8:	d02f      	beq.n	8006d3a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d02b      	beq.n	8006d3a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe fada 	bl	80052a8 <pbuf_free>
      pcb->refused_data = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f986 	bl	8007014 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d0e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fdc7 	bl	80068a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fdc2 	bl	80068a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	66da      	str	r2, [r3, #108]	; 0x6c
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	0800fdf0 	.word	0x0800fdf0
 8006d44:	0801043c 	.word	0x0801043c
 8006d48:	0800fe34 	.word	0x0800fe34

08006d4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <tcp_pcb_remove+0x1e>
 8006d5c:	4b3e      	ldr	r3, [pc, #248]	; (8006e58 <tcp_pcb_remove+0x10c>)
 8006d5e:	f640 0283 	movw	r2, #2179	; 0x883
 8006d62:	493e      	ldr	r1, [pc, #248]	; (8006e5c <tcp_pcb_remove+0x110>)
 8006d64:	483e      	ldr	r0, [pc, #248]	; (8006e60 <tcp_pcb_remove+0x114>)
 8006d66:	f007 f8a9 	bl	800debc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d106      	bne.n	8006d7e <tcp_pcb_remove+0x32>
 8006d70:	4b39      	ldr	r3, [pc, #228]	; (8006e58 <tcp_pcb_remove+0x10c>)
 8006d72:	f640 0284 	movw	r2, #2180	; 0x884
 8006d76:	493b      	ldr	r1, [pc, #236]	; (8006e64 <tcp_pcb_remove+0x118>)
 8006d78:	4839      	ldr	r0, [pc, #228]	; (8006e60 <tcp_pcb_remove+0x114>)
 8006d7a:	f007 f89f 	bl	800debc <iprintf>

  TCP_RMV(pcblist, pcb);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d105      	bne.n	8006d94 <tcp_pcb_remove+0x48>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e013      	b.n	8006dbc <tcp_pcb_remove+0x70>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e00c      	b.n	8006db6 <tcp_pcb_remove+0x6a>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d104      	bne.n	8006db0 <tcp_pcb_remove+0x64>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	60da      	str	r2, [r3, #12]
 8006dae:	e005      	b.n	8006dbc <tcp_pcb_remove+0x70>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1ef      	bne.n	8006d9c <tcp_pcb_remove+0x50>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006dc2:	6838      	ldr	r0, [r7, #0]
 8006dc4:	f7ff ff72 	bl	8006cac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	7d1b      	ldrb	r3, [r3, #20]
 8006dcc:	2b0a      	cmp	r3, #10
 8006dce:	d013      	beq.n	8006df8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d00f      	beq.n	8006df8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	8b5b      	ldrh	r3, [r3, #26]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d009      	beq.n	8006df8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	8b5b      	ldrh	r3, [r3, #26]
 8006de8:	f043 0302 	orr.w	r3, r3, #2
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006df2:	6838      	ldr	r0, [r7, #0]
 8006df4:	f002 ff6e 	bl	8009cd4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	7d1b      	ldrb	r3, [r3, #20]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d020      	beq.n	8006e42 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d006      	beq.n	8006e16 <tcp_pcb_remove+0xca>
 8006e08:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <tcp_pcb_remove+0x10c>)
 8006e0a:	f640 0293 	movw	r2, #2195	; 0x893
 8006e0e:	4916      	ldr	r1, [pc, #88]	; (8006e68 <tcp_pcb_remove+0x11c>)
 8006e10:	4813      	ldr	r0, [pc, #76]	; (8006e60 <tcp_pcb_remove+0x114>)
 8006e12:	f007 f853 	bl	800debc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d006      	beq.n	8006e2c <tcp_pcb_remove+0xe0>
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <tcp_pcb_remove+0x10c>)
 8006e20:	f640 0294 	movw	r2, #2196	; 0x894
 8006e24:	4911      	ldr	r1, [pc, #68]	; (8006e6c <tcp_pcb_remove+0x120>)
 8006e26:	480e      	ldr	r0, [pc, #56]	; (8006e60 <tcp_pcb_remove+0x114>)
 8006e28:	f007 f848 	bl	800debc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d006      	beq.n	8006e42 <tcp_pcb_remove+0xf6>
 8006e34:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <tcp_pcb_remove+0x10c>)
 8006e36:	f640 0296 	movw	r2, #2198	; 0x896
 8006e3a:	490d      	ldr	r1, [pc, #52]	; (8006e70 <tcp_pcb_remove+0x124>)
 8006e3c:	4808      	ldr	r0, [pc, #32]	; (8006e60 <tcp_pcb_remove+0x114>)
 8006e3e:	f007 f83d 	bl	800debc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2200      	movs	r2, #0
 8006e46:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	0800fdf0 	.word	0x0800fdf0
 8006e5c:	08010458 	.word	0x08010458
 8006e60:	0800fe34 	.word	0x0800fe34
 8006e64:	08010474 	.word	0x08010474
 8006e68:	08010494 	.word	0x08010494
 8006e6c:	080104ac 	.word	0x080104ac
 8006e70:	080104c8 	.word	0x080104c8

08006e74 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <tcp_next_iss+0x1c>
 8006e82:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <tcp_next_iss+0x38>)
 8006e84:	f640 02af 	movw	r2, #2223	; 0x8af
 8006e88:	4909      	ldr	r1, [pc, #36]	; (8006eb0 <tcp_next_iss+0x3c>)
 8006e8a:	480a      	ldr	r0, [pc, #40]	; (8006eb4 <tcp_next_iss+0x40>)
 8006e8c:	f007 f816 	bl	800debc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006e90:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <tcp_next_iss+0x44>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <tcp_next_iss+0x48>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4413      	add	r3, r2
 8006e9a:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <tcp_next_iss+0x44>)
 8006e9c:	6013      	str	r3, [r2, #0]
  return iss;
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <tcp_next_iss+0x44>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	0800fdf0 	.word	0x0800fdf0
 8006eb0:	080104e0 	.word	0x080104e0
 8006eb4:	0800fe34 	.word	0x0800fe34
 8006eb8:	2000000c 	.word	0x2000000c
 8006ebc:	200067f4 	.word	0x200067f4

08006ec0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <tcp_eff_send_mss_netif+0x22>
 8006ed4:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <tcp_eff_send_mss_netif+0x68>)
 8006ed6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006eda:	4914      	ldr	r1, [pc, #80]	; (8006f2c <tcp_eff_send_mss_netif+0x6c>)
 8006edc:	4814      	ldr	r0, [pc, #80]	; (8006f30 <tcp_eff_send_mss_netif+0x70>)
 8006ede:	f006 ffed 	bl	800debc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006ee8:	89fb      	ldrh	r3, [r7, #14]
 8006eea:	e019      	b.n	8006f20 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ef0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006ef2:	8afb      	ldrh	r3, [r7, #22]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d012      	beq.n	8006f1e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006ef8:	2328      	movs	r3, #40	; 0x28
 8006efa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006efc:	8afa      	ldrh	r2, [r7, #22]
 8006efe:	8abb      	ldrh	r3, [r7, #20]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d904      	bls.n	8006f0e <tcp_eff_send_mss_netif+0x4e>
 8006f04:	8afa      	ldrh	r2, [r7, #22]
 8006f06:	8abb      	ldrh	r3, [r7, #20]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	e000      	b.n	8006f10 <tcp_eff_send_mss_netif+0x50>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006f12:	8a7a      	ldrh	r2, [r7, #18]
 8006f14:	89fb      	ldrh	r3, [r7, #14]
 8006f16:	4293      	cmp	r3, r2
 8006f18:	bf28      	it	cs
 8006f1a:	4613      	movcs	r3, r2
 8006f1c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006f1e:	89fb      	ldrh	r3, [r7, #14]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	0800fdf0 	.word	0x0800fdf0
 8006f2c:	080104fc 	.word	0x080104fc
 8006f30:	0800fe34 	.word	0x0800fe34

08006f34 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d119      	bne.n	8006f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006f48:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006f4a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006f4e:	4910      	ldr	r1, [pc, #64]	; (8006f90 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006f50:	4810      	ldr	r0, [pc, #64]	; (8006f94 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006f52:	f006 ffb3 	bl	800debc <iprintf>

  while (pcb != NULL) {
 8006f56:	e011      	b.n	8006f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d108      	bne.n	8006f76 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7fe ffc6 	bl	8005efc <tcp_abort>
      pcb = next;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e002      	b.n	8006f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1ea      	bne.n	8006f58 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	0800fdf0 	.word	0x0800fdf0
 8006f90:	08010524 	.word	0x08010524
 8006f94:	0800fe34 	.word	0x0800fe34

08006f98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d02a      	beq.n	8006ffe <tcp_netif_ip_addr_changed+0x66>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d026      	beq.n	8006ffe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006fb0:	4b15      	ldr	r3, [pc, #84]	; (8007008 <tcp_netif_ip_addr_changed+0x70>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff ffbc 	bl	8006f34 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006fbc:	4b13      	ldr	r3, [pc, #76]	; (800700c <tcp_netif_ip_addr_changed+0x74>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff ffb6 	bl	8006f34 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d017      	beq.n	8006ffe <tcp_netif_ip_addr_changed+0x66>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d013      	beq.n	8006ffe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006fd6:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <tcp_netif_ip_addr_changed+0x78>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e00c      	b.n	8006ff8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d103      	bne.n	8006ff2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1ef      	bne.n	8006fde <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20006800 	.word	0x20006800
 800700c:	200067f8 	.word	0x200067f8
 8007010:	200067fc 	.word	0x200067fc

08007014 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fc3d 	bl	80068a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b08d      	sub	sp, #52	; 0x34
 8007040:	af04      	add	r7, sp, #16
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <tcp_input+0x1c>
 800704c:	4b9b      	ldr	r3, [pc, #620]	; (80072bc <tcp_input+0x280>)
 800704e:	2283      	movs	r2, #131	; 0x83
 8007050:	499b      	ldr	r1, [pc, #620]	; (80072c0 <tcp_input+0x284>)
 8007052:	489c      	ldr	r0, [pc, #624]	; (80072c4 <tcp_input+0x288>)
 8007054:	f006 ff32 	bl	800debc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4a9a      	ldr	r2, [pc, #616]	; (80072c8 <tcp_input+0x28c>)
 800705e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	895b      	ldrh	r3, [r3, #10]
 8007064:	2b13      	cmp	r3, #19
 8007066:	f240 83d1 	bls.w	800780c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800706a:	4b98      	ldr	r3, [pc, #608]	; (80072cc <tcp_input+0x290>)
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	4a97      	ldr	r2, [pc, #604]	; (80072cc <tcp_input+0x290>)
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f005 ff67 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 83c7 	bne.w	8007810 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007082:	4b92      	ldr	r3, [pc, #584]	; (80072cc <tcp_input+0x290>)
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800708a:	2be0      	cmp	r3, #224	; 0xe0
 800708c:	f000 83c0 	beq.w	8007810 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007090:	4b8d      	ldr	r3, [pc, #564]	; (80072c8 <tcp_input+0x28c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	899b      	ldrh	r3, [r3, #12]
 8007096:	b29b      	uxth	r3, r3
 8007098:	4618      	mov	r0, r3
 800709a:	f7fc fe51 	bl	8003d40 <lwip_htons>
 800709e:	4603      	mov	r3, r0
 80070a0:	0b1b      	lsrs	r3, r3, #12
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80070aa:	7cbb      	ldrb	r3, [r7, #18]
 80070ac:	2b13      	cmp	r3, #19
 80070ae:	f240 83b1 	bls.w	8007814 <tcp_input+0x7d8>
 80070b2:	7cbb      	ldrb	r3, [r7, #18]
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	891b      	ldrh	r3, [r3, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f200 83aa 	bhi.w	8007814 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80070c0:	7cbb      	ldrb	r3, [r7, #18]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b14      	subs	r3, #20
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	4b81      	ldr	r3, [pc, #516]	; (80072d0 <tcp_input+0x294>)
 80070ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80070cc:	4b81      	ldr	r3, [pc, #516]	; (80072d4 <tcp_input+0x298>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	895a      	ldrh	r2, [r3, #10]
 80070d6:	7cbb      	ldrb	r3, [r7, #18]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	429a      	cmp	r2, r3
 80070dc:	d309      	bcc.n	80070f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80070de:	4b7c      	ldr	r3, [pc, #496]	; (80072d0 <tcp_input+0x294>)
 80070e0:	881a      	ldrh	r2, [r3, #0]
 80070e2:	4b7d      	ldr	r3, [pc, #500]	; (80072d8 <tcp_input+0x29c>)
 80070e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80070e6:	7cbb      	ldrb	r3, [r7, #18]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe f856 	bl	800519c <pbuf_remove_header>
 80070f0:	e04e      	b.n	8007190 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <tcp_input+0xca>
 80070fa:	4b70      	ldr	r3, [pc, #448]	; (80072bc <tcp_input+0x280>)
 80070fc:	22c2      	movs	r2, #194	; 0xc2
 80070fe:	4977      	ldr	r1, [pc, #476]	; (80072dc <tcp_input+0x2a0>)
 8007100:	4870      	ldr	r0, [pc, #448]	; (80072c4 <tcp_input+0x288>)
 8007102:	f006 fedb 	bl	800debc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007106:	2114      	movs	r1, #20
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7fe f847 	bl	800519c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	895a      	ldrh	r2, [r3, #10]
 8007112:	4b71      	ldr	r3, [pc, #452]	; (80072d8 <tcp_input+0x29c>)
 8007114:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007116:	4b6e      	ldr	r3, [pc, #440]	; (80072d0 <tcp_input+0x294>)
 8007118:	881a      	ldrh	r2, [r3, #0]
 800711a:	4b6f      	ldr	r3, [pc, #444]	; (80072d8 <tcp_input+0x29c>)
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007122:	4b6d      	ldr	r3, [pc, #436]	; (80072d8 <tcp_input+0x29c>)
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fe f837 	bl	800519c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	895b      	ldrh	r3, [r3, #10]
 8007134:	8a3a      	ldrh	r2, [r7, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	f200 836e 	bhi.w	8007818 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	4a64      	ldr	r2, [pc, #400]	; (80072d4 <tcp_input+0x298>)
 8007144:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	8a3a      	ldrh	r2, [r7, #16]
 800714c:	4611      	mov	r1, r2
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe f824 	bl	800519c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	891a      	ldrh	r2, [r3, #8]
 8007158:	8a3b      	ldrh	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	b29a      	uxth	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	895b      	ldrh	r3, [r3, #10]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <tcp_input+0x13a>
 800716a:	4b54      	ldr	r3, [pc, #336]	; (80072bc <tcp_input+0x280>)
 800716c:	22df      	movs	r2, #223	; 0xdf
 800716e:	495c      	ldr	r1, [pc, #368]	; (80072e0 <tcp_input+0x2a4>)
 8007170:	4854      	ldr	r0, [pc, #336]	; (80072c4 <tcp_input+0x288>)
 8007172:	f006 fea3 	bl	800debc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	891a      	ldrh	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	891b      	ldrh	r3, [r3, #8]
 8007180:	429a      	cmp	r2, r3
 8007182:	d005      	beq.n	8007190 <tcp_input+0x154>
 8007184:	4b4d      	ldr	r3, [pc, #308]	; (80072bc <tcp_input+0x280>)
 8007186:	22e0      	movs	r2, #224	; 0xe0
 8007188:	4956      	ldr	r1, [pc, #344]	; (80072e4 <tcp_input+0x2a8>)
 800718a:	484e      	ldr	r0, [pc, #312]	; (80072c4 <tcp_input+0x288>)
 800718c:	f006 fe96 	bl	800debc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007190:	4b4d      	ldr	r3, [pc, #308]	; (80072c8 <tcp_input+0x28c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	4a4b      	ldr	r2, [pc, #300]	; (80072c8 <tcp_input+0x28c>)
 800719a:	6814      	ldr	r4, [r2, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f7fc fdcf 	bl	8003d40 <lwip_htons>
 80071a2:	4603      	mov	r3, r0
 80071a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80071a6:	4b48      	ldr	r3, [pc, #288]	; (80072c8 <tcp_input+0x28c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	885b      	ldrh	r3, [r3, #2]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4a46      	ldr	r2, [pc, #280]	; (80072c8 <tcp_input+0x28c>)
 80071b0:	6814      	ldr	r4, [r2, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fc fdc4 	bl	8003d40 <lwip_htons>
 80071b8:	4603      	mov	r3, r0
 80071ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80071bc:	4b42      	ldr	r3, [pc, #264]	; (80072c8 <tcp_input+0x28c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	4a41      	ldr	r2, [pc, #260]	; (80072c8 <tcp_input+0x28c>)
 80071c4:	6814      	ldr	r4, [r2, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fc fdcf 	bl	8003d6a <lwip_htonl>
 80071cc:	4603      	mov	r3, r0
 80071ce:	6063      	str	r3, [r4, #4]
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	4a45      	ldr	r2, [pc, #276]	; (80072e8 <tcp_input+0x2ac>)
 80071d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80071d6:	4b3c      	ldr	r3, [pc, #240]	; (80072c8 <tcp_input+0x28c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	4a3a      	ldr	r2, [pc, #232]	; (80072c8 <tcp_input+0x28c>)
 80071de:	6814      	ldr	r4, [r2, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fc fdc2 	bl	8003d6a <lwip_htonl>
 80071e6:	4603      	mov	r3, r0
 80071e8:	60a3      	str	r3, [r4, #8]
 80071ea:	68a3      	ldr	r3, [r4, #8]
 80071ec:	4a3f      	ldr	r2, [pc, #252]	; (80072ec <tcp_input+0x2b0>)
 80071ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80071f0:	4b35      	ldr	r3, [pc, #212]	; (80072c8 <tcp_input+0x28c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	89db      	ldrh	r3, [r3, #14]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4a33      	ldr	r2, [pc, #204]	; (80072c8 <tcp_input+0x28c>)
 80071fa:	6814      	ldr	r4, [r2, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fc fd9f 	bl	8003d40 <lwip_htons>
 8007202:	4603      	mov	r3, r0
 8007204:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007206:	4b30      	ldr	r3, [pc, #192]	; (80072c8 <tcp_input+0x28c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	899b      	ldrh	r3, [r3, #12]
 800720c:	b29b      	uxth	r3, r3
 800720e:	4618      	mov	r0, r3
 8007210:	f7fc fd96 	bl	8003d40 <lwip_htons>
 8007214:	4603      	mov	r3, r0
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800721c:	b2da      	uxtb	r2, r3
 800721e:	4b34      	ldr	r3, [pc, #208]	; (80072f0 <tcp_input+0x2b4>)
 8007220:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	891a      	ldrh	r2, [r3, #8]
 8007226:	4b33      	ldr	r3, [pc, #204]	; (80072f4 <tcp_input+0x2b8>)
 8007228:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800722a:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <tcp_input+0x2b4>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <tcp_input+0x214>
    tcplen++;
 8007236:	4b2f      	ldr	r3, [pc, #188]	; (80072f4 <tcp_input+0x2b8>)
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	3301      	adds	r3, #1
 800723c:	b29a      	uxth	r2, r3
 800723e:	4b2d      	ldr	r3, [pc, #180]	; (80072f4 <tcp_input+0x2b8>)
 8007240:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	891a      	ldrh	r2, [r3, #8]
 8007246:	4b2b      	ldr	r3, [pc, #172]	; (80072f4 <tcp_input+0x2b8>)
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	f200 82e6 	bhi.w	800781c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007254:	4b28      	ldr	r3, [pc, #160]	; (80072f8 <tcp_input+0x2bc>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	e09d      	b.n	8007398 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	7d1b      	ldrb	r3, [r3, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d105      	bne.n	8007270 <tcp_input+0x234>
 8007264:	4b15      	ldr	r3, [pc, #84]	; (80072bc <tcp_input+0x280>)
 8007266:	22fb      	movs	r2, #251	; 0xfb
 8007268:	4924      	ldr	r1, [pc, #144]	; (80072fc <tcp_input+0x2c0>)
 800726a:	4816      	ldr	r0, [pc, #88]	; (80072c4 <tcp_input+0x288>)
 800726c:	f006 fe26 	bl	800debc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	7d1b      	ldrb	r3, [r3, #20]
 8007274:	2b0a      	cmp	r3, #10
 8007276:	d105      	bne.n	8007284 <tcp_input+0x248>
 8007278:	4b10      	ldr	r3, [pc, #64]	; (80072bc <tcp_input+0x280>)
 800727a:	22fc      	movs	r2, #252	; 0xfc
 800727c:	4920      	ldr	r1, [pc, #128]	; (8007300 <tcp_input+0x2c4>)
 800727e:	4811      	ldr	r0, [pc, #68]	; (80072c4 <tcp_input+0x288>)
 8007280:	f006 fe1c 	bl	800debc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	7d1b      	ldrb	r3, [r3, #20]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d105      	bne.n	8007298 <tcp_input+0x25c>
 800728c:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <tcp_input+0x280>)
 800728e:	22fd      	movs	r2, #253	; 0xfd
 8007290:	491c      	ldr	r1, [pc, #112]	; (8007304 <tcp_input+0x2c8>)
 8007292:	480c      	ldr	r0, [pc, #48]	; (80072c4 <tcp_input+0x288>)
 8007294:	f006 fe12 	bl	800debc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	7a1b      	ldrb	r3, [r3, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d033      	beq.n	8007308 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	7a1a      	ldrb	r2, [r3, #8]
 80072a4:	4b09      	ldr	r3, [pc, #36]	; (80072cc <tcp_input+0x290>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072ac:	3301      	adds	r3, #1
 80072ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d029      	beq.n	8007308 <tcp_input+0x2cc>
      prev = pcb;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	61bb      	str	r3, [r7, #24]
      continue;
 80072b8:	e06b      	b.n	8007392 <tcp_input+0x356>
 80072ba:	bf00      	nop
 80072bc:	08010558 	.word	0x08010558
 80072c0:	0801058c 	.word	0x0801058c
 80072c4:	080105a4 	.word	0x080105a4
 80072c8:	2000681c 	.word	0x2000681c
 80072cc:	20003284 	.word	0x20003284
 80072d0:	20006820 	.word	0x20006820
 80072d4:	20006824 	.word	0x20006824
 80072d8:	20006822 	.word	0x20006822
 80072dc:	080105cc 	.word	0x080105cc
 80072e0:	080105dc 	.word	0x080105dc
 80072e4:	080105e8 	.word	0x080105e8
 80072e8:	2000682c 	.word	0x2000682c
 80072ec:	20006830 	.word	0x20006830
 80072f0:	20006838 	.word	0x20006838
 80072f4:	20006836 	.word	0x20006836
 80072f8:	20006800 	.word	0x20006800
 80072fc:	08010608 	.word	0x08010608
 8007300:	08010630 	.word	0x08010630
 8007304:	0801065c 	.word	0x0801065c
    }

    if (pcb->remote_port == tcphdr->src &&
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	8b1a      	ldrh	r2, [r3, #24]
 800730c:	4b72      	ldr	r3, [pc, #456]	; (80074d8 <tcp_input+0x49c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	429a      	cmp	r2, r3
 8007316:	d13a      	bne.n	800738e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	8ada      	ldrh	r2, [r3, #22]
 800731c:	4b6e      	ldr	r3, [pc, #440]	; (80074d8 <tcp_input+0x49c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007324:	429a      	cmp	r2, r3
 8007326:	d132      	bne.n	800738e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	4b6b      	ldr	r3, [pc, #428]	; (80074dc <tcp_input+0x4a0>)
 800732e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007330:	429a      	cmp	r2, r3
 8007332:	d12c      	bne.n	800738e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4b68      	ldr	r3, [pc, #416]	; (80074dc <tcp_input+0x4a0>)
 800733a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800733c:	429a      	cmp	r2, r3
 800733e:	d126      	bne.n	800738e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	429a      	cmp	r2, r3
 8007348:	d106      	bne.n	8007358 <tcp_input+0x31c>
 800734a:	4b65      	ldr	r3, [pc, #404]	; (80074e0 <tcp_input+0x4a4>)
 800734c:	f240 120d 	movw	r2, #269	; 0x10d
 8007350:	4964      	ldr	r1, [pc, #400]	; (80074e4 <tcp_input+0x4a8>)
 8007352:	4865      	ldr	r0, [pc, #404]	; (80074e8 <tcp_input+0x4ac>)
 8007354:	f006 fdb2 	bl	800debc <iprintf>
      if (prev != NULL) {
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <tcp_input+0x338>
        prev->next = pcb->next;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007366:	4b61      	ldr	r3, [pc, #388]	; (80074ec <tcp_input+0x4b0>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800736e:	4a5f      	ldr	r2, [pc, #380]	; (80074ec <tcp_input+0x4b0>)
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	429a      	cmp	r2, r3
 800737c:	d111      	bne.n	80073a2 <tcp_input+0x366>
 800737e:	4b58      	ldr	r3, [pc, #352]	; (80074e0 <tcp_input+0x4a4>)
 8007380:	f240 1215 	movw	r2, #277	; 0x115
 8007384:	495a      	ldr	r1, [pc, #360]	; (80074f0 <tcp_input+0x4b4>)
 8007386:	4858      	ldr	r0, [pc, #352]	; (80074e8 <tcp_input+0x4ac>)
 8007388:	f006 fd98 	bl	800debc <iprintf>
      break;
 800738c:	e009      	b.n	80073a2 <tcp_input+0x366>
    }
    prev = pcb;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f47f af5e 	bne.w	800725c <tcp_input+0x220>
 80073a0:	e000      	b.n	80073a4 <tcp_input+0x368>
      break;
 80073a2:	bf00      	nop
  }

  if (pcb == NULL) {
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 80aa 	bne.w	8007500 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073ac:	4b51      	ldr	r3, [pc, #324]	; (80074f4 <tcp_input+0x4b8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	e03f      	b.n	8007434 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	7d1b      	ldrb	r3, [r3, #20]
 80073b8:	2b0a      	cmp	r3, #10
 80073ba:	d006      	beq.n	80073ca <tcp_input+0x38e>
 80073bc:	4b48      	ldr	r3, [pc, #288]	; (80074e0 <tcp_input+0x4a4>)
 80073be:	f240 121f 	movw	r2, #287	; 0x11f
 80073c2:	494d      	ldr	r1, [pc, #308]	; (80074f8 <tcp_input+0x4bc>)
 80073c4:	4848      	ldr	r0, [pc, #288]	; (80074e8 <tcp_input+0x4ac>)
 80073c6:	f006 fd79 	bl	800debc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	7a1b      	ldrb	r3, [r3, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	7a1a      	ldrb	r2, [r3, #8]
 80073d6:	4b41      	ldr	r3, [pc, #260]	; (80074dc <tcp_input+0x4a0>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073de:	3301      	adds	r3, #1
 80073e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d122      	bne.n	800742c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	8b1a      	ldrh	r2, [r3, #24]
 80073ea:	4b3b      	ldr	r3, [pc, #236]	; (80074d8 <tcp_input+0x49c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d11b      	bne.n	800742e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	8ada      	ldrh	r2, [r3, #22]
 80073fa:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <tcp_input+0x49c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	885b      	ldrh	r3, [r3, #2]
 8007400:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007402:	429a      	cmp	r2, r3
 8007404:	d113      	bne.n	800742e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	4b34      	ldr	r3, [pc, #208]	; (80074dc <tcp_input+0x4a0>)
 800740c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800740e:	429a      	cmp	r2, r3
 8007410:	d10d      	bne.n	800742e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4b31      	ldr	r3, [pc, #196]	; (80074dc <tcp_input+0x4a0>)
 8007418:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800741a:	429a      	cmp	r2, r3
 800741c:	d107      	bne.n	800742e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800741e:	69f8      	ldr	r0, [r7, #28]
 8007420:	f000 fb56 	bl	8007ad0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7fd ff3f 	bl	80052a8 <pbuf_free>
        return;
 800742a:	e1fd      	b.n	8007828 <tcp_input+0x7ec>
        continue;
 800742c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	61fb      	str	r3, [r7, #28]
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1bc      	bne.n	80073b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800743e:	4b2f      	ldr	r3, [pc, #188]	; (80074fc <tcp_input+0x4c0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e02a      	b.n	800749c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	7a1b      	ldrb	r3, [r3, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00c      	beq.n	8007468 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	7a1a      	ldrb	r2, [r3, #8]
 8007452:	4b22      	ldr	r3, [pc, #136]	; (80074dc <tcp_input+0x4a0>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800745a:	3301      	adds	r3, #1
 800745c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800745e:	429a      	cmp	r2, r3
 8007460:	d002      	beq.n	8007468 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	61bb      	str	r3, [r7, #24]
        continue;
 8007466:	e016      	b.n	8007496 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	8ada      	ldrh	r2, [r3, #22]
 800746c:	4b1a      	ldr	r3, [pc, #104]	; (80074d8 <tcp_input+0x49c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	885b      	ldrh	r3, [r3, #2]
 8007472:	b29b      	uxth	r3, r3
 8007474:	429a      	cmp	r2, r3
 8007476:	d10c      	bne.n	8007492 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	4b17      	ldr	r3, [pc, #92]	; (80074dc <tcp_input+0x4a0>)
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	429a      	cmp	r2, r3
 8007482:	d00f      	beq.n	80074a4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00d      	beq.n	80074a6 <tcp_input+0x46a>
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1d1      	bne.n	8007446 <tcp_input+0x40a>
 80074a2:	e000      	b.n	80074a6 <tcp_input+0x46a>
            break;
 80074a4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d029      	beq.n	8007500 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80074ba:	4b10      	ldr	r3, [pc, #64]	; (80074fc <tcp_input+0x4c0>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80074c2:	4a0e      	ldr	r2, [pc, #56]	; (80074fc <tcp_input+0x4c0>)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80074c8:	6978      	ldr	r0, [r7, #20]
 80074ca:	f000 fa03 	bl	80078d4 <tcp_listen_input>
      }
      pbuf_free(p);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fd feea 	bl	80052a8 <pbuf_free>
      return;
 80074d4:	e1a8      	b.n	8007828 <tcp_input+0x7ec>
 80074d6:	bf00      	nop
 80074d8:	2000681c 	.word	0x2000681c
 80074dc:	20003284 	.word	0x20003284
 80074e0:	08010558 	.word	0x08010558
 80074e4:	08010684 	.word	0x08010684
 80074e8:	080105a4 	.word	0x080105a4
 80074ec:	20006800 	.word	0x20006800
 80074f0:	080106b0 	.word	0x080106b0
 80074f4:	20006804 	.word	0x20006804
 80074f8:	080106dc 	.word	0x080106dc
 80074fc:	200067fc 	.word	0x200067fc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8158 	beq.w	80077b8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007508:	4b95      	ldr	r3, [pc, #596]	; (8007760 <tcp_input+0x724>)
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	891a      	ldrh	r2, [r3, #8]
 8007512:	4b93      	ldr	r3, [pc, #588]	; (8007760 <tcp_input+0x724>)
 8007514:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007516:	4a92      	ldr	r2, [pc, #584]	; (8007760 <tcp_input+0x724>)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800751c:	4b91      	ldr	r3, [pc, #580]	; (8007764 <tcp_input+0x728>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a8f      	ldr	r2, [pc, #572]	; (8007760 <tcp_input+0x724>)
 8007522:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007524:	4b90      	ldr	r3, [pc, #576]	; (8007768 <tcp_input+0x72c>)
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800752a:	4b90      	ldr	r3, [pc, #576]	; (800776c <tcp_input+0x730>)
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007530:	4b8f      	ldr	r3, [pc, #572]	; (8007770 <tcp_input+0x734>)
 8007532:	2200      	movs	r2, #0
 8007534:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007536:	4b8f      	ldr	r3, [pc, #572]	; (8007774 <tcp_input+0x738>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d006      	beq.n	8007550 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	7b5b      	ldrb	r3, [r3, #13]
 8007546:	f043 0301 	orr.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007554:	2b00      	cmp	r3, #0
 8007556:	d017      	beq.n	8007588 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007558:	69f8      	ldr	r0, [r7, #28]
 800755a:	f7ff f929 	bl	80067b0 <tcp_process_refused_data>
 800755e:	4603      	mov	r3, r0
 8007560:	f113 0f0d 	cmn.w	r3, #13
 8007564:	d007      	beq.n	8007576 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00c      	beq.n	8007588 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800756e:	4b82      	ldr	r3, [pc, #520]	; (8007778 <tcp_input+0x73c>)
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 80e3 	bne.w	8007746 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007580:	69f8      	ldr	r0, [r7, #28]
 8007582:	f003 f9ad 	bl	800a8e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007586:	e0de      	b.n	8007746 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007588:	4a7c      	ldr	r2, [pc, #496]	; (800777c <tcp_input+0x740>)
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800758e:	69f8      	ldr	r0, [r7, #28]
 8007590:	f000 fb18 	bl	8007bc4 <tcp_process>
 8007594:	4603      	mov	r3, r0
 8007596:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007598:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800759c:	f113 0f0d 	cmn.w	r3, #13
 80075a0:	f000 80d3 	beq.w	800774a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80075a4:	4b71      	ldr	r3, [pc, #452]	; (800776c <tcp_input+0x730>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d015      	beq.n	80075dc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d008      	beq.n	80075cc <tcp_input+0x590>
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	6912      	ldr	r2, [r2, #16]
 80075c4:	f06f 010d 	mvn.w	r1, #13
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80075cc:	69f9      	ldr	r1, [r7, #28]
 80075ce:	486c      	ldr	r0, [pc, #432]	; (8007780 <tcp_input+0x744>)
 80075d0:	f7ff fbbc 	bl	8006d4c <tcp_pcb_remove>
        tcp_free(pcb);
 80075d4:	69f8      	ldr	r0, [r7, #28]
 80075d6:	f7fe f9a9 	bl	800592c <tcp_free>
 80075da:	e0da      	b.n	8007792 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80075e0:	4b63      	ldr	r3, [pc, #396]	; (8007770 <tcp_input+0x734>)
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01d      	beq.n	8007624 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80075e8:	4b61      	ldr	r3, [pc, #388]	; (8007770 <tcp_input+0x734>)
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <tcp_input+0x5d2>
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	6910      	ldr	r0, [r2, #16]
 8007602:	89fa      	ldrh	r2, [r7, #14]
 8007604:	69f9      	ldr	r1, [r7, #28]
 8007606:	4798      	blx	r3
 8007608:	4603      	mov	r3, r0
 800760a:	74fb      	strb	r3, [r7, #19]
 800760c:	e001      	b.n	8007612 <tcp_input+0x5d6>
 800760e:	2300      	movs	r3, #0
 8007610:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007612:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007616:	f113 0f0d 	cmn.w	r3, #13
 800761a:	f000 8098 	beq.w	800774e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800761e:	4b54      	ldr	r3, [pc, #336]	; (8007770 <tcp_input+0x734>)
 8007620:	2200      	movs	r2, #0
 8007622:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007624:	69f8      	ldr	r0, [r7, #28]
 8007626:	f000 f915 	bl	8007854 <tcp_input_delayed_close>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	f040 8090 	bne.w	8007752 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007632:	4b4d      	ldr	r3, [pc, #308]	; (8007768 <tcp_input+0x72c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d041      	beq.n	80076be <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800763e:	2b00      	cmp	r3, #0
 8007640:	d006      	beq.n	8007650 <tcp_input+0x614>
 8007642:	4b50      	ldr	r3, [pc, #320]	; (8007784 <tcp_input+0x748>)
 8007644:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007648:	494f      	ldr	r1, [pc, #316]	; (8007788 <tcp_input+0x74c>)
 800764a:	4850      	ldr	r0, [pc, #320]	; (800778c <tcp_input+0x750>)
 800764c:	f006 fc36 	bl	800debc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	8b5b      	ldrh	r3, [r3, #26]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800765c:	4b42      	ldr	r3, [pc, #264]	; (8007768 <tcp_input+0x72c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f7fd fe21 	bl	80052a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007666:	69f8      	ldr	r0, [r7, #28]
 8007668:	f7fe fc48 	bl	8005efc <tcp_abort>
            goto aborted;
 800766c:	e091      	b.n	8007792 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <tcp_input+0x656>
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	6918      	ldr	r0, [r3, #16]
 8007682:	4b39      	ldr	r3, [pc, #228]	; (8007768 <tcp_input+0x72c>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	2300      	movs	r3, #0
 8007688:	69f9      	ldr	r1, [r7, #28]
 800768a:	47a0      	blx	r4
 800768c:	4603      	mov	r3, r0
 800768e:	74fb      	strb	r3, [r7, #19]
 8007690:	e008      	b.n	80076a4 <tcp_input+0x668>
 8007692:	4b35      	ldr	r3, [pc, #212]	; (8007768 <tcp_input+0x72c>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	2300      	movs	r3, #0
 8007698:	69f9      	ldr	r1, [r7, #28]
 800769a:	2000      	movs	r0, #0
 800769c:	f7ff f95e 	bl	800695c <tcp_recv_null>
 80076a0:	4603      	mov	r3, r0
 80076a2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80076a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076a8:	f113 0f0d 	cmn.w	r3, #13
 80076ac:	d053      	beq.n	8007756 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80076ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80076b6:	4b2c      	ldr	r3, [pc, #176]	; (8007768 <tcp_input+0x72c>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80076be:	4b2b      	ldr	r3, [pc, #172]	; (800776c <tcp_input+0x730>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d030      	beq.n	800772c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d6:	7b5a      	ldrb	r2, [r3, #13]
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076dc:	f042 0220 	orr.w	r2, r2, #32
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	735a      	strb	r2, [r3, #13]
 80076e4:	e022      	b.n	800772c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80076ee:	d005      	beq.n	80076fc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f4:	3301      	adds	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <tcp_input+0x6e2>
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	6918      	ldr	r0, [r3, #16]
 8007710:	2300      	movs	r3, #0
 8007712:	2200      	movs	r2, #0
 8007714:	69f9      	ldr	r1, [r7, #28]
 8007716:	47a0      	blx	r4
 8007718:	4603      	mov	r3, r0
 800771a:	74fb      	strb	r3, [r7, #19]
 800771c:	e001      	b.n	8007722 <tcp_input+0x6e6>
 800771e:	2300      	movs	r3, #0
 8007720:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007722:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007726:	f113 0f0d 	cmn.w	r3, #13
 800772a:	d016      	beq.n	800775a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800772c:	4b13      	ldr	r3, [pc, #76]	; (800777c <tcp_input+0x740>)
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007732:	69f8      	ldr	r0, [r7, #28]
 8007734:	f000 f88e 	bl	8007854 <tcp_input_delayed_close>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d128      	bne.n	8007790 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800773e:	69f8      	ldr	r0, [r7, #28]
 8007740:	f002 fac8 	bl	8009cd4 <tcp_output>
 8007744:	e025      	b.n	8007792 <tcp_input+0x756>
        goto aborted;
 8007746:	bf00      	nop
 8007748:	e023      	b.n	8007792 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800774a:	bf00      	nop
 800774c:	e021      	b.n	8007792 <tcp_input+0x756>
              goto aborted;
 800774e:	bf00      	nop
 8007750:	e01f      	b.n	8007792 <tcp_input+0x756>
          goto aborted;
 8007752:	bf00      	nop
 8007754:	e01d      	b.n	8007792 <tcp_input+0x756>
            goto aborted;
 8007756:	bf00      	nop
 8007758:	e01b      	b.n	8007792 <tcp_input+0x756>
              goto aborted;
 800775a:	bf00      	nop
 800775c:	e019      	b.n	8007792 <tcp_input+0x756>
 800775e:	bf00      	nop
 8007760:	2000680c 	.word	0x2000680c
 8007764:	2000681c 	.word	0x2000681c
 8007768:	2000683c 	.word	0x2000683c
 800776c:	20006839 	.word	0x20006839
 8007770:	20006834 	.word	0x20006834
 8007774:	20006838 	.word	0x20006838
 8007778:	20006836 	.word	0x20006836
 800777c:	20006840 	.word	0x20006840
 8007780:	20006800 	.word	0x20006800
 8007784:	08010558 	.word	0x08010558
 8007788:	0801070c 	.word	0x0801070c
 800778c:	080105a4 	.word	0x080105a4
          goto aborted;
 8007790:	bf00      	nop
    tcp_input_pcb = NULL;
 8007792:	4b27      	ldr	r3, [pc, #156]	; (8007830 <tcp_input+0x7f4>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007798:	4b26      	ldr	r3, [pc, #152]	; (8007834 <tcp_input+0x7f8>)
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800779e:	4b26      	ldr	r3, [pc, #152]	; (8007838 <tcp_input+0x7fc>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d03f      	beq.n	8007826 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80077a6:	4b24      	ldr	r3, [pc, #144]	; (8007838 <tcp_input+0x7fc>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fd fd7c 	bl	80052a8 <pbuf_free>
      inseg.p = NULL;
 80077b0:	4b21      	ldr	r3, [pc, #132]	; (8007838 <tcp_input+0x7fc>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80077b6:	e036      	b.n	8007826 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80077b8:	4b20      	ldr	r3, [pc, #128]	; (800783c <tcp_input+0x800>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	899b      	ldrh	r3, [r3, #12]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fc fabd 	bl	8003d40 <lwip_htons>
 80077c6:	4603      	mov	r3, r0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d118      	bne.n	8007804 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077d2:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <tcp_input+0x804>)
 80077d4:	6819      	ldr	r1, [r3, #0]
 80077d6:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <tcp_input+0x808>)
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	4b1a      	ldr	r3, [pc, #104]	; (8007848 <tcp_input+0x80c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80077e2:	4b16      	ldr	r3, [pc, #88]	; (800783c <tcp_input+0x800>)
 80077e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077e6:	885b      	ldrh	r3, [r3, #2]
 80077e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80077ea:	4a14      	ldr	r2, [pc, #80]	; (800783c <tcp_input+0x800>)
 80077ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077ee:	8812      	ldrh	r2, [r2, #0]
 80077f0:	b292      	uxth	r2, r2
 80077f2:	9202      	str	r2, [sp, #8]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	4b15      	ldr	r3, [pc, #84]	; (800784c <tcp_input+0x810>)
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4b15      	ldr	r3, [pc, #84]	; (8007850 <tcp_input+0x814>)
 80077fc:	4602      	mov	r2, r0
 80077fe:	2000      	movs	r0, #0
 8007800:	f003 f81c 	bl	800a83c <tcp_rst>
    pbuf_free(p);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fd fd4f 	bl	80052a8 <pbuf_free>
  return;
 800780a:	e00c      	b.n	8007826 <tcp_input+0x7ea>
    goto dropped;
 800780c:	bf00      	nop
 800780e:	e006      	b.n	800781e <tcp_input+0x7e2>
    goto dropped;
 8007810:	bf00      	nop
 8007812:	e004      	b.n	800781e <tcp_input+0x7e2>
    goto dropped;
 8007814:	bf00      	nop
 8007816:	e002      	b.n	800781e <tcp_input+0x7e2>
      goto dropped;
 8007818:	bf00      	nop
 800781a:	e000      	b.n	800781e <tcp_input+0x7e2>
      goto dropped;
 800781c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fd fd42 	bl	80052a8 <pbuf_free>
 8007824:	e000      	b.n	8007828 <tcp_input+0x7ec>
  return;
 8007826:	bf00      	nop
}
 8007828:	3724      	adds	r7, #36	; 0x24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd90      	pop	{r4, r7, pc}
 800782e:	bf00      	nop
 8007830:	20006840 	.word	0x20006840
 8007834:	2000683c 	.word	0x2000683c
 8007838:	2000680c 	.word	0x2000680c
 800783c:	2000681c 	.word	0x2000681c
 8007840:	20006830 	.word	0x20006830
 8007844:	20006836 	.word	0x20006836
 8007848:	2000682c 	.word	0x2000682c
 800784c:	20003294 	.word	0x20003294
 8007850:	20003298 	.word	0x20003298

08007854 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <tcp_input_delayed_close+0x1c>
 8007862:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <tcp_input_delayed_close+0x6c>)
 8007864:	f240 225a 	movw	r2, #602	; 0x25a
 8007868:	4916      	ldr	r1, [pc, #88]	; (80078c4 <tcp_input_delayed_close+0x70>)
 800786a:	4817      	ldr	r0, [pc, #92]	; (80078c8 <tcp_input_delayed_close+0x74>)
 800786c:	f006 fb26 	bl	800debc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007870:	4b16      	ldr	r3, [pc, #88]	; (80078cc <tcp_input_delayed_close+0x78>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01c      	beq.n	80078b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	8b5b      	ldrh	r3, [r3, #26]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10d      	bne.n	80078a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788e:	2b00      	cmp	r3, #0
 8007890:	d008      	beq.n	80078a4 <tcp_input_delayed_close+0x50>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6912      	ldr	r2, [r2, #16]
 800789c:	f06f 010e 	mvn.w	r1, #14
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	480a      	ldr	r0, [pc, #40]	; (80078d0 <tcp_input_delayed_close+0x7c>)
 80078a8:	f7ff fa50 	bl	8006d4c <tcp_pcb_remove>
    tcp_free(pcb);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7fe f83d 	bl	800592c <tcp_free>
    return 1;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	08010558 	.word	0x08010558
 80078c4:	08010728 	.word	0x08010728
 80078c8:	080105a4 	.word	0x080105a4
 80078cc:	20006839 	.word	0x20006839
 80078d0:	20006800 	.word	0x20006800

080078d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b08b      	sub	sp, #44	; 0x2c
 80078d8:	af04      	add	r7, sp, #16
 80078da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80078dc:	4b6f      	ldr	r3, [pc, #444]	; (8007a9c <tcp_listen_input+0x1c8>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 80d2 	bne.w	8007a8e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <tcp_listen_input+0x2a>
 80078f0:	4b6b      	ldr	r3, [pc, #428]	; (8007aa0 <tcp_listen_input+0x1cc>)
 80078f2:	f240 2281 	movw	r2, #641	; 0x281
 80078f6:	496b      	ldr	r1, [pc, #428]	; (8007aa4 <tcp_listen_input+0x1d0>)
 80078f8:	486b      	ldr	r0, [pc, #428]	; (8007aa8 <tcp_listen_input+0x1d4>)
 80078fa:	f006 fadf 	bl	800debc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80078fe:	4b67      	ldr	r3, [pc, #412]	; (8007a9c <tcp_listen_input+0x1c8>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b00      	cmp	r3, #0
 8007908:	d019      	beq.n	800793e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800790a:	4b68      	ldr	r3, [pc, #416]	; (8007aac <tcp_listen_input+0x1d8>)
 800790c:	6819      	ldr	r1, [r3, #0]
 800790e:	4b68      	ldr	r3, [pc, #416]	; (8007ab0 <tcp_listen_input+0x1dc>)
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	4b67      	ldr	r3, [pc, #412]	; (8007ab4 <tcp_listen_input+0x1e0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800791a:	4b67      	ldr	r3, [pc, #412]	; (8007ab8 <tcp_listen_input+0x1e4>)
 800791c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800791e:	885b      	ldrh	r3, [r3, #2]
 8007920:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007922:	4a65      	ldr	r2, [pc, #404]	; (8007ab8 <tcp_listen_input+0x1e4>)
 8007924:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007926:	8812      	ldrh	r2, [r2, #0]
 8007928:	b292      	uxth	r2, r2
 800792a:	9202      	str	r2, [sp, #8]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	4b63      	ldr	r3, [pc, #396]	; (8007abc <tcp_listen_input+0x1e8>)
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	4b63      	ldr	r3, [pc, #396]	; (8007ac0 <tcp_listen_input+0x1ec>)
 8007934:	4602      	mov	r2, r0
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f002 ff80 	bl	800a83c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800793c:	e0a9      	b.n	8007a92 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800793e:	4b57      	ldr	r3, [pc, #348]	; (8007a9c <tcp_listen_input+0x1c8>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 80a3 	beq.w	8007a92 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7d5b      	ldrb	r3, [r3, #21]
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff f927 	bl	8006ba4 <tcp_alloc>
 8007956:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d111      	bne.n	8007982 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <tcp_listen_input+0xa8>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6910      	ldr	r0, [r2, #16]
 800796e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007972:	2100      	movs	r1, #0
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	73bb      	strb	r3, [r7, #14]
      return;
 800797a:	e08b      	b.n	8007a94 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800797c:	23f0      	movs	r3, #240	; 0xf0
 800797e:	73bb      	strb	r3, [r7, #14]
      return;
 8007980:	e088      	b.n	8007a94 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007982:	4b50      	ldr	r3, [pc, #320]	; (8007ac4 <tcp_listen_input+0x1f0>)
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800798a:	4b4e      	ldr	r3, [pc, #312]	; (8007ac4 <tcp_listen_input+0x1f0>)
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	8ada      	ldrh	r2, [r3, #22]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800799a:	4b47      	ldr	r3, [pc, #284]	; (8007ab8 <tcp_listen_input+0x1e4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2203      	movs	r2, #3
 80079aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80079ac:	4b41      	ldr	r3, [pc, #260]	; (8007ab4 <tcp_listen_input+0x1e0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80079be:	6978      	ldr	r0, [r7, #20]
 80079c0:	f7ff fa58 	bl	8006e74 <tcp_next_iss>
 80079c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80079de:	4b35      	ldr	r3, [pc, #212]	; (8007ab4 <tcp_listen_input+0x1e0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	1e5a      	subs	r2, r3, #1
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7a5b      	ldrb	r3, [r3, #9]
 80079fa:	f003 030c 	and.w	r3, r3, #12
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7a1a      	ldrb	r2, [r3, #8]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007a0c:	4b2e      	ldr	r3, [pc, #184]	; (8007ac8 <tcp_listen_input+0x1f4>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	60da      	str	r2, [r3, #12]
 8007a14:	4a2c      	ldr	r2, [pc, #176]	; (8007ac8 <tcp_listen_input+0x1f4>)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	f003 f8d1 	bl	800abc0 <tcp_timer_needed>
 8007a1e:	4b2b      	ldr	r3, [pc, #172]	; (8007acc <tcp_listen_input+0x1f8>)
 8007a20:	2201      	movs	r2, #1
 8007a22:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f001 fd8f 	bl	8009548 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007a2a:	4b23      	ldr	r3, [pc, #140]	; (8007ab8 <tcp_listen_input+0x1e4>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	89db      	ldrh	r3, [r3, #14]
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f004 ffe5 	bl	800ca1c <ip4_route>
 8007a52:	4601      	mov	r1, r0
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	3304      	adds	r3, #4
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f7ff fa30 	bl	8006ec0 <tcp_eff_send_mss_netif>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461a      	mov	r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007a68:	2112      	movs	r1, #18
 8007a6a:	6978      	ldr	r0, [r7, #20]
 8007a6c:	f002 f844 	bl	8009af8 <tcp_enqueue_flags>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	6978      	ldr	r0, [r7, #20]
 8007a80:	f7fe f97e 	bl	8005d80 <tcp_abandon>
      return;
 8007a84:	e006      	b.n	8007a94 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007a86:	6978      	ldr	r0, [r7, #20]
 8007a88:	f002 f924 	bl	8009cd4 <tcp_output>
  return;
 8007a8c:	e001      	b.n	8007a92 <tcp_listen_input+0x1be>
    return;
 8007a8e:	bf00      	nop
 8007a90:	e000      	b.n	8007a94 <tcp_listen_input+0x1c0>
  return;
 8007a92:	bf00      	nop
}
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd90      	pop	{r4, r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20006838 	.word	0x20006838
 8007aa0:	08010558 	.word	0x08010558
 8007aa4:	08010750 	.word	0x08010750
 8007aa8:	080105a4 	.word	0x080105a4
 8007aac:	20006830 	.word	0x20006830
 8007ab0:	20006836 	.word	0x20006836
 8007ab4:	2000682c 	.word	0x2000682c
 8007ab8:	2000681c 	.word	0x2000681c
 8007abc:	20003294 	.word	0x20003294
 8007ac0:	20003298 	.word	0x20003298
 8007ac4:	20003284 	.word	0x20003284
 8007ac8:	20006800 	.word	0x20006800
 8007acc:	20006808 	.word	0x20006808

08007ad0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af04      	add	r7, sp, #16
 8007ad6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007ad8:	4b2f      	ldr	r3, [pc, #188]	; (8007b98 <tcp_timewait_input+0xc8>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d153      	bne.n	8007b8c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d106      	bne.n	8007af8 <tcp_timewait_input+0x28>
 8007aea:	4b2c      	ldr	r3, [pc, #176]	; (8007b9c <tcp_timewait_input+0xcc>)
 8007aec:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007af0:	492b      	ldr	r1, [pc, #172]	; (8007ba0 <tcp_timewait_input+0xd0>)
 8007af2:	482c      	ldr	r0, [pc, #176]	; (8007ba4 <tcp_timewait_input+0xd4>)
 8007af4:	f006 f9e2 	bl	800debc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007af8:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <tcp_timewait_input+0xc8>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d02a      	beq.n	8007b5a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007b04:	4b28      	ldr	r3, [pc, #160]	; (8007ba8 <tcp_timewait_input+0xd8>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	db2d      	blt.n	8007b6e <tcp_timewait_input+0x9e>
 8007b12:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <tcp_timewait_input+0xd8>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007b1e:	440b      	add	r3, r1
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	dc23      	bgt.n	8007b6e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b26:	4b21      	ldr	r3, [pc, #132]	; (8007bac <tcp_timewait_input+0xdc>)
 8007b28:	6819      	ldr	r1, [r3, #0]
 8007b2a:	4b21      	ldr	r3, [pc, #132]	; (8007bb0 <tcp_timewait_input+0xe0>)
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	4b1d      	ldr	r3, [pc, #116]	; (8007ba8 <tcp_timewait_input+0xd8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b36:	4b1f      	ldr	r3, [pc, #124]	; (8007bb4 <tcp_timewait_input+0xe4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b3a:	885b      	ldrh	r3, [r3, #2]
 8007b3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b3e:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <tcp_timewait_input+0xe4>)
 8007b40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b42:	8812      	ldrh	r2, [r2, #0]
 8007b44:	b292      	uxth	r2, r2
 8007b46:	9202      	str	r2, [sp, #8]
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <tcp_timewait_input+0xe8>)
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <tcp_timewait_input+0xec>)
 8007b50:	4602      	mov	r2, r0
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f002 fe72 	bl	800a83c <tcp_rst>
      return;
 8007b58:	e01b      	b.n	8007b92 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007b5a:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <tcp_timewait_input+0xc8>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007b66:	4b16      	ldr	r3, [pc, #88]	; (8007bc0 <tcp_timewait_input+0xf0>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007b6e:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <tcp_timewait_input+0xe0>)
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00c      	beq.n	8007b90 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8b5b      	ldrh	r3, [r3, #26]
 8007b7a:	f043 0302 	orr.w	r3, r3, #2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f002 f8a5 	bl	8009cd4 <tcp_output>
  }
  return;
 8007b8a:	e001      	b.n	8007b90 <tcp_timewait_input+0xc0>
    return;
 8007b8c:	bf00      	nop
 8007b8e:	e000      	b.n	8007b92 <tcp_timewait_input+0xc2>
  return;
 8007b90:	bf00      	nop
}
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20006838 	.word	0x20006838
 8007b9c:	08010558 	.word	0x08010558
 8007ba0:	08010770 	.word	0x08010770
 8007ba4:	080105a4 	.word	0x080105a4
 8007ba8:	2000682c 	.word	0x2000682c
 8007bac:	20006830 	.word	0x20006830
 8007bb0:	20006836 	.word	0x20006836
 8007bb4:	2000681c 	.word	0x2000681c
 8007bb8:	20003294 	.word	0x20003294
 8007bbc:	20003298 	.word	0x20003298
 8007bc0:	200067f4 	.word	0x200067f4

08007bc4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007bc4:	b590      	push	{r4, r7, lr}
 8007bc6:	b08d      	sub	sp, #52	; 0x34
 8007bc8:	af04      	add	r7, sp, #16
 8007bca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <tcp_process+0x24>
 8007bda:	4b9d      	ldr	r3, [pc, #628]	; (8007e50 <tcp_process+0x28c>)
 8007bdc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007be0:	499c      	ldr	r1, [pc, #624]	; (8007e54 <tcp_process+0x290>)
 8007be2:	489d      	ldr	r0, [pc, #628]	; (8007e58 <tcp_process+0x294>)
 8007be4:	f006 f96a 	bl	800debc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007be8:	4b9c      	ldr	r3, [pc, #624]	; (8007e5c <tcp_process+0x298>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d04e      	beq.n	8007c92 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7d1b      	ldrb	r3, [r3, #20]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d108      	bne.n	8007c0e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c00:	4b97      	ldr	r3, [pc, #604]	; (8007e60 <tcp_process+0x29c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d123      	bne.n	8007c50 <tcp_process+0x8c>
        acceptable = 1;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	76fb      	strb	r3, [r7, #27]
 8007c0c:	e020      	b.n	8007c50 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c12:	4b94      	ldr	r3, [pc, #592]	; (8007e64 <tcp_process+0x2a0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d102      	bne.n	8007c20 <tcp_process+0x5c>
        acceptable = 1;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	76fb      	strb	r3, [r7, #27]
 8007c1e:	e017      	b.n	8007c50 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007c20:	4b90      	ldr	r3, [pc, #576]	; (8007e64 <tcp_process+0x2a0>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	db10      	blt.n	8007c50 <tcp_process+0x8c>
 8007c2e:	4b8d      	ldr	r3, [pc, #564]	; (8007e64 <tcp_process+0x2a0>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007c3a:	440b      	add	r3, r1
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dc06      	bgt.n	8007c50 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	8b5b      	ldrh	r3, [r3, #26]
 8007c46:	f043 0302 	orr.w	r3, r3, #2
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007c50:	7efb      	ldrb	r3, [r7, #27]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d01b      	beq.n	8007c8e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7d1b      	ldrb	r3, [r3, #20]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <tcp_process+0xa8>
 8007c5e:	4b7c      	ldr	r3, [pc, #496]	; (8007e50 <tcp_process+0x28c>)
 8007c60:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007c64:	4980      	ldr	r1, [pc, #512]	; (8007e68 <tcp_process+0x2a4>)
 8007c66:	487c      	ldr	r0, [pc, #496]	; (8007e58 <tcp_process+0x294>)
 8007c68:	f006 f928 	bl	800debc <iprintf>
      recv_flags |= TF_RESET;
 8007c6c:	4b7f      	ldr	r3, [pc, #508]	; (8007e6c <tcp_process+0x2a8>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	f043 0308 	orr.w	r3, r3, #8
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	4b7d      	ldr	r3, [pc, #500]	; (8007e6c <tcp_process+0x2a8>)
 8007c78:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	8b5b      	ldrh	r3, [r3, #26]
 8007c7e:	f023 0301 	bic.w	r3, r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007c88:	f06f 030d 	mvn.w	r3, #13
 8007c8c:	e37a      	b.n	8008384 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e378      	b.n	8008384 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007c92:	4b72      	ldr	r3, [pc, #456]	; (8007e5c <tcp_process+0x298>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d010      	beq.n	8007cc0 <tcp_process+0xfc>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	7d1b      	ldrb	r3, [r3, #20]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d00c      	beq.n	8007cc0 <tcp_process+0xfc>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	7d1b      	ldrb	r3, [r3, #20]
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d008      	beq.n	8007cc0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	8b5b      	ldrh	r3, [r3, #26]
 8007cb2:	f043 0302 	orr.w	r3, r3, #2
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e361      	b.n	8008384 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8b5b      	ldrh	r3, [r3, #26]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007ccc:	4b68      	ldr	r3, [pc, #416]	; (8007e70 <tcp_process+0x2ac>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fc2f 	bl	8009548 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7d1b      	ldrb	r3, [r3, #20]
 8007cee:	3b02      	subs	r3, #2
 8007cf0:	2b07      	cmp	r3, #7
 8007cf2:	f200 8337 	bhi.w	8008364 <tcp_process+0x7a0>
 8007cf6:	a201      	add	r2, pc, #4	; (adr r2, 8007cfc <tcp_process+0x138>)
 8007cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfc:	08007d1d 	.word	0x08007d1d
 8007d00:	08007f4d 	.word	0x08007f4d
 8007d04:	080080c5 	.word	0x080080c5
 8007d08:	080080ef 	.word	0x080080ef
 8007d0c:	08008213 	.word	0x08008213
 8007d10:	080080c5 	.word	0x080080c5
 8007d14:	0800829f 	.word	0x0800829f
 8007d18:	0800832f 	.word	0x0800832f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007d1c:	4b4f      	ldr	r3, [pc, #316]	; (8007e5c <tcp_process+0x298>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80e4 	beq.w	8007ef2 <tcp_process+0x32e>
 8007d2a:	4b4c      	ldr	r3, [pc, #304]	; (8007e5c <tcp_process+0x298>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 80dd 	beq.w	8007ef2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	4b48      	ldr	r3, [pc, #288]	; (8007e60 <tcp_process+0x29c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	f040 80d5 	bne.w	8007ef2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007d48:	4b46      	ldr	r3, [pc, #280]	; (8007e64 <tcp_process+0x2a0>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007d5a:	4b41      	ldr	r3, [pc, #260]	; (8007e60 <tcp_process+0x29c>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007d62:	4b44      	ldr	r3, [pc, #272]	; (8007e74 <tcp_process+0x2b0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	89db      	ldrh	r3, [r3, #14]
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007d7c:	4b39      	ldr	r3, [pc, #228]	; (8007e64 <tcp_process+0x2a0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	1e5a      	subs	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2204      	movs	r2, #4
 8007d8a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4618      	mov	r0, r3
 8007d96:	f004 fe41 	bl	800ca1c <ip4_route>
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	461a      	mov	r2, r3
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7ff f88c 	bl	8006ec0 <tcp_eff_send_mss_netif>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007db4:	009a      	lsls	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	f241 111c 	movw	r1, #4380	; 0x111c
 8007dc0:	428b      	cmp	r3, r1
 8007dc2:	bf38      	it	cc
 8007dc4:	460b      	movcc	r3, r1
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d204      	bcs.n	8007dd4 <tcp_process+0x210>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	e00d      	b.n	8007df0 <tcp_process+0x22c>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	f241 121c 	movw	r2, #4380	; 0x111c
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d904      	bls.n	8007dec <tcp_process+0x228>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	e001      	b.n	8007df0 <tcp_process+0x22c>
 8007dec:	f241 131c 	movw	r3, #4380	; 0x111c
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d106      	bne.n	8007e0e <tcp_process+0x24a>
 8007e00:	4b13      	ldr	r3, [pc, #76]	; (8007e50 <tcp_process+0x28c>)
 8007e02:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007e06:	491c      	ldr	r1, [pc, #112]	; (8007e78 <tcp_process+0x2b4>)
 8007e08:	4813      	ldr	r0, [pc, #76]	; (8007e58 <tcp_process+0x294>)
 8007e0a:	f006 f857 	bl	800debc <iprintf>
        --pcb->snd_queuelen;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007e14:	3b01      	subs	r3, #1
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e22:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d12a      	bne.n	8007e80 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <tcp_process+0x280>
 8007e36:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <tcp_process+0x28c>)
 8007e38:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007e3c:	490f      	ldr	r1, [pc, #60]	; (8007e7c <tcp_process+0x2b8>)
 8007e3e:	4806      	ldr	r0, [pc, #24]	; (8007e58 <tcp_process+0x294>)
 8007e40:	f006 f83c 	bl	800debc <iprintf>
          pcb->unsent = rseg->next;
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8007e4c:	e01c      	b.n	8007e88 <tcp_process+0x2c4>
 8007e4e:	bf00      	nop
 8007e50:	08010558 	.word	0x08010558
 8007e54:	08010790 	.word	0x08010790
 8007e58:	080105a4 	.word	0x080105a4
 8007e5c:	20006838 	.word	0x20006838
 8007e60:	20006830 	.word	0x20006830
 8007e64:	2000682c 	.word	0x2000682c
 8007e68:	080107ac 	.word	0x080107ac
 8007e6c:	20006839 	.word	0x20006839
 8007e70:	200067f4 	.word	0x200067f4
 8007e74:	2000681c 	.word	0x2000681c
 8007e78:	080107cc 	.word	0x080107cc
 8007e7c:	080107e4 	.word	0x080107e4
        } else {
          pcb->unacked = rseg->next;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007e88:	69f8      	ldr	r0, [r7, #28]
 8007e8a:	f7fe fd22 	bl	80068d2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e9c:	861a      	strh	r2, [r3, #48]	; 0x30
 8007e9e:	e006      	b.n	8007eae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <tcp_process+0x30a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6910      	ldr	r0, [r2, #16]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	4798      	blx	r3
 8007ec8:	4603      	mov	r3, r0
 8007eca:	76bb      	strb	r3, [r7, #26]
 8007ecc:	e001      	b.n	8007ed2 <tcp_process+0x30e>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007ed2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007ed6:	f113 0f0d 	cmn.w	r3, #13
 8007eda:	d102      	bne.n	8007ee2 <tcp_process+0x31e>
          return ERR_ABRT;
 8007edc:	f06f 030c 	mvn.w	r3, #12
 8007ee0:	e250      	b.n	8008384 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8b5b      	ldrh	r3, [r3, #26]
 8007ee6:	f043 0302 	orr.w	r3, r3, #2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007ef0:	e23a      	b.n	8008368 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007ef2:	4b98      	ldr	r3, [pc, #608]	; (8008154 <tcp_process+0x590>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 8234 	beq.w	8008368 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f00:	4b95      	ldr	r3, [pc, #596]	; (8008158 <tcp_process+0x594>)
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	4b95      	ldr	r3, [pc, #596]	; (800815c <tcp_process+0x598>)
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4b95      	ldr	r3, [pc, #596]	; (8008160 <tcp_process+0x59c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f10:	4b94      	ldr	r3, [pc, #592]	; (8008164 <tcp_process+0x5a0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f18:	4a92      	ldr	r2, [pc, #584]	; (8008164 <tcp_process+0x5a0>)
 8007f1a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f1c:	8812      	ldrh	r2, [r2, #0]
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	9202      	str	r2, [sp, #8]
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	4b90      	ldr	r3, [pc, #576]	; (8008168 <tcp_process+0x5a4>)
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	4b90      	ldr	r3, [pc, #576]	; (800816c <tcp_process+0x5a8>)
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f002 fc85 	bl	800a83c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f38:	2b05      	cmp	r3, #5
 8007f3a:	f200 8215 	bhi.w	8008368 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f002 fa4f 	bl	800a3e8 <tcp_rexmit_rto>
      break;
 8007f4a:	e20d      	b.n	8008368 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007f4c:	4b81      	ldr	r3, [pc, #516]	; (8008154 <tcp_process+0x590>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 80a1 	beq.w	800809c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007f5a:	4b7f      	ldr	r3, [pc, #508]	; (8008158 <tcp_process+0x594>)
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	db7e      	blt.n	8008068 <tcp_process+0x4a4>
 8007f6a:	4b7b      	ldr	r3, [pc, #492]	; (8008158 <tcp_process+0x594>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dc77      	bgt.n	8008068 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007f86:	23fa      	movs	r3, #250	; 0xfa
 8007f88:	76bb      	strb	r3, [r7, #26]
 8007f8a:	e01d      	b.n	8007fc8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <tcp_process+0x3e0>
 8007f96:	4b76      	ldr	r3, [pc, #472]	; (8008170 <tcp_process+0x5ac>)
 8007f98:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007f9c:	4975      	ldr	r1, [pc, #468]	; (8008174 <tcp_process+0x5b0>)
 8007f9e:	4876      	ldr	r0, [pc, #472]	; (8008178 <tcp_process+0x5b4>)
 8007fa0:	f005 ff8c 	bl	800debc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <tcp_process+0x400>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6910      	ldr	r0, [r2, #16]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4798      	blx	r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	76bb      	strb	r3, [r7, #26]
 8007fc2:	e001      	b.n	8007fc8 <tcp_process+0x404>
 8007fc4:	23f0      	movs	r3, #240	; 0xf0
 8007fc6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007fc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00a      	beq.n	8007fe6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007fd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007fd4:	f113 0f0d 	cmn.w	r3, #13
 8007fd8:	d002      	beq.n	8007fe0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fd ff8e 	bl	8005efc <tcp_abort>
            }
            return ERR_ABRT;
 8007fe0:	f06f 030c 	mvn.w	r3, #12
 8007fe4:	e1ce      	b.n	8008384 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fae0 	bl	80085ac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007fec:	4b63      	ldr	r3, [pc, #396]	; (800817c <tcp_process+0x5b8>)
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <tcp_process+0x43c>
            recv_acked--;
 8007ff4:	4b61      	ldr	r3, [pc, #388]	; (800817c <tcp_process+0x5b8>)
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	4b5f      	ldr	r3, [pc, #380]	; (800817c <tcp_process+0x5b8>)
 8007ffe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008004:	009a      	lsls	r2, r3, #2
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008010:	428b      	cmp	r3, r1
 8008012:	bf38      	it	cc
 8008014:	460b      	movcc	r3, r1
 8008016:	429a      	cmp	r2, r3
 8008018:	d204      	bcs.n	8008024 <tcp_process+0x460>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	b29b      	uxth	r3, r3
 8008022:	e00d      	b.n	8008040 <tcp_process+0x47c>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	f241 121c 	movw	r2, #4380	; 0x111c
 800802e:	4293      	cmp	r3, r2
 8008030:	d904      	bls.n	800803c <tcp_process+0x478>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	b29b      	uxth	r3, r3
 800803a:	e001      	b.n	8008040 <tcp_process+0x47c>
 800803c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008046:	4b4e      	ldr	r3, [pc, #312]	; (8008180 <tcp_process+0x5bc>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b00      	cmp	r3, #0
 8008050:	d037      	beq.n	80080c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	8b5b      	ldrh	r3, [r3, #26]
 8008056:	f043 0302 	orr.w	r3, r3, #2
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2207      	movs	r2, #7
 8008064:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008066:	e02c      	b.n	80080c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008068:	4b3b      	ldr	r3, [pc, #236]	; (8008158 <tcp_process+0x594>)
 800806a:	6819      	ldr	r1, [r3, #0]
 800806c:	4b3b      	ldr	r3, [pc, #236]	; (800815c <tcp_process+0x598>)
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	4b3b      	ldr	r3, [pc, #236]	; (8008160 <tcp_process+0x59c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008078:	4b3a      	ldr	r3, [pc, #232]	; (8008164 <tcp_process+0x5a0>)
 800807a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008080:	4a38      	ldr	r2, [pc, #224]	; (8008164 <tcp_process+0x5a0>)
 8008082:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008084:	8812      	ldrh	r2, [r2, #0]
 8008086:	b292      	uxth	r2, r2
 8008088:	9202      	str	r2, [sp, #8]
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <tcp_process+0x5a4>)
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	4b36      	ldr	r3, [pc, #216]	; (800816c <tcp_process+0x5a8>)
 8008092:	4602      	mov	r2, r0
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f002 fbd1 	bl	800a83c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800809a:	e167      	b.n	800836c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800809c:	4b2d      	ldr	r3, [pc, #180]	; (8008154 <tcp_process+0x590>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8161 	beq.w	800836c <tcp_process+0x7a8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	1e5a      	subs	r2, r3, #1
 80080b0:	4b2b      	ldr	r3, [pc, #172]	; (8008160 <tcp_process+0x59c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	f040 8159 	bne.w	800836c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f002 f9b6 	bl	800a42c <tcp_rexmit>
      break;
 80080c0:	e154      	b.n	800836c <tcp_process+0x7a8>
 80080c2:	e153      	b.n	800836c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa71 	bl	80085ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80080ca:	4b2d      	ldr	r3, [pc, #180]	; (8008180 <tcp_process+0x5bc>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 814c 	beq.w	8008370 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8b5b      	ldrh	r3, [r3, #26]
 80080dc:	f043 0302 	orr.w	r3, r3, #2
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2207      	movs	r2, #7
 80080ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080ec:	e140      	b.n	8008370 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa5c 	bl	80085ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80080f4:	4b22      	ldr	r3, [pc, #136]	; (8008180 <tcp_process+0x5bc>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d071      	beq.n	80081e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008100:	4b14      	ldr	r3, [pc, #80]	; (8008154 <tcp_process+0x590>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b00      	cmp	r3, #0
 800810a:	d060      	beq.n	80081ce <tcp_process+0x60a>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008110:	4b11      	ldr	r3, [pc, #68]	; (8008158 <tcp_process+0x594>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d15a      	bne.n	80081ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800811c:	2b00      	cmp	r3, #0
 800811e:	d156      	bne.n	80081ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	8b5b      	ldrh	r3, [r3, #26]
 8008124:	f043 0302 	orr.w	r3, r3, #2
 8008128:	b29a      	uxth	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fe fdbc 	bl	8006cac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008134:	4b13      	ldr	r3, [pc, #76]	; (8008184 <tcp_process+0x5c0>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	429a      	cmp	r2, r3
 800813c:	d105      	bne.n	800814a <tcp_process+0x586>
 800813e:	4b11      	ldr	r3, [pc, #68]	; (8008184 <tcp_process+0x5c0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	4a0f      	ldr	r2, [pc, #60]	; (8008184 <tcp_process+0x5c0>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	e02e      	b.n	80081a8 <tcp_process+0x5e4>
 800814a:	4b0e      	ldr	r3, [pc, #56]	; (8008184 <tcp_process+0x5c0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e027      	b.n	80081a2 <tcp_process+0x5de>
 8008152:	bf00      	nop
 8008154:	20006838 	.word	0x20006838
 8008158:	20006830 	.word	0x20006830
 800815c:	20006836 	.word	0x20006836
 8008160:	2000682c 	.word	0x2000682c
 8008164:	2000681c 	.word	0x2000681c
 8008168:	20003294 	.word	0x20003294
 800816c:	20003298 	.word	0x20003298
 8008170:	08010558 	.word	0x08010558
 8008174:	080107f8 	.word	0x080107f8
 8008178:	080105a4 	.word	0x080105a4
 800817c:	20006834 	.word	0x20006834
 8008180:	20006839 	.word	0x20006839
 8008184:	20006800 	.word	0x20006800
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	429a      	cmp	r2, r3
 8008190:	d104      	bne.n	800819c <tcp_process+0x5d8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	e005      	b.n	80081a8 <tcp_process+0x5e4>
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1ef      	bne.n	8008188 <tcp_process+0x5c4>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	4b77      	ldr	r3, [pc, #476]	; (800838c <tcp_process+0x7c8>)
 80081b0:	2201      	movs	r2, #1
 80081b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	220a      	movs	r2, #10
 80081b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80081ba:	4b75      	ldr	r3, [pc, #468]	; (8008390 <tcp_process+0x7cc>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	4a73      	ldr	r2, [pc, #460]	; (8008390 <tcp_process+0x7cc>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	f002 fcfa 	bl	800abc0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80081cc:	e0d2      	b.n	8008374 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	8b5b      	ldrh	r3, [r3, #26]
 80081d2:	f043 0302 	orr.w	r3, r3, #2
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2208      	movs	r2, #8
 80081e0:	751a      	strb	r2, [r3, #20]
      break;
 80081e2:	e0c7      	b.n	8008374 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081e4:	4b6b      	ldr	r3, [pc, #428]	; (8008394 <tcp_process+0x7d0>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 80c1 	beq.w	8008374 <tcp_process+0x7b0>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081f6:	4b68      	ldr	r3, [pc, #416]	; (8008398 <tcp_process+0x7d4>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	f040 80ba 	bne.w	8008374 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 80b5 	bne.w	8008374 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2206      	movs	r2, #6
 800820e:	751a      	strb	r2, [r3, #20]
      break;
 8008210:	e0b0      	b.n	8008374 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f9ca 	bl	80085ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008218:	4b60      	ldr	r3, [pc, #384]	; (800839c <tcp_process+0x7d8>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80a9 	beq.w	8008378 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	8b5b      	ldrh	r3, [r3, #26]
 800822a:	f043 0302 	orr.w	r3, r3, #2
 800822e:	b29a      	uxth	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7fe fd39 	bl	8006cac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800823a:	4b59      	ldr	r3, [pc, #356]	; (80083a0 <tcp_process+0x7dc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d105      	bne.n	8008250 <tcp_process+0x68c>
 8008244:	4b56      	ldr	r3, [pc, #344]	; (80083a0 <tcp_process+0x7dc>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	4a55      	ldr	r2, [pc, #340]	; (80083a0 <tcp_process+0x7dc>)
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	e013      	b.n	8008278 <tcp_process+0x6b4>
 8008250:	4b53      	ldr	r3, [pc, #332]	; (80083a0 <tcp_process+0x7dc>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	613b      	str	r3, [r7, #16]
 8008256:	e00c      	b.n	8008272 <tcp_process+0x6ae>
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	429a      	cmp	r2, r3
 8008260:	d104      	bne.n	800826c <tcp_process+0x6a8>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	60da      	str	r2, [r3, #12]
 800826a:	e005      	b.n	8008278 <tcp_process+0x6b4>
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1ef      	bne.n	8008258 <tcp_process+0x694>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	60da      	str	r2, [r3, #12]
 800827e:	4b43      	ldr	r3, [pc, #268]	; (800838c <tcp_process+0x7c8>)
 8008280:	2201      	movs	r2, #1
 8008282:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	220a      	movs	r2, #10
 8008288:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800828a:	4b41      	ldr	r3, [pc, #260]	; (8008390 <tcp_process+0x7cc>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60da      	str	r2, [r3, #12]
 8008292:	4a3f      	ldr	r2, [pc, #252]	; (8008390 <tcp_process+0x7cc>)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	f002 fc92 	bl	800abc0 <tcp_timer_needed>
      }
      break;
 800829c:	e06c      	b.n	8008378 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f984 	bl	80085ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80082a4:	4b3b      	ldr	r3, [pc, #236]	; (8008394 <tcp_process+0x7d0>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d065      	beq.n	800837c <tcp_process+0x7b8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082b4:	4b38      	ldr	r3, [pc, #224]	; (8008398 <tcp_process+0x7d4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d15f      	bne.n	800837c <tcp_process+0x7b8>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d15b      	bne.n	800837c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7fe fcf1 	bl	8006cac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80082ca:	4b35      	ldr	r3, [pc, #212]	; (80083a0 <tcp_process+0x7dc>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d105      	bne.n	80082e0 <tcp_process+0x71c>
 80082d4:	4b32      	ldr	r3, [pc, #200]	; (80083a0 <tcp_process+0x7dc>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	4a31      	ldr	r2, [pc, #196]	; (80083a0 <tcp_process+0x7dc>)
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	e013      	b.n	8008308 <tcp_process+0x744>
 80082e0:	4b2f      	ldr	r3, [pc, #188]	; (80083a0 <tcp_process+0x7dc>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e00c      	b.n	8008302 <tcp_process+0x73e>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d104      	bne.n	80082fc <tcp_process+0x738>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	60da      	str	r2, [r3, #12]
 80082fa:	e005      	b.n	8008308 <tcp_process+0x744>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1ef      	bne.n	80082e8 <tcp_process+0x724>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	60da      	str	r2, [r3, #12]
 800830e:	4b1f      	ldr	r3, [pc, #124]	; (800838c <tcp_process+0x7c8>)
 8008310:	2201      	movs	r2, #1
 8008312:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	220a      	movs	r2, #10
 8008318:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800831a:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <tcp_process+0x7cc>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	4a1b      	ldr	r2, [pc, #108]	; (8008390 <tcp_process+0x7cc>)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	f002 fc4a 	bl	800abc0 <tcp_timer_needed>
      }
      break;
 800832c:	e026      	b.n	800837c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f93c 	bl	80085ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008334:	4b17      	ldr	r3, [pc, #92]	; (8008394 <tcp_process+0x7d0>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	f003 0310 	and.w	r3, r3, #16
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01f      	beq.n	8008380 <tcp_process+0x7bc>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008344:	4b14      	ldr	r3, [pc, #80]	; (8008398 <tcp_process+0x7d4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	429a      	cmp	r2, r3
 800834a:	d119      	bne.n	8008380 <tcp_process+0x7bc>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d115      	bne.n	8008380 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <tcp_process+0x7d8>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f043 0310 	orr.w	r3, r3, #16
 800835c:	b2da      	uxtb	r2, r3
 800835e:	4b0f      	ldr	r3, [pc, #60]	; (800839c <tcp_process+0x7d8>)
 8008360:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008362:	e00d      	b.n	8008380 <tcp_process+0x7bc>
    default:
      break;
 8008364:	bf00      	nop
 8008366:	e00c      	b.n	8008382 <tcp_process+0x7be>
      break;
 8008368:	bf00      	nop
 800836a:	e00a      	b.n	8008382 <tcp_process+0x7be>
      break;
 800836c:	bf00      	nop
 800836e:	e008      	b.n	8008382 <tcp_process+0x7be>
      break;
 8008370:	bf00      	nop
 8008372:	e006      	b.n	8008382 <tcp_process+0x7be>
      break;
 8008374:	bf00      	nop
 8008376:	e004      	b.n	8008382 <tcp_process+0x7be>
      break;
 8008378:	bf00      	nop
 800837a:	e002      	b.n	8008382 <tcp_process+0x7be>
      break;
 800837c:	bf00      	nop
 800837e:	e000      	b.n	8008382 <tcp_process+0x7be>
      break;
 8008380:	bf00      	nop
  }
  return ERR_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3724      	adds	r7, #36	; 0x24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd90      	pop	{r4, r7, pc}
 800838c:	20006808 	.word	0x20006808
 8008390:	20006804 	.word	0x20006804
 8008394:	20006838 	.word	0x20006838
 8008398:	20006830 	.word	0x20006830
 800839c:	20006839 	.word	0x20006839
 80083a0:	20006800 	.word	0x20006800

080083a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <tcp_oos_insert_segment+0x1e>
 80083b4:	4b3b      	ldr	r3, [pc, #236]	; (80084a4 <tcp_oos_insert_segment+0x100>)
 80083b6:	f240 421f 	movw	r2, #1055	; 0x41f
 80083ba:	493b      	ldr	r1, [pc, #236]	; (80084a8 <tcp_oos_insert_segment+0x104>)
 80083bc:	483b      	ldr	r0, [pc, #236]	; (80084ac <tcp_oos_insert_segment+0x108>)
 80083be:	f005 fd7d 	bl	800debc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	899b      	ldrh	r3, [r3, #12]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fb fcb8 	bl	8003d40 <lwip_htons>
 80083d0:	4603      	mov	r3, r0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d028      	beq.n	800842e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80083dc:	6838      	ldr	r0, [r7, #0]
 80083de:	f7fe fa63 	bl	80068a8 <tcp_segs_free>
    next = NULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	603b      	str	r3, [r7, #0]
 80083e6:	e056      	b.n	8008496 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	899b      	ldrh	r3, [r3, #12]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fb fca5 	bl	8003d40 <lwip_htons>
 80083f6:	4603      	mov	r3, r0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	899b      	ldrh	r3, [r3, #12]
 8008408:	b29c      	uxth	r4, r3
 800840a:	2001      	movs	r0, #1
 800840c:	f7fb fc98 	bl	8003d40 <lwip_htons>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	4322      	orrs	r2, r4
 800841a:	b292      	uxth	r2, r2
 800841c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f7fe fa52 	bl	80068d2 <tcp_seg_free>
    while (next &&
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00e      	beq.n	8008452 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	891b      	ldrh	r3, [r3, #8]
 8008438:	461a      	mov	r2, r3
 800843a:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <tcp_oos_insert_segment+0x10c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	441a      	add	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	8909      	ldrh	r1, [r1, #8]
 800844a:	440b      	add	r3, r1
 800844c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800844e:	2b00      	cmp	r3, #0
 8008450:	daca      	bge.n	80083e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01e      	beq.n	8008496 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	891b      	ldrh	r3, [r3, #8]
 800845c:	461a      	mov	r2, r3
 800845e:	4b14      	ldr	r3, [pc, #80]	; (80084b0 <tcp_oos_insert_segment+0x10c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	441a      	add	r2, r3
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd12      	ble.n	8008496 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	b29a      	uxth	r2, r3
 8008478:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <tcp_oos_insert_segment+0x10c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	b29b      	uxth	r3, r3
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	b29a      	uxth	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	891b      	ldrh	r3, [r3, #8]
 800848e:	4619      	mov	r1, r3
 8008490:	4610      	mov	r0, r2
 8008492:	f7fc fd83 	bl	8004f9c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	601a      	str	r2, [r3, #0]
}
 800849c:	bf00      	nop
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}
 80084a4:	08010558 	.word	0x08010558
 80084a8:	08010818 	.word	0x08010818
 80084ac:	080105a4 	.word	0x080105a4
 80084b0:	2000682c 	.word	0x2000682c

080084b4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80084b4:	b5b0      	push	{r4, r5, r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80084c2:	e03e      	b.n	8008542 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fc ff70 	bl	80053b8 <pbuf_clen>
 80084d8:	4603      	mov	r3, r0
 80084da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80084e2:	8a7a      	ldrh	r2, [r7, #18]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d906      	bls.n	80084f6 <tcp_free_acked_segments+0x42>
 80084e8:	4b2a      	ldr	r3, [pc, #168]	; (8008594 <tcp_free_acked_segments+0xe0>)
 80084ea:	f240 4257 	movw	r2, #1111	; 0x457
 80084ee:	492a      	ldr	r1, [pc, #168]	; (8008598 <tcp_free_acked_segments+0xe4>)
 80084f0:	482a      	ldr	r0, [pc, #168]	; (800859c <tcp_free_acked_segments+0xe8>)
 80084f2:	f005 fce3 	bl	800debc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80084fc:	8a7b      	ldrh	r3, [r7, #18]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	891a      	ldrh	r2, [r3, #8]
 800850c:	4b24      	ldr	r3, [pc, #144]	; (80085a0 <tcp_free_acked_segments+0xec>)
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	4413      	add	r3, r2
 8008512:	b29a      	uxth	r2, r3
 8008514:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <tcp_free_acked_segments+0xec>)
 8008516:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008518:	6978      	ldr	r0, [r7, #20]
 800851a:	f7fe f9da 	bl	80068d2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00c      	beq.n	8008542 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d109      	bne.n	8008542 <tcp_free_acked_segments+0x8e>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <tcp_free_acked_segments+0x8e>
 8008534:	4b17      	ldr	r3, [pc, #92]	; (8008594 <tcp_free_acked_segments+0xe0>)
 8008536:	f240 4261 	movw	r2, #1121	; 0x461
 800853a:	491a      	ldr	r1, [pc, #104]	; (80085a4 <tcp_free_acked_segments+0xf0>)
 800853c:	4817      	ldr	r0, [pc, #92]	; (800859c <tcp_free_acked_segments+0xe8>)
 800853e:	f005 fcbd 	bl	800debc <iprintf>
  while (seg_list != NULL &&
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d020      	beq.n	800858a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	4618      	mov	r0, r3
 8008550:	f7fb fc0b 	bl	8003d6a <lwip_htonl>
 8008554:	4604      	mov	r4, r0
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	891b      	ldrh	r3, [r3, #8]
 800855a:	461d      	mov	r5, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	899b      	ldrh	r3, [r3, #12]
 8008562:	b29b      	uxth	r3, r3
 8008564:	4618      	mov	r0, r3
 8008566:	f7fb fbeb 	bl	8003d40 <lwip_htons>
 800856a:	4603      	mov	r3, r0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <tcp_free_acked_segments+0xc6>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <tcp_free_acked_segments+0xc8>
 800857a:	2300      	movs	r3, #0
 800857c:	442b      	add	r3, r5
 800857e:	18e2      	adds	r2, r4, r3
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <tcp_free_acked_segments+0xf4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd9c      	ble.n	80084c4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800858a:	68bb      	ldr	r3, [r7, #8]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bdb0      	pop	{r4, r5, r7, pc}
 8008594:	08010558 	.word	0x08010558
 8008598:	08010840 	.word	0x08010840
 800859c:	080105a4 	.word	0x080105a4
 80085a0:	20006834 	.word	0x20006834
 80085a4:	08010868 	.word	0x08010868
 80085a8:	20006830 	.word	0x20006830

080085ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80085ac:	b5b0      	push	{r4, r5, r7, lr}
 80085ae:	b094      	sub	sp, #80	; 0x50
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <tcp_receive+0x20>
 80085be:	4b91      	ldr	r3, [pc, #580]	; (8008804 <tcp_receive+0x258>)
 80085c0:	f240 427b 	movw	r2, #1147	; 0x47b
 80085c4:	4990      	ldr	r1, [pc, #576]	; (8008808 <tcp_receive+0x25c>)
 80085c6:	4891      	ldr	r0, [pc, #580]	; (800880c <tcp_receive+0x260>)
 80085c8:	f005 fc78 	bl	800debc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7d1b      	ldrb	r3, [r3, #20]
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d806      	bhi.n	80085e2 <tcp_receive+0x36>
 80085d4:	4b8b      	ldr	r3, [pc, #556]	; (8008804 <tcp_receive+0x258>)
 80085d6:	f240 427c 	movw	r2, #1148	; 0x47c
 80085da:	498d      	ldr	r1, [pc, #564]	; (8008810 <tcp_receive+0x264>)
 80085dc:	488b      	ldr	r0, [pc, #556]	; (800880c <tcp_receive+0x260>)
 80085de:	f005 fc6d 	bl	800debc <iprintf>

  if (flags & TCP_ACK) {
 80085e2:	4b8c      	ldr	r3, [pc, #560]	; (8008814 <tcp_receive+0x268>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8264 	beq.w	8008ab8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fc:	4413      	add	r3, r2
 80085fe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008604:	4b84      	ldr	r3, [pc, #528]	; (8008818 <tcp_receive+0x26c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	db1b      	blt.n	8008646 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008612:	4b81      	ldr	r3, [pc, #516]	; (8008818 <tcp_receive+0x26c>)
 8008614:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008616:	429a      	cmp	r2, r3
 8008618:	d106      	bne.n	8008628 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800861e:	4b7f      	ldr	r3, [pc, #508]	; (800881c <tcp_receive+0x270>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	db0e      	blt.n	8008646 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800862c:	4b7b      	ldr	r3, [pc, #492]	; (800881c <tcp_receive+0x270>)
 800862e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008630:	429a      	cmp	r2, r3
 8008632:	d125      	bne.n	8008680 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008634:	4b7a      	ldr	r3, [pc, #488]	; (8008820 <tcp_receive+0x274>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	89db      	ldrh	r3, [r3, #14]
 800863a:	b29a      	uxth	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008642:	429a      	cmp	r2, r3
 8008644:	d91c      	bls.n	8008680 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008646:	4b76      	ldr	r3, [pc, #472]	; (8008820 <tcp_receive+0x274>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	89db      	ldrh	r3, [r3, #14]
 800864c:	b29a      	uxth	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008660:	429a      	cmp	r2, r3
 8008662:	d205      	bcs.n	8008670 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008670:	4b69      	ldr	r3, [pc, #420]	; (8008818 <tcp_receive+0x26c>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008678:	4b68      	ldr	r3, [pc, #416]	; (800881c <tcp_receive+0x270>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008680:	4b66      	ldr	r3, [pc, #408]	; (800881c <tcp_receive+0x270>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	dc58      	bgt.n	8008740 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800868e:	4b65      	ldr	r3, [pc, #404]	; (8008824 <tcp_receive+0x278>)
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d14b      	bne.n	800872e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80086a0:	4413      	add	r3, r2
 80086a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d142      	bne.n	800872e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	db3d      	blt.n	800872e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086b6:	4b59      	ldr	r3, [pc, #356]	; (800881c <tcp_receive+0x270>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d137      	bne.n	800872e <tcp_receive+0x182>
              found_dupack = 1;
 80086be:	2301      	movs	r3, #1
 80086c0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086c8:	2bff      	cmp	r3, #255	; 0xff
 80086ca:	d007      	beq.n	80086dc <tcp_receive+0x130>
                ++pcb->dupacks;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086d2:	3301      	adds	r3, #1
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d91b      	bls.n	800871e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086f0:	4413      	add	r3, r2
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d30a      	bcc.n	8008714 <tcp_receive+0x168>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008708:	4413      	add	r3, r2
 800870a:	b29a      	uxth	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008712:	e004      	b.n	800871e <tcp_receive+0x172>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800871a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008724:	2b02      	cmp	r3, #2
 8008726:	d902      	bls.n	800872e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 feeb 	bl	800a504 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800872e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008730:	2b00      	cmp	r3, #0
 8008732:	f040 8161 	bne.w	80089f8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800873e:	e15b      	b.n	80089f8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008740:	4b36      	ldr	r3, [pc, #216]	; (800881c <tcp_receive+0x270>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	3b01      	subs	r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	f2c0 814e 	blt.w	80089ee <tcp_receive+0x442>
 8008752:	4b32      	ldr	r3, [pc, #200]	; (800881c <tcp_receive+0x270>)
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	f300 8146 	bgt.w	80089ee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	8b5b      	ldrh	r3, [r3, #26]
 8008766:	f003 0304 	and.w	r3, r3, #4
 800876a:	2b00      	cmp	r3, #0
 800876c:	d010      	beq.n	8008790 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8b5b      	ldrh	r3, [r3, #26]
 8008772:	f023 0304 	bic.w	r3, r3, #4
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800879e:	10db      	asrs	r3, r3, #3
 80087a0:	b21b      	sxth	r3, r3
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4413      	add	r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	b21a      	sxth	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80087b8:	4b18      	ldr	r3, [pc, #96]	; (800881c <tcp_receive+0x270>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	b29a      	uxth	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80087d0:	4b12      	ldr	r3, [pc, #72]	; (800881c <tcp_receive+0x270>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7d1b      	ldrb	r3, [r3, #20]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	f240 8097 	bls.w	8008910 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d245      	bcs.n	800887e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	8b5b      	ldrh	r3, [r3, #26]
 80087f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d014      	beq.n	8008828 <tcp_receive+0x27c>
 80087fe:	2301      	movs	r3, #1
 8008800:	e013      	b.n	800882a <tcp_receive+0x27e>
 8008802:	bf00      	nop
 8008804:	08010558 	.word	0x08010558
 8008808:	08010888 	.word	0x08010888
 800880c:	080105a4 	.word	0x080105a4
 8008810:	080108a4 	.word	0x080108a4
 8008814:	20006838 	.word	0x20006838
 8008818:	2000682c 	.word	0x2000682c
 800881c:	20006830 	.word	0x20006830
 8008820:	2000681c 	.word	0x2000681c
 8008824:	20006836 	.word	0x20006836
 8008828:	2302      	movs	r3, #2
 800882a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800882e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008838:	fb12 f303 	smulbb	r3, r2, r3
 800883c:	b29b      	uxth	r3, r3
 800883e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008840:	4293      	cmp	r3, r2
 8008842:	bf28      	it	cs
 8008844:	4613      	movcs	r3, r2
 8008846:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800884e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008850:	4413      	add	r3, r2
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800885a:	429a      	cmp	r2, r3
 800885c:	d309      	bcc.n	8008872 <tcp_receive+0x2c6>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008864:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008866:	4413      	add	r3, r2
 8008868:	b29a      	uxth	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008870:	e04e      	b.n	8008910 <tcp_receive+0x364>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800887c:	e048      	b.n	8008910 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008884:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008886:	4413      	add	r3, r2
 8008888:	b29a      	uxth	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008890:	429a      	cmp	r2, r3
 8008892:	d309      	bcc.n	80088a8 <tcp_receive+0x2fc>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800889a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800889c:	4413      	add	r3, r2
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80088a6:	e004      	b.n	80088b2 <tcp_receive+0x306>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80088be:	429a      	cmp	r2, r3
 80088c0:	d326      	bcc.n	8008910 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088e2:	4413      	add	r3, r2
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d30a      	bcc.n	8008906 <tcp_receive+0x35a>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088fa:	4413      	add	r3, r2
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008904:	e004      	b.n	8008910 <tcp_receive+0x364>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800890c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008918:	4a98      	ldr	r2, [pc, #608]	; (8008b7c <tcp_receive+0x5d0>)
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fdca 	bl	80084b4 <tcp_free_acked_segments>
 8008920:	4602      	mov	r2, r0
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	4a94      	ldr	r2, [pc, #592]	; (8008b80 <tcp_receive+0x5d4>)
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff fdbf 	bl	80084b4 <tcp_free_acked_segments>
 8008936:	4602      	mov	r2, r0
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800894a:	861a      	strh	r2, [r3, #48]	; 0x30
 800894c:	e002      	b.n	8008954 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008970:	4b84      	ldr	r3, [pc, #528]	; (8008b84 <tcp_receive+0x5d8>)
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	4413      	add	r3, r2
 8008976:	b29a      	uxth	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	8b5b      	ldrh	r3, [r3, #26]
 8008982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008986:	2b00      	cmp	r3, #0
 8008988:	d035      	beq.n	80089f6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898e:	2b00      	cmp	r3, #0
 8008990:	d118      	bne.n	80089c4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00c      	beq.n	80089b4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fb f9df 	bl	8003d6a <lwip_htonl>
 80089ac:	4603      	mov	r3, r0
 80089ae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	dc20      	bgt.n	80089f6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	8b5b      	ldrh	r3, [r3, #26]
 80089b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089bc:	b29a      	uxth	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80089c2:	e018      	b.n	80089f6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fb f9ca 	bl	8003d6a <lwip_htonl>
 80089d6:	4603      	mov	r3, r0
 80089d8:	1ae3      	subs	r3, r4, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	dc0b      	bgt.n	80089f6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8b5b      	ldrh	r3, [r3, #26]
 80089e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80089ec:	e003      	b.n	80089f6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 ff76 	bl	800a8e0 <tcp_send_empty_ack>
 80089f4:	e000      	b.n	80089f8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80089f6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d05b      	beq.n	8008ab8 <tcp_receive+0x50c>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a04:	4b60      	ldr	r3, [pc, #384]	; (8008b88 <tcp_receive+0x5dc>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	da54      	bge.n	8008ab8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008a0e:	4b5f      	ldr	r3, [pc, #380]	; (8008b8c <tcp_receive+0x5e0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008a22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a2c:	10db      	asrs	r3, r3, #3
 8008a2e:	b21b      	sxth	r3, r3
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a46:	4413      	add	r3, r2
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	b21a      	sxth	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008a50:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	da05      	bge.n	8008a64 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008a58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a5c:	425b      	negs	r3, r3
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008a64:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a6e:	109b      	asrs	r3, r3, #2
 8008a70:	b21b      	sxth	r3, r3
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a88:	4413      	add	r3, r2
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	b21a      	sxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a98:	10db      	asrs	r3, r3, #3
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	b21a      	sxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008ab8:	4b35      	ldr	r3, [pc, #212]	; (8008b90 <tcp_receive+0x5e4>)
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 84e2 	beq.w	8009486 <tcp_receive+0xeda>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7d1b      	ldrb	r3, [r3, #20]
 8008ac6:	2b06      	cmp	r3, #6
 8008ac8:	f200 84dd 	bhi.w	8009486 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ad0:	4b30      	ldr	r3, [pc, #192]	; (8008b94 <tcp_receive+0x5e8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f2c0 808f 	blt.w	8008bfc <tcp_receive+0x650>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ae2:	4b2b      	ldr	r3, [pc, #172]	; (8008b90 <tcp_receive+0x5e4>)
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4b2a      	ldr	r3, [pc, #168]	; (8008b94 <tcp_receive+0x5e8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	440b      	add	r3, r1
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	3301      	adds	r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f300 8082 	bgt.w	8008bfc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008af8:	4b27      	ldr	r3, [pc, #156]	; (8008b98 <tcp_receive+0x5ec>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b02:	4b24      	ldr	r3, [pc, #144]	; (8008b94 <tcp_receive+0x5e8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008b0a:	4b23      	ldr	r3, [pc, #140]	; (8008b98 <tcp_receive+0x5ec>)
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <tcp_receive+0x574>
 8008b12:	4b22      	ldr	r3, [pc, #136]	; (8008b9c <tcp_receive+0x5f0>)
 8008b14:	f240 5294 	movw	r2, #1428	; 0x594
 8008b18:	4921      	ldr	r1, [pc, #132]	; (8008ba0 <tcp_receive+0x5f4>)
 8008b1a:	4822      	ldr	r0, [pc, #136]	; (8008ba4 <tcp_receive+0x5f8>)
 8008b1c:	f005 f9ce 	bl	800debc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d906      	bls.n	8008b38 <tcp_receive+0x58c>
 8008b2a:	4b1c      	ldr	r3, [pc, #112]	; (8008b9c <tcp_receive+0x5f0>)
 8008b2c:	f240 5295 	movw	r2, #1429	; 0x595
 8008b30:	491d      	ldr	r1, [pc, #116]	; (8008ba8 <tcp_receive+0x5fc>)
 8008b32:	481c      	ldr	r0, [pc, #112]	; (8008ba4 <tcp_receive+0x5f8>)
 8008b34:	f005 f9c2 	bl	800debc <iprintf>
      off = (u16_t)off32;
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008b3e:	4b16      	ldr	r3, [pc, #88]	; (8008b98 <tcp_receive+0x5ec>)
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	891b      	ldrh	r3, [r3, #8]
 8008b44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d906      	bls.n	8008b5a <tcp_receive+0x5ae>
 8008b4c:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <tcp_receive+0x5f0>)
 8008b4e:	f240 5297 	movw	r2, #1431	; 0x597
 8008b52:	4916      	ldr	r1, [pc, #88]	; (8008bac <tcp_receive+0x600>)
 8008b54:	4813      	ldr	r0, [pc, #76]	; (8008ba4 <tcp_receive+0x5f8>)
 8008b56:	f005 f9b1 	bl	800debc <iprintf>
      inseg.len -= off;
 8008b5a:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <tcp_receive+0x5ec>)
 8008b5c:	891a      	ldrh	r2, [r3, #8]
 8008b5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <tcp_receive+0x5ec>)
 8008b68:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008b6a:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <tcp_receive+0x5ec>)
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	891a      	ldrh	r2, [r3, #8]
 8008b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008b78:	e02a      	b.n	8008bd0 <tcp_receive+0x624>
 8008b7a:	bf00      	nop
 8008b7c:	080108c0 	.word	0x080108c0
 8008b80:	080108c8 	.word	0x080108c8
 8008b84:	20006834 	.word	0x20006834
 8008b88:	20006830 	.word	0x20006830
 8008b8c:	200067f4 	.word	0x200067f4
 8008b90:	20006836 	.word	0x20006836
 8008b94:	2000682c 	.word	0x2000682c
 8008b98:	2000680c 	.word	0x2000680c
 8008b9c:	08010558 	.word	0x08010558
 8008ba0:	080108d0 	.word	0x080108d0
 8008ba4:	080105a4 	.word	0x080105a4
 8008ba8:	080108e0 	.word	0x080108e0
 8008bac:	080108f0 	.word	0x080108f0
        off -= p->len;
 8008bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb2:	895b      	ldrh	r3, [r3, #10]
 8008bb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008bc2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd2:	895b      	ldrh	r3, [r3, #10]
 8008bd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d8e9      	bhi.n	8008bb0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008bdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008be0:	4619      	mov	r1, r3
 8008be2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008be4:	f7fc fada 	bl	800519c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	4a91      	ldr	r2, [pc, #580]	; (8008e34 <tcp_receive+0x888>)
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	4b91      	ldr	r3, [pc, #580]	; (8008e38 <tcp_receive+0x88c>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	4a8f      	ldr	r2, [pc, #572]	; (8008e34 <tcp_receive+0x888>)
 8008bf6:	6812      	ldr	r2, [r2, #0]
 8008bf8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008bfa:	e00d      	b.n	8008c18 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008bfc:	4b8d      	ldr	r3, [pc, #564]	; (8008e34 <tcp_receive+0x888>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	da06      	bge.n	8008c18 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	8b5b      	ldrh	r3, [r3, #26]
 8008c0e:	f043 0302 	orr.w	r3, r3, #2
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008c18:	4b86      	ldr	r3, [pc, #536]	; (8008e34 <tcp_receive+0x888>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f2c0 842a 	blt.w	800947c <tcp_receive+0xed0>
 8008c28:	4b82      	ldr	r3, [pc, #520]	; (8008e34 <tcp_receive+0x888>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c34:	440b      	add	r3, r1
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	3301      	adds	r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f300 841e 	bgt.w	800947c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c44:	4b7b      	ldr	r3, [pc, #492]	; (8008e34 <tcp_receive+0x888>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	f040 829a 	bne.w	8009182 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008c4e:	4b7a      	ldr	r3, [pc, #488]	; (8008e38 <tcp_receive+0x88c>)
 8008c50:	891c      	ldrh	r4, [r3, #8]
 8008c52:	4b79      	ldr	r3, [pc, #484]	; (8008e38 <tcp_receive+0x88c>)
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	899b      	ldrh	r3, [r3, #12]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fb f870 	bl	8003d40 <lwip_htons>
 8008c60:	4603      	mov	r3, r0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <tcp_receive+0x6c4>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e000      	b.n	8008c72 <tcp_receive+0x6c6>
 8008c70:	2300      	movs	r3, #0
 8008c72:	4423      	add	r3, r4
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	4b71      	ldr	r3, [pc, #452]	; (8008e3c <tcp_receive+0x890>)
 8008c78:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c7e:	4b6f      	ldr	r3, [pc, #444]	; (8008e3c <tcp_receive+0x890>)
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d275      	bcs.n	8008d72 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c86:	4b6c      	ldr	r3, [pc, #432]	; (8008e38 <tcp_receive+0x88c>)
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	899b      	ldrh	r3, [r3, #12]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fb f856 	bl	8003d40 <lwip_htons>
 8008c94:	4603      	mov	r3, r0
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01f      	beq.n	8008ce0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008ca0:	4b65      	ldr	r3, [pc, #404]	; (8008e38 <tcp_receive+0x88c>)
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	899b      	ldrh	r3, [r3, #12]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	b21b      	sxth	r3, r3
 8008caa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008cae:	b21c      	sxth	r4, r3
 8008cb0:	4b61      	ldr	r3, [pc, #388]	; (8008e38 <tcp_receive+0x88c>)
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	899b      	ldrh	r3, [r3, #12]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fb f841 	bl	8003d40 <lwip_htons>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fb f838 	bl	8003d40 <lwip_htons>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	b21b      	sxth	r3, r3
 8008cd4:	4323      	orrs	r3, r4
 8008cd6:	b21a      	sxth	r2, r3
 8008cd8:	4b57      	ldr	r3, [pc, #348]	; (8008e38 <tcp_receive+0x88c>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	b292      	uxth	r2, r2
 8008cde:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008ce4:	4b54      	ldr	r3, [pc, #336]	; (8008e38 <tcp_receive+0x88c>)
 8008ce6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008ce8:	4b53      	ldr	r3, [pc, #332]	; (8008e38 <tcp_receive+0x88c>)
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	899b      	ldrh	r3, [r3, #12]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fb f825 	bl	8003d40 <lwip_htons>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <tcp_receive+0x762>
            inseg.len -= 1;
 8008d02:	4b4d      	ldr	r3, [pc, #308]	; (8008e38 <tcp_receive+0x88c>)
 8008d04:	891b      	ldrh	r3, [r3, #8]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	4b4b      	ldr	r3, [pc, #300]	; (8008e38 <tcp_receive+0x88c>)
 8008d0c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008d0e:	4b4a      	ldr	r3, [pc, #296]	; (8008e38 <tcp_receive+0x88c>)
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	4a49      	ldr	r2, [pc, #292]	; (8008e38 <tcp_receive+0x88c>)
 8008d14:	8912      	ldrh	r2, [r2, #8]
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fc f93f 	bl	8004f9c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008d1e:	4b46      	ldr	r3, [pc, #280]	; (8008e38 <tcp_receive+0x88c>)
 8008d20:	891c      	ldrh	r4, [r3, #8]
 8008d22:	4b45      	ldr	r3, [pc, #276]	; (8008e38 <tcp_receive+0x88c>)
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	899b      	ldrh	r3, [r3, #12]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fb f808 	bl	8003d40 <lwip_htons>
 8008d30:	4603      	mov	r3, r0
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	f003 0303 	and.w	r3, r3, #3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <tcp_receive+0x794>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <tcp_receive+0x796>
 8008d40:	2300      	movs	r3, #0
 8008d42:	4423      	add	r3, r4
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	4b3d      	ldr	r3, [pc, #244]	; (8008e3c <tcp_receive+0x890>)
 8008d48:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d4a:	4b3c      	ldr	r3, [pc, #240]	; (8008e3c <tcp_receive+0x890>)
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	4b38      	ldr	r3, [pc, #224]	; (8008e34 <tcp_receive+0x888>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d5e:	440b      	add	r3, r1
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d006      	beq.n	8008d72 <tcp_receive+0x7c6>
 8008d64:	4b36      	ldr	r3, [pc, #216]	; (8008e40 <tcp_receive+0x894>)
 8008d66:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008d6a:	4936      	ldr	r1, [pc, #216]	; (8008e44 <tcp_receive+0x898>)
 8008d6c:	4836      	ldr	r0, [pc, #216]	; (8008e48 <tcp_receive+0x89c>)
 8008d6e:	f005 f8a5 	bl	800debc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 80e7 	beq.w	8008f4a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d7c:	4b2e      	ldr	r3, [pc, #184]	; (8008e38 <tcp_receive+0x88c>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	899b      	ldrh	r3, [r3, #12]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fa ffdb 	bl	8003d40 <lwip_htons>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d010      	beq.n	8008db8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008d96:	e00a      	b.n	8008dae <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d9c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7fd fd92 	bl	80068d2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f0      	bne.n	8008d98 <tcp_receive+0x7ec>
 8008db6:	e0c8      	b.n	8008f4a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008dbe:	e052      	b.n	8008e66 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	899b      	ldrh	r3, [r3, #12]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fa ffb9 	bl	8003d40 <lwip_htons>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d03d      	beq.n	8008e56 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008dda:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <tcp_receive+0x88c>)
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	899b      	ldrh	r3, [r3, #12]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fa ffac 	bl	8003d40 <lwip_htons>
 8008de8:	4603      	mov	r3, r0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d130      	bne.n	8008e56 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008df4:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <tcp_receive+0x88c>)
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	899b      	ldrh	r3, [r3, #12]
 8008dfa:	b29c      	uxth	r4, r3
 8008dfc:	2001      	movs	r0, #1
 8008dfe:	f7fa ff9f 	bl	8003d40 <lwip_htons>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461a      	mov	r2, r3
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <tcp_receive+0x88c>)
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	4322      	orrs	r2, r4
 8008e0c:	b292      	uxth	r2, r2
 8008e0e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <tcp_receive+0x88c>)
 8008e12:	891c      	ldrh	r4, [r3, #8]
 8008e14:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <tcp_receive+0x88c>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	899b      	ldrh	r3, [r3, #12]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fa ff8f 	bl	8003d40 <lwip_htons>
 8008e22:	4603      	mov	r3, r0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00e      	beq.n	8008e4c <tcp_receive+0x8a0>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e00d      	b.n	8008e4e <tcp_receive+0x8a2>
 8008e32:	bf00      	nop
 8008e34:	2000682c 	.word	0x2000682c
 8008e38:	2000680c 	.word	0x2000680c
 8008e3c:	20006836 	.word	0x20006836
 8008e40:	08010558 	.word	0x08010558
 8008e44:	08010900 	.word	0x08010900
 8008e48:	080105a4 	.word	0x080105a4
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4423      	add	r3, r4
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	4b98      	ldr	r3, [pc, #608]	; (80090b4 <tcp_receive+0xb08>)
 8008e54:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e58:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008e60:	6938      	ldr	r0, [r7, #16]
 8008e62:	f7fd fd36 	bl	80068d2 <tcp_seg_free>
            while (next &&
 8008e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00e      	beq.n	8008e8a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008e6c:	4b91      	ldr	r3, [pc, #580]	; (80090b4 <tcp_receive+0xb08>)
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	4b91      	ldr	r3, [pc, #580]	; (80090b8 <tcp_receive+0xb0c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	441a      	add	r2, r3
 8008e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e80:	8909      	ldrh	r1, [r1, #8]
 8008e82:	440b      	add	r3, r1
 8008e84:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da9a      	bge.n	8008dc0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d059      	beq.n	8008f44 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8008e90:	4b88      	ldr	r3, [pc, #544]	; (80090b4 <tcp_receive+0xb08>)
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
 8008e96:	4b88      	ldr	r3, [pc, #544]	; (80090b8 <tcp_receive+0xb0c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	441a      	add	r2, r3
 8008e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	dd4d      	ble.n	8008f44 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	4b81      	ldr	r3, [pc, #516]	; (80090b8 <tcp_receive+0xb0c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	4b80      	ldr	r3, [pc, #512]	; (80090bc <tcp_receive+0xb10>)
 8008ebc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008ebe:	4b7f      	ldr	r3, [pc, #508]	; (80090bc <tcp_receive+0xb10>)
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	899b      	ldrh	r3, [r3, #12]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fa ff3a 	bl	8003d40 <lwip_htons>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <tcp_receive+0x938>
                inseg.len -= 1;
 8008ed8:	4b78      	ldr	r3, [pc, #480]	; (80090bc <tcp_receive+0xb10>)
 8008eda:	891b      	ldrh	r3, [r3, #8]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	4b76      	ldr	r3, [pc, #472]	; (80090bc <tcp_receive+0xb10>)
 8008ee2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008ee4:	4b75      	ldr	r3, [pc, #468]	; (80090bc <tcp_receive+0xb10>)
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	4a74      	ldr	r2, [pc, #464]	; (80090bc <tcp_receive+0xb10>)
 8008eea:	8912      	ldrh	r2, [r2, #8]
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fc f854 	bl	8004f9c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008ef4:	4b71      	ldr	r3, [pc, #452]	; (80090bc <tcp_receive+0xb10>)
 8008ef6:	891c      	ldrh	r4, [r3, #8]
 8008ef8:	4b70      	ldr	r3, [pc, #448]	; (80090bc <tcp_receive+0xb10>)
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	899b      	ldrh	r3, [r3, #12]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fa ff1d 	bl	8003d40 <lwip_htons>
 8008f06:	4603      	mov	r3, r0
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <tcp_receive+0x96a>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e000      	b.n	8008f18 <tcp_receive+0x96c>
 8008f16:	2300      	movs	r3, #0
 8008f18:	4423      	add	r3, r4
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	4b65      	ldr	r3, [pc, #404]	; (80090b4 <tcp_receive+0xb08>)
 8008f1e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008f20:	4b64      	ldr	r3, [pc, #400]	; (80090b4 <tcp_receive+0xb08>)
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	4b64      	ldr	r3, [pc, #400]	; (80090b8 <tcp_receive+0xb0c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	441a      	add	r2, r3
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d006      	beq.n	8008f44 <tcp_receive+0x998>
 8008f36:	4b62      	ldr	r3, [pc, #392]	; (80090c0 <tcp_receive+0xb14>)
 8008f38:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008f3c:	4961      	ldr	r1, [pc, #388]	; (80090c4 <tcp_receive+0xb18>)
 8008f3e:	4862      	ldr	r0, [pc, #392]	; (80090c8 <tcp_receive+0xb1c>)
 8008f40:	f004 ffbc 	bl	800debc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f48:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008f4a:	4b5a      	ldr	r3, [pc, #360]	; (80090b4 <tcp_receive+0xb08>)
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	4b59      	ldr	r3, [pc, #356]	; (80090b8 <tcp_receive+0xb0c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	441a      	add	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f5e:	4b55      	ldr	r3, [pc, #340]	; (80090b4 <tcp_receive+0xb08>)
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d206      	bcs.n	8008f74 <tcp_receive+0x9c8>
 8008f66:	4b56      	ldr	r3, [pc, #344]	; (80090c0 <tcp_receive+0xb14>)
 8008f68:	f240 6207 	movw	r2, #1543	; 0x607
 8008f6c:	4957      	ldr	r1, [pc, #348]	; (80090cc <tcp_receive+0xb20>)
 8008f6e:	4856      	ldr	r0, [pc, #344]	; (80090c8 <tcp_receive+0xb1c>)
 8008f70:	f004 ffa4 	bl	800debc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f78:	4b4e      	ldr	r3, [pc, #312]	; (80090b4 <tcp_receive+0xb08>)
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7fc ffc5 	bl	8005f14 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008f8a:	4b4c      	ldr	r3, [pc, #304]	; (80090bc <tcp_receive+0xb10>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	891b      	ldrh	r3, [r3, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d006      	beq.n	8008fa2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8008f94:	4b49      	ldr	r3, [pc, #292]	; (80090bc <tcp_receive+0xb10>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4a4d      	ldr	r2, [pc, #308]	; (80090d0 <tcp_receive+0xb24>)
 8008f9a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008f9c:	4b47      	ldr	r3, [pc, #284]	; (80090bc <tcp_receive+0xb10>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008fa2:	4b46      	ldr	r3, [pc, #280]	; (80090bc <tcp_receive+0xb10>)
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	899b      	ldrh	r3, [r3, #12]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fa fec8 	bl	8003d40 <lwip_htons>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80b8 	beq.w	800912e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008fbe:	4b45      	ldr	r3, [pc, #276]	; (80090d4 <tcp_receive+0xb28>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	f043 0320 	orr.w	r3, r3, #32
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	4b42      	ldr	r3, [pc, #264]	; (80090d4 <tcp_receive+0xb28>)
 8008fca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008fcc:	e0af      	b.n	800912e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	4a36      	ldr	r2, [pc, #216]	; (80090b8 <tcp_receive+0xb0c>)
 8008fde:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	891b      	ldrh	r3, [r3, #8]
 8008fe4:	461c      	mov	r4, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	899b      	ldrh	r3, [r3, #12]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fa fea6 	bl	8003d40 <lwip_htons>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0303 	and.w	r3, r3, #3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <tcp_receive+0xa58>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <tcp_receive+0xa5a>
 8009004:	2300      	movs	r3, #0
 8009006:	191a      	adds	r2, r3, r4
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	441a      	add	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009016:	461c      	mov	r4, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	891b      	ldrh	r3, [r3, #8]
 800901c:	461d      	mov	r5, r3
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	899b      	ldrh	r3, [r3, #12]
 8009024:	b29b      	uxth	r3, r3
 8009026:	4618      	mov	r0, r3
 8009028:	f7fa fe8a 	bl	8003d40 <lwip_htons>
 800902c:	4603      	mov	r3, r0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	f003 0303 	and.w	r3, r3, #3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <tcp_receive+0xa90>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <tcp_receive+0xa92>
 800903c:	2300      	movs	r3, #0
 800903e:	442b      	add	r3, r5
 8009040:	429c      	cmp	r4, r3
 8009042:	d206      	bcs.n	8009052 <tcp_receive+0xaa6>
 8009044:	4b1e      	ldr	r3, [pc, #120]	; (80090c0 <tcp_receive+0xb14>)
 8009046:	f240 622b 	movw	r2, #1579	; 0x62b
 800904a:	4923      	ldr	r1, [pc, #140]	; (80090d8 <tcp_receive+0xb2c>)
 800904c:	481e      	ldr	r0, [pc, #120]	; (80090c8 <tcp_receive+0xb1c>)
 800904e:	f004 ff35 	bl	800debc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	891b      	ldrh	r3, [r3, #8]
 8009056:	461c      	mov	r4, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	899b      	ldrh	r3, [r3, #12]
 800905e:	b29b      	uxth	r3, r3
 8009060:	4618      	mov	r0, r3
 8009062:	f7fa fe6d 	bl	8003d40 <lwip_htons>
 8009066:	4603      	mov	r3, r0
 8009068:	b2db      	uxtb	r3, r3
 800906a:	f003 0303 	and.w	r3, r3, #3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <tcp_receive+0xaca>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <tcp_receive+0xacc>
 8009076:	2300      	movs	r3, #0
 8009078:	1919      	adds	r1, r3, r4
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800907e:	b28b      	uxth	r3, r1
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fc ff43 	bl	8005f14 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	891b      	ldrh	r3, [r3, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d028      	beq.n	80090ea <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <tcp_receive+0xb24>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01d      	beq.n	80090dc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <tcp_receive+0xb24>)
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f7fc f9be 	bl	800542c <pbuf_cat>
 80090b0:	e018      	b.n	80090e4 <tcp_receive+0xb38>
 80090b2:	bf00      	nop
 80090b4:	20006836 	.word	0x20006836
 80090b8:	2000682c 	.word	0x2000682c
 80090bc:	2000680c 	.word	0x2000680c
 80090c0:	08010558 	.word	0x08010558
 80090c4:	08010938 	.word	0x08010938
 80090c8:	080105a4 	.word	0x080105a4
 80090cc:	08010974 	.word	0x08010974
 80090d0:	2000683c 	.word	0x2000683c
 80090d4:	20006839 	.word	0x20006839
 80090d8:	08010994 	.word	0x08010994
            } else {
              recv_data = cseg->p;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	4a70      	ldr	r2, [pc, #448]	; (80092a4 <tcp_receive+0xcf8>)
 80090e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2200      	movs	r2, #0
 80090e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	899b      	ldrh	r3, [r3, #12]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fa fe24 	bl	8003d40 <lwip_htons>
 80090f8:	4603      	mov	r3, r0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00d      	beq.n	8009120 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009104:	4b68      	ldr	r3, [pc, #416]	; (80092a8 <tcp_receive+0xcfc>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f043 0320 	orr.w	r3, r3, #32
 800910c:	b2da      	uxtb	r2, r3
 800910e:	4b66      	ldr	r3, [pc, #408]	; (80092a8 <tcp_receive+0xcfc>)
 8009110:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7d1b      	ldrb	r3, [r3, #20]
 8009116:	2b04      	cmp	r3, #4
 8009118:	d102      	bne.n	8009120 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2207      	movs	r2, #7
 800911e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009128:	68b8      	ldr	r0, [r7, #8]
 800912a:	f7fd fbd2 	bl	80068d2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009132:	2b00      	cmp	r3, #0
 8009134:	d008      	beq.n	8009148 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009142:	429a      	cmp	r2, r3
 8009144:	f43f af43 	beq.w	8008fce <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	8b5b      	ldrh	r3, [r3, #26]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00e      	beq.n	8009172 <tcp_receive+0xbc6>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8b5b      	ldrh	r3, [r3, #26]
 8009158:	f023 0301 	bic.w	r3, r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	835a      	strh	r2, [r3, #26]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8b5b      	ldrh	r3, [r3, #26]
 8009166:	f043 0302 	orr.w	r3, r3, #2
 800916a:	b29a      	uxth	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009170:	e188      	b.n	8009484 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	8b5b      	ldrh	r3, [r3, #26]
 8009176:	f043 0301 	orr.w	r3, r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009180:	e180      	b.n	8009484 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800918a:	4848      	ldr	r0, [pc, #288]	; (80092ac <tcp_receive+0xd00>)
 800918c:	f7fd fbba 	bl	8006904 <tcp_seg_copy>
 8009190:	4602      	mov	r2, r0
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	675a      	str	r2, [r3, #116]	; 0x74
 8009196:	e16d      	b.n	8009474 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009198:	2300      	movs	r3, #0
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80091a2:	e157      	b.n	8009454 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	4b41      	ldr	r3, [pc, #260]	; (80092b0 <tcp_receive+0xd04>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d11d      	bne.n	80091ee <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80091b2:	4b3e      	ldr	r3, [pc, #248]	; (80092ac <tcp_receive+0xd00>)
 80091b4:	891a      	ldrh	r2, [r3, #8]
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	891b      	ldrh	r3, [r3, #8]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	f240 814f 	bls.w	800945e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80091c0:	483a      	ldr	r0, [pc, #232]	; (80092ac <tcp_receive+0xd00>)
 80091c2:	f7fd fb9f 	bl	8006904 <tcp_seg_copy>
 80091c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 8149 	beq.w	8009462 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80091d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <tcp_receive+0xc32>
                    prev->next = cseg;
 80091d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e002      	b.n	80091e4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80091e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091e6:	6978      	ldr	r0, [r7, #20]
 80091e8:	f7ff f8dc 	bl	80083a4 <tcp_oos_insert_segment>
                }
                break;
 80091ec:	e139      	b.n	8009462 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d117      	bne.n	8009224 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80091f4:	4b2e      	ldr	r3, [pc, #184]	; (80092b0 <tcp_receive+0xd04>)
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	da57      	bge.n	80092b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009204:	4829      	ldr	r0, [pc, #164]	; (80092ac <tcp_receive+0xd00>)
 8009206:	f7fd fb7d 	bl	8006904 <tcp_seg_copy>
 800920a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 8129 	beq.w	8009466 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800921a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800921c:	69b8      	ldr	r0, [r7, #24]
 800921e:	f7ff f8c1 	bl	80083a4 <tcp_oos_insert_segment>
                  }
                  break;
 8009222:	e120      	b.n	8009466 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009224:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <tcp_receive+0xd04>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	3b01      	subs	r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	db3e      	blt.n	80092b4 <tcp_receive+0xd08>
 8009236:	4b1e      	ldr	r3, [pc, #120]	; (80092b0 <tcp_receive+0xd04>)
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	3301      	adds	r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	dc35      	bgt.n	80092b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009248:	4818      	ldr	r0, [pc, #96]	; (80092ac <tcp_receive+0xd00>)
 800924a:	f7fd fb5b 	bl	8006904 <tcp_seg_copy>
 800924e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 8109 	beq.w	800946a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009260:	8912      	ldrh	r2, [r2, #8]
 8009262:	441a      	add	r2, r3
 8009264:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <tcp_receive+0xd04>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	dd12      	ble.n	8009294 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800926e:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <tcp_receive+0xd04>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	b29a      	uxth	r2, r3
 8009274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	b29b      	uxth	r3, r3
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	b29a      	uxth	r2, r3
 8009280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009282:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928a:	891b      	ldrh	r3, [r3, #8]
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fb fe84 	bl	8004f9c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800929a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800929c:	69f8      	ldr	r0, [r7, #28]
 800929e:	f7ff f881 	bl	80083a4 <tcp_oos_insert_segment>
                  }
                  break;
 80092a2:	e0e2      	b.n	800946a <tcp_receive+0xebe>
 80092a4:	2000683c 	.word	0x2000683c
 80092a8:	20006839 	.word	0x20006839
 80092ac:	2000680c 	.word	0x2000680c
 80092b0:	2000682c 	.word	0x2000682c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80092b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f040 80c6 	bne.w	800944e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80092c2:	4b80      	ldr	r3, [pc, #512]	; (80094c4 <tcp_receive+0xf18>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f340 80bd 	ble.w	800944e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	899b      	ldrh	r3, [r3, #12]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fa fd2f 	bl	8003d40 <lwip_htons>
 80092e2:	4603      	mov	r3, r0
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f040 80bf 	bne.w	800946e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80092f0:	4875      	ldr	r0, [pc, #468]	; (80094c8 <tcp_receive+0xf1c>)
 80092f2:	f7fd fb07 	bl	8006904 <tcp_seg_copy>
 80092f6:	4602      	mov	r2, r0
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80b6 	beq.w	8009472 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800930e:	8912      	ldrh	r2, [r2, #8]
 8009310:	441a      	add	r2, r3
 8009312:	4b6c      	ldr	r3, [pc, #432]	; (80094c4 <tcp_receive+0xf18>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	dd12      	ble.n	8009342 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800931c:	4b69      	ldr	r3, [pc, #420]	; (80094c4 <tcp_receive+0xf18>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	b29a      	uxth	r2, r3
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	b29b      	uxth	r3, r3
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	b29a      	uxth	r2, r3
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	891b      	ldrh	r3, [r3, #8]
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f7fb fe2d 	bl	8004f9c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009342:	4b62      	ldr	r3, [pc, #392]	; (80094cc <tcp_receive+0xf20>)
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	4b5e      	ldr	r3, [pc, #376]	; (80094c4 <tcp_receive+0xf18>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	441a      	add	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009356:	440b      	add	r3, r1
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	f340 8089 	ble.w	8009472 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	899b      	ldrh	r3, [r3, #12]
 8009368:	b29b      	uxth	r3, r3
 800936a:	4618      	mov	r0, r3
 800936c:	f7fa fce8 	bl	8003d40 <lwip_htons>
 8009370:	4603      	mov	r3, r0
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d022      	beq.n	80093c2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	899b      	ldrh	r3, [r3, #12]
 8009384:	b29b      	uxth	r3, r3
 8009386:	b21b      	sxth	r3, r3
 8009388:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800938c:	b21c      	sxth	r4, r3
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	b29b      	uxth	r3, r3
 8009398:	4618      	mov	r0, r3
 800939a:	f7fa fcd1 	bl	8003d40 <lwip_htons>
 800939e:	4603      	mov	r3, r0
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fa fcc8 	bl	8003d40 <lwip_htons>
 80093b0:	4603      	mov	r3, r0
 80093b2:	b21b      	sxth	r3, r3
 80093b4:	4323      	orrs	r3, r4
 80093b6:	b21a      	sxth	r2, r3
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	b292      	uxth	r2, r2
 80093c0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093cc:	4413      	add	r3, r2
 80093ce:	b299      	uxth	r1, r3
 80093d0:	4b3c      	ldr	r3, [pc, #240]	; (80094c4 <tcp_receive+0xf18>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	1a8a      	subs	r2, r1, r2
 80093dc:	b292      	uxth	r2, r2
 80093de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	891b      	ldrh	r3, [r3, #8]
 80093ec:	4619      	mov	r1, r3
 80093ee:	4610      	mov	r0, r2
 80093f0:	f7fb fdd4 	bl	8004f9c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	891c      	ldrh	r4, [r3, #8]
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	899b      	ldrh	r3, [r3, #12]
 8009402:	b29b      	uxth	r3, r3
 8009404:	4618      	mov	r0, r3
 8009406:	f7fa fc9b 	bl	8003d40 <lwip_htons>
 800940a:	4603      	mov	r3, r0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <tcp_receive+0xe6e>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <tcp_receive+0xe70>
 800941a:	2300      	movs	r3, #0
 800941c:	4423      	add	r3, r4
 800941e:	b29a      	uxth	r2, r3
 8009420:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <tcp_receive+0xf20>)
 8009422:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009424:	4b29      	ldr	r3, [pc, #164]	; (80094cc <tcp_receive+0xf20>)
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	4b26      	ldr	r3, [pc, #152]	; (80094c4 <tcp_receive+0xf18>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	441a      	add	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009438:	440b      	add	r3, r1
 800943a:	429a      	cmp	r2, r3
 800943c:	d019      	beq.n	8009472 <tcp_receive+0xec6>
 800943e:	4b24      	ldr	r3, [pc, #144]	; (80094d0 <tcp_receive+0xf24>)
 8009440:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009444:	4923      	ldr	r1, [pc, #140]	; (80094d4 <tcp_receive+0xf28>)
 8009446:	4824      	ldr	r0, [pc, #144]	; (80094d8 <tcp_receive+0xf2c>)
 8009448:	f004 fd38 	bl	800debc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800944c:	e011      	b.n	8009472 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	63bb      	str	r3, [r7, #56]	; 0x38
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	2b00      	cmp	r3, #0
 8009458:	f47f aea4 	bne.w	80091a4 <tcp_receive+0xbf8>
 800945c:	e00a      	b.n	8009474 <tcp_receive+0xec8>
                break;
 800945e:	bf00      	nop
 8009460:	e008      	b.n	8009474 <tcp_receive+0xec8>
                break;
 8009462:	bf00      	nop
 8009464:	e006      	b.n	8009474 <tcp_receive+0xec8>
                  break;
 8009466:	bf00      	nop
 8009468:	e004      	b.n	8009474 <tcp_receive+0xec8>
                  break;
 800946a:	bf00      	nop
 800946c:	e002      	b.n	8009474 <tcp_receive+0xec8>
                  break;
 800946e:	bf00      	nop
 8009470:	e000      	b.n	8009474 <tcp_receive+0xec8>
                break;
 8009472:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 fa33 	bl	800a8e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800947a:	e003      	b.n	8009484 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 fa2f 	bl	800a8e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009482:	e01a      	b.n	80094ba <tcp_receive+0xf0e>
 8009484:	e019      	b.n	80094ba <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009486:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <tcp_receive+0xf18>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	db0a      	blt.n	80094aa <tcp_receive+0xefe>
 8009494:	4b0b      	ldr	r3, [pc, #44]	; (80094c4 <tcp_receive+0xf18>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	6879      	ldr	r1, [r7, #4]
 800949e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094a0:	440b      	add	r3, r1
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	3301      	adds	r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dd07      	ble.n	80094ba <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8b5b      	ldrh	r3, [r3, #26]
 80094ae:	f043 0302 	orr.w	r3, r3, #2
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80094b8:	e7ff      	b.n	80094ba <tcp_receive+0xf0e>
 80094ba:	bf00      	nop
 80094bc:	3750      	adds	r7, #80	; 0x50
 80094be:	46bd      	mov	sp, r7
 80094c0:	bdb0      	pop	{r4, r5, r7, pc}
 80094c2:	bf00      	nop
 80094c4:	2000682c 	.word	0x2000682c
 80094c8:	2000680c 	.word	0x2000680c
 80094cc:	20006836 	.word	0x20006836
 80094d0:	08010558 	.word	0x08010558
 80094d4:	08010900 	.word	0x08010900
 80094d8:	080105a4 	.word	0x080105a4

080094dc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80094e2:	4b15      	ldr	r3, [pc, #84]	; (8009538 <tcp_get_next_optbyte+0x5c>)
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	b291      	uxth	r1, r2
 80094ea:	4a13      	ldr	r2, [pc, #76]	; (8009538 <tcp_get_next_optbyte+0x5c>)
 80094ec:	8011      	strh	r1, [r2, #0]
 80094ee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80094f0:	4b12      	ldr	r3, [pc, #72]	; (800953c <tcp_get_next_optbyte+0x60>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d004      	beq.n	8009502 <tcp_get_next_optbyte+0x26>
 80094f8:	4b11      	ldr	r3, [pc, #68]	; (8009540 <tcp_get_next_optbyte+0x64>)
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	88fa      	ldrh	r2, [r7, #6]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d208      	bcs.n	8009514 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009502:	4b10      	ldr	r3, [pc, #64]	; (8009544 <tcp_get_next_optbyte+0x68>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3314      	adds	r3, #20
 8009508:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	4413      	add	r3, r2
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	e00b      	b.n	800952c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009514:	88fb      	ldrh	r3, [r7, #6]
 8009516:	b2da      	uxtb	r2, r3
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <tcp_get_next_optbyte+0x64>)
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009522:	4b06      	ldr	r3, [pc, #24]	; (800953c <tcp_get_next_optbyte+0x60>)
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	797b      	ldrb	r3, [r7, #5]
 8009528:	4413      	add	r3, r2
 800952a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	20006828 	.word	0x20006828
 800953c:	20006824 	.word	0x20006824
 8009540:	20006822 	.word	0x20006822
 8009544:	2000681c 	.word	0x2000681c

08009548 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <tcp_parseopt+0x1c>
 8009556:	4b32      	ldr	r3, [pc, #200]	; (8009620 <tcp_parseopt+0xd8>)
 8009558:	f240 727d 	movw	r2, #1917	; 0x77d
 800955c:	4931      	ldr	r1, [pc, #196]	; (8009624 <tcp_parseopt+0xdc>)
 800955e:	4832      	ldr	r0, [pc, #200]	; (8009628 <tcp_parseopt+0xe0>)
 8009560:	f004 fcac 	bl	800debc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009564:	4b31      	ldr	r3, [pc, #196]	; (800962c <tcp_parseopt+0xe4>)
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d055      	beq.n	8009618 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800956c:	4b30      	ldr	r3, [pc, #192]	; (8009630 <tcp_parseopt+0xe8>)
 800956e:	2200      	movs	r2, #0
 8009570:	801a      	strh	r2, [r3, #0]
 8009572:	e045      	b.n	8009600 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009574:	f7ff ffb2 	bl	80094dc <tcp_get_next_optbyte>
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d006      	beq.n	8009590 <tcp_parseopt+0x48>
 8009582:	2b02      	cmp	r3, #2
 8009584:	dc2b      	bgt.n	80095de <tcp_parseopt+0x96>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d041      	beq.n	800960e <tcp_parseopt+0xc6>
 800958a:	2b01      	cmp	r3, #1
 800958c:	d127      	bne.n	80095de <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800958e:	e037      	b.n	8009600 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009590:	f7ff ffa4 	bl	80094dc <tcp_get_next_optbyte>
 8009594:	4603      	mov	r3, r0
 8009596:	2b04      	cmp	r3, #4
 8009598:	d13b      	bne.n	8009612 <tcp_parseopt+0xca>
 800959a:	4b25      	ldr	r3, [pc, #148]	; (8009630 <tcp_parseopt+0xe8>)
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	3301      	adds	r3, #1
 80095a0:	4a22      	ldr	r2, [pc, #136]	; (800962c <tcp_parseopt+0xe4>)
 80095a2:	8812      	ldrh	r2, [r2, #0]
 80095a4:	4293      	cmp	r3, r2
 80095a6:	da34      	bge.n	8009612 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80095a8:	f7ff ff98 	bl	80094dc <tcp_get_next_optbyte>
 80095ac:	4603      	mov	r3, r0
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80095b4:	f7ff ff92 	bl	80094dc <tcp_get_next_optbyte>
 80095b8:	4603      	mov	r3, r0
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	89bb      	ldrh	r3, [r7, #12]
 80095be:	4313      	orrs	r3, r2
 80095c0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80095c2:	89bb      	ldrh	r3, [r7, #12]
 80095c4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80095c8:	d804      	bhi.n	80095d4 <tcp_parseopt+0x8c>
 80095ca:	89bb      	ldrh	r3, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <tcp_parseopt+0x8c>
 80095d0:	89ba      	ldrh	r2, [r7, #12]
 80095d2:	e001      	b.n	80095d8 <tcp_parseopt+0x90>
 80095d4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80095dc:	e010      	b.n	8009600 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80095de:	f7ff ff7d 	bl	80094dc <tcp_get_next_optbyte>
 80095e2:	4603      	mov	r3, r0
 80095e4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80095e6:	7afb      	ldrb	r3, [r7, #11]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d914      	bls.n	8009616 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80095ec:	7afb      	ldrb	r3, [r7, #11]
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <tcp_parseopt+0xe8>)
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	4413      	add	r3, r2
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	3b02      	subs	r3, #2
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	4b0c      	ldr	r3, [pc, #48]	; (8009630 <tcp_parseopt+0xe8>)
 80095fe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009600:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <tcp_parseopt+0xe8>)
 8009602:	881a      	ldrh	r2, [r3, #0]
 8009604:	4b09      	ldr	r3, [pc, #36]	; (800962c <tcp_parseopt+0xe4>)
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d3b3      	bcc.n	8009574 <tcp_parseopt+0x2c>
 800960c:	e004      	b.n	8009618 <tcp_parseopt+0xd0>
          return;
 800960e:	bf00      	nop
 8009610:	e002      	b.n	8009618 <tcp_parseopt+0xd0>
            return;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <tcp_parseopt+0xd0>
            return;
 8009616:	bf00      	nop
      }
    }
  }
}
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	08010558 	.word	0x08010558
 8009624:	080109bc 	.word	0x080109bc
 8009628:	080105a4 	.word	0x080105a4
 800962c:	20006820 	.word	0x20006820
 8009630:	20006828 	.word	0x20006828

08009634 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009638:	4b05      	ldr	r3, [pc, #20]	; (8009650 <tcp_trigger_input_pcb_close+0x1c>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f043 0310 	orr.w	r3, r3, #16
 8009640:	b2da      	uxtb	r2, r3
 8009642:	4b03      	ldr	r3, [pc, #12]	; (8009650 <tcp_trigger_input_pcb_close+0x1c>)
 8009644:	701a      	strb	r2, [r3, #0]
}
 8009646:	bf00      	nop
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	20006839 	.word	0x20006839

08009654 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <tcp_route+0x28>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	7a1b      	ldrb	r3, [r3, #8]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d006      	beq.n	800967c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	7a1b      	ldrb	r3, [r3, #8]
 8009672:	4618      	mov	r0, r3
 8009674:	f7fb fab8 	bl	8004be8 <netif_get_by_index>
 8009678:	4603      	mov	r3, r0
 800967a:	e003      	b.n	8009684 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f003 f9cd 	bl	800ca1c <ip4_route>
 8009682:	4603      	mov	r3, r0
  }
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800968c:	b590      	push	{r4, r7, lr}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	603b      	str	r3, [r7, #0]
 8009698:	4613      	mov	r3, r2
 800969a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d105      	bne.n	80096ae <tcp_create_segment+0x22>
 80096a2:	4b44      	ldr	r3, [pc, #272]	; (80097b4 <tcp_create_segment+0x128>)
 80096a4:	22a3      	movs	r2, #163	; 0xa3
 80096a6:	4944      	ldr	r1, [pc, #272]	; (80097b8 <tcp_create_segment+0x12c>)
 80096a8:	4844      	ldr	r0, [pc, #272]	; (80097bc <tcp_create_segment+0x130>)
 80096aa:	f004 fc07 	bl	800debc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d105      	bne.n	80096c0 <tcp_create_segment+0x34>
 80096b4:	4b3f      	ldr	r3, [pc, #252]	; (80097b4 <tcp_create_segment+0x128>)
 80096b6:	22a4      	movs	r2, #164	; 0xa4
 80096b8:	4941      	ldr	r1, [pc, #260]	; (80097c0 <tcp_create_segment+0x134>)
 80096ba:	4840      	ldr	r0, [pc, #256]	; (80097bc <tcp_create_segment+0x130>)
 80096bc:	f004 fbfe 	bl	800debc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80096c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80096ce:	2003      	movs	r0, #3
 80096d0:	f7fa ff8c 	bl	80045ec <memp_malloc>
 80096d4:	6138      	str	r0, [r7, #16]
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d104      	bne.n	80096e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80096dc:	68b8      	ldr	r0, [r7, #8]
 80096de:	f7fb fde3 	bl	80052a8 <pbuf_free>
    return NULL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	e061      	b.n	80097aa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80096ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2200      	movs	r2, #0
 80096f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	891a      	ldrh	r2, [r3, #8]
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	b29b      	uxth	r3, r3
 8009702:	429a      	cmp	r2, r3
 8009704:	d205      	bcs.n	8009712 <tcp_create_segment+0x86>
 8009706:	4b2b      	ldr	r3, [pc, #172]	; (80097b4 <tcp_create_segment+0x128>)
 8009708:	22b0      	movs	r2, #176	; 0xb0
 800970a:	492e      	ldr	r1, [pc, #184]	; (80097c4 <tcp_create_segment+0x138>)
 800970c:	482b      	ldr	r0, [pc, #172]	; (80097bc <tcp_create_segment+0x130>)
 800970e:	f004 fbd5 	bl	800debc <iprintf>
  seg->len = p->tot_len - optlen;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	891a      	ldrh	r2, [r3, #8]
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	b29b      	uxth	r3, r3
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	b29a      	uxth	r2, r3
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009722:	2114      	movs	r1, #20
 8009724:	68b8      	ldr	r0, [r7, #8]
 8009726:	f7fb fd29 	bl	800517c <pbuf_add_header>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d004      	beq.n	800973a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009730:	6938      	ldr	r0, [r7, #16]
 8009732:	f7fd f8ce 	bl	80068d2 <tcp_seg_free>
    return NULL;
 8009736:	2300      	movs	r3, #0
 8009738:	e037      	b.n	80097aa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8ada      	ldrh	r2, [r3, #22]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	68dc      	ldr	r4, [r3, #12]
 800974c:	4610      	mov	r0, r2
 800974e:	f7fa faf7 	bl	8003d40 <lwip_htons>
 8009752:	4603      	mov	r3, r0
 8009754:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8b1a      	ldrh	r2, [r3, #24]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	68dc      	ldr	r4, [r3, #12]
 800975e:	4610      	mov	r0, r2
 8009760:	f7fa faee 	bl	8003d40 <lwip_htons>
 8009764:	4603      	mov	r3, r0
 8009766:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	68dc      	ldr	r4, [r3, #12]
 800976c:	6838      	ldr	r0, [r7, #0]
 800976e:	f7fa fafc 	bl	8003d6a <lwip_htonl>
 8009772:	4603      	mov	r3, r0
 8009774:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	089b      	lsrs	r3, r3, #2
 800977a:	b2db      	uxtb	r3, r3
 800977c:	b29b      	uxth	r3, r3
 800977e:	3305      	adds	r3, #5
 8009780:	b29b      	uxth	r3, r3
 8009782:	031b      	lsls	r3, r3, #12
 8009784:	b29a      	uxth	r2, r3
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	b29b      	uxth	r3, r3
 800978a:	4313      	orrs	r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	68dc      	ldr	r4, [r3, #12]
 8009792:	4610      	mov	r0, r2
 8009794:	f7fa fad4 	bl	8003d40 <lwip_htons>
 8009798:	4603      	mov	r3, r0
 800979a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	749a      	strb	r2, [r3, #18]
 80097a4:	2200      	movs	r2, #0
 80097a6:	74da      	strb	r2, [r3, #19]
  return seg;
 80097a8:	693b      	ldr	r3, [r7, #16]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	371c      	adds	r7, #28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd90      	pop	{r4, r7, pc}
 80097b2:	bf00      	nop
 80097b4:	080109d8 	.word	0x080109d8
 80097b8:	08010a0c 	.word	0x08010a0c
 80097bc:	08010a2c 	.word	0x08010a2c
 80097c0:	08010a54 	.word	0x08010a54
 80097c4:	08010a78 	.word	0x08010a78

080097c8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b08b      	sub	sp, #44	; 0x2c
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61fb      	str	r3, [r7, #28]
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80097dc:	2300      	movs	r3, #0
 80097de:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d106      	bne.n	80097f4 <tcp_split_unsent_seg+0x2c>
 80097e6:	4b95      	ldr	r3, [pc, #596]	; (8009a3c <tcp_split_unsent_seg+0x274>)
 80097e8:	f240 324b 	movw	r2, #843	; 0x34b
 80097ec:	4994      	ldr	r1, [pc, #592]	; (8009a40 <tcp_split_unsent_seg+0x278>)
 80097ee:	4895      	ldr	r0, [pc, #596]	; (8009a44 <tcp_split_unsent_seg+0x27c>)
 80097f0:	f004 fb64 	bl	800debc <iprintf>

  useg = pcb->unsent;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009804:	e116      	b.n	8009a34 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009806:	887b      	ldrh	r3, [r7, #2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d109      	bne.n	8009820 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800980c:	4b8b      	ldr	r3, [pc, #556]	; (8009a3c <tcp_split_unsent_seg+0x274>)
 800980e:	f240 3253 	movw	r2, #851	; 0x353
 8009812:	498d      	ldr	r1, [pc, #564]	; (8009a48 <tcp_split_unsent_seg+0x280>)
 8009814:	488b      	ldr	r0, [pc, #556]	; (8009a44 <tcp_split_unsent_seg+0x27c>)
 8009816:	f004 fb51 	bl	800debc <iprintf>
    return ERR_VAL;
 800981a:	f06f 0305 	mvn.w	r3, #5
 800981e:	e109      	b.n	8009a34 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	891b      	ldrh	r3, [r3, #8]
 8009824:	887a      	ldrh	r2, [r7, #2]
 8009826:	429a      	cmp	r2, r3
 8009828:	d301      	bcc.n	800982e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	e102      	b.n	8009a34 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009832:	887a      	ldrh	r2, [r7, #2]
 8009834:	429a      	cmp	r2, r3
 8009836:	d906      	bls.n	8009846 <tcp_split_unsent_seg+0x7e>
 8009838:	4b80      	ldr	r3, [pc, #512]	; (8009a3c <tcp_split_unsent_seg+0x274>)
 800983a:	f240 325b 	movw	r2, #859	; 0x35b
 800983e:	4983      	ldr	r1, [pc, #524]	; (8009a4c <tcp_split_unsent_seg+0x284>)
 8009840:	4880      	ldr	r0, [pc, #512]	; (8009a44 <tcp_split_unsent_seg+0x27c>)
 8009842:	f004 fb3b 	bl	800debc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	891b      	ldrh	r3, [r3, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <tcp_split_unsent_seg+0x94>
 800984e:	4b7b      	ldr	r3, [pc, #492]	; (8009a3c <tcp_split_unsent_seg+0x274>)
 8009850:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009854:	497e      	ldr	r1, [pc, #504]	; (8009a50 <tcp_split_unsent_seg+0x288>)
 8009856:	487b      	ldr	r0, [pc, #492]	; (8009a44 <tcp_split_unsent_seg+0x27c>)
 8009858:	f004 fb30 	bl	800debc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	7a9b      	ldrb	r3, [r3, #10]
 8009860:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	891a      	ldrh	r2, [r3, #8]
 8009872:	887b      	ldrh	r3, [r7, #2]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	b29a      	uxth	r2, r3
 800987c:	89bb      	ldrh	r3, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	b29b      	uxth	r3, r3
 8009882:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009886:	4619      	mov	r1, r3
 8009888:	2036      	movs	r0, #54	; 0x36
 800988a:	f7fb fa29 	bl	8004ce0 <pbuf_alloc>
 800988e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80b7 	beq.w	8009a06 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	891a      	ldrh	r2, [r3, #8]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	891b      	ldrh	r3, [r3, #8]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	887b      	ldrh	r3, [r7, #2]
 80098a8:	4413      	add	r3, r2
 80098aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	6858      	ldr	r0, [r3, #4]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	18d1      	adds	r1, r2, r3
 80098b8:	897b      	ldrh	r3, [r7, #10]
 80098ba:	89ba      	ldrh	r2, [r7, #12]
 80098bc:	f7fb feee 	bl	800569c <pbuf_copy_partial>
 80098c0:	4603      	mov	r3, r0
 80098c2:	461a      	mov	r2, r3
 80098c4:	89bb      	ldrh	r3, [r7, #12]
 80098c6:	4293      	cmp	r3, r2
 80098c8:	f040 809f 	bne.w	8009a0a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	899b      	ldrh	r3, [r3, #12]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fa fa33 	bl	8003d40 <lwip_htons>
 80098da:	4603      	mov	r3, r0
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098e2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80098e4:	2300      	movs	r3, #0
 80098e6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80098e8:	7efb      	ldrb	r3, [r7, #27]
 80098ea:	f003 0308 	and.w	r3, r3, #8
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80098f2:	7efb      	ldrb	r3, [r7, #27]
 80098f4:	f023 0308 	bic.w	r3, r3, #8
 80098f8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80098fa:	7ebb      	ldrb	r3, [r7, #26]
 80098fc:	f043 0308 	orr.w	r3, r3, #8
 8009900:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009902:	7efb      	ldrb	r3, [r7, #27]
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d007      	beq.n	800991c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800990c:	7efb      	ldrb	r3, [r7, #27]
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009914:	7ebb      	ldrb	r3, [r7, #26]
 8009916:	f043 0301 	orr.w	r3, r3, #1
 800991a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	4618      	mov	r0, r3
 8009924:	f7fa fa21 	bl	8003d6a <lwip_htonl>
 8009928:	4602      	mov	r2, r0
 800992a:	887b      	ldrh	r3, [r7, #2]
 800992c:	18d1      	adds	r1, r2, r3
 800992e:	7eba      	ldrb	r2, [r7, #26]
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	460b      	mov	r3, r1
 8009936:	6939      	ldr	r1, [r7, #16]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fea7 	bl	800968c <tcp_create_segment>
 800993e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d063      	beq.n	8009a0e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	4618      	mov	r0, r3
 800994c:	f7fb fd34 	bl	80053b8 <pbuf_clen>
 8009950:	4603      	mov	r3, r0
 8009952:	461a      	mov	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	b29a      	uxth	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	6858      	ldr	r0, [r3, #4]
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	891a      	ldrh	r2, [r3, #8]
 800996e:	89bb      	ldrh	r3, [r7, #12]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	b29b      	uxth	r3, r3
 8009974:	4619      	mov	r1, r3
 8009976:	f7fb fb11 	bl	8004f9c <pbuf_realloc>
  useg->len -= remainder;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	891a      	ldrh	r2, [r3, #8]
 800997e:	89bb      	ldrh	r3, [r7, #12]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	b29a      	uxth	r2, r3
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	899b      	ldrh	r3, [r3, #12]
 800998e:	b29c      	uxth	r4, r3
 8009990:	7efb      	ldrb	r3, [r7, #27]
 8009992:	b29b      	uxth	r3, r3
 8009994:	4618      	mov	r0, r3
 8009996:	f7fa f9d3 	bl	8003d40 <lwip_htons>
 800999a:	4603      	mov	r3, r0
 800999c:	461a      	mov	r2, r3
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	4322      	orrs	r2, r4
 80099a4:	b292      	uxth	r2, r2
 80099a6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fb fd03 	bl	80053b8 <pbuf_clen>
 80099b2:	4603      	mov	r3, r0
 80099b4:	461a      	mov	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80099bc:	4413      	add	r3, r2
 80099be:	b29a      	uxth	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fb fcf4 	bl	80053b8 <pbuf_clen>
 80099d0:	4603      	mov	r3, r0
 80099d2:	461a      	mov	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80099da:	4413      	add	r3, r2
 80099dc:	b29a      	uxth	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	69fa      	ldr	r2, [r7, #28]
 80099f0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e016      	b.n	8009a34 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009a06:	bf00      	nop
 8009a08:	e002      	b.n	8009a10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009a0a:	bf00      	nop
 8009a0c:	e000      	b.n	8009a10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009a0e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d006      	beq.n	8009a24 <tcp_split_unsent_seg+0x25c>
 8009a16:	4b09      	ldr	r3, [pc, #36]	; (8009a3c <tcp_split_unsent_seg+0x274>)
 8009a18:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009a1c:	490d      	ldr	r1, [pc, #52]	; (8009a54 <tcp_split_unsent_seg+0x28c>)
 8009a1e:	4809      	ldr	r0, [pc, #36]	; (8009a44 <tcp_split_unsent_seg+0x27c>)
 8009a20:	f004 fa4c 	bl	800debc <iprintf>
  if (p != NULL) {
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009a2a:	6938      	ldr	r0, [r7, #16]
 8009a2c:	f7fb fc3c 	bl	80052a8 <pbuf_free>
  }

  return ERR_MEM;
 8009a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3724      	adds	r7, #36	; 0x24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd90      	pop	{r4, r7, pc}
 8009a3c:	080109d8 	.word	0x080109d8
 8009a40:	08010d6c 	.word	0x08010d6c
 8009a44:	08010a2c 	.word	0x08010a2c
 8009a48:	08010d90 	.word	0x08010d90
 8009a4c:	08010db4 	.word	0x08010db4
 8009a50:	08010dc4 	.word	0x08010dc4
 8009a54:	08010dd4 	.word	0x08010dd4

08009a58 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009a58:	b590      	push	{r4, r7, lr}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <tcp_send_fin+0x1c>
 8009a66:	4b21      	ldr	r3, [pc, #132]	; (8009aec <tcp_send_fin+0x94>)
 8009a68:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009a6c:	4920      	ldr	r1, [pc, #128]	; (8009af0 <tcp_send_fin+0x98>)
 8009a6e:	4821      	ldr	r0, [pc, #132]	; (8009af4 <tcp_send_fin+0x9c>)
 8009a70:	f004 fa24 	bl	800debc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d02e      	beq.n	8009ada <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a80:	60fb      	str	r3, [r7, #12]
 8009a82:	e002      	b.n	8009a8a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1f8      	bne.n	8009a84 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	899b      	ldrh	r3, [r3, #12]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fa f950 	bl	8003d40 <lwip_htons>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	f003 0307 	and.w	r3, r3, #7
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d116      	bne.n	8009ada <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	899b      	ldrh	r3, [r3, #12]
 8009ab2:	b29c      	uxth	r4, r3
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	f7fa f943 	bl	8003d40 <lwip_htons>
 8009aba:	4603      	mov	r3, r0
 8009abc:	461a      	mov	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	4322      	orrs	r2, r4
 8009ac4:	b292      	uxth	r2, r2
 8009ac6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	8b5b      	ldrh	r3, [r3, #26]
 8009acc:	f043 0320 	orr.w	r3, r3, #32
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e004      	b.n	8009ae4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009ada:	2101      	movs	r1, #1
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f80b 	bl	8009af8 <tcp_enqueue_flags>
 8009ae2:	4603      	mov	r3, r0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd90      	pop	{r4, r7, pc}
 8009aec:	080109d8 	.word	0x080109d8
 8009af0:	08010de0 	.word	0x08010de0
 8009af4:	08010a2c 	.word	0x08010a2c

08009af8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <tcp_enqueue_flags+0x2c>
 8009b16:	4b67      	ldr	r3, [pc, #412]	; (8009cb4 <tcp_enqueue_flags+0x1bc>)
 8009b18:	f240 4211 	movw	r2, #1041	; 0x411
 8009b1c:	4966      	ldr	r1, [pc, #408]	; (8009cb8 <tcp_enqueue_flags+0x1c0>)
 8009b1e:	4867      	ldr	r0, [pc, #412]	; (8009cbc <tcp_enqueue_flags+0x1c4>)
 8009b20:	f004 f9cc 	bl	800debc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <tcp_enqueue_flags+0x40>
 8009b2a:	4b62      	ldr	r3, [pc, #392]	; (8009cb4 <tcp_enqueue_flags+0x1bc>)
 8009b2c:	f240 4213 	movw	r2, #1043	; 0x413
 8009b30:	4963      	ldr	r1, [pc, #396]	; (8009cc0 <tcp_enqueue_flags+0x1c8>)
 8009b32:	4862      	ldr	r0, [pc, #392]	; (8009cbc <tcp_enqueue_flags+0x1c4>)
 8009b34:	f004 f9c2 	bl	800debc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009b42:	2301      	movs	r3, #1
 8009b44:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009b46:	7ffb      	ldrb	r3, [r7, #31]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	2036      	movs	r0, #54	; 0x36
 8009b5e:	f7fb f8bf 	bl	8004ce0 <pbuf_alloc>
 8009b62:	6138      	str	r0, [r7, #16]
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d109      	bne.n	8009b7e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	8b5b      	ldrh	r3, [r3, #26]
 8009b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b7c:	e095      	b.n	8009caa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	895a      	ldrh	r2, [r3, #10]
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d206      	bcs.n	8009b98 <tcp_enqueue_flags+0xa0>
 8009b8a:	4b4a      	ldr	r3, [pc, #296]	; (8009cb4 <tcp_enqueue_flags+0x1bc>)
 8009b8c:	f240 4239 	movw	r2, #1081	; 0x439
 8009b90:	494c      	ldr	r1, [pc, #304]	; (8009cc4 <tcp_enqueue_flags+0x1cc>)
 8009b92:	484a      	ldr	r0, [pc, #296]	; (8009cbc <tcp_enqueue_flags+0x1c4>)
 8009b94:	f004 f992 	bl	800debc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009b9c:	78fa      	ldrb	r2, [r7, #3]
 8009b9e:	7ffb      	ldrb	r3, [r7, #31]
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	6939      	ldr	r1, [r7, #16]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff fd70 	bl	800968c <tcp_create_segment>
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d109      	bne.n	8009bc8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	8b5b      	ldrh	r3, [r3, #26]
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bc6:	e070      	b.n	8009caa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d006      	beq.n	8009be2 <tcp_enqueue_flags+0xea>
 8009bd4:	4b37      	ldr	r3, [pc, #220]	; (8009cb4 <tcp_enqueue_flags+0x1bc>)
 8009bd6:	f240 4242 	movw	r2, #1090	; 0x442
 8009bda:	493b      	ldr	r1, [pc, #236]	; (8009cc8 <tcp_enqueue_flags+0x1d0>)
 8009bdc:	4837      	ldr	r0, [pc, #220]	; (8009cbc <tcp_enqueue_flags+0x1c4>)
 8009bde:	f004 f96d 	bl	800debc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	891b      	ldrh	r3, [r3, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d006      	beq.n	8009bf8 <tcp_enqueue_flags+0x100>
 8009bea:	4b32      	ldr	r3, [pc, #200]	; (8009cb4 <tcp_enqueue_flags+0x1bc>)
 8009bec:	f240 4243 	movw	r2, #1091	; 0x443
 8009bf0:	4936      	ldr	r1, [pc, #216]	; (8009ccc <tcp_enqueue_flags+0x1d4>)
 8009bf2:	4832      	ldr	r0, [pc, #200]	; (8009cbc <tcp_enqueue_flags+0x1c4>)
 8009bf4:	f004 f962 	bl	800debc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d103      	bne.n	8009c08 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	66da      	str	r2, [r3, #108]	; 0x6c
 8009c06:	e00d      	b.n	8009c24 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c0c:	61bb      	str	r3, [r7, #24]
 8009c0e:	e002      	b.n	8009c16 <tcp_enqueue_flags+0x11e>
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	61bb      	str	r3, [r7, #24]
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f8      	bne.n	8009c10 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d104      	bne.n	8009c40 <tcp_enqueue_flags+0x148>
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d004      	beq.n	8009c4a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8b5b      	ldrh	r3, [r3, #26]
 8009c58:	f043 0320 	orr.w	r3, r3, #32
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fb fba6 	bl	80053b8 <pbuf_clen>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	461a      	mov	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c76:	4413      	add	r3, r2
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00e      	beq.n	8009ca8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <tcp_enqueue_flags+0x1b0>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <tcp_enqueue_flags+0x1b0>
 8009c9a:	4b06      	ldr	r3, [pc, #24]	; (8009cb4 <tcp_enqueue_flags+0x1bc>)
 8009c9c:	f240 4265 	movw	r2, #1125	; 0x465
 8009ca0:	490b      	ldr	r1, [pc, #44]	; (8009cd0 <tcp_enqueue_flags+0x1d8>)
 8009ca2:	4806      	ldr	r0, [pc, #24]	; (8009cbc <tcp_enqueue_flags+0x1c4>)
 8009ca4:	f004 f90a 	bl	800debc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	080109d8 	.word	0x080109d8
 8009cb8:	08010dfc 	.word	0x08010dfc
 8009cbc:	08010a2c 	.word	0x08010a2c
 8009cc0:	08010e54 	.word	0x08010e54
 8009cc4:	08010e74 	.word	0x08010e74
 8009cc8:	08010eb0 	.word	0x08010eb0
 8009ccc:	08010ec8 	.word	0x08010ec8
 8009cd0:	08010ef4 	.word	0x08010ef4

08009cd4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009cd4:	b5b0      	push	{r4, r5, r7, lr}
 8009cd6:	b08a      	sub	sp, #40	; 0x28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d106      	bne.n	8009cf0 <tcp_output+0x1c>
 8009ce2:	4b8a      	ldr	r3, [pc, #552]	; (8009f0c <tcp_output+0x238>)
 8009ce4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009ce8:	4989      	ldr	r1, [pc, #548]	; (8009f10 <tcp_output+0x23c>)
 8009cea:	488a      	ldr	r0, [pc, #552]	; (8009f14 <tcp_output+0x240>)
 8009cec:	f004 f8e6 	bl	800debc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7d1b      	ldrb	r3, [r3, #20]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d106      	bne.n	8009d06 <tcp_output+0x32>
 8009cf8:	4b84      	ldr	r3, [pc, #528]	; (8009f0c <tcp_output+0x238>)
 8009cfa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009cfe:	4986      	ldr	r1, [pc, #536]	; (8009f18 <tcp_output+0x244>)
 8009d00:	4884      	ldr	r0, [pc, #528]	; (8009f14 <tcp_output+0x240>)
 8009d02:	f004 f8db 	bl	800debc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009d06:	4b85      	ldr	r3, [pc, #532]	; (8009f1c <tcp_output+0x248>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d101      	bne.n	8009d14 <tcp_output+0x40>
    return ERR_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	e1ce      	b.n	800a0b2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d20:	4293      	cmp	r3, r2
 8009d22:	bf28      	it	cs
 8009d24:	4613      	movcs	r3, r2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10b      	bne.n	8009d4e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	8b5b      	ldrh	r3, [r3, #26]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 81aa 	beq.w	800a098 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fdcb 	bl	800a8e0 <tcp_send_empty_ack>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	e1b1      	b.n	800a0b2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3304      	adds	r3, #4
 8009d54:	461a      	mov	r2, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff fc7c 	bl	8009654 <tcp_route>
 8009d5c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d102      	bne.n	8009d6a <tcp_output+0x96>
    return ERR_RTE;
 8009d64:	f06f 0303 	mvn.w	r3, #3
 8009d68:	e1a3      	b.n	800a0b2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <tcp_output+0xa4>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d111      	bne.n	8009d9c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <tcp_output+0xb0>
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	3304      	adds	r3, #4
 8009d82:	e000      	b.n	8009d86 <tcp_output+0xb2>
 8009d84:	2300      	movs	r3, #0
 8009d86:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d102      	bne.n	8009d94 <tcp_output+0xc0>
      return ERR_RTE;
 8009d8e:	f06f 0303 	mvn.w	r3, #3
 8009d92:	e18e      	b.n	800a0b2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7f9 ffe1 	bl	8003d6a <lwip_htonl>
 8009da8:	4602      	mov	r2, r0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	8912      	ldrh	r2, [r2, #8]
 8009db4:	4413      	add	r3, r2
 8009db6:	69ba      	ldr	r2, [r7, #24]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d227      	bcs.n	8009e0c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d114      	bne.n	8009df4 <tcp_output+0x120>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d110      	bne.n	8009df4 <tcp_output+0x120>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10b      	bne.n	8009df4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	8b5b      	ldrh	r3, [r3, #26]
 8009df8:	f003 0302 	and.w	r3, r3, #2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 814d 	beq.w	800a09c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fd6c 	bl	800a8e0 <tcp_send_empty_ack>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	e152      	b.n	800a0b2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e18:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 811c 	beq.w	800a05a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009e22:	e002      	b.n	8009e2a <tcp_output+0x156>
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	623b      	str	r3, [r7, #32]
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1f8      	bne.n	8009e24 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009e32:	e112      	b.n	800a05a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	899b      	ldrh	r3, [r3, #12]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7f9 ff7f 	bl	8003d40 <lwip_htons>
 8009e42:	4603      	mov	r3, r0
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	f003 0304 	and.w	r3, r3, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d006      	beq.n	8009e5c <tcp_output+0x188>
 8009e4e:	4b2f      	ldr	r3, [pc, #188]	; (8009f0c <tcp_output+0x238>)
 8009e50:	f240 5236 	movw	r2, #1334	; 0x536
 8009e54:	4932      	ldr	r1, [pc, #200]	; (8009f20 <tcp_output+0x24c>)
 8009e56:	482f      	ldr	r0, [pc, #188]	; (8009f14 <tcp_output+0x240>)
 8009e58:	f004 f830 	bl	800debc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01f      	beq.n	8009ea4 <tcp_output+0x1d0>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	8b5b      	ldrh	r3, [r3, #26]
 8009e68:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d119      	bne.n	8009ea4 <tcp_output+0x1d0>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <tcp_output+0x1bc>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d110      	bne.n	8009ea4 <tcp_output+0x1d0>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e86:	891a      	ldrh	r2, [r3, #8]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d209      	bcs.n	8009ea4 <tcp_output+0x1d0>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d004      	beq.n	8009ea4 <tcp_output+0x1d0>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d901      	bls.n	8009ea8 <tcp_output+0x1d4>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <tcp_output+0x1d6>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	8b5b      	ldrh	r3, [r3, #26]
 8009eb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 80e4 	beq.w	800a084 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	7d1b      	ldrb	r3, [r3, #20]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d00d      	beq.n	8009ee0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	899b      	ldrh	r3, [r3, #12]
 8009eca:	b29c      	uxth	r4, r3
 8009ecc:	2010      	movs	r0, #16
 8009ece:	f7f9 ff37 	bl	8003d40 <lwip_htons>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	4322      	orrs	r2, r4
 8009edc:	b292      	uxth	r2, r2
 8009ede:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ee6:	f000 f909 	bl	800a0fc <tcp_output_segment>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d016      	beq.n	8009f24 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	8b5b      	ldrh	r3, [r3, #26]
 8009efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	835a      	strh	r2, [r3, #26]
      return err;
 8009f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f08:	e0d3      	b.n	800a0b2 <tcp_output+0x3de>
 8009f0a:	bf00      	nop
 8009f0c:	080109d8 	.word	0x080109d8
 8009f10:	08010f1c 	.word	0x08010f1c
 8009f14:	08010a2c 	.word	0x08010a2c
 8009f18:	08010f34 	.word	0x08010f34
 8009f1c:	20006840 	.word	0x20006840
 8009f20:	08010f5c 	.word	0x08010f5c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	7d1b      	ldrb	r3, [r3, #20]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d006      	beq.n	8009f42 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8b5b      	ldrh	r3, [r3, #26]
 8009f38:	f023 0303 	bic.w	r3, r3, #3
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7f9 ff0e 	bl	8003d6a <lwip_htonl>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	891b      	ldrh	r3, [r3, #8]
 8009f54:	461d      	mov	r5, r3
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	899b      	ldrh	r3, [r3, #12]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f9 feee 	bl	8003d40 <lwip_htons>
 8009f64:	4603      	mov	r3, r0
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <tcp_output+0x2a0>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <tcp_output+0x2a2>
 8009f74:	2300      	movs	r3, #0
 8009f76:	442b      	add	r3, r5
 8009f78:	4423      	add	r3, r4
 8009f7a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	da02      	bge.n	8009f8e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	891b      	ldrh	r3, [r3, #8]
 8009f92:	461c      	mov	r4, r3
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	899b      	ldrh	r3, [r3, #12]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7f9 fecf 	bl	8003d40 <lwip_htons>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <tcp_output+0x2de>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e000      	b.n	8009fb4 <tcp_output+0x2e0>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	4423      	add	r3, r4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d049      	beq.n	800a04e <tcp_output+0x37a>
      seg->next = NULL;
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d105      	bne.n	8009fd4 <tcp_output+0x300>
        pcb->unacked = seg;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fcc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	623b      	str	r3, [r7, #32]
 8009fd2:	e03f      	b.n	800a054 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7f9 fec5 	bl	8003d6a <lwip_htonl>
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7f9 febe 	bl	8003d6a <lwip_htonl>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	1ae3      	subs	r3, r4, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	da24      	bge.n	800a040 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3370      	adds	r3, #112	; 0x70
 8009ffa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009ffc:	e002      	b.n	800a004 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d011      	beq.n	800a030 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	4618      	mov	r0, r3
 800a016:	f7f9 fea8 	bl	8003d6a <lwip_htonl>
 800a01a:	4604      	mov	r4, r0
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	4618      	mov	r0, r3
 800a024:	f7f9 fea1 	bl	8003d6a <lwip_htonl>
 800a028:	4603      	mov	r3, r0
 800a02a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dbe6      	blt.n	8009ffe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	e009      	b.n	800a054 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a044:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	623b      	str	r3, [r7, #32]
 800a04c:	e002      	b.n	800a054 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a04e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a050:	f7fc fc3f 	bl	80068d2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a058:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d012      	beq.n	800a086 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	4618      	mov	r0, r3
 800a068:	f7f9 fe7f 	bl	8003d6a <lwip_htonl>
 800a06c:	4602      	mov	r2, r0
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a076:	8912      	ldrh	r2, [r2, #8]
 800a078:	4413      	add	r3, r2
  while (seg != NULL &&
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	f4bf aed9 	bcs.w	8009e34 <tcp_output+0x160>
 800a082:	e000      	b.n	800a086 <tcp_output+0x3b2>
      break;
 800a084:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d108      	bne.n	800a0a0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a096:	e004      	b.n	800a0a2 <tcp_output+0x3ce>
    goto output_done;
 800a098:	bf00      	nop
 800a09a:	e002      	b.n	800a0a2 <tcp_output+0x3ce>
    goto output_done;
 800a09c:	bf00      	nop
 800a09e:	e000      	b.n	800a0a2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a0a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	8b5b      	ldrh	r3, [r3, #26]
 800a0a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3728      	adds	r7, #40	; 0x28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ba:	bf00      	nop

0800a0bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d106      	bne.n	800a0d8 <tcp_output_segment_busy+0x1c>
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <tcp_output_segment_busy+0x34>)
 800a0cc:	f240 529a 	movw	r2, #1434	; 0x59a
 800a0d0:	4908      	ldr	r1, [pc, #32]	; (800a0f4 <tcp_output_segment_busy+0x38>)
 800a0d2:	4809      	ldr	r0, [pc, #36]	; (800a0f8 <tcp_output_segment_busy+0x3c>)
 800a0d4:	f003 fef2 	bl	800debc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	7b9b      	ldrb	r3, [r3, #14]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d001      	beq.n	800a0e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	080109d8 	.word	0x080109d8
 800a0f4:	08010f74 	.word	0x08010f74
 800a0f8:	08010a2c 	.word	0x08010a2c

0800a0fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a0fc:	b5b0      	push	{r4, r5, r7, lr}
 800a0fe:	b08c      	sub	sp, #48	; 0x30
 800a100:	af04      	add	r7, sp, #16
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <tcp_output_segment+0x20>
 800a10e:	4b63      	ldr	r3, [pc, #396]	; (800a29c <tcp_output_segment+0x1a0>)
 800a110:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a114:	4962      	ldr	r1, [pc, #392]	; (800a2a0 <tcp_output_segment+0x1a4>)
 800a116:	4863      	ldr	r0, [pc, #396]	; (800a2a4 <tcp_output_segment+0x1a8>)
 800a118:	f003 fed0 	bl	800debc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d106      	bne.n	800a130 <tcp_output_segment+0x34>
 800a122:	4b5e      	ldr	r3, [pc, #376]	; (800a29c <tcp_output_segment+0x1a0>)
 800a124:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a128:	495f      	ldr	r1, [pc, #380]	; (800a2a8 <tcp_output_segment+0x1ac>)
 800a12a:	485e      	ldr	r0, [pc, #376]	; (800a2a4 <tcp_output_segment+0x1a8>)
 800a12c:	f003 fec6 	bl	800debc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <tcp_output_segment+0x48>
 800a136:	4b59      	ldr	r3, [pc, #356]	; (800a29c <tcp_output_segment+0x1a0>)
 800a138:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a13c:	495b      	ldr	r1, [pc, #364]	; (800a2ac <tcp_output_segment+0x1b0>)
 800a13e:	4859      	ldr	r0, [pc, #356]	; (800a2a4 <tcp_output_segment+0x1a8>)
 800a140:	f003 febc 	bl	800debc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff ffb9 	bl	800a0bc <tcp_output_segment_busy>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	e09f      	b.n	800a294 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	68dc      	ldr	r4, [r3, #12]
 800a15c:	4610      	mov	r0, r2
 800a15e:	f7f9 fe04 	bl	8003d6a <lwip_htonl>
 800a162:	4603      	mov	r3, r0
 800a164:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68dc      	ldr	r4, [r3, #12]
 800a16e:	4610      	mov	r0, r2
 800a170:	f7f9 fde6 	bl	8003d40 <lwip_htons>
 800a174:	4603      	mov	r3, r0
 800a176:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a180:	441a      	add	r2, r3
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	3314      	adds	r3, #20
 800a18c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	7a9b      	ldrb	r3, [r3, #10]
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d015      	beq.n	800a1c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	3304      	adds	r3, #4
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a1a6:	f7fc fe8b 	bl	8006ec0 <tcp_eff_send_mss_netif>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a1ae:	8b7b      	ldrh	r3, [r7, #26]
 800a1b0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7f9 fdd8 	bl	8003d6a <lwip_htonl>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da02      	bge.n	800a1d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10c      	bne.n	800a1f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a1de:	4b34      	ldr	r3, [pc, #208]	; (800a2b0 <tcp_output_segment+0x1b4>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7f9 fdbc 	bl	8003d6a <lwip_htonl>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	8959      	ldrh	r1, [r3, #10]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	8b3a      	ldrh	r2, [r7, #24]
 800a212:	1a8a      	subs	r2, r1, r2
 800a214:	b292      	uxth	r2, r2
 800a216:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	8919      	ldrh	r1, [r3, #8]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	8b3a      	ldrh	r2, [r7, #24]
 800a224:	1a8a      	subs	r2, r1, r2
 800a226:	b292      	uxth	r2, r2
 800a228:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	68d2      	ldr	r2, [r2, #12]
 800a232:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	741a      	strb	r2, [r3, #16]
 800a23c:	2200      	movs	r2, #0
 800a23e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f103 0214 	add.w	r2, r3, #20
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	7a9b      	ldrb	r3, [r3, #10]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	4413      	add	r3, r2
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	429a      	cmp	r2, r3
 800a258:	d006      	beq.n	800a268 <tcp_output_segment+0x16c>
 800a25a:	4b10      	ldr	r3, [pc, #64]	; (800a29c <tcp_output_segment+0x1a0>)
 800a25c:	f240 621c 	movw	r2, #1564	; 0x61c
 800a260:	4914      	ldr	r1, [pc, #80]	; (800a2b4 <tcp_output_segment+0x1b8>)
 800a262:	4810      	ldr	r0, [pc, #64]	; (800a2a4 <tcp_output_segment+0x1a8>)
 800a264:	f003 fe2a 	bl	800debc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6858      	ldr	r0, [r3, #4]
 800a26c:	68b9      	ldr	r1, [r7, #8]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	1d1c      	adds	r4, r3, #4
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	7add      	ldrb	r5, [r3, #11]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	7a9b      	ldrb	r3, [r3, #10]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	9202      	str	r2, [sp, #8]
 800a27e:	2206      	movs	r2, #6
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	462b      	mov	r3, r5
 800a286:	4622      	mov	r2, r4
 800a288:	f002 fd86 	bl	800cd98 <ip4_output_if>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a290:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3720      	adds	r7, #32
 800a298:	46bd      	mov	sp, r7
 800a29a:	bdb0      	pop	{r4, r5, r7, pc}
 800a29c:	080109d8 	.word	0x080109d8
 800a2a0:	08010f9c 	.word	0x08010f9c
 800a2a4:	08010a2c 	.word	0x08010a2c
 800a2a8:	08010fbc 	.word	0x08010fbc
 800a2ac:	08010fdc 	.word	0x08010fdc
 800a2b0:	200067f4 	.word	0x200067f4
 800a2b4:	08011000 	.word	0x08011000

0800a2b8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a2b8:	b5b0      	push	{r4, r5, r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d106      	bne.n	800a2d4 <tcp_rexmit_rto_prepare+0x1c>
 800a2c6:	4b31      	ldr	r3, [pc, #196]	; (800a38c <tcp_rexmit_rto_prepare+0xd4>)
 800a2c8:	f240 6263 	movw	r2, #1635	; 0x663
 800a2cc:	4930      	ldr	r1, [pc, #192]	; (800a390 <tcp_rexmit_rto_prepare+0xd8>)
 800a2ce:	4831      	ldr	r0, [pc, #196]	; (800a394 <tcp_rexmit_rto_prepare+0xdc>)
 800a2d0:	f003 fdf4 	bl	800debc <iprintf>

  if (pcb->unacked == NULL) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d102      	bne.n	800a2e2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a2dc:	f06f 0305 	mvn.w	r3, #5
 800a2e0:	e050      	b.n	800a384 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e6:	60fb      	str	r3, [r7, #12]
 800a2e8:	e00b      	b.n	800a302 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff fee6 	bl	800a0bc <tcp_output_segment_busy>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a2f6:	f06f 0305 	mvn.w	r3, #5
 800a2fa:	e043      	b.n	800a384 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1ef      	bne.n	800a2ea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff fed6 	bl	800a0bc <tcp_output_segment_busy>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a316:	f06f 0305 	mvn.w	r3, #5
 800a31a:	e033      	b.n	800a384 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	8b5b      	ldrh	r3, [r3, #26]
 800a336:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	4618      	mov	r0, r3
 800a348:	f7f9 fd0f 	bl	8003d6a <lwip_htonl>
 800a34c:	4604      	mov	r4, r0
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	891b      	ldrh	r3, [r3, #8]
 800a352:	461d      	mov	r5, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	899b      	ldrh	r3, [r3, #12]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7f9 fcef 	bl	8003d40 <lwip_htons>
 800a362:	4603      	mov	r3, r0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	f003 0303 	and.w	r3, r3, #3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <tcp_rexmit_rto_prepare+0xba>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <tcp_rexmit_rto_prepare+0xbc>
 800a372:	2300      	movs	r3, #0
 800a374:	442b      	add	r3, r5
 800a376:	18e2      	adds	r2, r4, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bdb0      	pop	{r4, r5, r7, pc}
 800a38c:	080109d8 	.word	0x080109d8
 800a390:	08011014 	.word	0x08011014
 800a394:	08010a2c 	.word	0x08010a2c

0800a398 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <tcp_rexmit_rto_commit+0x1c>
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <tcp_rexmit_rto_commit+0x44>)
 800a3a8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a3ac:	490c      	ldr	r1, [pc, #48]	; (800a3e0 <tcp_rexmit_rto_commit+0x48>)
 800a3ae:	480d      	ldr	r0, [pc, #52]	; (800a3e4 <tcp_rexmit_rto_commit+0x4c>)
 800a3b0:	f003 fd84 	bl	800debc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3ba:	2bff      	cmp	r3, #255	; 0xff
 800a3bc:	d007      	beq.n	800a3ce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff fc80 	bl	8009cd4 <tcp_output>
}
 800a3d4:	bf00      	nop
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	080109d8 	.word	0x080109d8
 800a3e0:	08011038 	.word	0x08011038
 800a3e4:	08010a2c 	.word	0x08010a2c

0800a3e8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d106      	bne.n	800a404 <tcp_rexmit_rto+0x1c>
 800a3f6:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <tcp_rexmit_rto+0x38>)
 800a3f8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a3fc:	4909      	ldr	r1, [pc, #36]	; (800a424 <tcp_rexmit_rto+0x3c>)
 800a3fe:	480a      	ldr	r0, [pc, #40]	; (800a428 <tcp_rexmit_rto+0x40>)
 800a400:	f003 fd5c 	bl	800debc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff ff57 	bl	800a2b8 <tcp_rexmit_rto_prepare>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff ffc1 	bl	800a398 <tcp_rexmit_rto_commit>
  }
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	080109d8 	.word	0x080109d8
 800a424:	0801105c 	.word	0x0801105c
 800a428:	08010a2c 	.word	0x08010a2c

0800a42c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <tcp_rexmit+0x1c>
 800a43a:	4b2f      	ldr	r3, [pc, #188]	; (800a4f8 <tcp_rexmit+0xcc>)
 800a43c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a440:	492e      	ldr	r1, [pc, #184]	; (800a4fc <tcp_rexmit+0xd0>)
 800a442:	482f      	ldr	r0, [pc, #188]	; (800a500 <tcp_rexmit+0xd4>)
 800a444:	f003 fd3a 	bl	800debc <iprintf>

  if (pcb->unacked == NULL) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a450:	f06f 0305 	mvn.w	r3, #5
 800a454:	e04c      	b.n	800a4f0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a45c:	68b8      	ldr	r0, [r7, #8]
 800a45e:	f7ff fe2d 	bl	800a0bc <tcp_output_segment_busy>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a468:	f06f 0305 	mvn.w	r3, #5
 800a46c:	e040      	b.n	800a4f0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	336c      	adds	r3, #108	; 0x6c
 800a47a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a47c:	e002      	b.n	800a484 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d011      	beq.n	800a4b0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	4618      	mov	r0, r3
 800a496:	f7f9 fc68 	bl	8003d6a <lwip_htonl>
 800a49a:	4604      	mov	r4, r0
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7f9 fc61 	bl	8003d6a <lwip_htonl>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	dbe6      	blt.n	800a47e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d103      	bne.n	800a4ce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4d4:	2bff      	cmp	r3, #255	; 0xff
 800a4d6:	d007      	beq.n	800a4e8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4de:	3301      	adds	r3, #1
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd90      	pop	{r4, r7, pc}
 800a4f8:	080109d8 	.word	0x080109d8
 800a4fc:	08011078 	.word	0x08011078
 800a500:	08010a2c 	.word	0x08010a2c

0800a504 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <tcp_rexmit_fast+0x1c>
 800a512:	4b2a      	ldr	r3, [pc, #168]	; (800a5bc <tcp_rexmit_fast+0xb8>)
 800a514:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a518:	4929      	ldr	r1, [pc, #164]	; (800a5c0 <tcp_rexmit_fast+0xbc>)
 800a51a:	482a      	ldr	r0, [pc, #168]	; (800a5c4 <tcp_rexmit_fast+0xc0>)
 800a51c:	f003 fcce 	bl	800debc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a524:	2b00      	cmp	r3, #0
 800a526:	d045      	beq.n	800a5b4 <tcp_rexmit_fast+0xb0>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	8b5b      	ldrh	r3, [r3, #26]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d13f      	bne.n	800a5b4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff ff79 	bl	800a42c <tcp_rexmit>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d139      	bne.n	800a5b4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a54c:	4293      	cmp	r3, r2
 800a54e:	bf28      	it	cs
 800a550:	4613      	movcs	r3, r2
 800a552:	b29b      	uxth	r3, r3
 800a554:	2b00      	cmp	r3, #0
 800a556:	da00      	bge.n	800a55a <tcp_rexmit_fast+0x56>
 800a558:	3301      	adds	r3, #1
 800a55a:	105b      	asrs	r3, r3, #1
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a56a:	461a      	mov	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	429a      	cmp	r2, r3
 800a574:	d206      	bcs.n	800a584 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a58e:	4619      	mov	r1, r3
 800a590:	0049      	lsls	r1, r1, #1
 800a592:	440b      	add	r3, r1
 800a594:	b29b      	uxth	r3, r3
 800a596:	4413      	add	r3, r2
 800a598:	b29a      	uxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	8b5b      	ldrh	r3, [r3, #26]
 800a5a4:	f043 0304 	orr.w	r3, r3, #4
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	080109d8 	.word	0x080109d8
 800a5c0:	08011090 	.word	0x08011090
 800a5c4:	08010a2c 	.word	0x08010a2c

0800a5c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	817b      	strh	r3, [r7, #10]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a5da:	897a      	ldrh	r2, [r7, #10]
 800a5dc:	893b      	ldrh	r3, [r7, #8]
 800a5de:	4413      	add	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	3314      	adds	r3, #20
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	2022      	movs	r0, #34	; 0x22
 800a5ee:	f7fa fb77 	bl	8004ce0 <pbuf_alloc>
 800a5f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d04d      	beq.n	800a696 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a5fa:	897b      	ldrh	r3, [r7, #10]
 800a5fc:	3313      	adds	r3, #19
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	8952      	ldrh	r2, [r2, #10]
 800a602:	4293      	cmp	r3, r2
 800a604:	db06      	blt.n	800a614 <tcp_output_alloc_header_common+0x4c>
 800a606:	4b26      	ldr	r3, [pc, #152]	; (800a6a0 <tcp_output_alloc_header_common+0xd8>)
 800a608:	f240 7223 	movw	r2, #1827	; 0x723
 800a60c:	4925      	ldr	r1, [pc, #148]	; (800a6a4 <tcp_output_alloc_header_common+0xdc>)
 800a60e:	4826      	ldr	r0, [pc, #152]	; (800a6a8 <tcp_output_alloc_header_common+0xe0>)
 800a610:	f003 fc54 	bl	800debc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a61a:	8c3b      	ldrh	r3, [r7, #32]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7f9 fb8f 	bl	8003d40 <lwip_htons>
 800a622:	4603      	mov	r3, r0
 800a624:	461a      	mov	r2, r3
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a62a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7f9 fb87 	bl	8003d40 <lwip_htons>
 800a632:	4603      	mov	r3, r0
 800a634:	461a      	mov	r2, r3
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7f9 fb92 	bl	8003d6a <lwip_htonl>
 800a646:	4602      	mov	r2, r0
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a64c:	897b      	ldrh	r3, [r7, #10]
 800a64e:	089b      	lsrs	r3, r3, #2
 800a650:	b29b      	uxth	r3, r3
 800a652:	3305      	adds	r3, #5
 800a654:	b29b      	uxth	r3, r3
 800a656:	031b      	lsls	r3, r3, #12
 800a658:	b29a      	uxth	r2, r3
 800a65a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a65e:	b29b      	uxth	r3, r3
 800a660:	4313      	orrs	r3, r2
 800a662:	b29b      	uxth	r3, r3
 800a664:	4618      	mov	r0, r3
 800a666:	f7f9 fb6b 	bl	8003d40 <lwip_htons>
 800a66a:	4603      	mov	r3, r0
 800a66c:	461a      	mov	r2, r3
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a672:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a674:	4618      	mov	r0, r3
 800a676:	f7f9 fb63 	bl	8003d40 <lwip_htons>
 800a67a:	4603      	mov	r3, r0
 800a67c:	461a      	mov	r2, r3
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2200      	movs	r2, #0
 800a686:	741a      	strb	r2, [r3, #16]
 800a688:	2200      	movs	r2, #0
 800a68a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	2200      	movs	r2, #0
 800a690:	749a      	strb	r2, [r3, #18]
 800a692:	2200      	movs	r2, #0
 800a694:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a696:	697b      	ldr	r3, [r7, #20]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	080109d8 	.word	0x080109d8
 800a6a4:	080110b0 	.word	0x080110b0
 800a6a8:	08010a2c 	.word	0x08010a2c

0800a6ac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a6ac:	b5b0      	push	{r4, r5, r7, lr}
 800a6ae:	b08a      	sub	sp, #40	; 0x28
 800a6b0:	af04      	add	r7, sp, #16
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	607b      	str	r3, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	817b      	strh	r3, [r7, #10]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d106      	bne.n	800a6d2 <tcp_output_alloc_header+0x26>
 800a6c4:	4b15      	ldr	r3, [pc, #84]	; (800a71c <tcp_output_alloc_header+0x70>)
 800a6c6:	f240 7242 	movw	r2, #1858	; 0x742
 800a6ca:	4915      	ldr	r1, [pc, #84]	; (800a720 <tcp_output_alloc_header+0x74>)
 800a6cc:	4815      	ldr	r0, [pc, #84]	; (800a724 <tcp_output_alloc_header+0x78>)
 800a6ce:	f003 fbf5 	bl	800debc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	8adb      	ldrh	r3, [r3, #22]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	8b12      	ldrh	r2, [r2, #24]
 800a6de:	68f9      	ldr	r1, [r7, #12]
 800a6e0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a6e2:	893d      	ldrh	r5, [r7, #8]
 800a6e4:	897c      	ldrh	r4, [r7, #10]
 800a6e6:	9103      	str	r1, [sp, #12]
 800a6e8:	2110      	movs	r1, #16
 800a6ea:	9102      	str	r1, [sp, #8]
 800a6ec:	9201      	str	r2, [sp, #4]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	462a      	mov	r2, r5
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	f7ff ff67 	bl	800a5c8 <tcp_output_alloc_header_common>
 800a6fa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d006      	beq.n	800a710 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a70a:	441a      	add	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a710:	697b      	ldr	r3, [r7, #20]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bdb0      	pop	{r4, r5, r7, pc}
 800a71a:	bf00      	nop
 800a71c:	080109d8 	.word	0x080109d8
 800a720:	080110e0 	.word	0x080110e0
 800a724:	08010a2c 	.word	0x08010a2c

0800a728 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b088      	sub	sp, #32
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	4611      	mov	r1, r2
 800a734:	461a      	mov	r2, r3
 800a736:	460b      	mov	r3, r1
 800a738:	71fb      	strb	r3, [r7, #7]
 800a73a:	4613      	mov	r3, r2
 800a73c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <tcp_output_fill_options+0x2e>
 800a748:	4b13      	ldr	r3, [pc, #76]	; (800a798 <tcp_output_fill_options+0x70>)
 800a74a:	f240 7256 	movw	r2, #1878	; 0x756
 800a74e:	4913      	ldr	r1, [pc, #76]	; (800a79c <tcp_output_fill_options+0x74>)
 800a750:	4813      	ldr	r0, [pc, #76]	; (800a7a0 <tcp_output_fill_options+0x78>)
 800a752:	f003 fbb3 	bl	800debc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	3314      	adds	r3, #20
 800a760:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	f103 0214 	add.w	r2, r3, #20
 800a768:	8bfb      	ldrh	r3, [r7, #30]
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4619      	mov	r1, r3
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	f003 0304 	and.w	r3, r3, #4
 800a776:	440b      	add	r3, r1
 800a778:	4413      	add	r3, r2
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d006      	beq.n	800a78e <tcp_output_fill_options+0x66>
 800a780:	4b05      	ldr	r3, [pc, #20]	; (800a798 <tcp_output_fill_options+0x70>)
 800a782:	f240 7275 	movw	r2, #1909	; 0x775
 800a786:	4907      	ldr	r1, [pc, #28]	; (800a7a4 <tcp_output_fill_options+0x7c>)
 800a788:	4805      	ldr	r0, [pc, #20]	; (800a7a0 <tcp_output_fill_options+0x78>)
 800a78a:	f003 fb97 	bl	800debc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a78e:	bf00      	nop
 800a790:	3720      	adds	r7, #32
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	080109d8 	.word	0x080109d8
 800a79c:	08011108 	.word	0x08011108
 800a7a0:	08010a2c 	.word	0x08010a2c
 800a7a4:	08011000 	.word	0x08011000

0800a7a8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	; 0x28
 800a7ac:	af04      	add	r7, sp, #16
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <tcp_output_control_segment+0x22>
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	; (800a830 <tcp_output_control_segment+0x88>)
 800a7be:	f240 7287 	movw	r2, #1927	; 0x787
 800a7c2:	491c      	ldr	r1, [pc, #112]	; (800a834 <tcp_output_control_segment+0x8c>)
 800a7c4:	481c      	ldr	r0, [pc, #112]	; (800a838 <tcp_output_control_segment+0x90>)
 800a7c6:	f003 fb79 	bl	800debc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f7fe ff40 	bl	8009654 <tcp_route>
 800a7d4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a7dc:	23fc      	movs	r3, #252	; 0xfc
 800a7de:	75fb      	strb	r3, [r7, #23]
 800a7e0:	e01c      	b.n	800a81c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d006      	beq.n	800a7f6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	7adb      	ldrb	r3, [r3, #11]
 800a7ec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	7a9b      	ldrb	r3, [r3, #10]
 800a7f2:	757b      	strb	r3, [r7, #21]
 800a7f4:	e003      	b.n	800a7fe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a7f6:	23ff      	movs	r3, #255	; 0xff
 800a7f8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a7fe:	7dba      	ldrb	r2, [r7, #22]
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	9302      	str	r3, [sp, #8]
 800a804:	2306      	movs	r3, #6
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	7d7b      	ldrb	r3, [r7, #21]
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	4613      	mov	r3, r2
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	68b8      	ldr	r0, [r7, #8]
 800a814:	f002 fac0 	bl	800cd98 <ip4_output_if>
 800a818:	4603      	mov	r3, r0
 800a81a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a81c:	68b8      	ldr	r0, [r7, #8]
 800a81e:	f7fa fd43 	bl	80052a8 <pbuf_free>
  return err;
 800a822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	080109d8 	.word	0x080109d8
 800a834:	08011130 	.word	0x08011130
 800a838:	08010a2c 	.word	0x08010a2c

0800a83c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a83c:	b590      	push	{r4, r7, lr}
 800a83e:	b08b      	sub	sp, #44	; 0x2c
 800a840:	af04      	add	r7, sp, #16
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <tcp_rst+0x22>
 800a850:	4b1f      	ldr	r3, [pc, #124]	; (800a8d0 <tcp_rst+0x94>)
 800a852:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a856:	491f      	ldr	r1, [pc, #124]	; (800a8d4 <tcp_rst+0x98>)
 800a858:	481f      	ldr	r0, [pc, #124]	; (800a8d8 <tcp_rst+0x9c>)
 800a85a:	f003 fb2f 	bl	800debc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	2b00      	cmp	r3, #0
 800a862:	d106      	bne.n	800a872 <tcp_rst+0x36>
 800a864:	4b1a      	ldr	r3, [pc, #104]	; (800a8d0 <tcp_rst+0x94>)
 800a866:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a86a:	491c      	ldr	r1, [pc, #112]	; (800a8dc <tcp_rst+0xa0>)
 800a86c:	481a      	ldr	r0, [pc, #104]	; (800a8d8 <tcp_rst+0x9c>)
 800a86e:	f003 fb25 	bl	800debc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a872:	2300      	movs	r3, #0
 800a874:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a876:	f246 0308 	movw	r3, #24584	; 0x6008
 800a87a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	b29c      	uxth	r4, r3
 800a880:	68b8      	ldr	r0, [r7, #8]
 800a882:	f7f9 fa72 	bl	8003d6a <lwip_htonl>
 800a886:	4602      	mov	r2, r0
 800a888:	8abb      	ldrh	r3, [r7, #20]
 800a88a:	9303      	str	r3, [sp, #12]
 800a88c:	2314      	movs	r3, #20
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4613      	mov	r3, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	4621      	mov	r1, r4
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff fe92 	bl	800a5c8 <tcp_output_alloc_header_common>
 800a8a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00c      	beq.n	800a8c6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a8ac:	7dfb      	ldrb	r3, [r7, #23]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	6939      	ldr	r1, [r7, #16]
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff ff38 	bl	800a728 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	6939      	ldr	r1, [r7, #16]
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff ff72 	bl	800a7a8 <tcp_output_control_segment>
 800a8c4:	e000      	b.n	800a8c8 <tcp_rst+0x8c>
    return;
 800a8c6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd90      	pop	{r4, r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	080109d8 	.word	0x080109d8
 800a8d4:	0801115c 	.word	0x0801115c
 800a8d8:	08010a2c 	.word	0x08010a2c
 800a8dc:	08011178 	.word	0x08011178

0800a8e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a8e0:	b590      	push	{r4, r7, lr}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <tcp_send_empty_ack+0x24>
 800a8f6:	4b28      	ldr	r3, [pc, #160]	; (800a998 <tcp_send_empty_ack+0xb8>)
 800a8f8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a8fc:	4927      	ldr	r1, [pc, #156]	; (800a99c <tcp_send_empty_ack+0xbc>)
 800a8fe:	4828      	ldr	r0, [pc, #160]	; (800a9a0 <tcp_send_empty_ack+0xc0>)
 800a900:	f003 fadc 	bl	800debc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a904:	7dfb      	ldrb	r3, [r7, #23]
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	f003 0304 	and.w	r3, r3, #4
 800a90e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a910:	7d7b      	ldrb	r3, [r7, #21]
 800a912:	b29c      	uxth	r4, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a918:	4618      	mov	r0, r3
 800a91a:	f7f9 fa26 	bl	8003d6a <lwip_htonl>
 800a91e:	4603      	mov	r3, r0
 800a920:	2200      	movs	r2, #0
 800a922:	4621      	mov	r1, r4
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7ff fec1 	bl	800a6ac <tcp_output_alloc_header>
 800a92a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d109      	bne.n	800a946 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	8b5b      	ldrh	r3, [r3, #26]
 800a936:	f043 0303 	orr.w	r3, r3, #3
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a940:	f06f 0301 	mvn.w	r3, #1
 800a944:	e023      	b.n	800a98e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a946:	7dbb      	ldrb	r3, [r7, #22]
 800a948:	7dfa      	ldrb	r2, [r7, #23]
 800a94a:	6939      	ldr	r1, [r7, #16]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff feeb 	bl	800a728 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3304      	adds	r3, #4
 800a958:	6939      	ldr	r1, [r7, #16]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7ff ff24 	bl	800a7a8 <tcp_output_control_segment>
 800a960:	4603      	mov	r3, r0
 800a962:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d007      	beq.n	800a97c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	8b5b      	ldrh	r3, [r3, #26]
 800a970:	f043 0303 	orr.w	r3, r3, #3
 800a974:	b29a      	uxth	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	835a      	strh	r2, [r3, #26]
 800a97a:	e006      	b.n	800a98a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	8b5b      	ldrh	r3, [r3, #26]
 800a980:	f023 0303 	bic.w	r3, r3, #3
 800a984:	b29a      	uxth	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	bd90      	pop	{r4, r7, pc}
 800a996:	bf00      	nop
 800a998:	080109d8 	.word	0x080109d8
 800a99c:	08011194 	.word	0x08011194
 800a9a0:	08010a2c 	.word	0x08010a2c

0800a9a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a9a4:	b590      	push	{r4, r7, lr}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <tcp_keepalive+0x20>
 800a9b6:	4b18      	ldr	r3, [pc, #96]	; (800aa18 <tcp_keepalive+0x74>)
 800a9b8:	f640 0224 	movw	r2, #2084	; 0x824
 800a9bc:	4917      	ldr	r1, [pc, #92]	; (800aa1c <tcp_keepalive+0x78>)
 800a9be:	4818      	ldr	r0, [pc, #96]	; (800aa20 <tcp_keepalive+0x7c>)
 800a9c0:	f003 fa7c 	bl	800debc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	b29c      	uxth	r4, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7f9 f9cb 	bl	8003d6a <lwip_htonl>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	4621      	mov	r1, r4
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff fe66 	bl	800a6ac <tcp_output_alloc_header>
 800a9e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d102      	bne.n	800a9ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9ec:	e010      	b.n	800aa10 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	6939      	ldr	r1, [r7, #16]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff fe97 	bl	800a728 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	6939      	ldr	r1, [r7, #16]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff fed0 	bl	800a7a8 <tcp_output_control_segment>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aa0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	371c      	adds	r7, #28
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd90      	pop	{r4, r7, pc}
 800aa18:	080109d8 	.word	0x080109d8
 800aa1c:	080111b4 	.word	0x080111b4
 800aa20:	08010a2c 	.word	0x08010a2c

0800aa24 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800aa24:	b590      	push	{r4, r7, lr}
 800aa26:	b08b      	sub	sp, #44	; 0x2c
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d106      	bne.n	800aa46 <tcp_zero_window_probe+0x22>
 800aa38:	4b4c      	ldr	r3, [pc, #304]	; (800ab6c <tcp_zero_window_probe+0x148>)
 800aa3a:	f640 024f 	movw	r2, #2127	; 0x84f
 800aa3e:	494c      	ldr	r1, [pc, #304]	; (800ab70 <tcp_zero_window_probe+0x14c>)
 800aa40:	484c      	ldr	r0, [pc, #304]	; (800ab74 <tcp_zero_window_probe+0x150>)
 800aa42:	f003 fa3b 	bl	800debc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa4a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	e086      	b.n	800ab64 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aa5c:	2bff      	cmp	r3, #255	; 0xff
 800aa5e:	d007      	beq.n	800aa70 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aa66:	3301      	adds	r3, #1
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	899b      	ldrh	r3, [r3, #12]
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7f9 f961 	bl	8003d40 <lwip_htons>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d005      	beq.n	800aa96 <tcp_zero_window_probe+0x72>
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	891b      	ldrh	r3, [r3, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <tcp_zero_window_probe+0x72>
 800aa92:	2301      	movs	r3, #1
 800aa94:	e000      	b.n	800aa98 <tcp_zero_window_probe+0x74>
 800aa96:	2300      	movs	r3, #0
 800aa98:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800aa9a:	7ffb      	ldrb	r3, [r7, #31]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bf0c      	ite	eq
 800aaa0:	2301      	moveq	r3, #1
 800aaa2:	2300      	movne	r3, #0
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800aaa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaac:	b299      	uxth	r1, r3
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	8bba      	ldrh	r2, [r7, #28]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff fdf8 	bl	800a6ac <tcp_output_alloc_header>
 800aabc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d102      	bne.n	800aaca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aac8:	e04c      	b.n	800ab64 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800aad0:	7ffb      	ldrb	r3, [r7, #31]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d011      	beq.n	800aafa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	899b      	ldrh	r3, [r3, #12]
 800aada:	b29b      	uxth	r3, r3
 800aadc:	b21b      	sxth	r3, r3
 800aade:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aae2:	b21c      	sxth	r4, r3
 800aae4:	2011      	movs	r0, #17
 800aae6:	f7f9 f92b 	bl	8003d40 <lwip_htons>
 800aaea:	4603      	mov	r3, r0
 800aaec:	b21b      	sxth	r3, r3
 800aaee:	4323      	orrs	r3, r4
 800aaf0:	b21b      	sxth	r3, r3
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	819a      	strh	r2, [r3, #12]
 800aaf8:	e010      	b.n	800ab1c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	3314      	adds	r3, #20
 800ab00:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ab02:	6a3b      	ldr	r3, [r7, #32]
 800ab04:	6858      	ldr	r0, [r3, #4]
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	891a      	ldrh	r2, [r3, #8]
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	891b      	ldrh	r3, [r3, #8]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	2201      	movs	r2, #1
 800ab16:	6939      	ldr	r1, [r7, #16]
 800ab18:	f7fa fdc0 	bl	800569c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7f9 f921 	bl	8003d6a <lwip_htonl>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	da02      	bge.n	800ab40 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ab40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab44:	2200      	movs	r2, #0
 800ab46:	69b9      	ldr	r1, [r7, #24]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fded 	bl	800a728 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3304      	adds	r3, #4
 800ab54:	69b9      	ldr	r1, [r7, #24]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7ff fe26 	bl	800a7a8 <tcp_output_control_segment>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ab60:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	372c      	adds	r7, #44	; 0x2c
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd90      	pop	{r4, r7, pc}
 800ab6c:	080109d8 	.word	0x080109d8
 800ab70:	080111d0 	.word	0x080111d0
 800ab74:	08010a2c 	.word	0x08010a2c

0800ab78 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ab80:	f7fa ff0c 	bl	800599c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ab84:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <tcpip_tcp_timer+0x38>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d103      	bne.n	800ab94 <tcpip_tcp_timer+0x1c>
 800ab8c:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <tcpip_tcp_timer+0x3c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d005      	beq.n	800aba0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ab94:	2200      	movs	r2, #0
 800ab96:	4908      	ldr	r1, [pc, #32]	; (800abb8 <tcpip_tcp_timer+0x40>)
 800ab98:	20fa      	movs	r0, #250	; 0xfa
 800ab9a:	f000 f8f3 	bl	800ad84 <sys_timeout>
 800ab9e:	e003      	b.n	800aba8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <tcpip_tcp_timer+0x44>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	601a      	str	r2, [r3, #0]
  }
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20006800 	.word	0x20006800
 800abb4:	20006804 	.word	0x20006804
 800abb8:	0800ab79 	.word	0x0800ab79
 800abbc:	2000684c 	.word	0x2000684c

0800abc0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800abc4:	4b0a      	ldr	r3, [pc, #40]	; (800abf0 <tcp_timer_needed+0x30>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10f      	bne.n	800abec <tcp_timer_needed+0x2c>
 800abcc:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <tcp_timer_needed+0x34>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d103      	bne.n	800abdc <tcp_timer_needed+0x1c>
 800abd4:	4b08      	ldr	r3, [pc, #32]	; (800abf8 <tcp_timer_needed+0x38>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d007      	beq.n	800abec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800abdc:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <tcp_timer_needed+0x30>)
 800abde:	2201      	movs	r2, #1
 800abe0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800abe2:	2200      	movs	r2, #0
 800abe4:	4905      	ldr	r1, [pc, #20]	; (800abfc <tcp_timer_needed+0x3c>)
 800abe6:	20fa      	movs	r0, #250	; 0xfa
 800abe8:	f000 f8cc 	bl	800ad84 <sys_timeout>
  }
}
 800abec:	bf00      	nop
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	2000684c 	.word	0x2000684c
 800abf4:	20006800 	.word	0x20006800
 800abf8:	20006804 	.word	0x20006804
 800abfc:	0800ab79 	.word	0x0800ab79

0800ac00 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ac0c:	2006      	movs	r0, #6
 800ac0e:	f7f9 fced 	bl	80045ec <memp_malloc>
 800ac12:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d109      	bne.n	800ac2e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d151      	bne.n	800acc4 <sys_timeout_abs+0xc4>
 800ac20:	4b2a      	ldr	r3, [pc, #168]	; (800accc <sys_timeout_abs+0xcc>)
 800ac22:	22be      	movs	r2, #190	; 0xbe
 800ac24:	492a      	ldr	r1, [pc, #168]	; (800acd0 <sys_timeout_abs+0xd0>)
 800ac26:	482b      	ldr	r0, [pc, #172]	; (800acd4 <sys_timeout_abs+0xd4>)
 800ac28:	f003 f948 	bl	800debc <iprintf>
    return;
 800ac2c:	e04a      	b.n	800acc4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2200      	movs	r2, #0
 800ac32:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ac46:	4b24      	ldr	r3, [pc, #144]	; (800acd8 <sys_timeout_abs+0xd8>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d103      	bne.n	800ac56 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ac4e:	4a22      	ldr	r2, [pc, #136]	; (800acd8 <sys_timeout_abs+0xd8>)
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6013      	str	r3, [r2, #0]
    return;
 800ac54:	e037      	b.n	800acc6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	4b1f      	ldr	r3, [pc, #124]	; (800acd8 <sys_timeout_abs+0xd8>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	0fdb      	lsrs	r3, r3, #31
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ac6e:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <sys_timeout_abs+0xd8>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ac76:	4a18      	ldr	r2, [pc, #96]	; (800acd8 <sys_timeout_abs+0xd8>)
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	e023      	b.n	800acc6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ac7e:	4b16      	ldr	r3, [pc, #88]	; (800acd8 <sys_timeout_abs+0xd8>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	617b      	str	r3, [r7, #20]
 800ac84:	e01a      	b.n	800acbc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00b      	beq.n	800aca6 <sys_timeout_abs+0xa6>
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	0fdb      	lsrs	r3, r3, #31
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	601a      	str	r2, [r3, #0]
        break;
 800acb4:	e007      	b.n	800acc6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e1      	bne.n	800ac86 <sys_timeout_abs+0x86>
 800acc2:	e000      	b.n	800acc6 <sys_timeout_abs+0xc6>
    return;
 800acc4:	bf00      	nop
      }
    }
  }
}
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	080111f4 	.word	0x080111f4
 800acd0:	08011228 	.word	0x08011228
 800acd4:	08011268 	.word	0x08011268
 800acd8:	20006844 	.word	0x20006844

0800acdc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	4798      	blx	r3

  now = sys_now();
 800acee:	f7f8 ff99 	bl	8003c24 <sys_now>
 800acf2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	4b0f      	ldr	r3, [pc, #60]	; (800ad38 <lwip_cyclic_timer+0x5c>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4413      	add	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	0fdb      	lsrs	r3, r3, #31
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d009      	beq.n	800ad26 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	4413      	add	r3, r2
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	4907      	ldr	r1, [pc, #28]	; (800ad3c <lwip_cyclic_timer+0x60>)
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff ff6e 	bl	800ac00 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ad24:	e004      	b.n	800ad30 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4904      	ldr	r1, [pc, #16]	; (800ad3c <lwip_cyclic_timer+0x60>)
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f7ff ff68 	bl	800ac00 <sys_timeout_abs>
}
 800ad30:	bf00      	nop
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20006848 	.word	0x20006848
 800ad3c:	0800acdd 	.word	0x0800acdd

0800ad40 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ad46:	2301      	movs	r3, #1
 800ad48:	607b      	str	r3, [r7, #4]
 800ad4a:	e00e      	b.n	800ad6a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ad4c:	4a0b      	ldr	r2, [pc, #44]	; (800ad7c <sys_timeouts_init+0x3c>)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	4a08      	ldr	r2, [pc, #32]	; (800ad7c <sys_timeouts_init+0x3c>)
 800ad5a:	4413      	add	r3, r2
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4908      	ldr	r1, [pc, #32]	; (800ad80 <sys_timeouts_init+0x40>)
 800ad60:	f000 f810 	bl	800ad84 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3301      	adds	r3, #1
 800ad68:	607b      	str	r3, [r7, #4]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d9ed      	bls.n	800ad4c <sys_timeouts_init+0xc>
  }
}
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	08011dcc 	.word	0x08011dcc
 800ad80:	0800acdd 	.word	0x0800acdd

0800ad84 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad96:	d306      	bcc.n	800ada6 <sys_timeout+0x22>
 800ad98:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <sys_timeout+0x40>)
 800ad9a:	f240 1229 	movw	r2, #297	; 0x129
 800ad9e:	490a      	ldr	r1, [pc, #40]	; (800adc8 <sys_timeout+0x44>)
 800ada0:	480a      	ldr	r0, [pc, #40]	; (800adcc <sys_timeout+0x48>)
 800ada2:	f003 f88b 	bl	800debc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ada6:	f7f8 ff3d 	bl	8003c24 <sys_now>
 800adaa:	4602      	mov	r2, r0
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4413      	add	r3, r2
 800adb0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	68b9      	ldr	r1, [r7, #8]
 800adb6:	6978      	ldr	r0, [r7, #20]
 800adb8:	f7ff ff22 	bl	800ac00 <sys_timeout_abs>
#endif
}
 800adbc:	bf00      	nop
 800adbe:	3718      	adds	r7, #24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	080111f4 	.word	0x080111f4
 800adc8:	08011290 	.word	0x08011290
 800adcc:	08011268 	.word	0x08011268

0800add0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800add6:	f7f8 ff25 	bl	8003c24 <sys_now>
 800adda:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800addc:	4b1a      	ldr	r3, [pc, #104]	; (800ae48 <sys_check_timeouts+0x78>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <sys_check_timeouts+0x1a>
 800ade6:	f7f9 ff25 	bl	8004c34 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800adea:	4b18      	ldr	r3, [pc, #96]	; (800ae4c <sys_check_timeouts+0x7c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d022      	beq.n	800ae3c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	0fdb      	lsrs	r3, r3, #31
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d11a      	bne.n	800ae40 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a0f      	ldr	r2, [pc, #60]	; (800ae4c <sys_check_timeouts+0x7c>)
 800ae10:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4a0b      	ldr	r2, [pc, #44]	; (800ae50 <sys_check_timeouts+0x80>)
 800ae24:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ae26:	68b9      	ldr	r1, [r7, #8]
 800ae28:	2006      	movs	r0, #6
 800ae2a:	f7f9 fc2b 	bl	8004684 <memp_free>
    if (handler != NULL) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d0d3      	beq.n	800addc <sys_check_timeouts+0xc>
      handler(arg);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6838      	ldr	r0, [r7, #0]
 800ae38:	4798      	blx	r3
  do {
 800ae3a:	e7cf      	b.n	800addc <sys_check_timeouts+0xc>
      return;
 800ae3c:	bf00      	nop
 800ae3e:	e000      	b.n	800ae42 <sys_check_timeouts+0x72>
      return;
 800ae40:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	200067f1 	.word	0x200067f1
 800ae4c:	20006844 	.word	0x20006844
 800ae50:	20006848 	.word	0x20006848

0800ae54 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ae58:	f003 f848 	bl	800deec <rand>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	4b01      	ldr	r3, [pc, #4]	; (800ae74 <udp_init+0x20>)
 800ae6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ae70:	bf00      	nop
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20000010 	.word	0x20000010

0800ae78 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ae82:	4b17      	ldr	r3, [pc, #92]	; (800aee0 <udp_new_port+0x68>)
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	b291      	uxth	r1, r2
 800ae8a:	4a15      	ldr	r2, [pc, #84]	; (800aee0 <udp_new_port+0x68>)
 800ae8c:	8011      	strh	r1, [r2, #0]
 800ae8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d103      	bne.n	800ae9e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ae96:	4b12      	ldr	r3, [pc, #72]	; (800aee0 <udp_new_port+0x68>)
 800ae98:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ae9c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae9e:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <udp_new_port+0x6c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	e011      	b.n	800aeca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	8a5a      	ldrh	r2, [r3, #18]
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <udp_new_port+0x68>)
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d108      	bne.n	800aec4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800aeb2:	88fb      	ldrh	r3, [r7, #6]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	80fb      	strh	r3, [r7, #6]
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aebe:	d3e0      	bcc.n	800ae82 <udp_new_port+0xa>
        return 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	e007      	b.n	800aed4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	603b      	str	r3, [r7, #0]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1ea      	bne.n	800aea6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800aed0:	4b03      	ldr	r3, [pc, #12]	; (800aee0 <udp_new_port+0x68>)
 800aed2:	881b      	ldrh	r3, [r3, #0]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20000010 	.word	0x20000010
 800aee4:	20006850 	.word	0x20006850

0800aee8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	4613      	mov	r3, r2
 800aef4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d105      	bne.n	800af08 <udp_input_local_match+0x20>
 800aefc:	4b27      	ldr	r3, [pc, #156]	; (800af9c <udp_input_local_match+0xb4>)
 800aefe:	2287      	movs	r2, #135	; 0x87
 800af00:	4927      	ldr	r1, [pc, #156]	; (800afa0 <udp_input_local_match+0xb8>)
 800af02:	4828      	ldr	r0, [pc, #160]	; (800afa4 <udp_input_local_match+0xbc>)
 800af04:	f002 ffda 	bl	800debc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d105      	bne.n	800af1a <udp_input_local_match+0x32>
 800af0e:	4b23      	ldr	r3, [pc, #140]	; (800af9c <udp_input_local_match+0xb4>)
 800af10:	2288      	movs	r2, #136	; 0x88
 800af12:	4925      	ldr	r1, [pc, #148]	; (800afa8 <udp_input_local_match+0xc0>)
 800af14:	4823      	ldr	r0, [pc, #140]	; (800afa4 <udp_input_local_match+0xbc>)
 800af16:	f002 ffd1 	bl	800debc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	7a1b      	ldrb	r3, [r3, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	7a1a      	ldrb	r2, [r3, #8]
 800af26:	4b21      	ldr	r3, [pc, #132]	; (800afac <udp_input_local_match+0xc4>)
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af2e:	3301      	adds	r3, #1
 800af30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800af32:	429a      	cmp	r2, r3
 800af34:	d001      	beq.n	800af3a <udp_input_local_match+0x52>
    return 0;
 800af36:	2300      	movs	r3, #0
 800af38:	e02b      	b.n	800af92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d018      	beq.n	800af72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d013      	beq.n	800af6e <udp_input_local_match+0x86>
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00f      	beq.n	800af6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800af4e:	4b17      	ldr	r3, [pc, #92]	; (800afac <udp_input_local_match+0xc4>)
 800af50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800af52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af56:	d00a      	beq.n	800af6e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	4b13      	ldr	r3, [pc, #76]	; (800afac <udp_input_local_match+0xc4>)
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	405a      	eors	r2, r3
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	3308      	adds	r3, #8
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d110      	bne.n	800af90 <udp_input_local_match+0xa8>
          return 1;
 800af6e:	2301      	movs	r3, #1
 800af70:	e00f      	b.n	800af92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d009      	beq.n	800af8c <udp_input_local_match+0xa4>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d005      	beq.n	800af8c <udp_input_local_match+0xa4>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	4b09      	ldr	r3, [pc, #36]	; (800afac <udp_input_local_match+0xc4>)
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d101      	bne.n	800af90 <udp_input_local_match+0xa8>
        return 1;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	080112dc 	.word	0x080112dc
 800afa0:	0801130c 	.word	0x0801130c
 800afa4:	08011330 	.word	0x08011330
 800afa8:	08011358 	.word	0x08011358
 800afac:	20003284 	.word	0x20003284

0800afb0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800afb0:	b590      	push	{r4, r7, lr}
 800afb2:	b08d      	sub	sp, #52	; 0x34
 800afb4:	af02      	add	r7, sp, #8
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d105      	bne.n	800afd0 <udp_input+0x20>
 800afc4:	4b7c      	ldr	r3, [pc, #496]	; (800b1b8 <udp_input+0x208>)
 800afc6:	22cf      	movs	r2, #207	; 0xcf
 800afc8:	497c      	ldr	r1, [pc, #496]	; (800b1bc <udp_input+0x20c>)
 800afca:	487d      	ldr	r0, [pc, #500]	; (800b1c0 <udp_input+0x210>)
 800afcc:	f002 ff76 	bl	800debc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d105      	bne.n	800afe2 <udp_input+0x32>
 800afd6:	4b78      	ldr	r3, [pc, #480]	; (800b1b8 <udp_input+0x208>)
 800afd8:	22d0      	movs	r2, #208	; 0xd0
 800afda:	497a      	ldr	r1, [pc, #488]	; (800b1c4 <udp_input+0x214>)
 800afdc:	4878      	ldr	r0, [pc, #480]	; (800b1c0 <udp_input+0x210>)
 800afde:	f002 ff6d 	bl	800debc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	895b      	ldrh	r3, [r3, #10]
 800afe6:	2b07      	cmp	r3, #7
 800afe8:	d803      	bhi.n	800aff2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7fa f95c 	bl	80052a8 <pbuf_free>
    goto end;
 800aff0:	e0de      	b.n	800b1b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aff8:	4b73      	ldr	r3, [pc, #460]	; (800b1c8 <udp_input+0x218>)
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	4a72      	ldr	r2, [pc, #456]	; (800b1c8 <udp_input+0x218>)
 800affe:	6812      	ldr	r2, [r2, #0]
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f001 ffa0 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800b008:	4603      	mov	r3, r0
 800b00a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	4618      	mov	r0, r3
 800b014:	f7f8 fe94 	bl	8003d40 <lwip_htons>
 800b018:	4603      	mov	r3, r0
 800b01a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	885b      	ldrh	r3, [r3, #2]
 800b020:	b29b      	uxth	r3, r3
 800b022:	4618      	mov	r0, r3
 800b024:	f7f8 fe8c 	bl	8003d40 <lwip_htons>
 800b028:	4603      	mov	r3, r0
 800b02a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b030:	2300      	movs	r3, #0
 800b032:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b034:	2300      	movs	r3, #0
 800b036:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b038:	4b64      	ldr	r3, [pc, #400]	; (800b1cc <udp_input+0x21c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	627b      	str	r3, [r7, #36]	; 0x24
 800b03e:	e054      	b.n	800b0ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	8a5b      	ldrh	r3, [r3, #18]
 800b044:	89fa      	ldrh	r2, [r7, #14]
 800b046:	429a      	cmp	r2, r3
 800b048:	d14a      	bne.n	800b0e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b04a:	7cfb      	ldrb	r3, [r7, #19]
 800b04c:	461a      	mov	r2, r3
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b052:	f7ff ff49 	bl	800aee8 <udp_input_local_match>
 800b056:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d041      	beq.n	800b0e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	7c1b      	ldrb	r3, [r3, #16]
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b00      	cmp	r3, #0
 800b066:	d11d      	bne.n	800b0a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d102      	bne.n	800b074 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	61fb      	str	r3, [r7, #28]
 800b072:	e017      	b.n	800b0a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b074:	7cfb      	ldrb	r3, [r7, #19]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d014      	beq.n	800b0a4 <udp_input+0xf4>
 800b07a:	4b53      	ldr	r3, [pc, #332]	; (800b1c8 <udp_input+0x218>)
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b082:	d10f      	bne.n	800b0a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	3304      	adds	r3, #4
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d008      	beq.n	800b0a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	3304      	adds	r3, #4
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d101      	bne.n	800b0a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	8a9b      	ldrh	r3, [r3, #20]
 800b0a8:	8a3a      	ldrh	r2, [r7, #16]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d118      	bne.n	800b0e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d005      	beq.n	800b0c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	4b43      	ldr	r3, [pc, #268]	; (800b1c8 <udp_input+0x218>)
 800b0bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d10e      	bne.n	800b0e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d014      	beq.n	800b0f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b0d0:	4b3e      	ldr	r3, [pc, #248]	; (800b1cc <udp_input+0x21c>)
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b0d8:	4a3c      	ldr	r2, [pc, #240]	; (800b1cc <udp_input+0x21c>)
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b0de:	e008      	b.n	800b0f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1a7      	bne.n	800b040 <udp_input+0x90>
 800b0f0:	e000      	b.n	800b0f4 <udp_input+0x144>
        break;
 800b0f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <udp_input+0x14e>
    pcb = uncon_pcb;
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <udp_input+0x15a>
    for_us = 1;
 800b104:	2301      	movs	r3, #1
 800b106:	76fb      	strb	r3, [r7, #27]
 800b108:	e00a      	b.n	800b120 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	3304      	adds	r3, #4
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	4b2d      	ldr	r3, [pc, #180]	; (800b1c8 <udp_input+0x218>)
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	429a      	cmp	r2, r3
 800b116:	bf0c      	ite	eq
 800b118:	2301      	moveq	r3, #1
 800b11a:	2300      	movne	r3, #0
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b120:	7efb      	ldrb	r3, [r7, #27]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d041      	beq.n	800b1aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b126:	2108      	movs	r1, #8
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7fa f837 	bl	800519c <pbuf_remove_header>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00a      	beq.n	800b14a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b134:	4b20      	ldr	r3, [pc, #128]	; (800b1b8 <udp_input+0x208>)
 800b136:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b13a:	4925      	ldr	r1, [pc, #148]	; (800b1d0 <udp_input+0x220>)
 800b13c:	4820      	ldr	r0, [pc, #128]	; (800b1c0 <udp_input+0x210>)
 800b13e:	f002 febd 	bl	800debc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7fa f8b0 	bl	80052a8 <pbuf_free>
      goto end;
 800b148:	e032      	b.n	800b1b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d012      	beq.n	800b176 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00a      	beq.n	800b16e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	699c      	ldr	r4, [r3, #24]
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	69d8      	ldr	r0, [r3, #28]
 800b160:	8a3b      	ldrh	r3, [r7, #16]
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	4b1b      	ldr	r3, [pc, #108]	; (800b1d4 <udp_input+0x224>)
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b16a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b16c:	e021      	b.n	800b1b2 <udp_input+0x202>
        pbuf_free(p);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7fa f89a 	bl	80052a8 <pbuf_free>
        goto end;
 800b174:	e01c      	b.n	800b1b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b176:	7cfb      	ldrb	r3, [r7, #19]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d112      	bne.n	800b1a2 <udp_input+0x1f2>
 800b17c:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <udp_input+0x218>)
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b184:	2be0      	cmp	r3, #224	; 0xe0
 800b186:	d00c      	beq.n	800b1a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b188:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <udp_input+0x218>)
 800b18a:	899b      	ldrh	r3, [r3, #12]
 800b18c:	3308      	adds	r3, #8
 800b18e:	b29b      	uxth	r3, r3
 800b190:	b21b      	sxth	r3, r3
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7fa f874 	bl	8005282 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b19a:	2103      	movs	r1, #3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f001 fbb3 	bl	800c908 <icmp_dest_unreach>
      pbuf_free(p);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7fa f880 	bl	80052a8 <pbuf_free>
  return;
 800b1a8:	e003      	b.n	800b1b2 <udp_input+0x202>
    pbuf_free(p);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7fa f87c 	bl	80052a8 <pbuf_free>
  return;
 800b1b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b1b2:	372c      	adds	r7, #44	; 0x2c
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd90      	pop	{r4, r7, pc}
 800b1b8:	080112dc 	.word	0x080112dc
 800b1bc:	08011380 	.word	0x08011380
 800b1c0:	08011330 	.word	0x08011330
 800b1c4:	08011398 	.word	0x08011398
 800b1c8:	20003284 	.word	0x20003284
 800b1cc:	20006850 	.word	0x20006850
 800b1d0:	080113b4 	.word	0x080113b4
 800b1d4:	20003294 	.word	0x20003294

0800b1d8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d109      	bne.n	800b1fc <udp_send+0x24>
 800b1e8:	4b11      	ldr	r3, [pc, #68]	; (800b230 <udp_send+0x58>)
 800b1ea:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b1ee:	4911      	ldr	r1, [pc, #68]	; (800b234 <udp_send+0x5c>)
 800b1f0:	4811      	ldr	r0, [pc, #68]	; (800b238 <udp_send+0x60>)
 800b1f2:	f002 fe63 	bl	800debc <iprintf>
 800b1f6:	f06f 030f 	mvn.w	r3, #15
 800b1fa:	e015      	b.n	800b228 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <udp_send+0x3e>
 800b202:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <udp_send+0x58>)
 800b204:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b208:	490c      	ldr	r1, [pc, #48]	; (800b23c <udp_send+0x64>)
 800b20a:	480b      	ldr	r0, [pc, #44]	; (800b238 <udp_send+0x60>)
 800b20c:	f002 fe56 	bl	800debc <iprintf>
 800b210:	f06f 030f 	mvn.w	r3, #15
 800b214:	e008      	b.n	800b228 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	1d1a      	adds	r2, r3, #4
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	8a9b      	ldrh	r3, [r3, #20]
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f80d 	bl	800b240 <udp_sendto>
 800b226:	4603      	mov	r3, r0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	080112dc 	.word	0x080112dc
 800b234:	080113d0 	.word	0x080113d0
 800b238:	08011330 	.word	0x08011330
 800b23c:	080113e8 	.word	0x080113e8

0800b240 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b088      	sub	sp, #32
 800b244:	af02      	add	r7, sp, #8
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
 800b24c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d109      	bne.n	800b268 <udp_sendto+0x28>
 800b254:	4b23      	ldr	r3, [pc, #140]	; (800b2e4 <udp_sendto+0xa4>)
 800b256:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b25a:	4923      	ldr	r1, [pc, #140]	; (800b2e8 <udp_sendto+0xa8>)
 800b25c:	4823      	ldr	r0, [pc, #140]	; (800b2ec <udp_sendto+0xac>)
 800b25e:	f002 fe2d 	bl	800debc <iprintf>
 800b262:	f06f 030f 	mvn.w	r3, #15
 800b266:	e038      	b.n	800b2da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d109      	bne.n	800b282 <udp_sendto+0x42>
 800b26e:	4b1d      	ldr	r3, [pc, #116]	; (800b2e4 <udp_sendto+0xa4>)
 800b270:	f240 2219 	movw	r2, #537	; 0x219
 800b274:	491e      	ldr	r1, [pc, #120]	; (800b2f0 <udp_sendto+0xb0>)
 800b276:	481d      	ldr	r0, [pc, #116]	; (800b2ec <udp_sendto+0xac>)
 800b278:	f002 fe20 	bl	800debc <iprintf>
 800b27c:	f06f 030f 	mvn.w	r3, #15
 800b280:	e02b      	b.n	800b2da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d109      	bne.n	800b29c <udp_sendto+0x5c>
 800b288:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <udp_sendto+0xa4>)
 800b28a:	f240 221a 	movw	r2, #538	; 0x21a
 800b28e:	4919      	ldr	r1, [pc, #100]	; (800b2f4 <udp_sendto+0xb4>)
 800b290:	4816      	ldr	r0, [pc, #88]	; (800b2ec <udp_sendto+0xac>)
 800b292:	f002 fe13 	bl	800debc <iprintf>
 800b296:	f06f 030f 	mvn.w	r3, #15
 800b29a:	e01e      	b.n	800b2da <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	7a1b      	ldrb	r3, [r3, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d006      	beq.n	800b2b2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	7a1b      	ldrb	r3, [r3, #8]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7f9 fc9d 	bl	8004be8 <netif_get_by_index>
 800b2ae:	6178      	str	r0, [r7, #20]
 800b2b0:	e003      	b.n	800b2ba <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 fbb2 	bl	800ca1c <ip4_route>
 800b2b8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d102      	bne.n	800b2c6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b2c0:	f06f 0303 	mvn.w	r3, #3
 800b2c4:	e009      	b.n	800b2da <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b2c6:	887a      	ldrh	r2, [r7, #2]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 f810 	bl	800b2f8 <udp_sendto_if>
 800b2d8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	080112dc 	.word	0x080112dc
 800b2e8:	08011400 	.word	0x08011400
 800b2ec:	08011330 	.word	0x08011330
 800b2f0:	08011418 	.word	0x08011418
 800b2f4:	08011434 	.word	0x08011434

0800b2f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af02      	add	r7, sp, #8
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
 800b304:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d109      	bne.n	800b320 <udp_sendto_if+0x28>
 800b30c:	4b2e      	ldr	r3, [pc, #184]	; (800b3c8 <udp_sendto_if+0xd0>)
 800b30e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b312:	492e      	ldr	r1, [pc, #184]	; (800b3cc <udp_sendto_if+0xd4>)
 800b314:	482e      	ldr	r0, [pc, #184]	; (800b3d0 <udp_sendto_if+0xd8>)
 800b316:	f002 fdd1 	bl	800debc <iprintf>
 800b31a:	f06f 030f 	mvn.w	r3, #15
 800b31e:	e04f      	b.n	800b3c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d109      	bne.n	800b33a <udp_sendto_if+0x42>
 800b326:	4b28      	ldr	r3, [pc, #160]	; (800b3c8 <udp_sendto_if+0xd0>)
 800b328:	f240 2281 	movw	r2, #641	; 0x281
 800b32c:	4929      	ldr	r1, [pc, #164]	; (800b3d4 <udp_sendto_if+0xdc>)
 800b32e:	4828      	ldr	r0, [pc, #160]	; (800b3d0 <udp_sendto_if+0xd8>)
 800b330:	f002 fdc4 	bl	800debc <iprintf>
 800b334:	f06f 030f 	mvn.w	r3, #15
 800b338:	e042      	b.n	800b3c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d109      	bne.n	800b354 <udp_sendto_if+0x5c>
 800b340:	4b21      	ldr	r3, [pc, #132]	; (800b3c8 <udp_sendto_if+0xd0>)
 800b342:	f240 2282 	movw	r2, #642	; 0x282
 800b346:	4924      	ldr	r1, [pc, #144]	; (800b3d8 <udp_sendto_if+0xe0>)
 800b348:	4821      	ldr	r0, [pc, #132]	; (800b3d0 <udp_sendto_if+0xd8>)
 800b34a:	f002 fdb7 	bl	800debc <iprintf>
 800b34e:	f06f 030f 	mvn.w	r3, #15
 800b352:	e035      	b.n	800b3c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d109      	bne.n	800b36e <udp_sendto_if+0x76>
 800b35a:	4b1b      	ldr	r3, [pc, #108]	; (800b3c8 <udp_sendto_if+0xd0>)
 800b35c:	f240 2283 	movw	r2, #643	; 0x283
 800b360:	491e      	ldr	r1, [pc, #120]	; (800b3dc <udp_sendto_if+0xe4>)
 800b362:	481b      	ldr	r0, [pc, #108]	; (800b3d0 <udp_sendto_if+0xd8>)
 800b364:	f002 fdaa 	bl	800debc <iprintf>
 800b368:	f06f 030f 	mvn.w	r3, #15
 800b36c:	e028      	b.n	800b3c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d009      	beq.n	800b388 <udp_sendto_if+0x90>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d005      	beq.n	800b388 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b384:	2be0      	cmp	r3, #224	; 0xe0
 800b386:	d103      	bne.n	800b390 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	3304      	adds	r3, #4
 800b38c:	617b      	str	r3, [r7, #20]
 800b38e:	e00b      	b.n	800b3a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	3304      	adds	r3, #4
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d002      	beq.n	800b3a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b39e:	f06f 0303 	mvn.w	r3, #3
 800b3a2:	e00d      	b.n	800b3c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b3a8:	887a      	ldrh	r2, [r7, #2]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 f811 	bl	800b3e0 <udp_sendto_if_src>
 800b3be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	080112dc 	.word	0x080112dc
 800b3cc:	08011450 	.word	0x08011450
 800b3d0:	08011330 	.word	0x08011330
 800b3d4:	0801146c 	.word	0x0801146c
 800b3d8:	08011488 	.word	0x08011488
 800b3dc:	080114a8 	.word	0x080114a8

0800b3e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08c      	sub	sp, #48	; 0x30
 800b3e4:	af04      	add	r7, sp, #16
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
 800b3ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d109      	bne.n	800b408 <udp_sendto_if_src+0x28>
 800b3f4:	4b65      	ldr	r3, [pc, #404]	; (800b58c <udp_sendto_if_src+0x1ac>)
 800b3f6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b3fa:	4965      	ldr	r1, [pc, #404]	; (800b590 <udp_sendto_if_src+0x1b0>)
 800b3fc:	4865      	ldr	r0, [pc, #404]	; (800b594 <udp_sendto_if_src+0x1b4>)
 800b3fe:	f002 fd5d 	bl	800debc <iprintf>
 800b402:	f06f 030f 	mvn.w	r3, #15
 800b406:	e0bc      	b.n	800b582 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d109      	bne.n	800b422 <udp_sendto_if_src+0x42>
 800b40e:	4b5f      	ldr	r3, [pc, #380]	; (800b58c <udp_sendto_if_src+0x1ac>)
 800b410:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b414:	4960      	ldr	r1, [pc, #384]	; (800b598 <udp_sendto_if_src+0x1b8>)
 800b416:	485f      	ldr	r0, [pc, #380]	; (800b594 <udp_sendto_if_src+0x1b4>)
 800b418:	f002 fd50 	bl	800debc <iprintf>
 800b41c:	f06f 030f 	mvn.w	r3, #15
 800b420:	e0af      	b.n	800b582 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d109      	bne.n	800b43c <udp_sendto_if_src+0x5c>
 800b428:	4b58      	ldr	r3, [pc, #352]	; (800b58c <udp_sendto_if_src+0x1ac>)
 800b42a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b42e:	495b      	ldr	r1, [pc, #364]	; (800b59c <udp_sendto_if_src+0x1bc>)
 800b430:	4858      	ldr	r0, [pc, #352]	; (800b594 <udp_sendto_if_src+0x1b4>)
 800b432:	f002 fd43 	bl	800debc <iprintf>
 800b436:	f06f 030f 	mvn.w	r3, #15
 800b43a:	e0a2      	b.n	800b582 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d109      	bne.n	800b456 <udp_sendto_if_src+0x76>
 800b442:	4b52      	ldr	r3, [pc, #328]	; (800b58c <udp_sendto_if_src+0x1ac>)
 800b444:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b448:	4955      	ldr	r1, [pc, #340]	; (800b5a0 <udp_sendto_if_src+0x1c0>)
 800b44a:	4852      	ldr	r0, [pc, #328]	; (800b594 <udp_sendto_if_src+0x1b4>)
 800b44c:	f002 fd36 	bl	800debc <iprintf>
 800b450:	f06f 030f 	mvn.w	r3, #15
 800b454:	e095      	b.n	800b582 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d109      	bne.n	800b470 <udp_sendto_if_src+0x90>
 800b45c:	4b4b      	ldr	r3, [pc, #300]	; (800b58c <udp_sendto_if_src+0x1ac>)
 800b45e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b462:	4950      	ldr	r1, [pc, #320]	; (800b5a4 <udp_sendto_if_src+0x1c4>)
 800b464:	484b      	ldr	r0, [pc, #300]	; (800b594 <udp_sendto_if_src+0x1b4>)
 800b466:	f002 fd29 	bl	800debc <iprintf>
 800b46a:	f06f 030f 	mvn.w	r3, #15
 800b46e:	e088      	b.n	800b582 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8a5b      	ldrh	r3, [r3, #18]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10f      	bne.n	800b498 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b478:	68f9      	ldr	r1, [r7, #12]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	8a5b      	ldrh	r3, [r3, #18]
 800b47e:	461a      	mov	r2, r3
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 f893 	bl	800b5ac <udp_bind>
 800b486:	4603      	mov	r3, r0
 800b488:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b48a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b492:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b496:	e074      	b.n	800b582 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	891b      	ldrh	r3, [r3, #8]
 800b49c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d902      	bls.n	800b4aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4a8:	e06b      	b.n	800b582 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b4aa:	2108      	movs	r1, #8
 800b4ac:	68b8      	ldr	r0, [r7, #8]
 800b4ae:	f7f9 fe65 	bl	800517c <pbuf_add_header>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d015      	beq.n	800b4e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b4b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b4bc:	2108      	movs	r1, #8
 800b4be:	2022      	movs	r0, #34	; 0x22
 800b4c0:	f7f9 fc0e 	bl	8004ce0 <pbuf_alloc>
 800b4c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d102      	bne.n	800b4d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b4cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4d0:	e057      	b.n	800b582 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	891b      	ldrh	r3, [r3, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d006      	beq.n	800b4e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	69f8      	ldr	r0, [r7, #28]
 800b4de:	f7f9 fffb 	bl	80054d8 <pbuf_chain>
 800b4e2:	e001      	b.n	800b4e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	895b      	ldrh	r3, [r3, #10]
 800b4ec:	2b07      	cmp	r3, #7
 800b4ee:	d806      	bhi.n	800b4fe <udp_sendto_if_src+0x11e>
 800b4f0:	4b26      	ldr	r3, [pc, #152]	; (800b58c <udp_sendto_if_src+0x1ac>)
 800b4f2:	f240 320d 	movw	r2, #781	; 0x30d
 800b4f6:	492c      	ldr	r1, [pc, #176]	; (800b5a8 <udp_sendto_if_src+0x1c8>)
 800b4f8:	4826      	ldr	r0, [pc, #152]	; (800b594 <udp_sendto_if_src+0x1b4>)
 800b4fa:	f002 fcdf 	bl	800debc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	8a5b      	ldrh	r3, [r3, #18]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7f8 fc19 	bl	8003d40 <lwip_htons>
 800b50e:	4603      	mov	r3, r0
 800b510:	461a      	mov	r2, r3
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b516:	887b      	ldrh	r3, [r7, #2]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7f8 fc11 	bl	8003d40 <lwip_htons>
 800b51e:	4603      	mov	r3, r0
 800b520:	461a      	mov	r2, r3
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2200      	movs	r2, #0
 800b52a:	719a      	strb	r2, [r3, #6]
 800b52c:	2200      	movs	r2, #0
 800b52e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	891b      	ldrh	r3, [r3, #8]
 800b534:	4618      	mov	r0, r3
 800b536:	f7f8 fc03 	bl	8003d40 <lwip_htons>
 800b53a:	4603      	mov	r3, r0
 800b53c:	461a      	mov	r2, r3
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b542:	2311      	movs	r3, #17
 800b544:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	7adb      	ldrb	r3, [r3, #11]
 800b54a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	7a9b      	ldrb	r3, [r3, #10]
 800b550:	7cb9      	ldrb	r1, [r7, #18]
 800b552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b554:	9202      	str	r2, [sp, #8]
 800b556:	7cfa      	ldrb	r2, [r7, #19]
 800b558:	9201      	str	r2, [sp, #4]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	460b      	mov	r3, r1
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b562:	69f8      	ldr	r0, [r7, #28]
 800b564:	f001 fc42 	bl	800cdec <ip4_output_if_src>
 800b568:	4603      	mov	r3, r0
 800b56a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b56c:	69fa      	ldr	r2, [r7, #28]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	429a      	cmp	r2, r3
 800b572:	d004      	beq.n	800b57e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b574:	69f8      	ldr	r0, [r7, #28]
 800b576:	f7f9 fe97 	bl	80052a8 <pbuf_free>
    q = NULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b57e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3720      	adds	r7, #32
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	080112dc 	.word	0x080112dc
 800b590:	080114c8 	.word	0x080114c8
 800b594:	08011330 	.word	0x08011330
 800b598:	080114e8 	.word	0x080114e8
 800b59c:	08011508 	.word	0x08011508
 800b5a0:	0801152c 	.word	0x0801152c
 800b5a4:	08011550 	.word	0x08011550
 800b5a8:	08011574 	.word	0x08011574

0800b5ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b5c0:	4b39      	ldr	r3, [pc, #228]	; (800b6a8 <udp_bind+0xfc>)
 800b5c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d109      	bne.n	800b5de <udp_bind+0x32>
 800b5ca:	4b38      	ldr	r3, [pc, #224]	; (800b6ac <udp_bind+0x100>)
 800b5cc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b5d0:	4937      	ldr	r1, [pc, #220]	; (800b6b0 <udp_bind+0x104>)
 800b5d2:	4838      	ldr	r0, [pc, #224]	; (800b6b4 <udp_bind+0x108>)
 800b5d4:	f002 fc72 	bl	800debc <iprintf>
 800b5d8:	f06f 030f 	mvn.w	r3, #15
 800b5dc:	e060      	b.n	800b6a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b5e2:	4b35      	ldr	r3, [pc, #212]	; (800b6b8 <udp_bind+0x10c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	617b      	str	r3, [r7, #20]
 800b5e8:	e009      	b.n	800b5fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d102      	bne.n	800b5f8 <udp_bind+0x4c>
      rebind = 1;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	74fb      	strb	r3, [r7, #19]
      break;
 800b5f6:	e005      	b.n	800b604 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1f2      	bne.n	800b5ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b604:	88fb      	ldrh	r3, [r7, #6]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d109      	bne.n	800b61e <udp_bind+0x72>
    port = udp_new_port();
 800b60a:	f7ff fc35 	bl	800ae78 <udp_new_port>
 800b60e:	4603      	mov	r3, r0
 800b610:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b612:	88fb      	ldrh	r3, [r7, #6]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d12c      	bne.n	800b672 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b618:	f06f 0307 	mvn.w	r3, #7
 800b61c:	e040      	b.n	800b6a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b61e:	4b26      	ldr	r3, [pc, #152]	; (800b6b8 <udp_bind+0x10c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	e022      	b.n	800b66c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d01b      	beq.n	800b666 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	8a5b      	ldrh	r3, [r3, #18]
 800b632:	88fa      	ldrh	r2, [r7, #6]
 800b634:	429a      	cmp	r2, r3
 800b636:	d116      	bne.n	800b666 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b640:	429a      	cmp	r2, r3
 800b642:	d00d      	beq.n	800b660 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <udp_bind+0xb4>
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d006      	beq.n	800b660 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b652:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b654:	2b00      	cmp	r3, #0
 800b656:	d003      	beq.n	800b660 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d102      	bne.n	800b666 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b660:	f06f 0307 	mvn.w	r3, #7
 800b664:	e01c      	b.n	800b6a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1d9      	bne.n	800b626 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <udp_bind+0xd2>
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	e000      	b.n	800b680 <udp_bind+0xd4>
 800b67e:	2300      	movs	r3, #0
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	88fa      	ldrh	r2, [r7, #6]
 800b688:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b68a:	7cfb      	ldrb	r3, [r7, #19]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d106      	bne.n	800b69e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b690:	4b09      	ldr	r3, [pc, #36]	; (800b6b8 <udp_bind+0x10c>)
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b698:	4a07      	ldr	r2, [pc, #28]	; (800b6b8 <udp_bind+0x10c>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	08011de4 	.word	0x08011de4
 800b6ac:	080112dc 	.word	0x080112dc
 800b6b0:	080115a4 	.word	0x080115a4
 800b6b4:	08011330 	.word	0x08011330
 800b6b8:	20006850 	.word	0x20006850

0800b6bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d109      	bne.n	800b6e4 <udp_connect+0x28>
 800b6d0:	4b2c      	ldr	r3, [pc, #176]	; (800b784 <udp_connect+0xc8>)
 800b6d2:	f240 4235 	movw	r2, #1077	; 0x435
 800b6d6:	492c      	ldr	r1, [pc, #176]	; (800b788 <udp_connect+0xcc>)
 800b6d8:	482c      	ldr	r0, [pc, #176]	; (800b78c <udp_connect+0xd0>)
 800b6da:	f002 fbef 	bl	800debc <iprintf>
 800b6de:	f06f 030f 	mvn.w	r3, #15
 800b6e2:	e04b      	b.n	800b77c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d109      	bne.n	800b6fe <udp_connect+0x42>
 800b6ea:	4b26      	ldr	r3, [pc, #152]	; (800b784 <udp_connect+0xc8>)
 800b6ec:	f240 4236 	movw	r2, #1078	; 0x436
 800b6f0:	4927      	ldr	r1, [pc, #156]	; (800b790 <udp_connect+0xd4>)
 800b6f2:	4826      	ldr	r0, [pc, #152]	; (800b78c <udp_connect+0xd0>)
 800b6f4:	f002 fbe2 	bl	800debc <iprintf>
 800b6f8:	f06f 030f 	mvn.w	r3, #15
 800b6fc:	e03e      	b.n	800b77c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	8a5b      	ldrh	r3, [r3, #18]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10f      	bne.n	800b726 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b706:	68f9      	ldr	r1, [r7, #12]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	8a5b      	ldrh	r3, [r3, #18]
 800b70c:	461a      	mov	r2, r3
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff ff4c 	bl	800b5ac <udp_bind>
 800b714:	4603      	mov	r3, r0
 800b716:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b718:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <udp_connect+0x6a>
      return err;
 800b720:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b724:	e02a      	b.n	800b77c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <udp_connect+0x76>
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	e000      	b.n	800b734 <udp_connect+0x78>
 800b732:	2300      	movs	r3, #0
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	88fa      	ldrh	r2, [r7, #6]
 800b73c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	7c1b      	ldrb	r3, [r3, #16]
 800b742:	f043 0304 	orr.w	r3, r3, #4
 800b746:	b2da      	uxtb	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b74c:	4b11      	ldr	r3, [pc, #68]	; (800b794 <udp_connect+0xd8>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	617b      	str	r3, [r7, #20]
 800b752:	e008      	b.n	800b766 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d101      	bne.n	800b760 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	e00d      	b.n	800b77c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	617b      	str	r3, [r7, #20]
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1f3      	bne.n	800b754 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b76c:	4b09      	ldr	r3, [pc, #36]	; (800b794 <udp_connect+0xd8>)
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b774:	4a07      	ldr	r2, [pc, #28]	; (800b794 <udp_connect+0xd8>)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	080112dc 	.word	0x080112dc
 800b788:	080115bc 	.word	0x080115bc
 800b78c:	08011330 	.word	0x08011330
 800b790:	080115d8 	.word	0x080115d8
 800b794:	20006850 	.word	0x20006850

0800b798 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d107      	bne.n	800b7ba <udp_recv+0x22>
 800b7aa:	4b08      	ldr	r3, [pc, #32]	; (800b7cc <udp_recv+0x34>)
 800b7ac:	f240 428a 	movw	r2, #1162	; 0x48a
 800b7b0:	4907      	ldr	r1, [pc, #28]	; (800b7d0 <udp_recv+0x38>)
 800b7b2:	4808      	ldr	r0, [pc, #32]	; (800b7d4 <udp_recv+0x3c>)
 800b7b4:	f002 fb82 	bl	800debc <iprintf>
 800b7b8:	e005      	b.n	800b7c6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	61da      	str	r2, [r3, #28]
}
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	080112dc 	.word	0x080112dc
 800b7d0:	08011610 	.word	0x08011610
 800b7d4:	08011330 	.word	0x08011330

0800b7d8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b7de:	2000      	movs	r0, #0
 800b7e0:	f7f8 ff04 	bl	80045ec <memp_malloc>
 800b7e4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d007      	beq.n	800b7fc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b7ec:	2220      	movs	r2, #32
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f002 fb5b 	bl	800deac <memset>
    pcb->ttl = UDP_TTL;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	22ff      	movs	r2, #255	; 0xff
 800b7fa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b7fc:	687b      	ldr	r3, [r7, #4]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01e      	beq.n	800b856 <udp_netif_ip_addr_changed+0x4e>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01a      	beq.n	800b856 <udp_netif_ip_addr_changed+0x4e>
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d017      	beq.n	800b856 <udp_netif_ip_addr_changed+0x4e>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d013      	beq.n	800b856 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b82e:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <udp_netif_ip_addr_changed+0x5c>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	e00c      	b.n	800b850 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d103      	bne.n	800b84a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1ef      	bne.n	800b836 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b856:	bf00      	nop
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20006850 	.word	0x20006850

0800b868 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b870:	4915      	ldr	r1, [pc, #84]	; (800b8c8 <etharp_free_entry+0x60>)
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	4613      	mov	r3, r2
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	4413      	add	r3, r2
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	440b      	add	r3, r1
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d013      	beq.n	800b8ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b884:	4910      	ldr	r1, [pc, #64]	; (800b8c8 <etharp_free_entry+0x60>)
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	4613      	mov	r3, r2
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	4413      	add	r3, r2
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	440b      	add	r3, r1
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4618      	mov	r0, r3
 800b896:	f7f9 fd07 	bl	80052a8 <pbuf_free>
    arp_table[i].q = NULL;
 800b89a:	490b      	ldr	r1, [pc, #44]	; (800b8c8 <etharp_free_entry+0x60>)
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	4413      	add	r3, r2
 800b8a4:	00db      	lsls	r3, r3, #3
 800b8a6:	440b      	add	r3, r1
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b8ac:	4906      	ldr	r1, [pc, #24]	; (800b8c8 <etharp_free_entry+0x60>)
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	4413      	add	r3, r2
 800b8b6:	00db      	lsls	r3, r3, #3
 800b8b8:	440b      	add	r3, r1
 800b8ba:	3314      	adds	r3, #20
 800b8bc:	2200      	movs	r2, #0
 800b8be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20006854 	.word	0x20006854

0800b8cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	607b      	str	r3, [r7, #4]
 800b8d6:	e096      	b.n	800ba06 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b8d8:	494f      	ldr	r1, [pc, #316]	; (800ba18 <etharp_tmr+0x14c>)
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	005b      	lsls	r3, r3, #1
 800b8e0:	4413      	add	r3, r2
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	440b      	add	r3, r1
 800b8e6:	3314      	adds	r3, #20
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b8ec:	78fb      	ldrb	r3, [r7, #3]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 8086 	beq.w	800ba00 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b8f4:	4948      	ldr	r1, [pc, #288]	; (800ba18 <etharp_tmr+0x14c>)
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	4413      	add	r3, r2
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	440b      	add	r3, r1
 800b902:	3312      	adds	r3, #18
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	b298      	uxth	r0, r3
 800b90a:	4943      	ldr	r1, [pc, #268]	; (800ba18 <etharp_tmr+0x14c>)
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	4613      	mov	r3, r2
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	4413      	add	r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	440b      	add	r3, r1
 800b918:	3312      	adds	r3, #18
 800b91a:	4602      	mov	r2, r0
 800b91c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b91e:	493e      	ldr	r1, [pc, #248]	; (800ba18 <etharp_tmr+0x14c>)
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	4613      	mov	r3, r2
 800b924:	005b      	lsls	r3, r3, #1
 800b926:	4413      	add	r3, r2
 800b928:	00db      	lsls	r3, r3, #3
 800b92a:	440b      	add	r3, r1
 800b92c:	3312      	adds	r3, #18
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b934:	d215      	bcs.n	800b962 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b936:	4938      	ldr	r1, [pc, #224]	; (800ba18 <etharp_tmr+0x14c>)
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	4613      	mov	r3, r2
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	4413      	add	r3, r2
 800b940:	00db      	lsls	r3, r3, #3
 800b942:	440b      	add	r3, r1
 800b944:	3314      	adds	r3, #20
 800b946:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d10e      	bne.n	800b96a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b94c:	4932      	ldr	r1, [pc, #200]	; (800ba18 <etharp_tmr+0x14c>)
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	4613      	mov	r3, r2
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	4413      	add	r3, r2
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	440b      	add	r3, r1
 800b95a:	3312      	adds	r3, #18
 800b95c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b95e:	2b04      	cmp	r3, #4
 800b960:	d903      	bls.n	800b96a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7ff ff80 	bl	800b868 <etharp_free_entry>
 800b968:	e04a      	b.n	800ba00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b96a:	492b      	ldr	r1, [pc, #172]	; (800ba18 <etharp_tmr+0x14c>)
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	4613      	mov	r3, r2
 800b970:	005b      	lsls	r3, r3, #1
 800b972:	4413      	add	r3, r2
 800b974:	00db      	lsls	r3, r3, #3
 800b976:	440b      	add	r3, r1
 800b978:	3314      	adds	r3, #20
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d10a      	bne.n	800b996 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b980:	4925      	ldr	r1, [pc, #148]	; (800ba18 <etharp_tmr+0x14c>)
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	4613      	mov	r3, r2
 800b986:	005b      	lsls	r3, r3, #1
 800b988:	4413      	add	r3, r2
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	440b      	add	r3, r1
 800b98e:	3314      	adds	r3, #20
 800b990:	2204      	movs	r2, #4
 800b992:	701a      	strb	r2, [r3, #0]
 800b994:	e034      	b.n	800ba00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b996:	4920      	ldr	r1, [pc, #128]	; (800ba18 <etharp_tmr+0x14c>)
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	4613      	mov	r3, r2
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	4413      	add	r3, r2
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	440b      	add	r3, r1
 800b9a4:	3314      	adds	r3, #20
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2b04      	cmp	r3, #4
 800b9aa:	d10a      	bne.n	800b9c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b9ac:	491a      	ldr	r1, [pc, #104]	; (800ba18 <etharp_tmr+0x14c>)
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	4413      	add	r3, r2
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3314      	adds	r3, #20
 800b9bc:	2202      	movs	r2, #2
 800b9be:	701a      	strb	r2, [r3, #0]
 800b9c0:	e01e      	b.n	800ba00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b9c2:	4915      	ldr	r1, [pc, #84]	; (800ba18 <etharp_tmr+0x14c>)
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	4413      	add	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	440b      	add	r3, r1
 800b9d0:	3314      	adds	r3, #20
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d113      	bne.n	800ba00 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b9d8:	490f      	ldr	r1, [pc, #60]	; (800ba18 <etharp_tmr+0x14c>)
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	4413      	add	r3, r2
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	440b      	add	r3, r1
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4413      	add	r3, r2
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	4a08      	ldr	r2, [pc, #32]	; (800ba18 <etharp_tmr+0x14c>)
 800b9f6:	4413      	add	r3, r2
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	f000 fe6e 	bl	800c6dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3301      	adds	r3, #1
 800ba04:	607b      	str	r3, [r7, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b09      	cmp	r3, #9
 800ba0a:	f77f af65 	ble.w	800b8d8 <etharp_tmr+0xc>
      }
    }
  }
}
 800ba0e:	bf00      	nop
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	20006854 	.word	0x20006854

0800ba1c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08a      	sub	sp, #40	; 0x28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	460b      	mov	r3, r1
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ba2a:	230a      	movs	r3, #10
 800ba2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ba2e:	230a      	movs	r3, #10
 800ba30:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ba32:	230a      	movs	r3, #10
 800ba34:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ba3a:	230a      	movs	r3, #10
 800ba3c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	83bb      	strh	r3, [r7, #28]
 800ba42:	2300      	movs	r3, #0
 800ba44:	837b      	strh	r3, [r7, #26]
 800ba46:	2300      	movs	r3, #0
 800ba48:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	843b      	strh	r3, [r7, #32]
 800ba4e:	e0ae      	b.n	800bbae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ba50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ba54:	49a6      	ldr	r1, [pc, #664]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800ba56:	4613      	mov	r3, r2
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	4413      	add	r3, r2
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	440b      	add	r3, r1
 800ba60:	3314      	adds	r3, #20
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ba66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ba6a:	2b0a      	cmp	r3, #10
 800ba6c:	d105      	bne.n	800ba7a <etharp_find_entry+0x5e>
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ba74:	8c3b      	ldrh	r3, [r7, #32]
 800ba76:	847b      	strh	r3, [r7, #34]	; 0x22
 800ba78:	e095      	b.n	800bba6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f000 8092 	beq.w	800bba6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d009      	beq.n	800ba9c <etharp_find_entry+0x80>
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d806      	bhi.n	800ba9c <etharp_find_entry+0x80>
 800ba8e:	4b99      	ldr	r3, [pc, #612]	; (800bcf4 <etharp_find_entry+0x2d8>)
 800ba90:	f240 1223 	movw	r2, #291	; 0x123
 800ba94:	4998      	ldr	r1, [pc, #608]	; (800bcf8 <etharp_find_entry+0x2dc>)
 800ba96:	4899      	ldr	r0, [pc, #612]	; (800bcfc <etharp_find_entry+0x2e0>)
 800ba98:	f002 fa10 	bl	800debc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d020      	beq.n	800bae4 <etharp_find_entry+0xc8>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6819      	ldr	r1, [r3, #0]
 800baa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800baaa:	4891      	ldr	r0, [pc, #580]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800baac:	4613      	mov	r3, r2
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	4413      	add	r3, r2
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	4403      	add	r3, r0
 800bab6:	3304      	adds	r3, #4
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4299      	cmp	r1, r3
 800babc:	d112      	bne.n	800bae4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00c      	beq.n	800bade <etharp_find_entry+0xc2>
 800bac4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bac8:	4989      	ldr	r1, [pc, #548]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800baca:	4613      	mov	r3, r2
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	4413      	add	r3, r2
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	440b      	add	r3, r1
 800bad4:	3308      	adds	r3, #8
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	429a      	cmp	r2, r3
 800badc:	d102      	bne.n	800bae4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bade:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bae2:	e100      	b.n	800bce6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d140      	bne.n	800bb6c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800baea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800baee:	4980      	ldr	r1, [pc, #512]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800baf0:	4613      	mov	r3, r2
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	4413      	add	r3, r2
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	440b      	add	r3, r1
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01a      	beq.n	800bb36 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bb00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb04:	497a      	ldr	r1, [pc, #488]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bb06:	4613      	mov	r3, r2
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	4413      	add	r3, r2
 800bb0c:	00db      	lsls	r3, r3, #3
 800bb0e:	440b      	add	r3, r1
 800bb10:	3312      	adds	r3, #18
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	8bba      	ldrh	r2, [r7, #28]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d845      	bhi.n	800bba6 <etharp_find_entry+0x18a>
            old_queue = i;
 800bb1a:	8c3b      	ldrh	r3, [r7, #32]
 800bb1c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bb1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb22:	4973      	ldr	r1, [pc, #460]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bb24:	4613      	mov	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	4413      	add	r3, r2
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	440b      	add	r3, r1
 800bb2e:	3312      	adds	r3, #18
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	83bb      	strh	r3, [r7, #28]
 800bb34:	e037      	b.n	800bba6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bb36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb3a:	496d      	ldr	r1, [pc, #436]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	4413      	add	r3, r2
 800bb42:	00db      	lsls	r3, r3, #3
 800bb44:	440b      	add	r3, r1
 800bb46:	3312      	adds	r3, #18
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	8b7a      	ldrh	r2, [r7, #26]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d82a      	bhi.n	800bba6 <etharp_find_entry+0x18a>
            old_pending = i;
 800bb50:	8c3b      	ldrh	r3, [r7, #32]
 800bb52:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800bb54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb58:	4965      	ldr	r1, [pc, #404]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	005b      	lsls	r3, r3, #1
 800bb5e:	4413      	add	r3, r2
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	440b      	add	r3, r1
 800bb64:	3312      	adds	r3, #18
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	837b      	strh	r3, [r7, #26]
 800bb6a:	e01c      	b.n	800bba6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d919      	bls.n	800bba6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bb72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb76:	495e      	ldr	r1, [pc, #376]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bb78:	4613      	mov	r3, r2
 800bb7a:	005b      	lsls	r3, r3, #1
 800bb7c:	4413      	add	r3, r2
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	440b      	add	r3, r1
 800bb82:	3312      	adds	r3, #18
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	8b3a      	ldrh	r2, [r7, #24]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d80c      	bhi.n	800bba6 <etharp_find_entry+0x18a>
            old_stable = i;
 800bb8c:	8c3b      	ldrh	r3, [r7, #32]
 800bb8e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bb90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bb94:	4956      	ldr	r1, [pc, #344]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bb96:	4613      	mov	r3, r2
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	4413      	add	r3, r2
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	440b      	add	r3, r1
 800bba0:	3312      	adds	r3, #18
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bba6:	8c3b      	ldrh	r3, [r7, #32]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	843b      	strh	r3, [r7, #32]
 800bbae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bbb2:	2b09      	cmp	r3, #9
 800bbb4:	f77f af4c 	ble.w	800ba50 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bbb8:	7afb      	ldrb	r3, [r7, #11]
 800bbba:	f003 0302 	and.w	r3, r3, #2
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d108      	bne.n	800bbd4 <etharp_find_entry+0x1b8>
 800bbc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bbc6:	2b0a      	cmp	r3, #10
 800bbc8:	d107      	bne.n	800bbda <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bbca:	7afb      	ldrb	r3, [r7, #11]
 800bbcc:	f003 0301 	and.w	r3, r3, #1
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bbd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbd8:	e085      	b.n	800bce6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bbda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bbde:	2b09      	cmp	r3, #9
 800bbe0:	dc02      	bgt.n	800bbe8 <etharp_find_entry+0x1cc>
    i = empty;
 800bbe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbe4:	843b      	strh	r3, [r7, #32]
 800bbe6:	e039      	b.n	800bc5c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bbe8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bbec:	2b09      	cmp	r3, #9
 800bbee:	dc14      	bgt.n	800bc1a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bbf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbf2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bbf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bbf8:	493d      	ldr	r1, [pc, #244]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	4413      	add	r3, r2
 800bc00:	00db      	lsls	r3, r3, #3
 800bc02:	440b      	add	r3, r1
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d018      	beq.n	800bc3c <etharp_find_entry+0x220>
 800bc0a:	4b3a      	ldr	r3, [pc, #232]	; (800bcf4 <etharp_find_entry+0x2d8>)
 800bc0c:	f240 126d 	movw	r2, #365	; 0x16d
 800bc10:	493b      	ldr	r1, [pc, #236]	; (800bd00 <etharp_find_entry+0x2e4>)
 800bc12:	483a      	ldr	r0, [pc, #232]	; (800bcfc <etharp_find_entry+0x2e0>)
 800bc14:	f002 f952 	bl	800debc <iprintf>
 800bc18:	e010      	b.n	800bc3c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bc1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bc1e:	2b09      	cmp	r3, #9
 800bc20:	dc02      	bgt.n	800bc28 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bc22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc24:	843b      	strh	r3, [r7, #32]
 800bc26:	e009      	b.n	800bc3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bc28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bc2c:	2b09      	cmp	r3, #9
 800bc2e:	dc02      	bgt.n	800bc36 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bc30:	8bfb      	ldrh	r3, [r7, #30]
 800bc32:	843b      	strh	r3, [r7, #32]
 800bc34:	e002      	b.n	800bc3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bc36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc3a:	e054      	b.n	800bce6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bc3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bc40:	2b09      	cmp	r3, #9
 800bc42:	dd06      	ble.n	800bc52 <etharp_find_entry+0x236>
 800bc44:	4b2b      	ldr	r3, [pc, #172]	; (800bcf4 <etharp_find_entry+0x2d8>)
 800bc46:	f240 127f 	movw	r2, #383	; 0x17f
 800bc4a:	492e      	ldr	r1, [pc, #184]	; (800bd04 <etharp_find_entry+0x2e8>)
 800bc4c:	482b      	ldr	r0, [pc, #172]	; (800bcfc <etharp_find_entry+0x2e0>)
 800bc4e:	f002 f935 	bl	800debc <iprintf>
    etharp_free_entry(i);
 800bc52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7ff fe06 	bl	800b868 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bc5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bc60:	2b09      	cmp	r3, #9
 800bc62:	dd06      	ble.n	800bc72 <etharp_find_entry+0x256>
 800bc64:	4b23      	ldr	r3, [pc, #140]	; (800bcf4 <etharp_find_entry+0x2d8>)
 800bc66:	f240 1283 	movw	r2, #387	; 0x183
 800bc6a:	4926      	ldr	r1, [pc, #152]	; (800bd04 <etharp_find_entry+0x2e8>)
 800bc6c:	4823      	ldr	r0, [pc, #140]	; (800bcfc <etharp_find_entry+0x2e0>)
 800bc6e:	f002 f925 	bl	800debc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bc72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc76:	491e      	ldr	r1, [pc, #120]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bc78:	4613      	mov	r3, r2
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	4413      	add	r3, r2
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	440b      	add	r3, r1
 800bc82:	3314      	adds	r3, #20
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d006      	beq.n	800bc98 <etharp_find_entry+0x27c>
 800bc8a:	4b1a      	ldr	r3, [pc, #104]	; (800bcf4 <etharp_find_entry+0x2d8>)
 800bc8c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800bc90:	491d      	ldr	r1, [pc, #116]	; (800bd08 <etharp_find_entry+0x2ec>)
 800bc92:	481a      	ldr	r0, [pc, #104]	; (800bcfc <etharp_find_entry+0x2e0>)
 800bc94:	f002 f912 	bl	800debc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00b      	beq.n	800bcb6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bc9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6819      	ldr	r1, [r3, #0]
 800bca6:	4812      	ldr	r0, [pc, #72]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	4403      	add	r3, r0
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bcb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcba:	490d      	ldr	r1, [pc, #52]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	4413      	add	r3, r2
 800bcc2:	00db      	lsls	r3, r3, #3
 800bcc4:	440b      	add	r3, r1
 800bcc6:	3312      	adds	r3, #18
 800bcc8:	2200      	movs	r2, #0
 800bcca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bccc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcd0:	4907      	ldr	r1, [pc, #28]	; (800bcf0 <etharp_find_entry+0x2d4>)
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	4413      	add	r3, r2
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	440b      	add	r3, r1
 800bcdc:	3308      	adds	r3, #8
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bce2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3728      	adds	r7, #40	; 0x28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20006854 	.word	0x20006854
 800bcf4:	08011640 	.word	0x08011640
 800bcf8:	08011678 	.word	0x08011678
 800bcfc:	080116b8 	.word	0x080116b8
 800bd00:	080116e0 	.word	0x080116e0
 800bd04:	080116f8 	.word	0x080116f8
 800bd08:	0801170c 	.word	0x0801170c

0800bd0c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af02      	add	r7, sp, #8
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
 800bd18:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bd20:	2b06      	cmp	r3, #6
 800bd22:	d006      	beq.n	800bd32 <etharp_update_arp_entry+0x26>
 800bd24:	4b48      	ldr	r3, [pc, #288]	; (800be48 <etharp_update_arp_entry+0x13c>)
 800bd26:	f240 12a9 	movw	r2, #425	; 0x1a9
 800bd2a:	4948      	ldr	r1, [pc, #288]	; (800be4c <etharp_update_arp_entry+0x140>)
 800bd2c:	4848      	ldr	r0, [pc, #288]	; (800be50 <etharp_update_arp_entry+0x144>)
 800bd2e:	f002 f8c5 	bl	800debc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d012      	beq.n	800bd5e <etharp_update_arp_entry+0x52>
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00e      	beq.n	800bd5e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68f9      	ldr	r1, [r7, #12]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f001 f8fe 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800bd4c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d105      	bne.n	800bd5e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd5a:	2be0      	cmp	r3, #224	; 0xe0
 800bd5c:	d102      	bne.n	800bd64 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bd5e:	f06f 030f 	mvn.w	r3, #15
 800bd62:	e06c      	b.n	800be3e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bd64:	78fb      	ldrb	r3, [r7, #3]
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	68b8      	ldr	r0, [r7, #8]
 800bd6c:	f7ff fe56 	bl	800ba1c <etharp_find_entry>
 800bd70:	4603      	mov	r3, r0
 800bd72:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bd74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	da02      	bge.n	800bd82 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bd7c:	8afb      	ldrh	r3, [r7, #22]
 800bd7e:	b25b      	sxtb	r3, r3
 800bd80:	e05d      	b.n	800be3e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bd82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bd86:	4933      	ldr	r1, [pc, #204]	; (800be54 <etharp_update_arp_entry+0x148>)
 800bd88:	4613      	mov	r3, r2
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	4413      	add	r3, r2
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	440b      	add	r3, r1
 800bd92:	3314      	adds	r3, #20
 800bd94:	2202      	movs	r2, #2
 800bd96:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bd98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bd9c:	492d      	ldr	r1, [pc, #180]	; (800be54 <etharp_update_arp_entry+0x148>)
 800bd9e:	4613      	mov	r3, r2
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	4413      	add	r3, r2
 800bda4:	00db      	lsls	r3, r3, #3
 800bda6:	440b      	add	r3, r1
 800bda8:	3308      	adds	r3, #8
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bdae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4413      	add	r3, r2
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	3308      	adds	r3, #8
 800bdbc:	4a25      	ldr	r2, [pc, #148]	; (800be54 <etharp_update_arp_entry+0x148>)
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	2206      	movs	r2, #6
 800bdc4:	6879      	ldr	r1, [r7, #4]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f002 f848 	bl	800de5c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bdcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bdd0:	4920      	ldr	r1, [pc, #128]	; (800be54 <etharp_update_arp_entry+0x148>)
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	4413      	add	r3, r2
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	440b      	add	r3, r1
 800bddc:	3312      	adds	r3, #18
 800bdde:	2200      	movs	r2, #0
 800bde0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bde2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bde6:	491b      	ldr	r1, [pc, #108]	; (800be54 <etharp_update_arp_entry+0x148>)
 800bde8:	4613      	mov	r3, r2
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	4413      	add	r3, r2
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	440b      	add	r3, r1
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d021      	beq.n	800be3c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bdf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bdfc:	4915      	ldr	r1, [pc, #84]	; (800be54 <etharp_update_arp_entry+0x148>)
 800bdfe:	4613      	mov	r3, r2
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	4413      	add	r3, r2
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	440b      	add	r3, r1
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800be0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be10:	4910      	ldr	r1, [pc, #64]	; (800be54 <etharp_update_arp_entry+0x148>)
 800be12:	4613      	mov	r3, r2
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	4413      	add	r3, r2
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	440b      	add	r3, r1
 800be1c:	2200      	movs	r2, #0
 800be1e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800be26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6939      	ldr	r1, [r7, #16]
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f001 ff97 	bl	800dd64 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800be36:	6938      	ldr	r0, [r7, #16]
 800be38:	f7f9 fa36 	bl	80052a8 <pbuf_free>
  }
  return ERR_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	08011640 	.word	0x08011640
 800be4c:	08011738 	.word	0x08011738
 800be50:	080116b8 	.word	0x080116b8
 800be54:	20006854 	.word	0x20006854

0800be58 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be60:	2300      	movs	r3, #0
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	e01e      	b.n	800bea4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800be66:	4913      	ldr	r1, [pc, #76]	; (800beb4 <etharp_cleanup_netif+0x5c>)
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4613      	mov	r3, r2
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	4413      	add	r3, r2
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	440b      	add	r3, r1
 800be74:	3314      	adds	r3, #20
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800be7a:	7afb      	ldrb	r3, [r7, #11]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00e      	beq.n	800be9e <etharp_cleanup_netif+0x46>
 800be80:	490c      	ldr	r1, [pc, #48]	; (800beb4 <etharp_cleanup_netif+0x5c>)
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	4613      	mov	r3, r2
 800be86:	005b      	lsls	r3, r3, #1
 800be88:	4413      	add	r3, r2
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	440b      	add	r3, r1
 800be8e:	3308      	adds	r3, #8
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d102      	bne.n	800be9e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f7ff fce5 	bl	800b868 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3301      	adds	r3, #1
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b09      	cmp	r3, #9
 800bea8:	dddd      	ble.n	800be66 <etharp_cleanup_netif+0xe>
    }
  }
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	20006854 	.word	0x20006854

0800beb8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800beb8:	b5b0      	push	{r4, r5, r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af04      	add	r7, sp, #16
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d107      	bne.n	800bed8 <etharp_input+0x20>
 800bec8:	4b3d      	ldr	r3, [pc, #244]	; (800bfc0 <etharp_input+0x108>)
 800beca:	f240 228a 	movw	r2, #650	; 0x28a
 800bece:	493d      	ldr	r1, [pc, #244]	; (800bfc4 <etharp_input+0x10c>)
 800bed0:	483d      	ldr	r0, [pc, #244]	; (800bfc8 <etharp_input+0x110>)
 800bed2:	f001 fff3 	bl	800debc <iprintf>
 800bed6:	e06f      	b.n	800bfb8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bee8:	d10c      	bne.n	800bf04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800beee:	2b06      	cmp	r3, #6
 800bef0:	d108      	bne.n	800bf04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d104      	bne.n	800bf04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	885b      	ldrh	r3, [r3, #2]
 800befe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bf00:	2b08      	cmp	r3, #8
 800bf02:	d003      	beq.n	800bf0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7f9 f9cf 	bl	80052a8 <pbuf_free>
    return;
 800bf0a:	e055      	b.n	800bfb8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	330e      	adds	r3, #14
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	3318      	adds	r3, #24
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	3304      	adds	r3, #4
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <etharp_input+0x74>
    for_us = 0;
 800bf26:	2300      	movs	r3, #0
 800bf28:	75fb      	strb	r3, [r7, #23]
 800bf2a:	e009      	b.n	800bf40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	3304      	adds	r3, #4
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	bf0c      	ite	eq
 800bf38:	2301      	moveq	r3, #1
 800bf3a:	2300      	movne	r3, #0
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	f103 0208 	add.w	r2, r3, #8
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <etharp_input+0x98>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <etharp_input+0x9a>
 800bf50:	2302      	movs	r3, #2
 800bf52:	f107 010c 	add.w	r1, r7, #12
 800bf56:	6838      	ldr	r0, [r7, #0]
 800bf58:	f7ff fed8 	bl	800bd0c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	88db      	ldrh	r3, [r3, #6]
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf66:	d003      	beq.n	800bf70 <etharp_input+0xb8>
 800bf68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6c:	d01e      	beq.n	800bfac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800bf6e:	e020      	b.n	800bfb2 <etharp_input+0xfa>
      if (for_us) {
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d01c      	beq.n	800bfb0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800bf90:	2102      	movs	r1, #2
 800bf92:	9103      	str	r1, [sp, #12]
 800bf94:	f107 010c 	add.w	r1, r7, #12
 800bf98:	9102      	str	r1, [sp, #8]
 800bf9a:	9201      	str	r2, [sp, #4]
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	462b      	mov	r3, r5
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	6838      	ldr	r0, [r7, #0]
 800bfa6:	f000 faeb 	bl	800c580 <etharp_raw>
      break;
 800bfaa:	e001      	b.n	800bfb0 <etharp_input+0xf8>
      break;
 800bfac:	bf00      	nop
 800bfae:	e000      	b.n	800bfb2 <etharp_input+0xfa>
      break;
 800bfb0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7f9 f978 	bl	80052a8 <pbuf_free>
}
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bdb0      	pop	{r4, r5, r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	08011640 	.word	0x08011640
 800bfc4:	08011790 	.word	0x08011790
 800bfc8:	080116b8 	.word	0x080116b8

0800bfcc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af02      	add	r7, sp, #8
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bfda:	79fa      	ldrb	r2, [r7, #7]
 800bfdc:	4944      	ldr	r1, [pc, #272]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800bfde:	4613      	mov	r3, r2
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	4413      	add	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	440b      	add	r3, r1
 800bfe8:	3314      	adds	r3, #20
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d806      	bhi.n	800bffe <etharp_output_to_arp_index+0x32>
 800bff0:	4b40      	ldr	r3, [pc, #256]	; (800c0f4 <etharp_output_to_arp_index+0x128>)
 800bff2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bff6:	4940      	ldr	r1, [pc, #256]	; (800c0f8 <etharp_output_to_arp_index+0x12c>)
 800bff8:	4840      	ldr	r0, [pc, #256]	; (800c0fc <etharp_output_to_arp_index+0x130>)
 800bffa:	f001 ff5f 	bl	800debc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bffe:	79fa      	ldrb	r2, [r7, #7]
 800c000:	493b      	ldr	r1, [pc, #236]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c002:	4613      	mov	r3, r2
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	4413      	add	r3, r2
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	440b      	add	r3, r1
 800c00c:	3314      	adds	r3, #20
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b02      	cmp	r3, #2
 800c012:	d153      	bne.n	800c0bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c014:	79fa      	ldrb	r2, [r7, #7]
 800c016:	4936      	ldr	r1, [pc, #216]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c018:	4613      	mov	r3, r2
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	4413      	add	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	440b      	add	r3, r1
 800c022:	3312      	adds	r3, #18
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c02a:	d919      	bls.n	800c060 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c02c:	79fa      	ldrb	r2, [r7, #7]
 800c02e:	4613      	mov	r3, r2
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	4413      	add	r3, r2
 800c034:	00db      	lsls	r3, r3, #3
 800c036:	4a2e      	ldr	r2, [pc, #184]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c038:	4413      	add	r3, r2
 800c03a:	3304      	adds	r3, #4
 800c03c:	4619      	mov	r1, r3
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f000 fb4c 	bl	800c6dc <etharp_request>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d138      	bne.n	800c0bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c04a:	79fa      	ldrb	r2, [r7, #7]
 800c04c:	4928      	ldr	r1, [pc, #160]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c04e:	4613      	mov	r3, r2
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	4413      	add	r3, r2
 800c054:	00db      	lsls	r3, r3, #3
 800c056:	440b      	add	r3, r1
 800c058:	3314      	adds	r3, #20
 800c05a:	2203      	movs	r2, #3
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	e02d      	b.n	800c0bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c060:	79fa      	ldrb	r2, [r7, #7]
 800c062:	4923      	ldr	r1, [pc, #140]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	440b      	add	r3, r1
 800c06e:	3312      	adds	r3, #18
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c076:	d321      	bcc.n	800c0bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c078:	79fa      	ldrb	r2, [r7, #7]
 800c07a:	4613      	mov	r3, r2
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	4413      	add	r3, r2
 800c080:	00db      	lsls	r3, r3, #3
 800c082:	4a1b      	ldr	r2, [pc, #108]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c084:	4413      	add	r3, r2
 800c086:	1d19      	adds	r1, r3, #4
 800c088:	79fa      	ldrb	r2, [r7, #7]
 800c08a:	4613      	mov	r3, r2
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	4413      	add	r3, r2
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	3308      	adds	r3, #8
 800c094:	4a16      	ldr	r2, [pc, #88]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c096:	4413      	add	r3, r2
 800c098:	3304      	adds	r3, #4
 800c09a:	461a      	mov	r2, r3
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f000 fafb 	bl	800c698 <etharp_request_dst>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d109      	bne.n	800c0bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c0a8:	79fa      	ldrb	r2, [r7, #7]
 800c0aa:	4911      	ldr	r1, [pc, #68]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	440b      	add	r3, r1
 800c0b6:	3314      	adds	r3, #20
 800c0b8:	2203      	movs	r2, #3
 800c0ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c0c2:	79fa      	ldrb	r2, [r7, #7]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	4413      	add	r3, r2
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	4a08      	ldr	r2, [pc, #32]	; (800c0f0 <etharp_output_to_arp_index+0x124>)
 800c0d0:	4413      	add	r3, r2
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0d8:	9200      	str	r2, [sp, #0]
 800c0da:	460a      	mov	r2, r1
 800c0dc:	68b9      	ldr	r1, [r7, #8]
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f001 fe40 	bl	800dd64 <ethernet_output>
 800c0e4:	4603      	mov	r3, r0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20006854 	.word	0x20006854
 800c0f4:	08011640 	.word	0x08011640
 800c0f8:	080117b0 	.word	0x080117b0
 800c0fc:	080116b8 	.word	0x080116b8

0800c100 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	; 0x28
 800c104:	af02      	add	r7, sp, #8
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d106      	bne.n	800c124 <etharp_output+0x24>
 800c116:	4b73      	ldr	r3, [pc, #460]	; (800c2e4 <etharp_output+0x1e4>)
 800c118:	f240 321e 	movw	r2, #798	; 0x31e
 800c11c:	4972      	ldr	r1, [pc, #456]	; (800c2e8 <etharp_output+0x1e8>)
 800c11e:	4873      	ldr	r0, [pc, #460]	; (800c2ec <etharp_output+0x1ec>)
 800c120:	f001 fecc 	bl	800debc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <etharp_output+0x38>
 800c12a:	4b6e      	ldr	r3, [pc, #440]	; (800c2e4 <etharp_output+0x1e4>)
 800c12c:	f240 321f 	movw	r2, #799	; 0x31f
 800c130:	496f      	ldr	r1, [pc, #444]	; (800c2f0 <etharp_output+0x1f0>)
 800c132:	486e      	ldr	r0, [pc, #440]	; (800c2ec <etharp_output+0x1ec>)
 800c134:	f001 fec2 	bl	800debc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d106      	bne.n	800c14c <etharp_output+0x4c>
 800c13e:	4b69      	ldr	r3, [pc, #420]	; (800c2e4 <etharp_output+0x1e4>)
 800c140:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c144:	496b      	ldr	r1, [pc, #428]	; (800c2f4 <etharp_output+0x1f4>)
 800c146:	4869      	ldr	r0, [pc, #420]	; (800c2ec <etharp_output+0x1ec>)
 800c148:	f001 feb8 	bl	800debc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68f9      	ldr	r1, [r7, #12]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 fef8 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c15e:	4b66      	ldr	r3, [pc, #408]	; (800c2f8 <etharp_output+0x1f8>)
 800c160:	61fb      	str	r3, [r7, #28]
 800c162:	e0af      	b.n	800c2c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c16c:	2be0      	cmp	r3, #224	; 0xe0
 800c16e:	d118      	bne.n	800c1a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c170:	2301      	movs	r3, #1
 800c172:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c174:	2300      	movs	r3, #0
 800c176:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c178:	235e      	movs	r3, #94	; 0x5e
 800c17a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3301      	adds	r3, #1
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c186:	b2db      	uxtb	r3, r3
 800c188:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	3302      	adds	r3, #2
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3303      	adds	r3, #3
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c19a:	f107 0310 	add.w	r3, r7, #16
 800c19e:	61fb      	str	r3, [r7, #28]
 800c1a0:	e090      	b.n	800c2c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	405a      	eors	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d012      	beq.n	800c1e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c1c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d00b      	beq.n	800c1e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	330c      	adds	r3, #12
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	330c      	adds	r3, #12
 800c1d6:	61bb      	str	r3, [r7, #24]
 800c1d8:	e002      	b.n	800c1e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c1da:	f06f 0303 	mvn.w	r3, #3
 800c1de:	e07d      	b.n	800c2dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c1e0:	4b46      	ldr	r3, [pc, #280]	; (800c2fc <etharp_output+0x1fc>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4a46      	ldr	r2, [pc, #280]	; (800c300 <etharp_output+0x200>)
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	005b      	lsls	r3, r3, #1
 800c1ec:	440b      	add	r3, r1
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	4413      	add	r3, r2
 800c1f2:	3314      	adds	r3, #20
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d925      	bls.n	800c246 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c1fa:	4b40      	ldr	r3, [pc, #256]	; (800c2fc <etharp_output+0x1fc>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	4619      	mov	r1, r3
 800c200:	4a3f      	ldr	r2, [pc, #252]	; (800c300 <etharp_output+0x200>)
 800c202:	460b      	mov	r3, r1
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	440b      	add	r3, r1
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	4413      	add	r3, r2
 800c20c:	3308      	adds	r3, #8
 800c20e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	429a      	cmp	r2, r3
 800c214:	d117      	bne.n	800c246 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	4b38      	ldr	r3, [pc, #224]	; (800c2fc <etharp_output+0x1fc>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	4618      	mov	r0, r3
 800c220:	4937      	ldr	r1, [pc, #220]	; (800c300 <etharp_output+0x200>)
 800c222:	4603      	mov	r3, r0
 800c224:	005b      	lsls	r3, r3, #1
 800c226:	4403      	add	r3, r0
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	440b      	add	r3, r1
 800c22c:	3304      	adds	r3, #4
 800c22e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c230:	429a      	cmp	r2, r3
 800c232:	d108      	bne.n	800c246 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c234:	4b31      	ldr	r3, [pc, #196]	; (800c2fc <etharp_output+0x1fc>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	461a      	mov	r2, r3
 800c23a:	68b9      	ldr	r1, [r7, #8]
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7ff fec5 	bl	800bfcc <etharp_output_to_arp_index>
 800c242:	4603      	mov	r3, r0
 800c244:	e04a      	b.n	800c2dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c246:	2300      	movs	r3, #0
 800c248:	75fb      	strb	r3, [r7, #23]
 800c24a:	e031      	b.n	800c2b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c24c:	7dfa      	ldrb	r2, [r7, #23]
 800c24e:	492c      	ldr	r1, [pc, #176]	; (800c300 <etharp_output+0x200>)
 800c250:	4613      	mov	r3, r2
 800c252:	005b      	lsls	r3, r3, #1
 800c254:	4413      	add	r3, r2
 800c256:	00db      	lsls	r3, r3, #3
 800c258:	440b      	add	r3, r1
 800c25a:	3314      	adds	r3, #20
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d923      	bls.n	800c2aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c262:	7dfa      	ldrb	r2, [r7, #23]
 800c264:	4926      	ldr	r1, [pc, #152]	; (800c300 <etharp_output+0x200>)
 800c266:	4613      	mov	r3, r2
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	4413      	add	r3, r2
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	440b      	add	r3, r1
 800c270:	3308      	adds	r3, #8
 800c272:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	429a      	cmp	r2, r3
 800c278:	d117      	bne.n	800c2aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	6819      	ldr	r1, [r3, #0]
 800c27e:	7dfa      	ldrb	r2, [r7, #23]
 800c280:	481f      	ldr	r0, [pc, #124]	; (800c300 <etharp_output+0x200>)
 800c282:	4613      	mov	r3, r2
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	4413      	add	r3, r2
 800c288:	00db      	lsls	r3, r3, #3
 800c28a:	4403      	add	r3, r0
 800c28c:	3304      	adds	r3, #4
 800c28e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c290:	4299      	cmp	r1, r3
 800c292:	d10a      	bne.n	800c2aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c294:	4a19      	ldr	r2, [pc, #100]	; (800c2fc <etharp_output+0x1fc>)
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c29a:	7dfb      	ldrb	r3, [r7, #23]
 800c29c:	461a      	mov	r2, r3
 800c29e:	68b9      	ldr	r1, [r7, #8]
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f7ff fe93 	bl	800bfcc <etharp_output_to_arp_index>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	e018      	b.n	800c2dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	75fb      	strb	r3, [r7, #23]
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	2b09      	cmp	r3, #9
 800c2b4:	d9ca      	bls.n	800c24c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	69b9      	ldr	r1, [r7, #24]
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 f822 	bl	800c304 <etharp_query>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	e00b      	b.n	800c2dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c2ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f001 fd45 	bl	800dd64 <ethernet_output>
 800c2da:	4603      	mov	r3, r0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3720      	adds	r7, #32
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	08011640 	.word	0x08011640
 800c2e8:	08011790 	.word	0x08011790
 800c2ec:	080116b8 	.word	0x080116b8
 800c2f0:	080117e0 	.word	0x080117e0
 800c2f4:	08011780 	.word	0x08011780
 800c2f8:	08011de8 	.word	0x08011de8
 800c2fc:	20006944 	.word	0x20006944
 800c300:	20006854 	.word	0x20006854

0800c304 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08c      	sub	sp, #48	; 0x30
 800c308:	af02      	add	r7, sp, #8
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3326      	adds	r3, #38	; 0x26
 800c314:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c316:	23ff      	movs	r3, #255	; 0xff
 800c318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68f9      	ldr	r1, [r7, #12]
 800c326:	4618      	mov	r0, r3
 800c328:	f000 fe0e 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10c      	bne.n	800c34c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c33a:	2be0      	cmp	r3, #224	; 0xe0
 800c33c:	d006      	beq.n	800c34c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d003      	beq.n	800c34c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c34c:	f06f 030f 	mvn.w	r3, #15
 800c350:	e101      	b.n	800c556 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	2101      	movs	r1, #1
 800c356:	68b8      	ldr	r0, [r7, #8]
 800c358:	f7ff fb60 	bl	800ba1c <etharp_find_entry>
 800c35c:	4603      	mov	r3, r0
 800c35e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c364:	2b00      	cmp	r3, #0
 800c366:	da02      	bge.n	800c36e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c368:	8a7b      	ldrh	r3, [r7, #18]
 800c36a:	b25b      	sxtb	r3, r3
 800c36c:	e0f3      	b.n	800c556 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c36e:	8a7b      	ldrh	r3, [r7, #18]
 800c370:	2b7e      	cmp	r3, #126	; 0x7e
 800c372:	d906      	bls.n	800c382 <etharp_query+0x7e>
 800c374:	4b7a      	ldr	r3, [pc, #488]	; (800c560 <etharp_query+0x25c>)
 800c376:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c37a:	497a      	ldr	r1, [pc, #488]	; (800c564 <etharp_query+0x260>)
 800c37c:	487a      	ldr	r0, [pc, #488]	; (800c568 <etharp_query+0x264>)
 800c37e:	f001 fd9d 	bl	800debc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c382:	8a7b      	ldrh	r3, [r7, #18]
 800c384:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c386:	7c7a      	ldrb	r2, [r7, #17]
 800c388:	4978      	ldr	r1, [pc, #480]	; (800c56c <etharp_query+0x268>)
 800c38a:	4613      	mov	r3, r2
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	4413      	add	r3, r2
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	440b      	add	r3, r1
 800c394:	3314      	adds	r3, #20
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d115      	bne.n	800c3c8 <etharp_query+0xc4>
    is_new_entry = 1;
 800c39c:	2301      	movs	r3, #1
 800c39e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c3a0:	7c7a      	ldrb	r2, [r7, #17]
 800c3a2:	4972      	ldr	r1, [pc, #456]	; (800c56c <etharp_query+0x268>)
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	4413      	add	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	440b      	add	r3, r1
 800c3ae:	3314      	adds	r3, #20
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c3b4:	7c7a      	ldrb	r2, [r7, #17]
 800c3b6:	496d      	ldr	r1, [pc, #436]	; (800c56c <etharp_query+0x268>)
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	005b      	lsls	r3, r3, #1
 800c3bc:	4413      	add	r3, r2
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	440b      	add	r3, r1
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c3c8:	7c7a      	ldrb	r2, [r7, #17]
 800c3ca:	4968      	ldr	r1, [pc, #416]	; (800c56c <etharp_query+0x268>)
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	005b      	lsls	r3, r3, #1
 800c3d0:	4413      	add	r3, r2
 800c3d2:	00db      	lsls	r3, r3, #3
 800c3d4:	440b      	add	r3, r1
 800c3d6:	3314      	adds	r3, #20
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d011      	beq.n	800c402 <etharp_query+0xfe>
 800c3de:	7c7a      	ldrb	r2, [r7, #17]
 800c3e0:	4962      	ldr	r1, [pc, #392]	; (800c56c <etharp_query+0x268>)
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	4413      	add	r3, r2
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	440b      	add	r3, r1
 800c3ec:	3314      	adds	r3, #20
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d806      	bhi.n	800c402 <etharp_query+0xfe>
 800c3f4:	4b5a      	ldr	r3, [pc, #360]	; (800c560 <etharp_query+0x25c>)
 800c3f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c3fa:	495d      	ldr	r1, [pc, #372]	; (800c570 <etharp_query+0x26c>)
 800c3fc:	485a      	ldr	r0, [pc, #360]	; (800c568 <etharp_query+0x264>)
 800c3fe:	f001 fd5d 	bl	800debc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d102      	bne.n	800c40e <etharp_query+0x10a>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10c      	bne.n	800c428 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c40e:	68b9      	ldr	r1, [r7, #8]
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f000 f963 	bl	800c6dc <etharp_request>
 800c416:	4603      	mov	r3, r0
 800c418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d102      	bne.n	800c428 <etharp_query+0x124>
      return result;
 800c422:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c426:	e096      	b.n	800c556 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d106      	bne.n	800c43c <etharp_query+0x138>
 800c42e:	4b4c      	ldr	r3, [pc, #304]	; (800c560 <etharp_query+0x25c>)
 800c430:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c434:	494f      	ldr	r1, [pc, #316]	; (800c574 <etharp_query+0x270>)
 800c436:	484c      	ldr	r0, [pc, #304]	; (800c568 <etharp_query+0x264>)
 800c438:	f001 fd40 	bl	800debc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c43c:	7c7a      	ldrb	r2, [r7, #17]
 800c43e:	494b      	ldr	r1, [pc, #300]	; (800c56c <etharp_query+0x268>)
 800c440:	4613      	mov	r3, r2
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	4413      	add	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	440b      	add	r3, r1
 800c44a:	3314      	adds	r3, #20
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d917      	bls.n	800c482 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c452:	4a49      	ldr	r2, [pc, #292]	; (800c578 <etharp_query+0x274>)
 800c454:	7c7b      	ldrb	r3, [r7, #17]
 800c456:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c458:	7c7a      	ldrb	r2, [r7, #17]
 800c45a:	4613      	mov	r3, r2
 800c45c:	005b      	lsls	r3, r3, #1
 800c45e:	4413      	add	r3, r2
 800c460:	00db      	lsls	r3, r3, #3
 800c462:	3308      	adds	r3, #8
 800c464:	4a41      	ldr	r2, [pc, #260]	; (800c56c <etharp_query+0x268>)
 800c466:	4413      	add	r3, r2
 800c468:	3304      	adds	r3, #4
 800c46a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c46e:	9200      	str	r2, [sp, #0]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f001 fc75 	bl	800dd64 <ethernet_output>
 800c47a:	4603      	mov	r3, r0
 800c47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c480:	e067      	b.n	800c552 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c482:	7c7a      	ldrb	r2, [r7, #17]
 800c484:	4939      	ldr	r1, [pc, #228]	; (800c56c <etharp_query+0x268>)
 800c486:	4613      	mov	r3, r2
 800c488:	005b      	lsls	r3, r3, #1
 800c48a:	4413      	add	r3, r2
 800c48c:	00db      	lsls	r3, r3, #3
 800c48e:	440b      	add	r3, r1
 800c490:	3314      	adds	r3, #20
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d15c      	bne.n	800c552 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c498:	2300      	movs	r3, #0
 800c49a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c4a0:	e01c      	b.n	800c4dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	895a      	ldrh	r2, [r3, #10]
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	891b      	ldrh	r3, [r3, #8]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d10a      	bne.n	800c4c4 <etharp_query+0x1c0>
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d006      	beq.n	800c4c4 <etharp_query+0x1c0>
 800c4b6:	4b2a      	ldr	r3, [pc, #168]	; (800c560 <etharp_query+0x25c>)
 800c4b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c4bc:	492f      	ldr	r1, [pc, #188]	; (800c57c <etharp_query+0x278>)
 800c4be:	482a      	ldr	r0, [pc, #168]	; (800c568 <etharp_query+0x264>)
 800c4c0:	f001 fcfc 	bl	800debc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	7b1b      	ldrb	r3, [r3, #12]
 800c4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <etharp_query+0x1d2>
        copy_needed = 1;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	61bb      	str	r3, [r7, #24]
        break;
 800c4d4:	e005      	b.n	800c4e2 <etharp_query+0x1de>
      }
      p = p->next;
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1df      	bne.n	800c4a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d007      	beq.n	800c4f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c4ee:	200e      	movs	r0, #14
 800c4f0:	f7f9 f9d8 	bl	80058a4 <pbuf_clone>
 800c4f4:	61f8      	str	r0, [r7, #28]
 800c4f6:	e004      	b.n	800c502 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c4fc:	69f8      	ldr	r0, [r7, #28]
 800c4fe:	f7f8 ff73 	bl	80053e8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d021      	beq.n	800c54c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c508:	7c7a      	ldrb	r2, [r7, #17]
 800c50a:	4918      	ldr	r1, [pc, #96]	; (800c56c <etharp_query+0x268>)
 800c50c:	4613      	mov	r3, r2
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	4413      	add	r3, r2
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	440b      	add	r3, r1
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00a      	beq.n	800c532 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c51c:	7c7a      	ldrb	r2, [r7, #17]
 800c51e:	4913      	ldr	r1, [pc, #76]	; (800c56c <etharp_query+0x268>)
 800c520:	4613      	mov	r3, r2
 800c522:	005b      	lsls	r3, r3, #1
 800c524:	4413      	add	r3, r2
 800c526:	00db      	lsls	r3, r3, #3
 800c528:	440b      	add	r3, r1
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7f8 febb 	bl	80052a8 <pbuf_free>
      }
      arp_table[i].q = p;
 800c532:	7c7a      	ldrb	r2, [r7, #17]
 800c534:	490d      	ldr	r1, [pc, #52]	; (800c56c <etharp_query+0x268>)
 800c536:	4613      	mov	r3, r2
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	4413      	add	r3, r2
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	440b      	add	r3, r1
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c54a:	e002      	b.n	800c552 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c54c:	23ff      	movs	r3, #255	; 0xff
 800c54e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c552:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c556:	4618      	mov	r0, r3
 800c558:	3728      	adds	r7, #40	; 0x28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	08011640 	.word	0x08011640
 800c564:	080117ec 	.word	0x080117ec
 800c568:	080116b8 	.word	0x080116b8
 800c56c:	20006854 	.word	0x20006854
 800c570:	080117fc 	.word	0x080117fc
 800c574:	080117e0 	.word	0x080117e0
 800c578:	20006944 	.word	0x20006944
 800c57c:	08011824 	.word	0x08011824

0800c580 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	; 0x28
 800c584:	af02      	add	r7, sp, #8
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d106      	bne.n	800c5a6 <etharp_raw+0x26>
 800c598:	4b3a      	ldr	r3, [pc, #232]	; (800c684 <etharp_raw+0x104>)
 800c59a:	f240 4257 	movw	r2, #1111	; 0x457
 800c59e:	493a      	ldr	r1, [pc, #232]	; (800c688 <etharp_raw+0x108>)
 800c5a0:	483a      	ldr	r0, [pc, #232]	; (800c68c <etharp_raw+0x10c>)
 800c5a2:	f001 fc8b 	bl	800debc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c5a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c5aa:	211c      	movs	r1, #28
 800c5ac:	200e      	movs	r0, #14
 800c5ae:	f7f8 fb97 	bl	8004ce0 <pbuf_alloc>
 800c5b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5be:	e05d      	b.n	800c67c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	895b      	ldrh	r3, [r3, #10]
 800c5c4:	2b1b      	cmp	r3, #27
 800c5c6:	d806      	bhi.n	800c5d6 <etharp_raw+0x56>
 800c5c8:	4b2e      	ldr	r3, [pc, #184]	; (800c684 <etharp_raw+0x104>)
 800c5ca:	f240 4262 	movw	r2, #1122	; 0x462
 800c5ce:	4930      	ldr	r1, [pc, #192]	; (800c690 <etharp_raw+0x110>)
 800c5d0:	482e      	ldr	r0, [pc, #184]	; (800c68c <etharp_raw+0x10c>)
 800c5d2:	f001 fc73 	bl	800debc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c5dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7f7 fbae 	bl	8003d40 <lwip_htons>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c5f2:	2b06      	cmp	r3, #6
 800c5f4:	d006      	beq.n	800c604 <etharp_raw+0x84>
 800c5f6:	4b23      	ldr	r3, [pc, #140]	; (800c684 <etharp_raw+0x104>)
 800c5f8:	f240 4269 	movw	r2, #1129	; 0x469
 800c5fc:	4925      	ldr	r1, [pc, #148]	; (800c694 <etharp_raw+0x114>)
 800c5fe:	4823      	ldr	r0, [pc, #140]	; (800c68c <etharp_raw+0x10c>)
 800c600:	f001 fc5c 	bl	800debc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	3308      	adds	r3, #8
 800c608:	2206      	movs	r2, #6
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f001 fc25 	bl	800de5c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	3312      	adds	r3, #18
 800c616:	2206      	movs	r2, #6
 800c618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c61a:	4618      	mov	r0, r3
 800c61c:	f001 fc1e 	bl	800de5c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	330e      	adds	r3, #14
 800c624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c626:	6812      	ldr	r2, [r2, #0]
 800c628:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	3318      	adds	r3, #24
 800c62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c630:	6812      	ldr	r2, [r2, #0]
 800c632:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	2200      	movs	r2, #0
 800c638:	701a      	strb	r2, [r3, #0]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f042 0201 	orr.w	r2, r2, #1
 800c640:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2200      	movs	r2, #0
 800c646:	f042 0208 	orr.w	r2, r2, #8
 800c64a:	709a      	strb	r2, [r3, #2]
 800c64c:	2200      	movs	r2, #0
 800c64e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2206      	movs	r2, #6
 800c654:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	2204      	movs	r2, #4
 800c65a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c65c:	f640 0306 	movw	r3, #2054	; 0x806
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	69b9      	ldr	r1, [r7, #24]
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f001 fb7b 	bl	800dd64 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c66e:	69b8      	ldr	r0, [r7, #24]
 800c670:	f7f8 fe1a 	bl	80052a8 <pbuf_free>
  p = NULL;
 800c674:	2300      	movs	r3, #0
 800c676:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c678:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3720      	adds	r7, #32
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	08011640 	.word	0x08011640
 800c688:	08011790 	.word	0x08011790
 800c68c:	080116b8 	.word	0x080116b8
 800c690:	08011840 	.word	0x08011840
 800c694:	08011874 	.word	0x08011874

0800c698 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b088      	sub	sp, #32
 800c69c:	af04      	add	r7, sp, #16
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	9203      	str	r2, [sp, #12]
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	9202      	str	r2, [sp, #8]
 800c6bc:	4a06      	ldr	r2, [pc, #24]	; (800c6d8 <etharp_request_dst+0x40>)
 800c6be:	9201      	str	r2, [sp, #4]
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7ff ff5a 	bl	800c580 <etharp_raw>
 800c6cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	08011df0 	.word	0x08011df0

0800c6dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c6e6:	4a05      	ldr	r2, [pc, #20]	; (800c6fc <etharp_request+0x20>)
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff ffd4 	bl	800c698 <etharp_request_dst>
 800c6f0:	4603      	mov	r3, r0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	08011de8 	.word	0x08011de8

0800c700 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08e      	sub	sp, #56	; 0x38
 800c704:	af04      	add	r7, sp, #16
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c70a:	4b79      	ldr	r3, [pc, #484]	; (800c8f0 <icmp_input+0x1f0>)
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	f003 030f 	and.w	r3, r3, #15
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c722:	2b13      	cmp	r3, #19
 800c724:	f240 80cd 	bls.w	800c8c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	895b      	ldrh	r3, [r3, #10]
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	f240 80ca 	bls.w	800c8c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c73c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 80b7 	beq.w	800c8b4 <icmp_input+0x1b4>
 800c746:	2b08      	cmp	r3, #8
 800c748:	f040 80b7 	bne.w	800c8ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c74c:	4b69      	ldr	r3, [pc, #420]	; (800c8f4 <icmp_input+0x1f4>)
 800c74e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c750:	4b67      	ldr	r3, [pc, #412]	; (800c8f0 <icmp_input+0x1f0>)
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c758:	2be0      	cmp	r3, #224	; 0xe0
 800c75a:	f000 80bb 	beq.w	800c8d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c75e:	4b64      	ldr	r3, [pc, #400]	; (800c8f0 <icmp_input+0x1f0>)
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	4a63      	ldr	r2, [pc, #396]	; (800c8f0 <icmp_input+0x1f0>)
 800c764:	6812      	ldr	r2, [r2, #0]
 800c766:	4611      	mov	r1, r2
 800c768:	4618      	mov	r0, r3
 800c76a:	f000 fbed 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	f040 80b1 	bne.w	800c8d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	891b      	ldrh	r3, [r3, #8]
 800c77a:	2b07      	cmp	r3, #7
 800c77c:	f240 80a5 	bls.w	800c8ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c782:	330e      	adds	r3, #14
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7f8 fcf8 	bl	800517c <pbuf_add_header>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d04b      	beq.n	800c82a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	891a      	ldrh	r2, [r3, #8]
 800c796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c798:	4413      	add	r3, r2
 800c79a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	891b      	ldrh	r3, [r3, #8]
 800c7a0:	8b7a      	ldrh	r2, [r7, #26]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	f0c0 809a 	bcc.w	800c8dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c7a8:	8b7b      	ldrh	r3, [r7, #26]
 800c7aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	200e      	movs	r0, #14
 800c7b2:	f7f8 fa95 	bl	8004ce0 <pbuf_alloc>
 800c7b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 8090 	beq.w	800c8e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	895b      	ldrh	r3, [r3, #10]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d203      	bcs.n	800c7d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c7ce:	6978      	ldr	r0, [r7, #20]
 800c7d0:	f7f8 fd6a 	bl	80052a8 <pbuf_free>
          goto icmperr;
 800c7d4:	e085      	b.n	800c8e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c7dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f001 fb3c 	bl	800de5c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c7e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	6978      	ldr	r0, [r7, #20]
 800c7ea:	f7f8 fcd7 	bl	800519c <pbuf_remove_header>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d009      	beq.n	800c808 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c7f4:	4b40      	ldr	r3, [pc, #256]	; (800c8f8 <icmp_input+0x1f8>)
 800c7f6:	22b6      	movs	r2, #182	; 0xb6
 800c7f8:	4940      	ldr	r1, [pc, #256]	; (800c8fc <icmp_input+0x1fc>)
 800c7fa:	4841      	ldr	r0, [pc, #260]	; (800c900 <icmp_input+0x200>)
 800c7fc:	f001 fb5e 	bl	800debc <iprintf>
          pbuf_free(r);
 800c800:	6978      	ldr	r0, [r7, #20]
 800c802:	f7f8 fd51 	bl	80052a8 <pbuf_free>
          goto icmperr;
 800c806:	e06c      	b.n	800c8e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c808:	6879      	ldr	r1, [r7, #4]
 800c80a:	6978      	ldr	r0, [r7, #20]
 800c80c:	f7f8 fe74 	bl	80054f8 <pbuf_copy>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c816:	6978      	ldr	r0, [r7, #20]
 800c818:	f7f8 fd46 	bl	80052a8 <pbuf_free>
          goto icmperr;
 800c81c:	e061      	b.n	800c8e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7f8 fd42 	bl	80052a8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	607b      	str	r3, [r7, #4]
 800c828:	e00f      	b.n	800c84a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c82a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c82c:	330e      	adds	r3, #14
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7f8 fcb3 	bl	800519c <pbuf_remove_header>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d006      	beq.n	800c84a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c83c:	4b2e      	ldr	r3, [pc, #184]	; (800c8f8 <icmp_input+0x1f8>)
 800c83e:	22c7      	movs	r2, #199	; 0xc7
 800c840:	4930      	ldr	r1, [pc, #192]	; (800c904 <icmp_input+0x204>)
 800c842:	482f      	ldr	r0, [pc, #188]	; (800c900 <icmp_input+0x200>)
 800c844:	f001 fb3a 	bl	800debc <iprintf>
          goto icmperr;
 800c848:	e04b      	b.n	800c8e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7f8 fc91 	bl	800517c <pbuf_add_header>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d12b      	bne.n	800c8b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c86e:	4b20      	ldr	r3, [pc, #128]	; (800c8f0 <icmp_input+0x1f0>)
 800c870:	691a      	ldr	r2, [r3, #16]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	2200      	movs	r2, #0
 800c87a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2200      	movs	r2, #0
 800c880:	709a      	strb	r2, [r3, #2]
 800c882:	2200      	movs	r2, #0
 800c884:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	22ff      	movs	r2, #255	; 0xff
 800c88a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	729a      	strb	r2, [r3, #10]
 800c892:	2200      	movs	r2, #0
 800c894:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	9302      	str	r3, [sp, #8]
 800c89a:	2301      	movs	r3, #1
 800c89c:	9301      	str	r3, [sp, #4]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	23ff      	movs	r3, #255	; 0xff
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	69f9      	ldr	r1, [r7, #28]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 fa75 	bl	800cd98 <ip4_output_if>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c8b2:	e001      	b.n	800c8b8 <icmp_input+0x1b8>
      break;
 800c8b4:	bf00      	nop
 800c8b6:	e000      	b.n	800c8ba <icmp_input+0x1ba>
      break;
 800c8b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7f8 fcf4 	bl	80052a8 <pbuf_free>
  return;
 800c8c0:	e013      	b.n	800c8ea <icmp_input+0x1ea>
    goto lenerr;
 800c8c2:	bf00      	nop
 800c8c4:	e002      	b.n	800c8cc <icmp_input+0x1cc>
    goto lenerr;
 800c8c6:	bf00      	nop
 800c8c8:	e000      	b.n	800c8cc <icmp_input+0x1cc>
        goto lenerr;
 800c8ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7f8 fceb 	bl	80052a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c8d2:	e00a      	b.n	800c8ea <icmp_input+0x1ea>
        goto icmperr;
 800c8d4:	bf00      	nop
 800c8d6:	e004      	b.n	800c8e2 <icmp_input+0x1e2>
        goto icmperr;
 800c8d8:	bf00      	nop
 800c8da:	e002      	b.n	800c8e2 <icmp_input+0x1e2>
          goto icmperr;
 800c8dc:	bf00      	nop
 800c8de:	e000      	b.n	800c8e2 <icmp_input+0x1e2>
          goto icmperr;
 800c8e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7f8 fce0 	bl	80052a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c8e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c8ea:	3728      	adds	r7, #40	; 0x28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	20003284 	.word	0x20003284
 800c8f4:	20003298 	.word	0x20003298
 800c8f8:	080118b8 	.word	0x080118b8
 800c8fc:	080118f0 	.word	0x080118f0
 800c900:	08011928 	.word	0x08011928
 800c904:	08011950 	.word	0x08011950

0800c908 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	461a      	mov	r2, r3
 800c918:	2103      	movs	r1, #3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f814 	bl	800c948 <icmp_send_response>
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	460b      	mov	r3, r1
 800c932:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	461a      	mov	r2, r3
 800c938:	210b      	movs	r1, #11
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f804 	bl	800c948 <icmp_send_response>
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08c      	sub	sp, #48	; 0x30
 800c94c:	af04      	add	r7, sp, #16
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	460b      	mov	r3, r1
 800c952:	70fb      	strb	r3, [r7, #3]
 800c954:	4613      	mov	r3, r2
 800c956:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c958:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c95c:	2124      	movs	r1, #36	; 0x24
 800c95e:	2022      	movs	r0, #34	; 0x22
 800c960:	f7f8 f9be 	bl	8004ce0 <pbuf_alloc>
 800c964:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d04c      	beq.n	800ca06 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	895b      	ldrh	r3, [r3, #10]
 800c970:	2b23      	cmp	r3, #35	; 0x23
 800c972:	d806      	bhi.n	800c982 <icmp_send_response+0x3a>
 800c974:	4b26      	ldr	r3, [pc, #152]	; (800ca10 <icmp_send_response+0xc8>)
 800c976:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c97a:	4926      	ldr	r1, [pc, #152]	; (800ca14 <icmp_send_response+0xcc>)
 800c97c:	4826      	ldr	r0, [pc, #152]	; (800ca18 <icmp_send_response+0xd0>)
 800c97e:	f001 fa9d 	bl	800debc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	78fa      	ldrb	r2, [r7, #3]
 800c992:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	78ba      	ldrb	r2, [r7, #2]
 800c998:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	2200      	movs	r2, #0
 800c99e:	711a      	strb	r2, [r3, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	719a      	strb	r2, [r3, #6]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	f103 0008 	add.w	r0, r3, #8
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	221c      	movs	r2, #28
 800c9bc:	4619      	mov	r1, r3
 800c9be:	f001 fa4d 	bl	800de5c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c9c8:	f107 030c 	add.w	r3, r7, #12
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 f825 	bl	800ca1c <ip4_route>
 800c9d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d011      	beq.n	800c9fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	709a      	strb	r2, [r3, #2]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c9e4:	f107 020c 	add.w	r2, r7, #12
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	9302      	str	r3, [sp, #8]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	9301      	str	r3, [sp, #4]
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	23ff      	movs	r3, #255	; 0xff
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	69f8      	ldr	r0, [r7, #28]
 800c9fa:	f000 f9cd 	bl	800cd98 <ip4_output_if>
  }
  pbuf_free(q);
 800c9fe:	69f8      	ldr	r0, [r7, #28]
 800ca00:	f7f8 fc52 	bl	80052a8 <pbuf_free>
 800ca04:	e000      	b.n	800ca08 <icmp_send_response+0xc0>
    return;
 800ca06:	bf00      	nop
}
 800ca08:	3720      	adds	r7, #32
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	080118b8 	.word	0x080118b8
 800ca14:	08011984 	.word	0x08011984
 800ca18:	08011928 	.word	0x08011928

0800ca1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ca24:	4b33      	ldr	r3, [pc, #204]	; (800caf4 <ip4_route+0xd8>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	60fb      	str	r3, [r7, #12]
 800ca2a:	e036      	b.n	800ca9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d02b      	beq.n	800ca94 <ip4_route+0x78>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca42:	089b      	lsrs	r3, r3, #2
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d022      	beq.n	800ca94 <ip4_route+0x78>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3304      	adds	r3, #4
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01d      	beq.n	800ca94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3304      	adds	r3, #4
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	405a      	eors	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3308      	adds	r3, #8
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d101      	bne.n	800ca74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	e038      	b.n	800cae6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca7a:	f003 0302 	and.w	r3, r3, #2
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d108      	bne.n	800ca94 <ip4_route+0x78>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	330c      	adds	r3, #12
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d101      	bne.n	800ca94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	e028      	b.n	800cae6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	60fb      	str	r3, [r7, #12]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1c5      	bne.n	800ca2c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800caa0:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <ip4_route+0xdc>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d01a      	beq.n	800cade <ip4_route+0xc2>
 800caa8:	4b13      	ldr	r3, [pc, #76]	; (800caf8 <ip4_route+0xdc>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cab0:	f003 0301 	and.w	r3, r3, #1
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d012      	beq.n	800cade <ip4_route+0xc2>
 800cab8:	4b0f      	ldr	r3, [pc, #60]	; (800caf8 <ip4_route+0xdc>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cac0:	f003 0304 	and.w	r3, r3, #4
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00a      	beq.n	800cade <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cac8:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <ip4_route+0xdc>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	3304      	adds	r3, #4
 800cace:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d004      	beq.n	800cade <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b7f      	cmp	r3, #127	; 0x7f
 800cadc:	d101      	bne.n	800cae2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cade:	2300      	movs	r3, #0
 800cae0:	e001      	b.n	800cae6 <ip4_route+0xca>
  }

  return netif_default;
 800cae2:	4b05      	ldr	r3, [pc, #20]	; (800caf8 <ip4_route+0xdc>)
 800cae4:	681b      	ldr	r3, [r3, #0]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop
 800caf4:	200067e8 	.word	0x200067e8
 800caf8:	200067ec 	.word	0x200067ec

0800cafc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d016      	beq.n	800cb42 <ip4_input_accept+0x46>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3304      	adds	r3, #4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d011      	beq.n	800cb42 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cb1e:	4b0b      	ldr	r3, [pc, #44]	; (800cb4c <ip4_input_accept+0x50>)
 800cb20:	695a      	ldr	r2, [r3, #20]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	3304      	adds	r3, #4
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d008      	beq.n	800cb3e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cb2c:	4b07      	ldr	r3, [pc, #28]	; (800cb4c <ip4_input_accept+0x50>)
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	6879      	ldr	r1, [r7, #4]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 fa08 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800cb38:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d001      	beq.n	800cb42 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e000      	b.n	800cb44 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	20003284 	.word	0x20003284

0800cb50 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	091b      	lsrs	r3, r3, #4
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	2b04      	cmp	r3, #4
 800cb6a:	d004      	beq.n	800cb76 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7f8 fb9b 	bl	80052a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e107      	b.n	800cd86 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	f003 030f 	and.w	r3, r3, #15
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	885b      	ldrh	r3, [r3, #2]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7f7 f8d7 	bl	8003d40 <lwip_htons>
 800cb92:	4603      	mov	r3, r0
 800cb94:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	891b      	ldrh	r3, [r3, #8]
 800cb9a:	89ba      	ldrh	r2, [r7, #12]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d204      	bcs.n	800cbaa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cba0:	89bb      	ldrh	r3, [r7, #12]
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7f8 f9f9 	bl	8004f9c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	895b      	ldrh	r3, [r3, #10]
 800cbae:	89fa      	ldrh	r2, [r7, #14]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d807      	bhi.n	800cbc4 <ip4_input+0x74>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	891b      	ldrh	r3, [r3, #8]
 800cbb8:	89ba      	ldrh	r2, [r7, #12]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d802      	bhi.n	800cbc4 <ip4_input+0x74>
 800cbbe:	89fb      	ldrh	r3, [r7, #14]
 800cbc0:	2b13      	cmp	r3, #19
 800cbc2:	d804      	bhi.n	800cbce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7f8 fb6f 	bl	80052a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	e0db      	b.n	800cd86 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	4a6f      	ldr	r2, [pc, #444]	; (800cd90 <ip4_input+0x240>)
 800cbd4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	4a6d      	ldr	r2, [pc, #436]	; (800cd90 <ip4_input+0x240>)
 800cbdc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cbde:	4b6c      	ldr	r3, [pc, #432]	; (800cd90 <ip4_input+0x240>)
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbe6:	2be0      	cmp	r3, #224	; 0xe0
 800cbe8:	d112      	bne.n	800cc10 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbf0:	f003 0301 	and.w	r3, r3, #1
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d007      	beq.n	800cc0a <ip4_input+0xba>
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <ip4_input+0xba>
      netif = inp;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	613b      	str	r3, [r7, #16]
 800cc08:	e02a      	b.n	800cc60 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	613b      	str	r3, [r7, #16]
 800cc0e:	e027      	b.n	800cc60 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cc10:	6838      	ldr	r0, [r7, #0]
 800cc12:	f7ff ff73 	bl	800cafc <ip4_input_accept>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <ip4_input+0xd2>
      netif = inp;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	613b      	str	r3, [r7, #16]
 800cc20:	e01e      	b.n	800cc60 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cc22:	2300      	movs	r3, #0
 800cc24:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cc26:	4b5a      	ldr	r3, [pc, #360]	; (800cd90 <ip4_input+0x240>)
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc2e:	d017      	beq.n	800cc60 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cc30:	4b58      	ldr	r3, [pc, #352]	; (800cd94 <ip4_input+0x244>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	613b      	str	r3, [r7, #16]
 800cc36:	e00e      	b.n	800cc56 <ip4_input+0x106>
          if (netif == inp) {
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d006      	beq.n	800cc4e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cc40:	6938      	ldr	r0, [r7, #16]
 800cc42:	f7ff ff5b 	bl	800cafc <ip4_input_accept>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d108      	bne.n	800cc5e <ip4_input+0x10e>
 800cc4c:	e000      	b.n	800cc50 <ip4_input+0x100>
            continue;
 800cc4e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	613b      	str	r3, [r7, #16]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1ed      	bne.n	800cc38 <ip4_input+0xe8>
 800cc5c:	e000      	b.n	800cc60 <ip4_input+0x110>
            break;
 800cc5e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cc60:	4b4b      	ldr	r3, [pc, #300]	; (800cd90 <ip4_input+0x240>)
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 f96e 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cc72:	4b47      	ldr	r3, [pc, #284]	; (800cd90 <ip4_input+0x240>)
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cc7a:	2be0      	cmp	r3, #224	; 0xe0
 800cc7c:	d104      	bne.n	800cc88 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7f8 fb12 	bl	80052a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	e07e      	b.n	800cd86 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d104      	bne.n	800cc98 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7f8 fb0a 	bl	80052a8 <pbuf_free>
    return ERR_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e076      	b.n	800cd86 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	88db      	ldrh	r3, [r3, #6]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cca4:	4013      	ands	r3, r2
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00b      	beq.n	800ccc2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fc92 	bl	800d5d4 <ip4_reass>
 800ccb0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <ip4_input+0x16c>
      return ERR_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	e064      	b.n	800cd86 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ccc2:	4a33      	ldr	r2, [pc, #204]	; (800cd90 <ip4_input+0x240>)
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ccc8:	4a31      	ldr	r2, [pc, #196]	; (800cd90 <ip4_input+0x240>)
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ccce:	4a30      	ldr	r2, [pc, #192]	; (800cd90 <ip4_input+0x240>)
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	f003 030f 	and.w	r3, r3, #15
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	4b2a      	ldr	r3, [pc, #168]	; (800cd90 <ip4_input+0x240>)
 800cce6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cce8:	89fb      	ldrh	r3, [r7, #14]
 800ccea:	4619      	mov	r1, r3
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7f8 fa55 	bl	800519c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	7a5b      	ldrb	r3, [r3, #9]
 800ccf6:	2b11      	cmp	r3, #17
 800ccf8:	d006      	beq.n	800cd08 <ip4_input+0x1b8>
 800ccfa:	2b11      	cmp	r3, #17
 800ccfc:	dc13      	bgt.n	800cd26 <ip4_input+0x1d6>
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d00c      	beq.n	800cd1c <ip4_input+0x1cc>
 800cd02:	2b06      	cmp	r3, #6
 800cd04:	d005      	beq.n	800cd12 <ip4_input+0x1c2>
 800cd06:	e00e      	b.n	800cd26 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7fe f950 	bl	800afb0 <udp_input>
        break;
 800cd10:	e026      	b.n	800cd60 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800cd12:	6839      	ldr	r1, [r7, #0]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7fa f991 	bl	800703c <tcp_input>
        break;
 800cd1a:	e021      	b.n	800cd60 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fcee 	bl	800c700 <icmp_input>
        break;
 800cd24:	e01c      	b.n	800cd60 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cd26:	4b1a      	ldr	r3, [pc, #104]	; (800cd90 <ip4_input+0x240>)
 800cd28:	695b      	ldr	r3, [r3, #20]
 800cd2a:	6939      	ldr	r1, [r7, #16]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f90b 	bl	800cf48 <ip4_addr_isbroadcast_u32>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10f      	bne.n	800cd58 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd38:	4b15      	ldr	r3, [pc, #84]	; (800cd90 <ip4_input+0x240>)
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cd40:	2be0      	cmp	r3, #224	; 0xe0
 800cd42:	d009      	beq.n	800cd58 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800cd44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7f8 fa99 	bl	8005282 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cd50:	2102      	movs	r1, #2
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7ff fdd8 	bl	800c908 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7f8 faa5 	bl	80052a8 <pbuf_free>
        break;
 800cd5e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cd60:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <ip4_input+0x240>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cd66:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <ip4_input+0x240>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cd6c:	4b08      	ldr	r3, [pc, #32]	; (800cd90 <ip4_input+0x240>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cd72:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <ip4_input+0x240>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cd78:	4b05      	ldr	r3, [pc, #20]	; (800cd90 <ip4_input+0x240>)
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cd7e:	4b04      	ldr	r3, [pc, #16]	; (800cd90 <ip4_input+0x240>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3718      	adds	r7, #24
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	20003284 	.word	0x20003284
 800cd94:	200067e8 	.word	0x200067e8

0800cd98 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af04      	add	r7, sp, #16
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d009      	beq.n	800cdc4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d003      	beq.n	800cdbe <ip4_output_if+0x26>
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d102      	bne.n	800cdc4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cdc4:	78fa      	ldrb	r2, [r7, #3]
 800cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc8:	9302      	str	r3, [sp, #8]
 800cdca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	6979      	ldr	r1, [r7, #20]
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f000 f805 	bl	800cdec <ip4_output_if_src>
 800cde2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b088      	sub	sp, #32
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	7b9b      	ldrb	r3, [r3, #14]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d006      	beq.n	800ce10 <ip4_output_if_src+0x24>
 800ce02:	4b4b      	ldr	r3, [pc, #300]	; (800cf30 <ip4_output_if_src+0x144>)
 800ce04:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ce08:	494a      	ldr	r1, [pc, #296]	; (800cf34 <ip4_output_if_src+0x148>)
 800ce0a:	484b      	ldr	r0, [pc, #300]	; (800cf38 <ip4_output_if_src+0x14c>)
 800ce0c:	f001 f856 	bl	800debc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d060      	beq.n	800ced8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ce16:	2314      	movs	r3, #20
 800ce18:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ce1a:	2114      	movs	r1, #20
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f7f8 f9ad 	bl	800517c <pbuf_add_header>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ce28:	f06f 0301 	mvn.w	r3, #1
 800ce2c:	e07c      	b.n	800cf28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	895b      	ldrh	r3, [r3, #10]
 800ce38:	2b13      	cmp	r3, #19
 800ce3a:	d806      	bhi.n	800ce4a <ip4_output_if_src+0x5e>
 800ce3c:	4b3c      	ldr	r3, [pc, #240]	; (800cf30 <ip4_output_if_src+0x144>)
 800ce3e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ce42:	493e      	ldr	r1, [pc, #248]	; (800cf3c <ip4_output_if_src+0x150>)
 800ce44:	483c      	ldr	r0, [pc, #240]	; (800cf38 <ip4_output_if_src+0x14c>)
 800ce46:	f001 f839 	bl	800debc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	78fa      	ldrb	r2, [r7, #3]
 800ce4e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ce56:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ce60:	8b7b      	ldrh	r3, [r7, #26]
 800ce62:	089b      	lsrs	r3, r3, #2
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ce78:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	891b      	ldrh	r3, [r3, #8]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f6 ff5e 	bl	8003d40 <lwip_htons>
 800ce84:	4603      	mov	r3, r0
 800ce86:	461a      	mov	r2, r3
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	719a      	strb	r2, [r3, #6]
 800ce92:	2200      	movs	r2, #0
 800ce94:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ce96:	4b2a      	ldr	r3, [pc, #168]	; (800cf40 <ip4_output_if_src+0x154>)
 800ce98:	881b      	ldrh	r3, [r3, #0]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7f6 ff50 	bl	8003d40 <lwip_htons>
 800cea0:	4603      	mov	r3, r0
 800cea2:	461a      	mov	r2, r3
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cea8:	4b25      	ldr	r3, [pc, #148]	; (800cf40 <ip4_output_if_src+0x154>)
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	3301      	adds	r3, #1
 800ceae:	b29a      	uxth	r2, r3
 800ceb0:	4b23      	ldr	r3, [pc, #140]	; (800cf40 <ip4_output_if_src+0x154>)
 800ceb2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d104      	bne.n	800cec4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ceba:	4b22      	ldr	r3, [pc, #136]	; (800cf44 <ip4_output_if_src+0x158>)
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	60da      	str	r2, [r3, #12]
 800cec2:	e003      	b.n	800cecc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2200      	movs	r2, #0
 800ced0:	729a      	strb	r2, [r3, #10]
 800ced2:	2200      	movs	r2, #0
 800ced4:	72da      	strb	r2, [r3, #11]
 800ced6:	e00f      	b.n	800cef8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	895b      	ldrh	r3, [r3, #10]
 800cedc:	2b13      	cmp	r3, #19
 800cede:	d802      	bhi.n	800cee6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cee0:	f06f 0301 	mvn.w	r3, #1
 800cee4:	e020      	b.n	800cf28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cef2:	f107 0314 	add.w	r3, r7, #20
 800cef6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00c      	beq.n	800cf1a <ip4_output_if_src+0x12e>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	891a      	ldrh	r2, [r3, #8]
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d906      	bls.n	800cf1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f000 fd53 	bl	800d9bc <ip4_frag>
 800cf16:	4603      	mov	r3, r0
 800cf18:	e006      	b.n	800cf28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	68f9      	ldr	r1, [r7, #12]
 800cf22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf24:	4798      	blx	r3
 800cf26:	4603      	mov	r3, r0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3720      	adds	r7, #32
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	080119b0 	.word	0x080119b0
 800cf34:	080119e4 	.word	0x080119e4
 800cf38:	080119f0 	.word	0x080119f0
 800cf3c:	08011a18 	.word	0x08011a18
 800cf40:	20006946 	.word	0x20006946
 800cf44:	08011de4 	.word	0x08011de4

0800cf48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf5c:	d002      	beq.n	800cf64 <ip4_addr_isbroadcast_u32+0x1c>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d101      	bne.n	800cf68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e02a      	b.n	800cfbe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf6e:	f003 0302 	and.w	r3, r3, #2
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d101      	bne.n	800cf7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	e021      	b.n	800cfbe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d101      	bne.n	800cf8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	e019      	b.n	800cfbe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	3304      	adds	r3, #4
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	405a      	eors	r2, r3
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	3308      	adds	r3, #8
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10d      	bne.n	800cfbc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	3308      	adds	r3, #8
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	43da      	mvns	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	3308      	adds	r3, #8
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d101      	bne.n	800cfbc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e000      	b.n	800cfbe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cfbc:	2300      	movs	r3, #0
  }
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
	...

0800cfcc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cfd6:	4b12      	ldr	r3, [pc, #72]	; (800d020 <ip_reass_tmr+0x54>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cfdc:	e018      	b.n	800d010 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	7fdb      	ldrb	r3, [r3, #31]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00b      	beq.n	800cffe <ip_reass_tmr+0x32>
      r->timer--;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	7fdb      	ldrb	r3, [r3, #31]
 800cfea:	3b01      	subs	r3, #1
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	e008      	b.n	800d010 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d008:	68b9      	ldr	r1, [r7, #8]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f80a 	bl	800d024 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d1e3      	bne.n	800cfde <ip_reass_tmr+0x12>
    }
  }
}
 800d016:	bf00      	nop
 800d018:	bf00      	nop
 800d01a:	3710      	adds	r7, #16
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20006948 	.word	0x20006948

0800d024 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b088      	sub	sp, #32
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d02e:	2300      	movs	r3, #0
 800d030:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d032:	683a      	ldr	r2, [r7, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	429a      	cmp	r2, r3
 800d038:	d105      	bne.n	800d046 <ip_reass_free_complete_datagram+0x22>
 800d03a:	4b45      	ldr	r3, [pc, #276]	; (800d150 <ip_reass_free_complete_datagram+0x12c>)
 800d03c:	22ab      	movs	r2, #171	; 0xab
 800d03e:	4945      	ldr	r1, [pc, #276]	; (800d154 <ip_reass_free_complete_datagram+0x130>)
 800d040:	4845      	ldr	r0, [pc, #276]	; (800d158 <ip_reass_free_complete_datagram+0x134>)
 800d042:	f000 ff3b 	bl	800debc <iprintf>
  if (prev != NULL) {
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00a      	beq.n	800d062 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	429a      	cmp	r2, r3
 800d054:	d005      	beq.n	800d062 <ip_reass_free_complete_datagram+0x3e>
 800d056:	4b3e      	ldr	r3, [pc, #248]	; (800d150 <ip_reass_free_complete_datagram+0x12c>)
 800d058:	22ad      	movs	r2, #173	; 0xad
 800d05a:	4940      	ldr	r1, [pc, #256]	; (800d15c <ip_reass_free_complete_datagram+0x138>)
 800d05c:	483e      	ldr	r0, [pc, #248]	; (800d158 <ip_reass_free_complete_datagram+0x134>)
 800d05e:	f000 ff2d 	bl	800debc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	889b      	ldrh	r3, [r3, #4]
 800d06e:	b29b      	uxth	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	d12a      	bne.n	800d0ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	6858      	ldr	r0, [r3, #4]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	3308      	adds	r3, #8
 800d08a:	2214      	movs	r2, #20
 800d08c:	4619      	mov	r1, r3
 800d08e:	f000 fee5 	bl	800de5c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d092:	2101      	movs	r1, #1
 800d094:	69b8      	ldr	r0, [r7, #24]
 800d096:	f7ff fc47 	bl	800c928 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d09a:	69b8      	ldr	r0, [r7, #24]
 800d09c:	f7f8 f98c 	bl	80053b8 <pbuf_clen>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d0a4:	8bfa      	ldrh	r2, [r7, #30]
 800d0a6:	8a7b      	ldrh	r3, [r7, #18]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0ae:	db05      	blt.n	800d0bc <ip_reass_free_complete_datagram+0x98>
 800d0b0:	4b27      	ldr	r3, [pc, #156]	; (800d150 <ip_reass_free_complete_datagram+0x12c>)
 800d0b2:	22bc      	movs	r2, #188	; 0xbc
 800d0b4:	492a      	ldr	r1, [pc, #168]	; (800d160 <ip_reass_free_complete_datagram+0x13c>)
 800d0b6:	4828      	ldr	r0, [pc, #160]	; (800d158 <ip_reass_free_complete_datagram+0x134>)
 800d0b8:	f000 ff00 	bl	800debc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d0bc:	8bfa      	ldrh	r2, [r7, #30]
 800d0be:	8a7b      	ldrh	r3, [r7, #18]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d0c4:	69b8      	ldr	r0, [r7, #24]
 800d0c6:	f7f8 f8ef 	bl	80052a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d0d0:	e01f      	b.n	800d112 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7f8 f968 	bl	80053b8 <pbuf_clen>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d0ec:	8bfa      	ldrh	r2, [r7, #30]
 800d0ee:	8a7b      	ldrh	r3, [r7, #18]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0f6:	db05      	blt.n	800d104 <ip_reass_free_complete_datagram+0xe0>
 800d0f8:	4b15      	ldr	r3, [pc, #84]	; (800d150 <ip_reass_free_complete_datagram+0x12c>)
 800d0fa:	22cc      	movs	r2, #204	; 0xcc
 800d0fc:	4918      	ldr	r1, [pc, #96]	; (800d160 <ip_reass_free_complete_datagram+0x13c>)
 800d0fe:	4816      	ldr	r0, [pc, #88]	; (800d158 <ip_reass_free_complete_datagram+0x134>)
 800d100:	f000 fedc 	bl	800debc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d104:	8bfa      	ldrh	r2, [r7, #30]
 800d106:	8a7b      	ldrh	r3, [r7, #18]
 800d108:	4413      	add	r3, r2
 800d10a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f7f8 f8cb 	bl	80052a8 <pbuf_free>
  while (p != NULL) {
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1dc      	bne.n	800d0d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f8c2 	bl	800d2a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d120:	4b10      	ldr	r3, [pc, #64]	; (800d164 <ip_reass_free_complete_datagram+0x140>)
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	8bfa      	ldrh	r2, [r7, #30]
 800d126:	429a      	cmp	r2, r3
 800d128:	d905      	bls.n	800d136 <ip_reass_free_complete_datagram+0x112>
 800d12a:	4b09      	ldr	r3, [pc, #36]	; (800d150 <ip_reass_free_complete_datagram+0x12c>)
 800d12c:	22d2      	movs	r2, #210	; 0xd2
 800d12e:	490e      	ldr	r1, [pc, #56]	; (800d168 <ip_reass_free_complete_datagram+0x144>)
 800d130:	4809      	ldr	r0, [pc, #36]	; (800d158 <ip_reass_free_complete_datagram+0x134>)
 800d132:	f000 fec3 	bl	800debc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d136:	4b0b      	ldr	r3, [pc, #44]	; (800d164 <ip_reass_free_complete_datagram+0x140>)
 800d138:	881a      	ldrh	r2, [r3, #0]
 800d13a:	8bfb      	ldrh	r3, [r7, #30]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	b29a      	uxth	r2, r3
 800d140:	4b08      	ldr	r3, [pc, #32]	; (800d164 <ip_reass_free_complete_datagram+0x140>)
 800d142:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d144:	8bfb      	ldrh	r3, [r7, #30]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3720      	adds	r7, #32
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	08011a48 	.word	0x08011a48
 800d154:	08011a84 	.word	0x08011a84
 800d158:	08011a90 	.word	0x08011a90
 800d15c:	08011ab8 	.word	0x08011ab8
 800d160:	08011acc 	.word	0x08011acc
 800d164:	2000694c 	.word	0x2000694c
 800d168:	08011aec 	.word	0x08011aec

0800d16c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08a      	sub	sp, #40	; 0x28
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d176:	2300      	movs	r3, #0
 800d178:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d182:	2300      	movs	r3, #0
 800d184:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d18a:	4b28      	ldr	r3, [pc, #160]	; (800d22c <ip_reass_remove_oldest_datagram+0xc0>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d190:	e030      	b.n	800d1f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	695a      	ldr	r2, [r3, #20]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d10c      	bne.n	800d1b8 <ip_reass_remove_oldest_datagram+0x4c>
 800d19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a0:	699a      	ldr	r2, [r3, #24]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d106      	bne.n	800d1b8 <ip_reass_remove_oldest_datagram+0x4c>
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	899a      	ldrh	r2, [r3, #12]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	889b      	ldrh	r3, [r3, #4]
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d014      	beq.n	800d1e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d104      	bne.n	800d1ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	61bb      	str	r3, [r7, #24]
 800d1cc:	e009      	b.n	800d1e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	7fda      	ldrb	r2, [r3, #31]
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	7fdb      	ldrb	r3, [r3, #31]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d803      	bhi.n	800d1e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d001      	beq.n	800d1ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1cb      	bne.n	800d192 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d008      	beq.n	800d212 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d200:	69b9      	ldr	r1, [r7, #24]
 800d202:	6a38      	ldr	r0, [r7, #32]
 800d204:	f7ff ff0e 	bl	800d024 <ip_reass_free_complete_datagram>
 800d208:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	4413      	add	r3, r2
 800d210:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d212:	697a      	ldr	r2, [r7, #20]
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	429a      	cmp	r2, r3
 800d218:	da02      	bge.n	800d220 <ip_reass_remove_oldest_datagram+0xb4>
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	dcac      	bgt.n	800d17a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d220:	697b      	ldr	r3, [r7, #20]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3728      	adds	r7, #40	; 0x28
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	20006948 	.word	0x20006948

0800d230 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d23a:	2004      	movs	r0, #4
 800d23c:	f7f7 f9d6 	bl	80045ec <memp_malloc>
 800d240:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d110      	bne.n	800d26a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7ff ff8e 	bl	800d16c <ip_reass_remove_oldest_datagram>
 800d250:	4602      	mov	r2, r0
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	4293      	cmp	r3, r2
 800d256:	dc03      	bgt.n	800d260 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d258:	2004      	movs	r0, #4
 800d25a:	f7f7 f9c7 	bl	80045ec <memp_malloc>
 800d25e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	e016      	b.n	800d298 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d26a:	2220      	movs	r2, #32
 800d26c:	2100      	movs	r1, #0
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f000 fe1c 	bl	800deac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	220f      	movs	r2, #15
 800d278:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d27a:	4b09      	ldr	r3, [pc, #36]	; (800d2a0 <ip_reass_enqueue_new_datagram+0x70>)
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d282:	4a07      	ldr	r2, [pc, #28]	; (800d2a0 <ip_reass_enqueue_new_datagram+0x70>)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	3308      	adds	r3, #8
 800d28c:	2214      	movs	r2, #20
 800d28e:	6879      	ldr	r1, [r7, #4]
 800d290:	4618      	mov	r0, r3
 800d292:	f000 fde3 	bl	800de5c <memcpy>
  return ipr;
 800d296:	68fb      	ldr	r3, [r7, #12]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	20006948 	.word	0x20006948

0800d2a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d2ae:	4b10      	ldr	r3, [pc, #64]	; (800d2f0 <ip_reass_dequeue_datagram+0x4c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d104      	bne.n	800d2c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a0c      	ldr	r2, [pc, #48]	; (800d2f0 <ip_reass_dequeue_datagram+0x4c>)
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	e00d      	b.n	800d2de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d106      	bne.n	800d2d6 <ip_reass_dequeue_datagram+0x32>
 800d2c8:	4b0a      	ldr	r3, [pc, #40]	; (800d2f4 <ip_reass_dequeue_datagram+0x50>)
 800d2ca:	f240 1245 	movw	r2, #325	; 0x145
 800d2ce:	490a      	ldr	r1, [pc, #40]	; (800d2f8 <ip_reass_dequeue_datagram+0x54>)
 800d2d0:	480a      	ldr	r0, [pc, #40]	; (800d2fc <ip_reass_dequeue_datagram+0x58>)
 800d2d2:	f000 fdf3 	bl	800debc <iprintf>
    prev->next = ipr->next;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d2de:	6879      	ldr	r1, [r7, #4]
 800d2e0:	2004      	movs	r0, #4
 800d2e2:	f7f7 f9cf 	bl	8004684 <memp_free>
}
 800d2e6:	bf00      	nop
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20006948 	.word	0x20006948
 800d2f4:	08011a48 	.word	0x08011a48
 800d2f8:	08011b10 	.word	0x08011b10
 800d2fc:	08011a90 	.word	0x08011a90

0800d300 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08c      	sub	sp, #48	; 0x30
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d30c:	2300      	movs	r3, #0
 800d30e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d310:	2301      	movs	r3, #1
 800d312:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	885b      	ldrh	r3, [r3, #2]
 800d31e:	b29b      	uxth	r3, r3
 800d320:	4618      	mov	r0, r3
 800d322:	f7f6 fd0d 	bl	8003d40 <lwip_htons>
 800d326:	4603      	mov	r3, r0
 800d328:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	f003 030f 	and.w	r3, r3, #15
 800d332:	b2db      	uxtb	r3, r3
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d338:	7e7b      	ldrb	r3, [r7, #25]
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	8b7a      	ldrh	r2, [r7, #26]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d202      	bcs.n	800d348 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d346:	e135      	b.n	800d5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d348:	7e7b      	ldrb	r3, [r7, #25]
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	8b7a      	ldrh	r2, [r7, #26]
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	88db      	ldrh	r3, [r3, #6]
 800d356:	b29b      	uxth	r3, r3
 800d358:	4618      	mov	r0, r3
 800d35a:	f7f6 fcf1 	bl	8003d40 <lwip_htons>
 800d35e:	4603      	mov	r3, r0
 800d360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d364:	b29b      	uxth	r3, r3
 800d366:	00db      	lsls	r3, r3, #3
 800d368:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	2200      	movs	r2, #0
 800d374:	701a      	strb	r2, [r3, #0]
 800d376:	2200      	movs	r2, #0
 800d378:	705a      	strb	r2, [r3, #1]
 800d37a:	2200      	movs	r2, #0
 800d37c:	709a      	strb	r2, [r3, #2]
 800d37e:	2200      	movs	r2, #0
 800d380:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d384:	8afa      	ldrh	r2, [r7, #22]
 800d386:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d388:	8afa      	ldrh	r2, [r7, #22]
 800d38a:	8b7b      	ldrh	r3, [r7, #26]
 800d38c:	4413      	add	r3, r2
 800d38e:	b29a      	uxth	r2, r3
 800d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d392:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	88db      	ldrh	r3, [r3, #6]
 800d398:	b29b      	uxth	r3, r3
 800d39a:	8afa      	ldrh	r2, [r7, #22]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d902      	bls.n	800d3a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d3a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3a4:	e106      	b.n	800d5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ac:	e068      	b.n	800d480 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	889b      	ldrh	r3, [r3, #4]
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	889b      	ldrh	r3, [r3, #4]
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d235      	bcs.n	800d430 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d020      	beq.n	800d412 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	889b      	ldrh	r3, [r3, #4]
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d8:	88db      	ldrh	r3, [r3, #6]
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d307      	bcc.n	800d3f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	88db      	ldrh	r3, [r3, #6]
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	889b      	ldrh	r3, [r3, #4]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d902      	bls.n	800d3f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d3f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3f4:	e0de      	b.n	800d5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	88db      	ldrh	r3, [r3, #6]
 800d400:	b29a      	uxth	r2, r3
 800d402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d404:	889b      	ldrh	r3, [r3, #4]
 800d406:	b29b      	uxth	r3, r3
 800d408:	429a      	cmp	r2, r3
 800d40a:	d03d      	beq.n	800d488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d410:	e03a      	b.n	800d488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d414:	88db      	ldrh	r3, [r3, #6]
 800d416:	b29a      	uxth	r2, r3
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	889b      	ldrh	r3, [r3, #4]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	429a      	cmp	r2, r3
 800d420:	d902      	bls.n	800d428 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d426:	e0c5      	b.n	800d5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	605a      	str	r2, [r3, #4]
      break;
 800d42e:	e02b      	b.n	800d488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	889b      	ldrh	r3, [r3, #4]
 800d434:	b29a      	uxth	r2, r3
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	889b      	ldrh	r3, [r3, #4]
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d102      	bne.n	800d446 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d444:	e0b6      	b.n	800d5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	889b      	ldrh	r3, [r3, #4]
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	88db      	ldrh	r3, [r3, #6]
 800d450:	b29b      	uxth	r3, r3
 800d452:	429a      	cmp	r2, r3
 800d454:	d202      	bcs.n	800d45c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d45a:	e0ab      	b.n	800d5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d009      	beq.n	800d476 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d464:	88db      	ldrh	r3, [r3, #6]
 800d466:	b29a      	uxth	r2, r3
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	889b      	ldrh	r3, [r3, #4]
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	429a      	cmp	r2, r3
 800d470:	d001      	beq.n	800d476 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	2b00      	cmp	r3, #0
 800d484:	d193      	bne.n	800d3ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d486:	e000      	b.n	800d48a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d488:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d12d      	bne.n	800d4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d492:	2b00      	cmp	r3, #0
 800d494:	d01c      	beq.n	800d4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d498:	88db      	ldrh	r3, [r3, #6]
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49e:	889b      	ldrh	r3, [r3, #4]
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d906      	bls.n	800d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d4a6:	4b45      	ldr	r3, [pc, #276]	; (800d5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d4a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d4ac:	4944      	ldr	r1, [pc, #272]	; (800d5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d4ae:	4845      	ldr	r0, [pc, #276]	; (800d5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d4b0:	f000 fd04 	bl	800debc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	68ba      	ldr	r2, [r7, #8]
 800d4b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	88db      	ldrh	r3, [r3, #6]
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c2:	889b      	ldrh	r3, [r3, #4]
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d010      	beq.n	800d4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	623b      	str	r3, [r7, #32]
 800d4ce:	e00d      	b.n	800d4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d006      	beq.n	800d4e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d4d8:	4b38      	ldr	r3, [pc, #224]	; (800d5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d4da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d4de:	493a      	ldr	r1, [pc, #232]	; (800d5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d4e0:	4838      	ldr	r0, [pc, #224]	; (800d5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d4e2:	f000 fceb 	bl	800debc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d105      	bne.n	800d4fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	7f9b      	ldrb	r3, [r3, #30]
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d059      	beq.n	800d5b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d04f      	beq.n	800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d006      	beq.n	800d51a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	889b      	ldrh	r3, [r3, #4]
 800d514:	b29b      	uxth	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d002      	beq.n	800d520 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	623b      	str	r3, [r7, #32]
 800d51e:	e041      	b.n	800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d522:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d52a:	e012      	b.n	800d552 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d534:	88db      	ldrh	r3, [r3, #6]
 800d536:	b29a      	uxth	r2, r3
 800d538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53a:	889b      	ldrh	r3, [r3, #4]
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	429a      	cmp	r2, r3
 800d540:	d002      	beq.n	800d548 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	623b      	str	r3, [r7, #32]
            break;
 800d546:	e007      	b.n	800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1e9      	bne.n	800d52c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d558:	6a3b      	ldr	r3, [r7, #32]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d022      	beq.n	800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d106      	bne.n	800d574 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d566:	4b15      	ldr	r3, [pc, #84]	; (800d5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d568:	f240 12df 	movw	r2, #479	; 0x1df
 800d56c:	4917      	ldr	r1, [pc, #92]	; (800d5cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d56e:	4815      	ldr	r0, [pc, #84]	; (800d5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d570:	f000 fca4 	bl	800debc <iprintf>
          LWIP_ASSERT("sanity check",
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d106      	bne.n	800d58e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d580:	4b0e      	ldr	r3, [pc, #56]	; (800d5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d582:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d586:	4911      	ldr	r1, [pc, #68]	; (800d5cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d588:	480e      	ldr	r0, [pc, #56]	; (800d5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d58a:	f000 fc97 	bl	800debc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d006      	beq.n	800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d596:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d598:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d59c:	490c      	ldr	r1, [pc, #48]	; (800d5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d59e:	4809      	ldr	r0, [pc, #36]	; (800d5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d5a0:	f000 fc8c 	bl	800debc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	bf14      	ite	ne
 800d5aa:	2301      	movne	r3, #1
 800d5ac:	2300      	moveq	r3, #0
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	e000      	b.n	800d5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3730      	adds	r7, #48	; 0x30
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	08011a48 	.word	0x08011a48
 800d5c0:	08011b2c 	.word	0x08011b2c
 800d5c4:	08011a90 	.word	0x08011a90
 800d5c8:	08011b4c 	.word	0x08011b4c
 800d5cc:	08011b84 	.word	0x08011b84
 800d5d0:	08011b94 	.word	0x08011b94

0800d5d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b08e      	sub	sp, #56	; 0x38
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	f003 030f 	and.w	r3, r3, #15
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	2b14      	cmp	r3, #20
 800d5f2:	f040 8171 	bne.w	800d8d8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f8:	88db      	ldrh	r3, [r3, #6]
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7f6 fb9f 	bl	8003d40 <lwip_htons>
 800d602:	4603      	mov	r3, r0
 800d604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d608:	b29b      	uxth	r3, r3
 800d60a:	00db      	lsls	r3, r3, #3
 800d60c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	885b      	ldrh	r3, [r3, #2]
 800d612:	b29b      	uxth	r3, r3
 800d614:	4618      	mov	r0, r3
 800d616:	f7f6 fb93 	bl	8003d40 <lwip_htons>
 800d61a:	4603      	mov	r3, r0
 800d61c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	f003 030f 	and.w	r3, r3, #15
 800d626:	b2db      	uxtb	r3, r3
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d62e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d632:	b29b      	uxth	r3, r3
 800d634:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d636:	429a      	cmp	r2, r3
 800d638:	f0c0 8150 	bcc.w	800d8dc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d63c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d640:	b29b      	uxth	r3, r3
 800d642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7f7 feb5 	bl	80053b8 <pbuf_clen>
 800d64e:	4603      	mov	r3, r0
 800d650:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d652:	4b8c      	ldr	r3, [pc, #560]	; (800d884 <ip4_reass+0x2b0>)
 800d654:	881b      	ldrh	r3, [r3, #0]
 800d656:	461a      	mov	r2, r3
 800d658:	8c3b      	ldrh	r3, [r7, #32]
 800d65a:	4413      	add	r3, r2
 800d65c:	2b0a      	cmp	r3, #10
 800d65e:	dd10      	ble.n	800d682 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d660:	8c3b      	ldrh	r3, [r7, #32]
 800d662:	4619      	mov	r1, r3
 800d664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d666:	f7ff fd81 	bl	800d16c <ip_reass_remove_oldest_datagram>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 8137 	beq.w	800d8e0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d672:	4b84      	ldr	r3, [pc, #528]	; (800d884 <ip4_reass+0x2b0>)
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	461a      	mov	r2, r3
 800d678:	8c3b      	ldrh	r3, [r7, #32]
 800d67a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d67c:	2b0a      	cmp	r3, #10
 800d67e:	f300 812f 	bgt.w	800d8e0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d682:	4b81      	ldr	r3, [pc, #516]	; (800d888 <ip4_reass+0x2b4>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	633b      	str	r3, [r7, #48]	; 0x30
 800d688:	e015      	b.n	800d6b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	695a      	ldr	r2, [r3, #20]
 800d68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	429a      	cmp	r2, r3
 800d694:	d10c      	bne.n	800d6b0 <ip4_reass+0xdc>
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	699a      	ldr	r2, [r3, #24]
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d106      	bne.n	800d6b0 <ip4_reass+0xdc>
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	899a      	ldrh	r2, [r3, #12]
 800d6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a8:	889b      	ldrh	r3, [r3, #4]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d006      	beq.n	800d6be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	633b      	str	r3, [r7, #48]	; 0x30
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1e6      	bne.n	800d68a <ip4_reass+0xb6>
 800d6bc:	e000      	b.n	800d6c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d6be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d109      	bne.n	800d6da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d6c6:	8c3b      	ldrh	r3, [r7, #32]
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6cc:	f7ff fdb0 	bl	800d230 <ip_reass_enqueue_new_datagram>
 800d6d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d11c      	bne.n	800d712 <ip4_reass+0x13e>
      goto nullreturn;
 800d6d8:	e105      	b.n	800d8e6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	88db      	ldrh	r3, [r3, #6]
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7f6 fb2d 	bl	8003d40 <lwip_htons>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d110      	bne.n	800d712 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f2:	89db      	ldrh	r3, [r3, #14]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7f6 fb23 	bl	8003d40 <lwip_htons>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d700:	2b00      	cmp	r3, #0
 800d702:	d006      	beq.n	800d712 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	3308      	adds	r3, #8
 800d708:	2214      	movs	r2, #20
 800d70a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 fba5 	bl	800de5c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d714:	88db      	ldrh	r3, [r3, #6]
 800d716:	b29b      	uxth	r3, r3
 800d718:	f003 0320 	and.w	r3, r3, #32
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	bf0c      	ite	eq
 800d720:	2301      	moveq	r3, #1
 800d722:	2300      	movne	r3, #0
 800d724:	b2db      	uxtb	r3, r3
 800d726:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00e      	beq.n	800d74c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d72e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d732:	4413      	add	r3, r2
 800d734:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d736:	8b7a      	ldrh	r2, [r7, #26]
 800d738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d73a:	429a      	cmp	r2, r3
 800d73c:	f0c0 80a0 	bcc.w	800d880 <ip4_reass+0x2ac>
 800d740:	8b7b      	ldrh	r3, [r7, #26]
 800d742:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d746:	4293      	cmp	r3, r2
 800d748:	f200 809a 	bhi.w	800d880 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d74c:	69fa      	ldr	r2, [r7, #28]
 800d74e:	6879      	ldr	r1, [r7, #4]
 800d750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d752:	f7ff fdd5 	bl	800d300 <ip_reass_chain_frag_into_datagram_and_validate>
 800d756:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d75e:	f000 809b 	beq.w	800d898 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d762:	4b48      	ldr	r3, [pc, #288]	; (800d884 <ip4_reass+0x2b0>)
 800d764:	881a      	ldrh	r2, [r3, #0]
 800d766:	8c3b      	ldrh	r3, [r7, #32]
 800d768:	4413      	add	r3, r2
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	4b45      	ldr	r3, [pc, #276]	; (800d884 <ip4_reass+0x2b0>)
 800d76e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00d      	beq.n	800d792 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d776:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d77a:	4413      	add	r3, r2
 800d77c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	8a7a      	ldrh	r2, [r7, #18]
 800d782:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	7f9b      	ldrb	r3, [r3, #30]
 800d788:	f043 0301 	orr.w	r3, r3, #1
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d171      	bne.n	800d87c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79a:	8b9b      	ldrh	r3, [r3, #28]
 800d79c:	3314      	adds	r3, #20
 800d79e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	3308      	adds	r3, #8
 800d7b6:	2214      	movs	r2, #20
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7bc:	f000 fb4e 	bl	800de5c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d7c0:	8a3b      	ldrh	r3, [r7, #16]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7f6 fabc 	bl	8003d40 <lwip_htons>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	719a      	strb	r2, [r3, #6]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7dc:	2200      	movs	r2, #0
 800d7de:	729a      	strb	r2, [r3, #10]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d7ea:	e00d      	b.n	800d808 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d7f2:	2114      	movs	r1, #20
 800d7f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d7f6:	f7f7 fcd1 	bl	800519c <pbuf_remove_header>
      pbuf_cat(p, r);
 800d7fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f7f7 fe15 	bl	800542c <pbuf_cat>
      r = iprh->next_pbuf;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1ee      	bne.n	800d7ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d80e:	4b1e      	ldr	r3, [pc, #120]	; (800d888 <ip4_reass+0x2b4>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d814:	429a      	cmp	r2, r3
 800d816:	d102      	bne.n	800d81e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d818:	2300      	movs	r3, #0
 800d81a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d81c:	e010      	b.n	800d840 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d81e:	4b1a      	ldr	r3, [pc, #104]	; (800d888 <ip4_reass+0x2b4>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d824:	e007      	b.n	800d836 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d006      	beq.n	800d83e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1f4      	bne.n	800d826 <ip4_reass+0x252>
 800d83c:	e000      	b.n	800d840 <ip4_reass+0x26c>
          break;
 800d83e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d844:	f7ff fd2e 	bl	800d2a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7f7 fdb5 	bl	80053b8 <pbuf_clen>
 800d84e:	4603      	mov	r3, r0
 800d850:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d852:	4b0c      	ldr	r3, [pc, #48]	; (800d884 <ip4_reass+0x2b0>)
 800d854:	881b      	ldrh	r3, [r3, #0]
 800d856:	8c3a      	ldrh	r2, [r7, #32]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d906      	bls.n	800d86a <ip4_reass+0x296>
 800d85c:	4b0b      	ldr	r3, [pc, #44]	; (800d88c <ip4_reass+0x2b8>)
 800d85e:	f240 229b 	movw	r2, #667	; 0x29b
 800d862:	490b      	ldr	r1, [pc, #44]	; (800d890 <ip4_reass+0x2bc>)
 800d864:	480b      	ldr	r0, [pc, #44]	; (800d894 <ip4_reass+0x2c0>)
 800d866:	f000 fb29 	bl	800debc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d86a:	4b06      	ldr	r3, [pc, #24]	; (800d884 <ip4_reass+0x2b0>)
 800d86c:	881a      	ldrh	r2, [r3, #0]
 800d86e:	8c3b      	ldrh	r3, [r7, #32]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	b29a      	uxth	r2, r3
 800d874:	4b03      	ldr	r3, [pc, #12]	; (800d884 <ip4_reass+0x2b0>)
 800d876:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	e038      	b.n	800d8ee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e036      	b.n	800d8ee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d880:	bf00      	nop
 800d882:	e00a      	b.n	800d89a <ip4_reass+0x2c6>
 800d884:	2000694c 	.word	0x2000694c
 800d888:	20006948 	.word	0x20006948
 800d88c:	08011a48 	.word	0x08011a48
 800d890:	08011bb8 	.word	0x08011bb8
 800d894:	08011a90 	.word	0x08011a90
    goto nullreturn_ipr;
 800d898:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d106      	bne.n	800d8ae <ip4_reass+0x2da>
 800d8a0:	4b15      	ldr	r3, [pc, #84]	; (800d8f8 <ip4_reass+0x324>)
 800d8a2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d8a6:	4915      	ldr	r1, [pc, #84]	; (800d8fc <ip4_reass+0x328>)
 800d8a8:	4815      	ldr	r0, [pc, #84]	; (800d900 <ip4_reass+0x32c>)
 800d8aa:	f000 fb07 	bl	800debc <iprintf>
  if (ipr->p == NULL) {
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d116      	bne.n	800d8e4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d8b6:	4b13      	ldr	r3, [pc, #76]	; (800d904 <ip4_reass+0x330>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d006      	beq.n	800d8ce <ip4_reass+0x2fa>
 800d8c0:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <ip4_reass+0x324>)
 800d8c2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d8c6:	4910      	ldr	r1, [pc, #64]	; (800d908 <ip4_reass+0x334>)
 800d8c8:	480d      	ldr	r0, [pc, #52]	; (800d900 <ip4_reass+0x32c>)
 800d8ca:	f000 faf7 	bl	800debc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8d2:	f7ff fce7 	bl	800d2a4 <ip_reass_dequeue_datagram>
 800d8d6:	e006      	b.n	800d8e6 <ip4_reass+0x312>
    goto nullreturn;
 800d8d8:	bf00      	nop
 800d8da:	e004      	b.n	800d8e6 <ip4_reass+0x312>
    goto nullreturn;
 800d8dc:	bf00      	nop
 800d8de:	e002      	b.n	800d8e6 <ip4_reass+0x312>
      goto nullreturn;
 800d8e0:	bf00      	nop
 800d8e2:	e000      	b.n	800d8e6 <ip4_reass+0x312>
  }

nullreturn:
 800d8e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7f7 fcde 	bl	80052a8 <pbuf_free>
  return NULL;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3738      	adds	r7, #56	; 0x38
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	08011a48 	.word	0x08011a48
 800d8fc:	08011bd4 	.word	0x08011bd4
 800d900:	08011a90 	.word	0x08011a90
 800d904:	20006948 	.word	0x20006948
 800d908:	08011be0 	.word	0x08011be0

0800d90c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d910:	2005      	movs	r0, #5
 800d912:	f7f6 fe6b 	bl	80045ec <memp_malloc>
 800d916:	4603      	mov	r3, r0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d106      	bne.n	800d938 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d92a:	4b07      	ldr	r3, [pc, #28]	; (800d948 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d92c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800d930:	4906      	ldr	r1, [pc, #24]	; (800d94c <ip_frag_free_pbuf_custom_ref+0x30>)
 800d932:	4807      	ldr	r0, [pc, #28]	; (800d950 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d934:	f000 fac2 	bl	800debc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d938:	6879      	ldr	r1, [r7, #4]
 800d93a:	2005      	movs	r0, #5
 800d93c:	f7f6 fea2 	bl	8004684 <memp_free>
}
 800d940:	bf00      	nop
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	08011a48 	.word	0x08011a48
 800d94c:	08011c00 	.word	0x08011c00
 800d950:	08011a90 	.word	0x08011a90

0800d954 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d106      	bne.n	800d974 <ipfrag_free_pbuf_custom+0x20>
 800d966:	4b11      	ldr	r3, [pc, #68]	; (800d9ac <ipfrag_free_pbuf_custom+0x58>)
 800d968:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d96c:	4910      	ldr	r1, [pc, #64]	; (800d9b0 <ipfrag_free_pbuf_custom+0x5c>)
 800d96e:	4811      	ldr	r0, [pc, #68]	; (800d9b4 <ipfrag_free_pbuf_custom+0x60>)
 800d970:	f000 faa4 	bl	800debc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d006      	beq.n	800d98a <ipfrag_free_pbuf_custom+0x36>
 800d97c:	4b0b      	ldr	r3, [pc, #44]	; (800d9ac <ipfrag_free_pbuf_custom+0x58>)
 800d97e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d982:	490d      	ldr	r1, [pc, #52]	; (800d9b8 <ipfrag_free_pbuf_custom+0x64>)
 800d984:	480b      	ldr	r0, [pc, #44]	; (800d9b4 <ipfrag_free_pbuf_custom+0x60>)
 800d986:	f000 fa99 	bl	800debc <iprintf>
  if (pcr->original != NULL) {
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d004      	beq.n	800d99c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	4618      	mov	r0, r3
 800d998:	f7f7 fc86 	bl	80052a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f7ff ffbd 	bl	800d91c <ip_frag_free_pbuf_custom_ref>
}
 800d9a2:	bf00      	nop
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	08011a48 	.word	0x08011a48
 800d9b0:	08011c0c 	.word	0x08011c0c
 800d9b4:	08011a90 	.word	0x08011a90
 800d9b8:	08011c18 	.word	0x08011c18

0800d9bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b094      	sub	sp, #80	; 0x50
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9d2:	3b14      	subs	r3, #20
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	da00      	bge.n	800d9da <ip4_frag+0x1e>
 800d9d8:	3307      	adds	r3, #7
 800d9da:	10db      	asrs	r3, r3, #3
 800d9dc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d9de:	2314      	movs	r3, #20
 800d9e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800d9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	f003 030f 	and.w	r3, r3, #15
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	2b14      	cmp	r3, #20
 800d9fc:	d002      	beq.n	800da04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d9fe:	f06f 0305 	mvn.w	r3, #5
 800da02:	e110      	b.n	800dc26 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	895b      	ldrh	r3, [r3, #10]
 800da08:	2b13      	cmp	r3, #19
 800da0a:	d809      	bhi.n	800da20 <ip4_frag+0x64>
 800da0c:	4b88      	ldr	r3, [pc, #544]	; (800dc30 <ip4_frag+0x274>)
 800da0e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800da12:	4988      	ldr	r1, [pc, #544]	; (800dc34 <ip4_frag+0x278>)
 800da14:	4888      	ldr	r0, [pc, #544]	; (800dc38 <ip4_frag+0x27c>)
 800da16:	f000 fa51 	bl	800debc <iprintf>
 800da1a:	f06f 0305 	mvn.w	r3, #5
 800da1e:	e102      	b.n	800dc26 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800da20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da22:	88db      	ldrh	r3, [r3, #6]
 800da24:	b29b      	uxth	r3, r3
 800da26:	4618      	mov	r0, r3
 800da28:	f7f6 f98a 	bl	8003d40 <lwip_htons>
 800da2c:	4603      	mov	r3, r0
 800da2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800da30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800da3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da40:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	891b      	ldrh	r3, [r3, #8]
 800da46:	3b14      	subs	r3, #20
 800da48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800da4c:	e0e1      	b.n	800dc12 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	b29b      	uxth	r3, r3
 800da54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800da58:	4293      	cmp	r3, r2
 800da5a:	bf28      	it	cs
 800da5c:	4613      	movcs	r3, r2
 800da5e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800da60:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da64:	2114      	movs	r1, #20
 800da66:	200e      	movs	r0, #14
 800da68:	f7f7 f93a 	bl	8004ce0 <pbuf_alloc>
 800da6c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800da6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 80d5 	beq.w	800dc20 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	895b      	ldrh	r3, [r3, #10]
 800da7a:	2b13      	cmp	r3, #19
 800da7c:	d806      	bhi.n	800da8c <ip4_frag+0xd0>
 800da7e:	4b6c      	ldr	r3, [pc, #432]	; (800dc30 <ip4_frag+0x274>)
 800da80:	f44f 7249 	mov.w	r2, #804	; 0x324
 800da84:	496d      	ldr	r1, [pc, #436]	; (800dc3c <ip4_frag+0x280>)
 800da86:	486c      	ldr	r0, [pc, #432]	; (800dc38 <ip4_frag+0x27c>)
 800da88:	f000 fa18 	bl	800debc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	2214      	movs	r2, #20
 800da92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da94:	4618      	mov	r0, r3
 800da96:	f000 f9e1 	bl	800de5c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800da9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800daa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800daa2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800daa6:	e064      	b.n	800db72 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	895a      	ldrh	r2, [r3, #10]
 800daac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800daae:	1ad3      	subs	r3, r2, r3
 800dab0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	895b      	ldrh	r3, [r3, #10]
 800dab6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dab8:	429a      	cmp	r2, r3
 800daba:	d906      	bls.n	800daca <ip4_frag+0x10e>
 800dabc:	4b5c      	ldr	r3, [pc, #368]	; (800dc30 <ip4_frag+0x274>)
 800dabe:	f240 322d 	movw	r2, #813	; 0x32d
 800dac2:	495f      	ldr	r1, [pc, #380]	; (800dc40 <ip4_frag+0x284>)
 800dac4:	485c      	ldr	r0, [pc, #368]	; (800dc38 <ip4_frag+0x27c>)
 800dac6:	f000 f9f9 	bl	800debc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800daca:	8bfa      	ldrh	r2, [r7, #30]
 800dacc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dad0:	4293      	cmp	r3, r2
 800dad2:	bf28      	it	cs
 800dad4:	4613      	movcs	r3, r2
 800dad6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dada:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d105      	bne.n	800daee <ip4_frag+0x132>
        poff = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	60fb      	str	r3, [r7, #12]
        continue;
 800daec:	e041      	b.n	800db72 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800daee:	f7ff ff0d 	bl	800d90c <ip_frag_alloc_pbuf_custom_ref>
 800daf2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d103      	bne.n	800db02 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dafa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dafc:	f7f7 fbd4 	bl	80052a8 <pbuf_free>
        goto memerr;
 800db00:	e08f      	b.n	800dc22 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800db02:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800db08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db0a:	4413      	add	r3, r2
 800db0c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800db10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800db14:	9201      	str	r2, [sp, #4]
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	4603      	mov	r3, r0
 800db1a:	2241      	movs	r2, #65	; 0x41
 800db1c:	2000      	movs	r0, #0
 800db1e:	f7f7 fa09 	bl	8004f34 <pbuf_alloced_custom>
 800db22:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800db2a:	69b8      	ldr	r0, [r7, #24]
 800db2c:	f7ff fef6 	bl	800d91c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800db30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db32:	f7f7 fbb9 	bl	80052a8 <pbuf_free>
        goto memerr;
 800db36:	e074      	b.n	800dc22 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f7f7 fc55 	bl	80053e8 <pbuf_ref>
      pcr->original = p;
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	4a3f      	ldr	r2, [pc, #252]	; (800dc44 <ip4_frag+0x288>)
 800db48:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800db4a:	6979      	ldr	r1, [r7, #20]
 800db4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db4e:	f7f7 fc6d 	bl	800542c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800db52:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800db56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800db60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800db64:	2b00      	cmp	r3, #0
 800db66:	d004      	beq.n	800db72 <ip4_frag+0x1b6>
        poff = 0;
 800db68:	2300      	movs	r3, #0
 800db6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800db72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800db76:	2b00      	cmp	r3, #0
 800db78:	d196      	bne.n	800daa8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800db7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800db7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db80:	4413      	add	r3, r2
 800db82:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db88:	f1a3 0213 	sub.w	r2, r3, #19
 800db8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db90:	429a      	cmp	r2, r3
 800db92:	bfcc      	ite	gt
 800db94:	2301      	movgt	r3, #1
 800db96:	2300      	movle	r3, #0
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800db9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dba4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <ip4_frag+0x1f6>
 800dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d003      	beq.n	800dbba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800dbb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dbb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800dbba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7f6 f8bf 	bl	8003d40 <lwip_htons>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800dbca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dbcc:	3314      	adds	r3, #20
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7f6 f8b5 	bl	8003d40 <lwip_htons>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800dbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	729a      	strb	r2, [r3, #10]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	695b      	ldr	r3, [r3, #20]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbf0:	68b8      	ldr	r0, [r7, #8]
 800dbf2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dbf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbf6:	f7f7 fb57 	bl	80052a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800dbfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dbfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800dc06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dc0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc0c:	4413      	add	r3, r2
 800dc0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800dc12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f47f af19 	bne.w	800da4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	e002      	b.n	800dc26 <ip4_frag+0x26a>
      goto memerr;
 800dc20:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dc22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3748      	adds	r7, #72	; 0x48
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	08011a48 	.word	0x08011a48
 800dc34:	08011c24 	.word	0x08011c24
 800dc38:	08011a90 	.word	0x08011a90
 800dc3c:	08011c40 	.word	0x08011c40
 800dc40:	08011c60 	.word	0x08011c60
 800dc44:	0800d955 	.word	0x0800d955

0800dc48 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800dc52:	230e      	movs	r3, #14
 800dc54:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	895b      	ldrh	r3, [r3, #10]
 800dc5a:	2b0e      	cmp	r3, #14
 800dc5c:	d96e      	bls.n	800dd3c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	7bdb      	ldrb	r3, [r3, #15]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d106      	bne.n	800dc74 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	7b1a      	ldrb	r2, [r3, #12]
 800dc7e:	7b5b      	ldrb	r3, [r3, #13]
 800dc80:	021b      	lsls	r3, r3, #8
 800dc82:	4313      	orrs	r3, r2
 800dc84:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	f003 0301 	and.w	r3, r3, #1
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d023      	beq.n	800dcda <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d10f      	bne.n	800dcba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	785b      	ldrb	r3, [r3, #1]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d11b      	bne.n	800dcda <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dca6:	2b5e      	cmp	r3, #94	; 0x5e
 800dca8:	d117      	bne.n	800dcda <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7b5b      	ldrb	r3, [r3, #13]
 800dcae:	f043 0310 	orr.w	r3, r3, #16
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	735a      	strb	r2, [r3, #13]
 800dcb8:	e00f      	b.n	800dcda <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2206      	movs	r2, #6
 800dcbe:	4928      	ldr	r1, [pc, #160]	; (800dd60 <ethernet_input+0x118>)
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 f8bb 	bl	800de3c <memcmp>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d106      	bne.n	800dcda <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	7b5b      	ldrb	r3, [r3, #13]
 800dcd0:	f043 0308 	orr.w	r3, r3, #8
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800dcda:	89fb      	ldrh	r3, [r7, #14]
 800dcdc:	2b08      	cmp	r3, #8
 800dcde:	d003      	beq.n	800dce8 <ethernet_input+0xa0>
 800dce0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800dce4:	d014      	beq.n	800dd10 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dce6:	e032      	b.n	800dd4e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcee:	f003 0308 	and.w	r3, r3, #8
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d024      	beq.n	800dd40 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800dcf6:	8afb      	ldrh	r3, [r7, #22]
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7f7 fa4e 	bl	800519c <pbuf_remove_header>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d11e      	bne.n	800dd44 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7fe ff21 	bl	800cb50 <ip4_input>
      break;
 800dd0e:	e013      	b.n	800dd38 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd16:	f003 0308 	and.w	r3, r3, #8
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d014      	beq.n	800dd48 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800dd1e:	8afb      	ldrh	r3, [r7, #22]
 800dd20:	4619      	mov	r1, r3
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7f7 fa3a 	bl	800519c <pbuf_remove_header>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10e      	bne.n	800dd4c <ethernet_input+0x104>
        etharp_input(p, netif);
 800dd2e:	6839      	ldr	r1, [r7, #0]
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7fe f8c1 	bl	800beb8 <etharp_input>
      break;
 800dd36:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	e00c      	b.n	800dd56 <ethernet_input+0x10e>
    goto free_and_return;
 800dd3c:	bf00      	nop
 800dd3e:	e006      	b.n	800dd4e <ethernet_input+0x106>
        goto free_and_return;
 800dd40:	bf00      	nop
 800dd42:	e004      	b.n	800dd4e <ethernet_input+0x106>
        goto free_and_return;
 800dd44:	bf00      	nop
 800dd46:	e002      	b.n	800dd4e <ethernet_input+0x106>
        goto free_and_return;
 800dd48:	bf00      	nop
 800dd4a:	e000      	b.n	800dd4e <ethernet_input+0x106>
        goto free_and_return;
 800dd4c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7f7 faaa 	bl	80052a8 <pbuf_free>
  return ERR_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	08011de8 	.word	0x08011de8

0800dd64 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	607a      	str	r2, [r7, #4]
 800dd70:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dd72:	8c3b      	ldrh	r3, [r7, #32]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7f5 ffe3 	bl	8003d40 <lwip_htons>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dd7e:	210e      	movs	r1, #14
 800dd80:	68b8      	ldr	r0, [r7, #8]
 800dd82:	f7f7 f9fb 	bl	800517c <pbuf_add_header>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d125      	bne.n	800ddd8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	8afa      	ldrh	r2, [r7, #22]
 800dd96:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2206      	movs	r2, #6
 800dd9c:	6839      	ldr	r1, [r7, #0]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 f85c 	bl	800de5c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	3306      	adds	r3, #6
 800dda8:	2206      	movs	r2, #6
 800ddaa:	6879      	ldr	r1, [r7, #4]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 f855 	bl	800de5c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ddb8:	2b06      	cmp	r3, #6
 800ddba:	d006      	beq.n	800ddca <ethernet_output+0x66>
 800ddbc:	4b0a      	ldr	r3, [pc, #40]	; (800dde8 <ethernet_output+0x84>)
 800ddbe:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ddc2:	490a      	ldr	r1, [pc, #40]	; (800ddec <ethernet_output+0x88>)
 800ddc4:	480a      	ldr	r0, [pc, #40]	; (800ddf0 <ethernet_output+0x8c>)
 800ddc6:	f000 f879 	bl	800debc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	68b9      	ldr	r1, [r7, #8]
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	4798      	blx	r3
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	e002      	b.n	800ddde <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ddd8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ddda:	f06f 0301 	mvn.w	r3, #1
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3718      	adds	r7, #24
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	08011c70 	.word	0x08011c70
 800ddec:	08011ca8 	.word	0x08011ca8
 800ddf0:	08011cdc 	.word	0x08011cdc

0800ddf4 <__libc_init_array>:
 800ddf4:	b570      	push	{r4, r5, r6, lr}
 800ddf6:	4d0d      	ldr	r5, [pc, #52]	; (800de2c <__libc_init_array+0x38>)
 800ddf8:	4c0d      	ldr	r4, [pc, #52]	; (800de30 <__libc_init_array+0x3c>)
 800ddfa:	1b64      	subs	r4, r4, r5
 800ddfc:	10a4      	asrs	r4, r4, #2
 800ddfe:	2600      	movs	r6, #0
 800de00:	42a6      	cmp	r6, r4
 800de02:	d109      	bne.n	800de18 <__libc_init_array+0x24>
 800de04:	4d0b      	ldr	r5, [pc, #44]	; (800de34 <__libc_init_array+0x40>)
 800de06:	4c0c      	ldr	r4, [pc, #48]	; (800de38 <__libc_init_array+0x44>)
 800de08:	f001 fa70 	bl	800f2ec <_init>
 800de0c:	1b64      	subs	r4, r4, r5
 800de0e:	10a4      	asrs	r4, r4, #2
 800de10:	2600      	movs	r6, #0
 800de12:	42a6      	cmp	r6, r4
 800de14:	d105      	bne.n	800de22 <__libc_init_array+0x2e>
 800de16:	bd70      	pop	{r4, r5, r6, pc}
 800de18:	f855 3b04 	ldr.w	r3, [r5], #4
 800de1c:	4798      	blx	r3
 800de1e:	3601      	adds	r6, #1
 800de20:	e7ee      	b.n	800de00 <__libc_init_array+0xc>
 800de22:	f855 3b04 	ldr.w	r3, [r5], #4
 800de26:	4798      	blx	r3
 800de28:	3601      	adds	r6, #1
 800de2a:	e7f2      	b.n	800de12 <__libc_init_array+0x1e>
 800de2c:	08011f48 	.word	0x08011f48
 800de30:	08011f48 	.word	0x08011f48
 800de34:	08011f48 	.word	0x08011f48
 800de38:	08011f4c 	.word	0x08011f4c

0800de3c <memcmp>:
 800de3c:	b510      	push	{r4, lr}
 800de3e:	3901      	subs	r1, #1
 800de40:	4402      	add	r2, r0
 800de42:	4290      	cmp	r0, r2
 800de44:	d101      	bne.n	800de4a <memcmp+0xe>
 800de46:	2000      	movs	r0, #0
 800de48:	e005      	b.n	800de56 <memcmp+0x1a>
 800de4a:	7803      	ldrb	r3, [r0, #0]
 800de4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800de50:	42a3      	cmp	r3, r4
 800de52:	d001      	beq.n	800de58 <memcmp+0x1c>
 800de54:	1b18      	subs	r0, r3, r4
 800de56:	bd10      	pop	{r4, pc}
 800de58:	3001      	adds	r0, #1
 800de5a:	e7f2      	b.n	800de42 <memcmp+0x6>

0800de5c <memcpy>:
 800de5c:	440a      	add	r2, r1
 800de5e:	4291      	cmp	r1, r2
 800de60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de64:	d100      	bne.n	800de68 <memcpy+0xc>
 800de66:	4770      	bx	lr
 800de68:	b510      	push	{r4, lr}
 800de6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de72:	4291      	cmp	r1, r2
 800de74:	d1f9      	bne.n	800de6a <memcpy+0xe>
 800de76:	bd10      	pop	{r4, pc}

0800de78 <memmove>:
 800de78:	4288      	cmp	r0, r1
 800de7a:	b510      	push	{r4, lr}
 800de7c:	eb01 0402 	add.w	r4, r1, r2
 800de80:	d902      	bls.n	800de88 <memmove+0x10>
 800de82:	4284      	cmp	r4, r0
 800de84:	4623      	mov	r3, r4
 800de86:	d807      	bhi.n	800de98 <memmove+0x20>
 800de88:	1e43      	subs	r3, r0, #1
 800de8a:	42a1      	cmp	r1, r4
 800de8c:	d008      	beq.n	800dea0 <memmove+0x28>
 800de8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de96:	e7f8      	b.n	800de8a <memmove+0x12>
 800de98:	4402      	add	r2, r0
 800de9a:	4601      	mov	r1, r0
 800de9c:	428a      	cmp	r2, r1
 800de9e:	d100      	bne.n	800dea2 <memmove+0x2a>
 800dea0:	bd10      	pop	{r4, pc}
 800dea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800deaa:	e7f7      	b.n	800de9c <memmove+0x24>

0800deac <memset>:
 800deac:	4402      	add	r2, r0
 800deae:	4603      	mov	r3, r0
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d100      	bne.n	800deb6 <memset+0xa>
 800deb4:	4770      	bx	lr
 800deb6:	f803 1b01 	strb.w	r1, [r3], #1
 800deba:	e7f9      	b.n	800deb0 <memset+0x4>

0800debc <iprintf>:
 800debc:	b40f      	push	{r0, r1, r2, r3}
 800debe:	4b0a      	ldr	r3, [pc, #40]	; (800dee8 <iprintf+0x2c>)
 800dec0:	b513      	push	{r0, r1, r4, lr}
 800dec2:	681c      	ldr	r4, [r3, #0]
 800dec4:	b124      	cbz	r4, 800ded0 <iprintf+0x14>
 800dec6:	69a3      	ldr	r3, [r4, #24]
 800dec8:	b913      	cbnz	r3, 800ded0 <iprintf+0x14>
 800deca:	4620      	mov	r0, r4
 800decc:	f000 f8f6 	bl	800e0bc <__sinit>
 800ded0:	ab05      	add	r3, sp, #20
 800ded2:	9a04      	ldr	r2, [sp, #16]
 800ded4:	68a1      	ldr	r1, [r4, #8]
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	4620      	mov	r0, r4
 800deda:	f000 fc0f 	bl	800e6fc <_vfiprintf_r>
 800dede:	b002      	add	sp, #8
 800dee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dee4:	b004      	add	sp, #16
 800dee6:	4770      	bx	lr
 800dee8:	20000014 	.word	0x20000014

0800deec <rand>:
 800deec:	4b16      	ldr	r3, [pc, #88]	; (800df48 <rand+0x5c>)
 800deee:	b510      	push	{r4, lr}
 800def0:	681c      	ldr	r4, [r3, #0]
 800def2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800def4:	b9b3      	cbnz	r3, 800df24 <rand+0x38>
 800def6:	2018      	movs	r0, #24
 800def8:	f000 f992 	bl	800e220 <malloc>
 800defc:	63a0      	str	r0, [r4, #56]	; 0x38
 800defe:	b928      	cbnz	r0, 800df0c <rand+0x20>
 800df00:	4602      	mov	r2, r0
 800df02:	4b12      	ldr	r3, [pc, #72]	; (800df4c <rand+0x60>)
 800df04:	4812      	ldr	r0, [pc, #72]	; (800df50 <rand+0x64>)
 800df06:	214e      	movs	r1, #78	; 0x4e
 800df08:	f000 f862 	bl	800dfd0 <__assert_func>
 800df0c:	4a11      	ldr	r2, [pc, #68]	; (800df54 <rand+0x68>)
 800df0e:	4b12      	ldr	r3, [pc, #72]	; (800df58 <rand+0x6c>)
 800df10:	e9c0 2300 	strd	r2, r3, [r0]
 800df14:	4b11      	ldr	r3, [pc, #68]	; (800df5c <rand+0x70>)
 800df16:	6083      	str	r3, [r0, #8]
 800df18:	230b      	movs	r3, #11
 800df1a:	8183      	strh	r3, [r0, #12]
 800df1c:	2201      	movs	r2, #1
 800df1e:	2300      	movs	r3, #0
 800df20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800df24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800df26:	4a0e      	ldr	r2, [pc, #56]	; (800df60 <rand+0x74>)
 800df28:	6920      	ldr	r0, [r4, #16]
 800df2a:	6963      	ldr	r3, [r4, #20]
 800df2c:	490d      	ldr	r1, [pc, #52]	; (800df64 <rand+0x78>)
 800df2e:	4342      	muls	r2, r0
 800df30:	fb01 2203 	mla	r2, r1, r3, r2
 800df34:	fba0 0101 	umull	r0, r1, r0, r1
 800df38:	1c43      	adds	r3, r0, #1
 800df3a:	eb42 0001 	adc.w	r0, r2, r1
 800df3e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800df42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800df46:	bd10      	pop	{r4, pc}
 800df48:	20000014 	.word	0x20000014
 800df4c:	08011dfc 	.word	0x08011dfc
 800df50:	08011e13 	.word	0x08011e13
 800df54:	abcd330e 	.word	0xabcd330e
 800df58:	e66d1234 	.word	0xe66d1234
 800df5c:	0005deec 	.word	0x0005deec
 800df60:	5851f42d 	.word	0x5851f42d
 800df64:	4c957f2d 	.word	0x4c957f2d

0800df68 <siprintf>:
 800df68:	b40e      	push	{r1, r2, r3}
 800df6a:	b500      	push	{lr}
 800df6c:	b09c      	sub	sp, #112	; 0x70
 800df6e:	ab1d      	add	r3, sp, #116	; 0x74
 800df70:	9002      	str	r0, [sp, #8]
 800df72:	9006      	str	r0, [sp, #24]
 800df74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df78:	4809      	ldr	r0, [pc, #36]	; (800dfa0 <siprintf+0x38>)
 800df7a:	9107      	str	r1, [sp, #28]
 800df7c:	9104      	str	r1, [sp, #16]
 800df7e:	4909      	ldr	r1, [pc, #36]	; (800dfa4 <siprintf+0x3c>)
 800df80:	f853 2b04 	ldr.w	r2, [r3], #4
 800df84:	9105      	str	r1, [sp, #20]
 800df86:	6800      	ldr	r0, [r0, #0]
 800df88:	9301      	str	r3, [sp, #4]
 800df8a:	a902      	add	r1, sp, #8
 800df8c:	f000 fa8c 	bl	800e4a8 <_svfiprintf_r>
 800df90:	9b02      	ldr	r3, [sp, #8]
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
 800df96:	b01c      	add	sp, #112	; 0x70
 800df98:	f85d eb04 	ldr.w	lr, [sp], #4
 800df9c:	b003      	add	sp, #12
 800df9e:	4770      	bx	lr
 800dfa0:	20000014 	.word	0x20000014
 800dfa4:	ffff0208 	.word	0xffff0208

0800dfa8 <strncpy>:
 800dfa8:	b510      	push	{r4, lr}
 800dfaa:	3901      	subs	r1, #1
 800dfac:	4603      	mov	r3, r0
 800dfae:	b132      	cbz	r2, 800dfbe <strncpy+0x16>
 800dfb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dfb4:	f803 4b01 	strb.w	r4, [r3], #1
 800dfb8:	3a01      	subs	r2, #1
 800dfba:	2c00      	cmp	r4, #0
 800dfbc:	d1f7      	bne.n	800dfae <strncpy+0x6>
 800dfbe:	441a      	add	r2, r3
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d100      	bne.n	800dfc8 <strncpy+0x20>
 800dfc6:	bd10      	pop	{r4, pc}
 800dfc8:	f803 1b01 	strb.w	r1, [r3], #1
 800dfcc:	e7f9      	b.n	800dfc2 <strncpy+0x1a>
	...

0800dfd0 <__assert_func>:
 800dfd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfd2:	4614      	mov	r4, r2
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	4b09      	ldr	r3, [pc, #36]	; (800dffc <__assert_func+0x2c>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4605      	mov	r5, r0
 800dfdc:	68d8      	ldr	r0, [r3, #12]
 800dfde:	b14c      	cbz	r4, 800dff4 <__assert_func+0x24>
 800dfe0:	4b07      	ldr	r3, [pc, #28]	; (800e000 <__assert_func+0x30>)
 800dfe2:	9100      	str	r1, [sp, #0]
 800dfe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfe8:	4906      	ldr	r1, [pc, #24]	; (800e004 <__assert_func+0x34>)
 800dfea:	462b      	mov	r3, r5
 800dfec:	f000 f8e4 	bl	800e1b8 <fiprintf>
 800dff0:	f000 ff6e 	bl	800eed0 <abort>
 800dff4:	4b04      	ldr	r3, [pc, #16]	; (800e008 <__assert_func+0x38>)
 800dff6:	461c      	mov	r4, r3
 800dff8:	e7f3      	b.n	800dfe2 <__assert_func+0x12>
 800dffa:	bf00      	nop
 800dffc:	20000014 	.word	0x20000014
 800e000:	08011e6e 	.word	0x08011e6e
 800e004:	08011e7b 	.word	0x08011e7b
 800e008:	08011ea9 	.word	0x08011ea9

0800e00c <std>:
 800e00c:	2300      	movs	r3, #0
 800e00e:	b510      	push	{r4, lr}
 800e010:	4604      	mov	r4, r0
 800e012:	e9c0 3300 	strd	r3, r3, [r0]
 800e016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e01a:	6083      	str	r3, [r0, #8]
 800e01c:	8181      	strh	r1, [r0, #12]
 800e01e:	6643      	str	r3, [r0, #100]	; 0x64
 800e020:	81c2      	strh	r2, [r0, #14]
 800e022:	6183      	str	r3, [r0, #24]
 800e024:	4619      	mov	r1, r3
 800e026:	2208      	movs	r2, #8
 800e028:	305c      	adds	r0, #92	; 0x5c
 800e02a:	f7ff ff3f 	bl	800deac <memset>
 800e02e:	4b05      	ldr	r3, [pc, #20]	; (800e044 <std+0x38>)
 800e030:	6263      	str	r3, [r4, #36]	; 0x24
 800e032:	4b05      	ldr	r3, [pc, #20]	; (800e048 <std+0x3c>)
 800e034:	62a3      	str	r3, [r4, #40]	; 0x28
 800e036:	4b05      	ldr	r3, [pc, #20]	; (800e04c <std+0x40>)
 800e038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e03a:	4b05      	ldr	r3, [pc, #20]	; (800e050 <std+0x44>)
 800e03c:	6224      	str	r4, [r4, #32]
 800e03e:	6323      	str	r3, [r4, #48]	; 0x30
 800e040:	bd10      	pop	{r4, pc}
 800e042:	bf00      	nop
 800e044:	0800eca5 	.word	0x0800eca5
 800e048:	0800ecc7 	.word	0x0800ecc7
 800e04c:	0800ecff 	.word	0x0800ecff
 800e050:	0800ed23 	.word	0x0800ed23

0800e054 <_cleanup_r>:
 800e054:	4901      	ldr	r1, [pc, #4]	; (800e05c <_cleanup_r+0x8>)
 800e056:	f000 b8c1 	b.w	800e1dc <_fwalk_reent>
 800e05a:	bf00      	nop
 800e05c:	0800f00d 	.word	0x0800f00d

0800e060 <__sfmoreglue>:
 800e060:	b570      	push	{r4, r5, r6, lr}
 800e062:	2268      	movs	r2, #104	; 0x68
 800e064:	1e4d      	subs	r5, r1, #1
 800e066:	4355      	muls	r5, r2
 800e068:	460e      	mov	r6, r1
 800e06a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e06e:	f000 f94b 	bl	800e308 <_malloc_r>
 800e072:	4604      	mov	r4, r0
 800e074:	b140      	cbz	r0, 800e088 <__sfmoreglue+0x28>
 800e076:	2100      	movs	r1, #0
 800e078:	e9c0 1600 	strd	r1, r6, [r0]
 800e07c:	300c      	adds	r0, #12
 800e07e:	60a0      	str	r0, [r4, #8]
 800e080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e084:	f7ff ff12 	bl	800deac <memset>
 800e088:	4620      	mov	r0, r4
 800e08a:	bd70      	pop	{r4, r5, r6, pc}

0800e08c <__sfp_lock_acquire>:
 800e08c:	4801      	ldr	r0, [pc, #4]	; (800e094 <__sfp_lock_acquire+0x8>)
 800e08e:	f000 b8c5 	b.w	800e21c <__retarget_lock_acquire_recursive>
 800e092:	bf00      	nop
 800e094:	20006955 	.word	0x20006955

0800e098 <__sfp_lock_release>:
 800e098:	4801      	ldr	r0, [pc, #4]	; (800e0a0 <__sfp_lock_release+0x8>)
 800e09a:	f000 b8c0 	b.w	800e21e <__retarget_lock_release_recursive>
 800e09e:	bf00      	nop
 800e0a0:	20006955 	.word	0x20006955

0800e0a4 <__sinit_lock_acquire>:
 800e0a4:	4801      	ldr	r0, [pc, #4]	; (800e0ac <__sinit_lock_acquire+0x8>)
 800e0a6:	f000 b8b9 	b.w	800e21c <__retarget_lock_acquire_recursive>
 800e0aa:	bf00      	nop
 800e0ac:	20006956 	.word	0x20006956

0800e0b0 <__sinit_lock_release>:
 800e0b0:	4801      	ldr	r0, [pc, #4]	; (800e0b8 <__sinit_lock_release+0x8>)
 800e0b2:	f000 b8b4 	b.w	800e21e <__retarget_lock_release_recursive>
 800e0b6:	bf00      	nop
 800e0b8:	20006956 	.word	0x20006956

0800e0bc <__sinit>:
 800e0bc:	b510      	push	{r4, lr}
 800e0be:	4604      	mov	r4, r0
 800e0c0:	f7ff fff0 	bl	800e0a4 <__sinit_lock_acquire>
 800e0c4:	69a3      	ldr	r3, [r4, #24]
 800e0c6:	b11b      	cbz	r3, 800e0d0 <__sinit+0x14>
 800e0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0cc:	f7ff bff0 	b.w	800e0b0 <__sinit_lock_release>
 800e0d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0d4:	6523      	str	r3, [r4, #80]	; 0x50
 800e0d6:	4b13      	ldr	r3, [pc, #76]	; (800e124 <__sinit+0x68>)
 800e0d8:	4a13      	ldr	r2, [pc, #76]	; (800e128 <__sinit+0x6c>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0de:	42a3      	cmp	r3, r4
 800e0e0:	bf04      	itt	eq
 800e0e2:	2301      	moveq	r3, #1
 800e0e4:	61a3      	streq	r3, [r4, #24]
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 f820 	bl	800e12c <__sfp>
 800e0ec:	6060      	str	r0, [r4, #4]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 f81c 	bl	800e12c <__sfp>
 800e0f4:	60a0      	str	r0, [r4, #8]
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 f818 	bl	800e12c <__sfp>
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	60e0      	str	r0, [r4, #12]
 800e100:	2104      	movs	r1, #4
 800e102:	6860      	ldr	r0, [r4, #4]
 800e104:	f7ff ff82 	bl	800e00c <std>
 800e108:	68a0      	ldr	r0, [r4, #8]
 800e10a:	2201      	movs	r2, #1
 800e10c:	2109      	movs	r1, #9
 800e10e:	f7ff ff7d 	bl	800e00c <std>
 800e112:	68e0      	ldr	r0, [r4, #12]
 800e114:	2202      	movs	r2, #2
 800e116:	2112      	movs	r1, #18
 800e118:	f7ff ff78 	bl	800e00c <std>
 800e11c:	2301      	movs	r3, #1
 800e11e:	61a3      	str	r3, [r4, #24]
 800e120:	e7d2      	b.n	800e0c8 <__sinit+0xc>
 800e122:	bf00      	nop
 800e124:	08011df8 	.word	0x08011df8
 800e128:	0800e055 	.word	0x0800e055

0800e12c <__sfp>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	4607      	mov	r7, r0
 800e130:	f7ff ffac 	bl	800e08c <__sfp_lock_acquire>
 800e134:	4b1e      	ldr	r3, [pc, #120]	; (800e1b0 <__sfp+0x84>)
 800e136:	681e      	ldr	r6, [r3, #0]
 800e138:	69b3      	ldr	r3, [r6, #24]
 800e13a:	b913      	cbnz	r3, 800e142 <__sfp+0x16>
 800e13c:	4630      	mov	r0, r6
 800e13e:	f7ff ffbd 	bl	800e0bc <__sinit>
 800e142:	3648      	adds	r6, #72	; 0x48
 800e144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e148:	3b01      	subs	r3, #1
 800e14a:	d503      	bpl.n	800e154 <__sfp+0x28>
 800e14c:	6833      	ldr	r3, [r6, #0]
 800e14e:	b30b      	cbz	r3, 800e194 <__sfp+0x68>
 800e150:	6836      	ldr	r6, [r6, #0]
 800e152:	e7f7      	b.n	800e144 <__sfp+0x18>
 800e154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e158:	b9d5      	cbnz	r5, 800e190 <__sfp+0x64>
 800e15a:	4b16      	ldr	r3, [pc, #88]	; (800e1b4 <__sfp+0x88>)
 800e15c:	60e3      	str	r3, [r4, #12]
 800e15e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e162:	6665      	str	r5, [r4, #100]	; 0x64
 800e164:	f000 f859 	bl	800e21a <__retarget_lock_init_recursive>
 800e168:	f7ff ff96 	bl	800e098 <__sfp_lock_release>
 800e16c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e174:	6025      	str	r5, [r4, #0]
 800e176:	61a5      	str	r5, [r4, #24]
 800e178:	2208      	movs	r2, #8
 800e17a:	4629      	mov	r1, r5
 800e17c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e180:	f7ff fe94 	bl	800deac <memset>
 800e184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e18c:	4620      	mov	r0, r4
 800e18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e190:	3468      	adds	r4, #104	; 0x68
 800e192:	e7d9      	b.n	800e148 <__sfp+0x1c>
 800e194:	2104      	movs	r1, #4
 800e196:	4638      	mov	r0, r7
 800e198:	f7ff ff62 	bl	800e060 <__sfmoreglue>
 800e19c:	4604      	mov	r4, r0
 800e19e:	6030      	str	r0, [r6, #0]
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d1d5      	bne.n	800e150 <__sfp+0x24>
 800e1a4:	f7ff ff78 	bl	800e098 <__sfp_lock_release>
 800e1a8:	230c      	movs	r3, #12
 800e1aa:	603b      	str	r3, [r7, #0]
 800e1ac:	e7ee      	b.n	800e18c <__sfp+0x60>
 800e1ae:	bf00      	nop
 800e1b0:	08011df8 	.word	0x08011df8
 800e1b4:	ffff0001 	.word	0xffff0001

0800e1b8 <fiprintf>:
 800e1b8:	b40e      	push	{r1, r2, r3}
 800e1ba:	b503      	push	{r0, r1, lr}
 800e1bc:	4601      	mov	r1, r0
 800e1be:	ab03      	add	r3, sp, #12
 800e1c0:	4805      	ldr	r0, [pc, #20]	; (800e1d8 <fiprintf+0x20>)
 800e1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1c6:	6800      	ldr	r0, [r0, #0]
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	f000 fa97 	bl	800e6fc <_vfiprintf_r>
 800e1ce:	b002      	add	sp, #8
 800e1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1d4:	b003      	add	sp, #12
 800e1d6:	4770      	bx	lr
 800e1d8:	20000014 	.word	0x20000014

0800e1dc <_fwalk_reent>:
 800e1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	4688      	mov	r8, r1
 800e1e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1e8:	2700      	movs	r7, #0
 800e1ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1ee:	f1b9 0901 	subs.w	r9, r9, #1
 800e1f2:	d505      	bpl.n	800e200 <_fwalk_reent+0x24>
 800e1f4:	6824      	ldr	r4, [r4, #0]
 800e1f6:	2c00      	cmp	r4, #0
 800e1f8:	d1f7      	bne.n	800e1ea <_fwalk_reent+0xe>
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e200:	89ab      	ldrh	r3, [r5, #12]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d907      	bls.n	800e216 <_fwalk_reent+0x3a>
 800e206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e20a:	3301      	adds	r3, #1
 800e20c:	d003      	beq.n	800e216 <_fwalk_reent+0x3a>
 800e20e:	4629      	mov	r1, r5
 800e210:	4630      	mov	r0, r6
 800e212:	47c0      	blx	r8
 800e214:	4307      	orrs	r7, r0
 800e216:	3568      	adds	r5, #104	; 0x68
 800e218:	e7e9      	b.n	800e1ee <_fwalk_reent+0x12>

0800e21a <__retarget_lock_init_recursive>:
 800e21a:	4770      	bx	lr

0800e21c <__retarget_lock_acquire_recursive>:
 800e21c:	4770      	bx	lr

0800e21e <__retarget_lock_release_recursive>:
 800e21e:	4770      	bx	lr

0800e220 <malloc>:
 800e220:	4b02      	ldr	r3, [pc, #8]	; (800e22c <malloc+0xc>)
 800e222:	4601      	mov	r1, r0
 800e224:	6818      	ldr	r0, [r3, #0]
 800e226:	f000 b86f 	b.w	800e308 <_malloc_r>
 800e22a:	bf00      	nop
 800e22c:	20000014 	.word	0x20000014

0800e230 <_free_r>:
 800e230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e232:	2900      	cmp	r1, #0
 800e234:	d044      	beq.n	800e2c0 <_free_r+0x90>
 800e236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e23a:	9001      	str	r0, [sp, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f1a1 0404 	sub.w	r4, r1, #4
 800e242:	bfb8      	it	lt
 800e244:	18e4      	addlt	r4, r4, r3
 800e246:	f000 ff95 	bl	800f174 <__malloc_lock>
 800e24a:	4a1e      	ldr	r2, [pc, #120]	; (800e2c4 <_free_r+0x94>)
 800e24c:	9801      	ldr	r0, [sp, #4]
 800e24e:	6813      	ldr	r3, [r2, #0]
 800e250:	b933      	cbnz	r3, 800e260 <_free_r+0x30>
 800e252:	6063      	str	r3, [r4, #4]
 800e254:	6014      	str	r4, [r2, #0]
 800e256:	b003      	add	sp, #12
 800e258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e25c:	f000 bf90 	b.w	800f180 <__malloc_unlock>
 800e260:	42a3      	cmp	r3, r4
 800e262:	d908      	bls.n	800e276 <_free_r+0x46>
 800e264:	6825      	ldr	r5, [r4, #0]
 800e266:	1961      	adds	r1, r4, r5
 800e268:	428b      	cmp	r3, r1
 800e26a:	bf01      	itttt	eq
 800e26c:	6819      	ldreq	r1, [r3, #0]
 800e26e:	685b      	ldreq	r3, [r3, #4]
 800e270:	1949      	addeq	r1, r1, r5
 800e272:	6021      	streq	r1, [r4, #0]
 800e274:	e7ed      	b.n	800e252 <_free_r+0x22>
 800e276:	461a      	mov	r2, r3
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	b10b      	cbz	r3, 800e280 <_free_r+0x50>
 800e27c:	42a3      	cmp	r3, r4
 800e27e:	d9fa      	bls.n	800e276 <_free_r+0x46>
 800e280:	6811      	ldr	r1, [r2, #0]
 800e282:	1855      	adds	r5, r2, r1
 800e284:	42a5      	cmp	r5, r4
 800e286:	d10b      	bne.n	800e2a0 <_free_r+0x70>
 800e288:	6824      	ldr	r4, [r4, #0]
 800e28a:	4421      	add	r1, r4
 800e28c:	1854      	adds	r4, r2, r1
 800e28e:	42a3      	cmp	r3, r4
 800e290:	6011      	str	r1, [r2, #0]
 800e292:	d1e0      	bne.n	800e256 <_free_r+0x26>
 800e294:	681c      	ldr	r4, [r3, #0]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	6053      	str	r3, [r2, #4]
 800e29a:	4421      	add	r1, r4
 800e29c:	6011      	str	r1, [r2, #0]
 800e29e:	e7da      	b.n	800e256 <_free_r+0x26>
 800e2a0:	d902      	bls.n	800e2a8 <_free_r+0x78>
 800e2a2:	230c      	movs	r3, #12
 800e2a4:	6003      	str	r3, [r0, #0]
 800e2a6:	e7d6      	b.n	800e256 <_free_r+0x26>
 800e2a8:	6825      	ldr	r5, [r4, #0]
 800e2aa:	1961      	adds	r1, r4, r5
 800e2ac:	428b      	cmp	r3, r1
 800e2ae:	bf04      	itt	eq
 800e2b0:	6819      	ldreq	r1, [r3, #0]
 800e2b2:	685b      	ldreq	r3, [r3, #4]
 800e2b4:	6063      	str	r3, [r4, #4]
 800e2b6:	bf04      	itt	eq
 800e2b8:	1949      	addeq	r1, r1, r5
 800e2ba:	6021      	streq	r1, [r4, #0]
 800e2bc:	6054      	str	r4, [r2, #4]
 800e2be:	e7ca      	b.n	800e256 <_free_r+0x26>
 800e2c0:	b003      	add	sp, #12
 800e2c2:	bd30      	pop	{r4, r5, pc}
 800e2c4:	20006958 	.word	0x20006958

0800e2c8 <sbrk_aligned>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	4e0e      	ldr	r6, [pc, #56]	; (800e304 <sbrk_aligned+0x3c>)
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	6831      	ldr	r1, [r6, #0]
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	b911      	cbnz	r1, 800e2da <sbrk_aligned+0x12>
 800e2d4:	f000 fcd6 	bl	800ec84 <_sbrk_r>
 800e2d8:	6030      	str	r0, [r6, #0]
 800e2da:	4621      	mov	r1, r4
 800e2dc:	4628      	mov	r0, r5
 800e2de:	f000 fcd1 	bl	800ec84 <_sbrk_r>
 800e2e2:	1c43      	adds	r3, r0, #1
 800e2e4:	d00a      	beq.n	800e2fc <sbrk_aligned+0x34>
 800e2e6:	1cc4      	adds	r4, r0, #3
 800e2e8:	f024 0403 	bic.w	r4, r4, #3
 800e2ec:	42a0      	cmp	r0, r4
 800e2ee:	d007      	beq.n	800e300 <sbrk_aligned+0x38>
 800e2f0:	1a21      	subs	r1, r4, r0
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	f000 fcc6 	bl	800ec84 <_sbrk_r>
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	d101      	bne.n	800e300 <sbrk_aligned+0x38>
 800e2fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e300:	4620      	mov	r0, r4
 800e302:	bd70      	pop	{r4, r5, r6, pc}
 800e304:	2000695c 	.word	0x2000695c

0800e308 <_malloc_r>:
 800e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30c:	1ccd      	adds	r5, r1, #3
 800e30e:	f025 0503 	bic.w	r5, r5, #3
 800e312:	3508      	adds	r5, #8
 800e314:	2d0c      	cmp	r5, #12
 800e316:	bf38      	it	cc
 800e318:	250c      	movcc	r5, #12
 800e31a:	2d00      	cmp	r5, #0
 800e31c:	4607      	mov	r7, r0
 800e31e:	db01      	blt.n	800e324 <_malloc_r+0x1c>
 800e320:	42a9      	cmp	r1, r5
 800e322:	d905      	bls.n	800e330 <_malloc_r+0x28>
 800e324:	230c      	movs	r3, #12
 800e326:	603b      	str	r3, [r7, #0]
 800e328:	2600      	movs	r6, #0
 800e32a:	4630      	mov	r0, r6
 800e32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e330:	4e2e      	ldr	r6, [pc, #184]	; (800e3ec <_malloc_r+0xe4>)
 800e332:	f000 ff1f 	bl	800f174 <__malloc_lock>
 800e336:	6833      	ldr	r3, [r6, #0]
 800e338:	461c      	mov	r4, r3
 800e33a:	bb34      	cbnz	r4, 800e38a <_malloc_r+0x82>
 800e33c:	4629      	mov	r1, r5
 800e33e:	4638      	mov	r0, r7
 800e340:	f7ff ffc2 	bl	800e2c8 <sbrk_aligned>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	4604      	mov	r4, r0
 800e348:	d14d      	bne.n	800e3e6 <_malloc_r+0xde>
 800e34a:	6834      	ldr	r4, [r6, #0]
 800e34c:	4626      	mov	r6, r4
 800e34e:	2e00      	cmp	r6, #0
 800e350:	d140      	bne.n	800e3d4 <_malloc_r+0xcc>
 800e352:	6823      	ldr	r3, [r4, #0]
 800e354:	4631      	mov	r1, r6
 800e356:	4638      	mov	r0, r7
 800e358:	eb04 0803 	add.w	r8, r4, r3
 800e35c:	f000 fc92 	bl	800ec84 <_sbrk_r>
 800e360:	4580      	cmp	r8, r0
 800e362:	d13a      	bne.n	800e3da <_malloc_r+0xd2>
 800e364:	6821      	ldr	r1, [r4, #0]
 800e366:	3503      	adds	r5, #3
 800e368:	1a6d      	subs	r5, r5, r1
 800e36a:	f025 0503 	bic.w	r5, r5, #3
 800e36e:	3508      	adds	r5, #8
 800e370:	2d0c      	cmp	r5, #12
 800e372:	bf38      	it	cc
 800e374:	250c      	movcc	r5, #12
 800e376:	4629      	mov	r1, r5
 800e378:	4638      	mov	r0, r7
 800e37a:	f7ff ffa5 	bl	800e2c8 <sbrk_aligned>
 800e37e:	3001      	adds	r0, #1
 800e380:	d02b      	beq.n	800e3da <_malloc_r+0xd2>
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	442b      	add	r3, r5
 800e386:	6023      	str	r3, [r4, #0]
 800e388:	e00e      	b.n	800e3a8 <_malloc_r+0xa0>
 800e38a:	6822      	ldr	r2, [r4, #0]
 800e38c:	1b52      	subs	r2, r2, r5
 800e38e:	d41e      	bmi.n	800e3ce <_malloc_r+0xc6>
 800e390:	2a0b      	cmp	r2, #11
 800e392:	d916      	bls.n	800e3c2 <_malloc_r+0xba>
 800e394:	1961      	adds	r1, r4, r5
 800e396:	42a3      	cmp	r3, r4
 800e398:	6025      	str	r5, [r4, #0]
 800e39a:	bf18      	it	ne
 800e39c:	6059      	strne	r1, [r3, #4]
 800e39e:	6863      	ldr	r3, [r4, #4]
 800e3a0:	bf08      	it	eq
 800e3a2:	6031      	streq	r1, [r6, #0]
 800e3a4:	5162      	str	r2, [r4, r5]
 800e3a6:	604b      	str	r3, [r1, #4]
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f104 060b 	add.w	r6, r4, #11
 800e3ae:	f000 fee7 	bl	800f180 <__malloc_unlock>
 800e3b2:	f026 0607 	bic.w	r6, r6, #7
 800e3b6:	1d23      	adds	r3, r4, #4
 800e3b8:	1af2      	subs	r2, r6, r3
 800e3ba:	d0b6      	beq.n	800e32a <_malloc_r+0x22>
 800e3bc:	1b9b      	subs	r3, r3, r6
 800e3be:	50a3      	str	r3, [r4, r2]
 800e3c0:	e7b3      	b.n	800e32a <_malloc_r+0x22>
 800e3c2:	6862      	ldr	r2, [r4, #4]
 800e3c4:	42a3      	cmp	r3, r4
 800e3c6:	bf0c      	ite	eq
 800e3c8:	6032      	streq	r2, [r6, #0]
 800e3ca:	605a      	strne	r2, [r3, #4]
 800e3cc:	e7ec      	b.n	800e3a8 <_malloc_r+0xa0>
 800e3ce:	4623      	mov	r3, r4
 800e3d0:	6864      	ldr	r4, [r4, #4]
 800e3d2:	e7b2      	b.n	800e33a <_malloc_r+0x32>
 800e3d4:	4634      	mov	r4, r6
 800e3d6:	6876      	ldr	r6, [r6, #4]
 800e3d8:	e7b9      	b.n	800e34e <_malloc_r+0x46>
 800e3da:	230c      	movs	r3, #12
 800e3dc:	603b      	str	r3, [r7, #0]
 800e3de:	4638      	mov	r0, r7
 800e3e0:	f000 fece 	bl	800f180 <__malloc_unlock>
 800e3e4:	e7a1      	b.n	800e32a <_malloc_r+0x22>
 800e3e6:	6025      	str	r5, [r4, #0]
 800e3e8:	e7de      	b.n	800e3a8 <_malloc_r+0xa0>
 800e3ea:	bf00      	nop
 800e3ec:	20006958 	.word	0x20006958

0800e3f0 <__ssputs_r>:
 800e3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f4:	688e      	ldr	r6, [r1, #8]
 800e3f6:	429e      	cmp	r6, r3
 800e3f8:	4682      	mov	sl, r0
 800e3fa:	460c      	mov	r4, r1
 800e3fc:	4690      	mov	r8, r2
 800e3fe:	461f      	mov	r7, r3
 800e400:	d838      	bhi.n	800e474 <__ssputs_r+0x84>
 800e402:	898a      	ldrh	r2, [r1, #12]
 800e404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e408:	d032      	beq.n	800e470 <__ssputs_r+0x80>
 800e40a:	6825      	ldr	r5, [r4, #0]
 800e40c:	6909      	ldr	r1, [r1, #16]
 800e40e:	eba5 0901 	sub.w	r9, r5, r1
 800e412:	6965      	ldr	r5, [r4, #20]
 800e414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e41c:	3301      	adds	r3, #1
 800e41e:	444b      	add	r3, r9
 800e420:	106d      	asrs	r5, r5, #1
 800e422:	429d      	cmp	r5, r3
 800e424:	bf38      	it	cc
 800e426:	461d      	movcc	r5, r3
 800e428:	0553      	lsls	r3, r2, #21
 800e42a:	d531      	bpl.n	800e490 <__ssputs_r+0xa0>
 800e42c:	4629      	mov	r1, r5
 800e42e:	f7ff ff6b 	bl	800e308 <_malloc_r>
 800e432:	4606      	mov	r6, r0
 800e434:	b950      	cbnz	r0, 800e44c <__ssputs_r+0x5c>
 800e436:	230c      	movs	r3, #12
 800e438:	f8ca 3000 	str.w	r3, [sl]
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e442:	81a3      	strh	r3, [r4, #12]
 800e444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44c:	6921      	ldr	r1, [r4, #16]
 800e44e:	464a      	mov	r2, r9
 800e450:	f7ff fd04 	bl	800de5c <memcpy>
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e45a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e45e:	81a3      	strh	r3, [r4, #12]
 800e460:	6126      	str	r6, [r4, #16]
 800e462:	6165      	str	r5, [r4, #20]
 800e464:	444e      	add	r6, r9
 800e466:	eba5 0509 	sub.w	r5, r5, r9
 800e46a:	6026      	str	r6, [r4, #0]
 800e46c:	60a5      	str	r5, [r4, #8]
 800e46e:	463e      	mov	r6, r7
 800e470:	42be      	cmp	r6, r7
 800e472:	d900      	bls.n	800e476 <__ssputs_r+0x86>
 800e474:	463e      	mov	r6, r7
 800e476:	6820      	ldr	r0, [r4, #0]
 800e478:	4632      	mov	r2, r6
 800e47a:	4641      	mov	r1, r8
 800e47c:	f7ff fcfc 	bl	800de78 <memmove>
 800e480:	68a3      	ldr	r3, [r4, #8]
 800e482:	1b9b      	subs	r3, r3, r6
 800e484:	60a3      	str	r3, [r4, #8]
 800e486:	6823      	ldr	r3, [r4, #0]
 800e488:	4433      	add	r3, r6
 800e48a:	6023      	str	r3, [r4, #0]
 800e48c:	2000      	movs	r0, #0
 800e48e:	e7db      	b.n	800e448 <__ssputs_r+0x58>
 800e490:	462a      	mov	r2, r5
 800e492:	f000 fe7b 	bl	800f18c <_realloc_r>
 800e496:	4606      	mov	r6, r0
 800e498:	2800      	cmp	r0, #0
 800e49a:	d1e1      	bne.n	800e460 <__ssputs_r+0x70>
 800e49c:	6921      	ldr	r1, [r4, #16]
 800e49e:	4650      	mov	r0, sl
 800e4a0:	f7ff fec6 	bl	800e230 <_free_r>
 800e4a4:	e7c7      	b.n	800e436 <__ssputs_r+0x46>
	...

0800e4a8 <_svfiprintf_r>:
 800e4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	4698      	mov	r8, r3
 800e4ae:	898b      	ldrh	r3, [r1, #12]
 800e4b0:	061b      	lsls	r3, r3, #24
 800e4b2:	b09d      	sub	sp, #116	; 0x74
 800e4b4:	4607      	mov	r7, r0
 800e4b6:	460d      	mov	r5, r1
 800e4b8:	4614      	mov	r4, r2
 800e4ba:	d50e      	bpl.n	800e4da <_svfiprintf_r+0x32>
 800e4bc:	690b      	ldr	r3, [r1, #16]
 800e4be:	b963      	cbnz	r3, 800e4da <_svfiprintf_r+0x32>
 800e4c0:	2140      	movs	r1, #64	; 0x40
 800e4c2:	f7ff ff21 	bl	800e308 <_malloc_r>
 800e4c6:	6028      	str	r0, [r5, #0]
 800e4c8:	6128      	str	r0, [r5, #16]
 800e4ca:	b920      	cbnz	r0, 800e4d6 <_svfiprintf_r+0x2e>
 800e4cc:	230c      	movs	r3, #12
 800e4ce:	603b      	str	r3, [r7, #0]
 800e4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4d4:	e0d1      	b.n	800e67a <_svfiprintf_r+0x1d2>
 800e4d6:	2340      	movs	r3, #64	; 0x40
 800e4d8:	616b      	str	r3, [r5, #20]
 800e4da:	2300      	movs	r3, #0
 800e4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4de:	2320      	movs	r3, #32
 800e4e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4e8:	2330      	movs	r3, #48	; 0x30
 800e4ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e694 <_svfiprintf_r+0x1ec>
 800e4ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4f2:	f04f 0901 	mov.w	r9, #1
 800e4f6:	4623      	mov	r3, r4
 800e4f8:	469a      	mov	sl, r3
 800e4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4fe:	b10a      	cbz	r2, 800e504 <_svfiprintf_r+0x5c>
 800e500:	2a25      	cmp	r2, #37	; 0x25
 800e502:	d1f9      	bne.n	800e4f8 <_svfiprintf_r+0x50>
 800e504:	ebba 0b04 	subs.w	fp, sl, r4
 800e508:	d00b      	beq.n	800e522 <_svfiprintf_r+0x7a>
 800e50a:	465b      	mov	r3, fp
 800e50c:	4622      	mov	r2, r4
 800e50e:	4629      	mov	r1, r5
 800e510:	4638      	mov	r0, r7
 800e512:	f7ff ff6d 	bl	800e3f0 <__ssputs_r>
 800e516:	3001      	adds	r0, #1
 800e518:	f000 80aa 	beq.w	800e670 <_svfiprintf_r+0x1c8>
 800e51c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e51e:	445a      	add	r2, fp
 800e520:	9209      	str	r2, [sp, #36]	; 0x24
 800e522:	f89a 3000 	ldrb.w	r3, [sl]
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 80a2 	beq.w	800e670 <_svfiprintf_r+0x1c8>
 800e52c:	2300      	movs	r3, #0
 800e52e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e536:	f10a 0a01 	add.w	sl, sl, #1
 800e53a:	9304      	str	r3, [sp, #16]
 800e53c:	9307      	str	r3, [sp, #28]
 800e53e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e542:	931a      	str	r3, [sp, #104]	; 0x68
 800e544:	4654      	mov	r4, sl
 800e546:	2205      	movs	r2, #5
 800e548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e54c:	4851      	ldr	r0, [pc, #324]	; (800e694 <_svfiprintf_r+0x1ec>)
 800e54e:	f7f1 fe7f 	bl	8000250 <memchr>
 800e552:	9a04      	ldr	r2, [sp, #16]
 800e554:	b9d8      	cbnz	r0, 800e58e <_svfiprintf_r+0xe6>
 800e556:	06d0      	lsls	r0, r2, #27
 800e558:	bf44      	itt	mi
 800e55a:	2320      	movmi	r3, #32
 800e55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e560:	0711      	lsls	r1, r2, #28
 800e562:	bf44      	itt	mi
 800e564:	232b      	movmi	r3, #43	; 0x2b
 800e566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e56a:	f89a 3000 	ldrb.w	r3, [sl]
 800e56e:	2b2a      	cmp	r3, #42	; 0x2a
 800e570:	d015      	beq.n	800e59e <_svfiprintf_r+0xf6>
 800e572:	9a07      	ldr	r2, [sp, #28]
 800e574:	4654      	mov	r4, sl
 800e576:	2000      	movs	r0, #0
 800e578:	f04f 0c0a 	mov.w	ip, #10
 800e57c:	4621      	mov	r1, r4
 800e57e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e582:	3b30      	subs	r3, #48	; 0x30
 800e584:	2b09      	cmp	r3, #9
 800e586:	d94e      	bls.n	800e626 <_svfiprintf_r+0x17e>
 800e588:	b1b0      	cbz	r0, 800e5b8 <_svfiprintf_r+0x110>
 800e58a:	9207      	str	r2, [sp, #28]
 800e58c:	e014      	b.n	800e5b8 <_svfiprintf_r+0x110>
 800e58e:	eba0 0308 	sub.w	r3, r0, r8
 800e592:	fa09 f303 	lsl.w	r3, r9, r3
 800e596:	4313      	orrs	r3, r2
 800e598:	9304      	str	r3, [sp, #16]
 800e59a:	46a2      	mov	sl, r4
 800e59c:	e7d2      	b.n	800e544 <_svfiprintf_r+0x9c>
 800e59e:	9b03      	ldr	r3, [sp, #12]
 800e5a0:	1d19      	adds	r1, r3, #4
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	9103      	str	r1, [sp, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	bfbb      	ittet	lt
 800e5aa:	425b      	neglt	r3, r3
 800e5ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e5b0:	9307      	strge	r3, [sp, #28]
 800e5b2:	9307      	strlt	r3, [sp, #28]
 800e5b4:	bfb8      	it	lt
 800e5b6:	9204      	strlt	r2, [sp, #16]
 800e5b8:	7823      	ldrb	r3, [r4, #0]
 800e5ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e5bc:	d10c      	bne.n	800e5d8 <_svfiprintf_r+0x130>
 800e5be:	7863      	ldrb	r3, [r4, #1]
 800e5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e5c2:	d135      	bne.n	800e630 <_svfiprintf_r+0x188>
 800e5c4:	9b03      	ldr	r3, [sp, #12]
 800e5c6:	1d1a      	adds	r2, r3, #4
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	9203      	str	r2, [sp, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	bfb8      	it	lt
 800e5d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e5d4:	3402      	adds	r4, #2
 800e5d6:	9305      	str	r3, [sp, #20]
 800e5d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e6a4 <_svfiprintf_r+0x1fc>
 800e5dc:	7821      	ldrb	r1, [r4, #0]
 800e5de:	2203      	movs	r2, #3
 800e5e0:	4650      	mov	r0, sl
 800e5e2:	f7f1 fe35 	bl	8000250 <memchr>
 800e5e6:	b140      	cbz	r0, 800e5fa <_svfiprintf_r+0x152>
 800e5e8:	2340      	movs	r3, #64	; 0x40
 800e5ea:	eba0 000a 	sub.w	r0, r0, sl
 800e5ee:	fa03 f000 	lsl.w	r0, r3, r0
 800e5f2:	9b04      	ldr	r3, [sp, #16]
 800e5f4:	4303      	orrs	r3, r0
 800e5f6:	3401      	adds	r4, #1
 800e5f8:	9304      	str	r3, [sp, #16]
 800e5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5fe:	4826      	ldr	r0, [pc, #152]	; (800e698 <_svfiprintf_r+0x1f0>)
 800e600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e604:	2206      	movs	r2, #6
 800e606:	f7f1 fe23 	bl	8000250 <memchr>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d038      	beq.n	800e680 <_svfiprintf_r+0x1d8>
 800e60e:	4b23      	ldr	r3, [pc, #140]	; (800e69c <_svfiprintf_r+0x1f4>)
 800e610:	bb1b      	cbnz	r3, 800e65a <_svfiprintf_r+0x1b2>
 800e612:	9b03      	ldr	r3, [sp, #12]
 800e614:	3307      	adds	r3, #7
 800e616:	f023 0307 	bic.w	r3, r3, #7
 800e61a:	3308      	adds	r3, #8
 800e61c:	9303      	str	r3, [sp, #12]
 800e61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e620:	4433      	add	r3, r6
 800e622:	9309      	str	r3, [sp, #36]	; 0x24
 800e624:	e767      	b.n	800e4f6 <_svfiprintf_r+0x4e>
 800e626:	fb0c 3202 	mla	r2, ip, r2, r3
 800e62a:	460c      	mov	r4, r1
 800e62c:	2001      	movs	r0, #1
 800e62e:	e7a5      	b.n	800e57c <_svfiprintf_r+0xd4>
 800e630:	2300      	movs	r3, #0
 800e632:	3401      	adds	r4, #1
 800e634:	9305      	str	r3, [sp, #20]
 800e636:	4619      	mov	r1, r3
 800e638:	f04f 0c0a 	mov.w	ip, #10
 800e63c:	4620      	mov	r0, r4
 800e63e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e642:	3a30      	subs	r2, #48	; 0x30
 800e644:	2a09      	cmp	r2, #9
 800e646:	d903      	bls.n	800e650 <_svfiprintf_r+0x1a8>
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d0c5      	beq.n	800e5d8 <_svfiprintf_r+0x130>
 800e64c:	9105      	str	r1, [sp, #20]
 800e64e:	e7c3      	b.n	800e5d8 <_svfiprintf_r+0x130>
 800e650:	fb0c 2101 	mla	r1, ip, r1, r2
 800e654:	4604      	mov	r4, r0
 800e656:	2301      	movs	r3, #1
 800e658:	e7f0      	b.n	800e63c <_svfiprintf_r+0x194>
 800e65a:	ab03      	add	r3, sp, #12
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	462a      	mov	r2, r5
 800e660:	4b0f      	ldr	r3, [pc, #60]	; (800e6a0 <_svfiprintf_r+0x1f8>)
 800e662:	a904      	add	r1, sp, #16
 800e664:	4638      	mov	r0, r7
 800e666:	f3af 8000 	nop.w
 800e66a:	1c42      	adds	r2, r0, #1
 800e66c:	4606      	mov	r6, r0
 800e66e:	d1d6      	bne.n	800e61e <_svfiprintf_r+0x176>
 800e670:	89ab      	ldrh	r3, [r5, #12]
 800e672:	065b      	lsls	r3, r3, #25
 800e674:	f53f af2c 	bmi.w	800e4d0 <_svfiprintf_r+0x28>
 800e678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e67a:	b01d      	add	sp, #116	; 0x74
 800e67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e680:	ab03      	add	r3, sp, #12
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	462a      	mov	r2, r5
 800e686:	4b06      	ldr	r3, [pc, #24]	; (800e6a0 <_svfiprintf_r+0x1f8>)
 800e688:	a904      	add	r1, sp, #16
 800e68a:	4638      	mov	r0, r7
 800e68c:	f000 f9d4 	bl	800ea38 <_printf_i>
 800e690:	e7eb      	b.n	800e66a <_svfiprintf_r+0x1c2>
 800e692:	bf00      	nop
 800e694:	08011f0c 	.word	0x08011f0c
 800e698:	08011f16 	.word	0x08011f16
 800e69c:	00000000 	.word	0x00000000
 800e6a0:	0800e3f1 	.word	0x0800e3f1
 800e6a4:	08011f12 	.word	0x08011f12

0800e6a8 <__sfputc_r>:
 800e6a8:	6893      	ldr	r3, [r2, #8]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	b410      	push	{r4}
 800e6b0:	6093      	str	r3, [r2, #8]
 800e6b2:	da08      	bge.n	800e6c6 <__sfputc_r+0x1e>
 800e6b4:	6994      	ldr	r4, [r2, #24]
 800e6b6:	42a3      	cmp	r3, r4
 800e6b8:	db01      	blt.n	800e6be <__sfputc_r+0x16>
 800e6ba:	290a      	cmp	r1, #10
 800e6bc:	d103      	bne.n	800e6c6 <__sfputc_r+0x1e>
 800e6be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6c2:	f000 bb33 	b.w	800ed2c <__swbuf_r>
 800e6c6:	6813      	ldr	r3, [r2, #0]
 800e6c8:	1c58      	adds	r0, r3, #1
 800e6ca:	6010      	str	r0, [r2, #0]
 800e6cc:	7019      	strb	r1, [r3, #0]
 800e6ce:	4608      	mov	r0, r1
 800e6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <__sfputs_r>:
 800e6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d8:	4606      	mov	r6, r0
 800e6da:	460f      	mov	r7, r1
 800e6dc:	4614      	mov	r4, r2
 800e6de:	18d5      	adds	r5, r2, r3
 800e6e0:	42ac      	cmp	r4, r5
 800e6e2:	d101      	bne.n	800e6e8 <__sfputs_r+0x12>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	e007      	b.n	800e6f8 <__sfputs_r+0x22>
 800e6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ec:	463a      	mov	r2, r7
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f7ff ffda 	bl	800e6a8 <__sfputc_r>
 800e6f4:	1c43      	adds	r3, r0, #1
 800e6f6:	d1f3      	bne.n	800e6e0 <__sfputs_r+0xa>
 800e6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6fc <_vfiprintf_r>:
 800e6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	460d      	mov	r5, r1
 800e702:	b09d      	sub	sp, #116	; 0x74
 800e704:	4614      	mov	r4, r2
 800e706:	4698      	mov	r8, r3
 800e708:	4606      	mov	r6, r0
 800e70a:	b118      	cbz	r0, 800e714 <_vfiprintf_r+0x18>
 800e70c:	6983      	ldr	r3, [r0, #24]
 800e70e:	b90b      	cbnz	r3, 800e714 <_vfiprintf_r+0x18>
 800e710:	f7ff fcd4 	bl	800e0bc <__sinit>
 800e714:	4b89      	ldr	r3, [pc, #548]	; (800e93c <_vfiprintf_r+0x240>)
 800e716:	429d      	cmp	r5, r3
 800e718:	d11b      	bne.n	800e752 <_vfiprintf_r+0x56>
 800e71a:	6875      	ldr	r5, [r6, #4]
 800e71c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e71e:	07d9      	lsls	r1, r3, #31
 800e720:	d405      	bmi.n	800e72e <_vfiprintf_r+0x32>
 800e722:	89ab      	ldrh	r3, [r5, #12]
 800e724:	059a      	lsls	r2, r3, #22
 800e726:	d402      	bmi.n	800e72e <_vfiprintf_r+0x32>
 800e728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e72a:	f7ff fd77 	bl	800e21c <__retarget_lock_acquire_recursive>
 800e72e:	89ab      	ldrh	r3, [r5, #12]
 800e730:	071b      	lsls	r3, r3, #28
 800e732:	d501      	bpl.n	800e738 <_vfiprintf_r+0x3c>
 800e734:	692b      	ldr	r3, [r5, #16]
 800e736:	b9eb      	cbnz	r3, 800e774 <_vfiprintf_r+0x78>
 800e738:	4629      	mov	r1, r5
 800e73a:	4630      	mov	r0, r6
 800e73c:	f000 fb5a 	bl	800edf4 <__swsetup_r>
 800e740:	b1c0      	cbz	r0, 800e774 <_vfiprintf_r+0x78>
 800e742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e744:	07dc      	lsls	r4, r3, #31
 800e746:	d50e      	bpl.n	800e766 <_vfiprintf_r+0x6a>
 800e748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e74c:	b01d      	add	sp, #116	; 0x74
 800e74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e752:	4b7b      	ldr	r3, [pc, #492]	; (800e940 <_vfiprintf_r+0x244>)
 800e754:	429d      	cmp	r5, r3
 800e756:	d101      	bne.n	800e75c <_vfiprintf_r+0x60>
 800e758:	68b5      	ldr	r5, [r6, #8]
 800e75a:	e7df      	b.n	800e71c <_vfiprintf_r+0x20>
 800e75c:	4b79      	ldr	r3, [pc, #484]	; (800e944 <_vfiprintf_r+0x248>)
 800e75e:	429d      	cmp	r5, r3
 800e760:	bf08      	it	eq
 800e762:	68f5      	ldreq	r5, [r6, #12]
 800e764:	e7da      	b.n	800e71c <_vfiprintf_r+0x20>
 800e766:	89ab      	ldrh	r3, [r5, #12]
 800e768:	0598      	lsls	r0, r3, #22
 800e76a:	d4ed      	bmi.n	800e748 <_vfiprintf_r+0x4c>
 800e76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e76e:	f7ff fd56 	bl	800e21e <__retarget_lock_release_recursive>
 800e772:	e7e9      	b.n	800e748 <_vfiprintf_r+0x4c>
 800e774:	2300      	movs	r3, #0
 800e776:	9309      	str	r3, [sp, #36]	; 0x24
 800e778:	2320      	movs	r3, #32
 800e77a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e782:	2330      	movs	r3, #48	; 0x30
 800e784:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e948 <_vfiprintf_r+0x24c>
 800e788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e78c:	f04f 0901 	mov.w	r9, #1
 800e790:	4623      	mov	r3, r4
 800e792:	469a      	mov	sl, r3
 800e794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e798:	b10a      	cbz	r2, 800e79e <_vfiprintf_r+0xa2>
 800e79a:	2a25      	cmp	r2, #37	; 0x25
 800e79c:	d1f9      	bne.n	800e792 <_vfiprintf_r+0x96>
 800e79e:	ebba 0b04 	subs.w	fp, sl, r4
 800e7a2:	d00b      	beq.n	800e7bc <_vfiprintf_r+0xc0>
 800e7a4:	465b      	mov	r3, fp
 800e7a6:	4622      	mov	r2, r4
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	f7ff ff93 	bl	800e6d6 <__sfputs_r>
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	f000 80aa 	beq.w	800e90a <_vfiprintf_r+0x20e>
 800e7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7b8:	445a      	add	r2, fp
 800e7ba:	9209      	str	r2, [sp, #36]	; 0x24
 800e7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 80a2 	beq.w	800e90a <_vfiprintf_r+0x20e>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d0:	f10a 0a01 	add.w	sl, sl, #1
 800e7d4:	9304      	str	r3, [sp, #16]
 800e7d6:	9307      	str	r3, [sp, #28]
 800e7d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7dc:	931a      	str	r3, [sp, #104]	; 0x68
 800e7de:	4654      	mov	r4, sl
 800e7e0:	2205      	movs	r2, #5
 800e7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e6:	4858      	ldr	r0, [pc, #352]	; (800e948 <_vfiprintf_r+0x24c>)
 800e7e8:	f7f1 fd32 	bl	8000250 <memchr>
 800e7ec:	9a04      	ldr	r2, [sp, #16]
 800e7ee:	b9d8      	cbnz	r0, 800e828 <_vfiprintf_r+0x12c>
 800e7f0:	06d1      	lsls	r1, r2, #27
 800e7f2:	bf44      	itt	mi
 800e7f4:	2320      	movmi	r3, #32
 800e7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7fa:	0713      	lsls	r3, r2, #28
 800e7fc:	bf44      	itt	mi
 800e7fe:	232b      	movmi	r3, #43	; 0x2b
 800e800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e804:	f89a 3000 	ldrb.w	r3, [sl]
 800e808:	2b2a      	cmp	r3, #42	; 0x2a
 800e80a:	d015      	beq.n	800e838 <_vfiprintf_r+0x13c>
 800e80c:	9a07      	ldr	r2, [sp, #28]
 800e80e:	4654      	mov	r4, sl
 800e810:	2000      	movs	r0, #0
 800e812:	f04f 0c0a 	mov.w	ip, #10
 800e816:	4621      	mov	r1, r4
 800e818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e81c:	3b30      	subs	r3, #48	; 0x30
 800e81e:	2b09      	cmp	r3, #9
 800e820:	d94e      	bls.n	800e8c0 <_vfiprintf_r+0x1c4>
 800e822:	b1b0      	cbz	r0, 800e852 <_vfiprintf_r+0x156>
 800e824:	9207      	str	r2, [sp, #28]
 800e826:	e014      	b.n	800e852 <_vfiprintf_r+0x156>
 800e828:	eba0 0308 	sub.w	r3, r0, r8
 800e82c:	fa09 f303 	lsl.w	r3, r9, r3
 800e830:	4313      	orrs	r3, r2
 800e832:	9304      	str	r3, [sp, #16]
 800e834:	46a2      	mov	sl, r4
 800e836:	e7d2      	b.n	800e7de <_vfiprintf_r+0xe2>
 800e838:	9b03      	ldr	r3, [sp, #12]
 800e83a:	1d19      	adds	r1, r3, #4
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	9103      	str	r1, [sp, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	bfbb      	ittet	lt
 800e844:	425b      	neglt	r3, r3
 800e846:	f042 0202 	orrlt.w	r2, r2, #2
 800e84a:	9307      	strge	r3, [sp, #28]
 800e84c:	9307      	strlt	r3, [sp, #28]
 800e84e:	bfb8      	it	lt
 800e850:	9204      	strlt	r2, [sp, #16]
 800e852:	7823      	ldrb	r3, [r4, #0]
 800e854:	2b2e      	cmp	r3, #46	; 0x2e
 800e856:	d10c      	bne.n	800e872 <_vfiprintf_r+0x176>
 800e858:	7863      	ldrb	r3, [r4, #1]
 800e85a:	2b2a      	cmp	r3, #42	; 0x2a
 800e85c:	d135      	bne.n	800e8ca <_vfiprintf_r+0x1ce>
 800e85e:	9b03      	ldr	r3, [sp, #12]
 800e860:	1d1a      	adds	r2, r3, #4
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	9203      	str	r2, [sp, #12]
 800e866:	2b00      	cmp	r3, #0
 800e868:	bfb8      	it	lt
 800e86a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e86e:	3402      	adds	r4, #2
 800e870:	9305      	str	r3, [sp, #20]
 800e872:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e958 <_vfiprintf_r+0x25c>
 800e876:	7821      	ldrb	r1, [r4, #0]
 800e878:	2203      	movs	r2, #3
 800e87a:	4650      	mov	r0, sl
 800e87c:	f7f1 fce8 	bl	8000250 <memchr>
 800e880:	b140      	cbz	r0, 800e894 <_vfiprintf_r+0x198>
 800e882:	2340      	movs	r3, #64	; 0x40
 800e884:	eba0 000a 	sub.w	r0, r0, sl
 800e888:	fa03 f000 	lsl.w	r0, r3, r0
 800e88c:	9b04      	ldr	r3, [sp, #16]
 800e88e:	4303      	orrs	r3, r0
 800e890:	3401      	adds	r4, #1
 800e892:	9304      	str	r3, [sp, #16]
 800e894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e898:	482c      	ldr	r0, [pc, #176]	; (800e94c <_vfiprintf_r+0x250>)
 800e89a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e89e:	2206      	movs	r2, #6
 800e8a0:	f7f1 fcd6 	bl	8000250 <memchr>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	d03f      	beq.n	800e928 <_vfiprintf_r+0x22c>
 800e8a8:	4b29      	ldr	r3, [pc, #164]	; (800e950 <_vfiprintf_r+0x254>)
 800e8aa:	bb1b      	cbnz	r3, 800e8f4 <_vfiprintf_r+0x1f8>
 800e8ac:	9b03      	ldr	r3, [sp, #12]
 800e8ae:	3307      	adds	r3, #7
 800e8b0:	f023 0307 	bic.w	r3, r3, #7
 800e8b4:	3308      	adds	r3, #8
 800e8b6:	9303      	str	r3, [sp, #12]
 800e8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ba:	443b      	add	r3, r7
 800e8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e8be:	e767      	b.n	800e790 <_vfiprintf_r+0x94>
 800e8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	2001      	movs	r0, #1
 800e8c8:	e7a5      	b.n	800e816 <_vfiprintf_r+0x11a>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	3401      	adds	r4, #1
 800e8ce:	9305      	str	r3, [sp, #20]
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	f04f 0c0a 	mov.w	ip, #10
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8dc:	3a30      	subs	r2, #48	; 0x30
 800e8de:	2a09      	cmp	r2, #9
 800e8e0:	d903      	bls.n	800e8ea <_vfiprintf_r+0x1ee>
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d0c5      	beq.n	800e872 <_vfiprintf_r+0x176>
 800e8e6:	9105      	str	r1, [sp, #20]
 800e8e8:	e7c3      	b.n	800e872 <_vfiprintf_r+0x176>
 800e8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e7f0      	b.n	800e8d6 <_vfiprintf_r+0x1da>
 800e8f4:	ab03      	add	r3, sp, #12
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	462a      	mov	r2, r5
 800e8fa:	4b16      	ldr	r3, [pc, #88]	; (800e954 <_vfiprintf_r+0x258>)
 800e8fc:	a904      	add	r1, sp, #16
 800e8fe:	4630      	mov	r0, r6
 800e900:	f3af 8000 	nop.w
 800e904:	4607      	mov	r7, r0
 800e906:	1c78      	adds	r0, r7, #1
 800e908:	d1d6      	bne.n	800e8b8 <_vfiprintf_r+0x1bc>
 800e90a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e90c:	07d9      	lsls	r1, r3, #31
 800e90e:	d405      	bmi.n	800e91c <_vfiprintf_r+0x220>
 800e910:	89ab      	ldrh	r3, [r5, #12]
 800e912:	059a      	lsls	r2, r3, #22
 800e914:	d402      	bmi.n	800e91c <_vfiprintf_r+0x220>
 800e916:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e918:	f7ff fc81 	bl	800e21e <__retarget_lock_release_recursive>
 800e91c:	89ab      	ldrh	r3, [r5, #12]
 800e91e:	065b      	lsls	r3, r3, #25
 800e920:	f53f af12 	bmi.w	800e748 <_vfiprintf_r+0x4c>
 800e924:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e926:	e711      	b.n	800e74c <_vfiprintf_r+0x50>
 800e928:	ab03      	add	r3, sp, #12
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	462a      	mov	r2, r5
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <_vfiprintf_r+0x258>)
 800e930:	a904      	add	r1, sp, #16
 800e932:	4630      	mov	r0, r6
 800e934:	f000 f880 	bl	800ea38 <_printf_i>
 800e938:	e7e4      	b.n	800e904 <_vfiprintf_r+0x208>
 800e93a:	bf00      	nop
 800e93c:	08011ecc 	.word	0x08011ecc
 800e940:	08011eec 	.word	0x08011eec
 800e944:	08011eac 	.word	0x08011eac
 800e948:	08011f0c 	.word	0x08011f0c
 800e94c:	08011f16 	.word	0x08011f16
 800e950:	00000000 	.word	0x00000000
 800e954:	0800e6d7 	.word	0x0800e6d7
 800e958:	08011f12 	.word	0x08011f12

0800e95c <_printf_common>:
 800e95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e960:	4616      	mov	r6, r2
 800e962:	4699      	mov	r9, r3
 800e964:	688a      	ldr	r2, [r1, #8]
 800e966:	690b      	ldr	r3, [r1, #16]
 800e968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e96c:	4293      	cmp	r3, r2
 800e96e:	bfb8      	it	lt
 800e970:	4613      	movlt	r3, r2
 800e972:	6033      	str	r3, [r6, #0]
 800e974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e978:	4607      	mov	r7, r0
 800e97a:	460c      	mov	r4, r1
 800e97c:	b10a      	cbz	r2, 800e982 <_printf_common+0x26>
 800e97e:	3301      	adds	r3, #1
 800e980:	6033      	str	r3, [r6, #0]
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	0699      	lsls	r1, r3, #26
 800e986:	bf42      	ittt	mi
 800e988:	6833      	ldrmi	r3, [r6, #0]
 800e98a:	3302      	addmi	r3, #2
 800e98c:	6033      	strmi	r3, [r6, #0]
 800e98e:	6825      	ldr	r5, [r4, #0]
 800e990:	f015 0506 	ands.w	r5, r5, #6
 800e994:	d106      	bne.n	800e9a4 <_printf_common+0x48>
 800e996:	f104 0a19 	add.w	sl, r4, #25
 800e99a:	68e3      	ldr	r3, [r4, #12]
 800e99c:	6832      	ldr	r2, [r6, #0]
 800e99e:	1a9b      	subs	r3, r3, r2
 800e9a0:	42ab      	cmp	r3, r5
 800e9a2:	dc26      	bgt.n	800e9f2 <_printf_common+0x96>
 800e9a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9a8:	1e13      	subs	r3, r2, #0
 800e9aa:	6822      	ldr	r2, [r4, #0]
 800e9ac:	bf18      	it	ne
 800e9ae:	2301      	movne	r3, #1
 800e9b0:	0692      	lsls	r2, r2, #26
 800e9b2:	d42b      	bmi.n	800ea0c <_printf_common+0xb0>
 800e9b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	47c0      	blx	r8
 800e9be:	3001      	adds	r0, #1
 800e9c0:	d01e      	beq.n	800ea00 <_printf_common+0xa4>
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	68e5      	ldr	r5, [r4, #12]
 800e9c6:	6832      	ldr	r2, [r6, #0]
 800e9c8:	f003 0306 	and.w	r3, r3, #6
 800e9cc:	2b04      	cmp	r3, #4
 800e9ce:	bf08      	it	eq
 800e9d0:	1aad      	subeq	r5, r5, r2
 800e9d2:	68a3      	ldr	r3, [r4, #8]
 800e9d4:	6922      	ldr	r2, [r4, #16]
 800e9d6:	bf0c      	ite	eq
 800e9d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9dc:	2500      	movne	r5, #0
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	bfc4      	itt	gt
 800e9e2:	1a9b      	subgt	r3, r3, r2
 800e9e4:	18ed      	addgt	r5, r5, r3
 800e9e6:	2600      	movs	r6, #0
 800e9e8:	341a      	adds	r4, #26
 800e9ea:	42b5      	cmp	r5, r6
 800e9ec:	d11a      	bne.n	800ea24 <_printf_common+0xc8>
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	e008      	b.n	800ea04 <_printf_common+0xa8>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	4652      	mov	r2, sl
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	47c0      	blx	r8
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	d103      	bne.n	800ea08 <_printf_common+0xac>
 800ea00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea08:	3501      	adds	r5, #1
 800ea0a:	e7c6      	b.n	800e99a <_printf_common+0x3e>
 800ea0c:	18e1      	adds	r1, r4, r3
 800ea0e:	1c5a      	adds	r2, r3, #1
 800ea10:	2030      	movs	r0, #48	; 0x30
 800ea12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea16:	4422      	add	r2, r4
 800ea18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea20:	3302      	adds	r3, #2
 800ea22:	e7c7      	b.n	800e9b4 <_printf_common+0x58>
 800ea24:	2301      	movs	r3, #1
 800ea26:	4622      	mov	r2, r4
 800ea28:	4649      	mov	r1, r9
 800ea2a:	4638      	mov	r0, r7
 800ea2c:	47c0      	blx	r8
 800ea2e:	3001      	adds	r0, #1
 800ea30:	d0e6      	beq.n	800ea00 <_printf_common+0xa4>
 800ea32:	3601      	adds	r6, #1
 800ea34:	e7d9      	b.n	800e9ea <_printf_common+0x8e>
	...

0800ea38 <_printf_i>:
 800ea38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea3c:	7e0f      	ldrb	r7, [r1, #24]
 800ea3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea40:	2f78      	cmp	r7, #120	; 0x78
 800ea42:	4691      	mov	r9, r2
 800ea44:	4680      	mov	r8, r0
 800ea46:	460c      	mov	r4, r1
 800ea48:	469a      	mov	sl, r3
 800ea4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea4e:	d807      	bhi.n	800ea60 <_printf_i+0x28>
 800ea50:	2f62      	cmp	r7, #98	; 0x62
 800ea52:	d80a      	bhi.n	800ea6a <_printf_i+0x32>
 800ea54:	2f00      	cmp	r7, #0
 800ea56:	f000 80d8 	beq.w	800ec0a <_printf_i+0x1d2>
 800ea5a:	2f58      	cmp	r7, #88	; 0x58
 800ea5c:	f000 80a3 	beq.w	800eba6 <_printf_i+0x16e>
 800ea60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea68:	e03a      	b.n	800eae0 <_printf_i+0xa8>
 800ea6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea6e:	2b15      	cmp	r3, #21
 800ea70:	d8f6      	bhi.n	800ea60 <_printf_i+0x28>
 800ea72:	a101      	add	r1, pc, #4	; (adr r1, 800ea78 <_printf_i+0x40>)
 800ea74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea78:	0800ead1 	.word	0x0800ead1
 800ea7c:	0800eae5 	.word	0x0800eae5
 800ea80:	0800ea61 	.word	0x0800ea61
 800ea84:	0800ea61 	.word	0x0800ea61
 800ea88:	0800ea61 	.word	0x0800ea61
 800ea8c:	0800ea61 	.word	0x0800ea61
 800ea90:	0800eae5 	.word	0x0800eae5
 800ea94:	0800ea61 	.word	0x0800ea61
 800ea98:	0800ea61 	.word	0x0800ea61
 800ea9c:	0800ea61 	.word	0x0800ea61
 800eaa0:	0800ea61 	.word	0x0800ea61
 800eaa4:	0800ebf1 	.word	0x0800ebf1
 800eaa8:	0800eb15 	.word	0x0800eb15
 800eaac:	0800ebd3 	.word	0x0800ebd3
 800eab0:	0800ea61 	.word	0x0800ea61
 800eab4:	0800ea61 	.word	0x0800ea61
 800eab8:	0800ec13 	.word	0x0800ec13
 800eabc:	0800ea61 	.word	0x0800ea61
 800eac0:	0800eb15 	.word	0x0800eb15
 800eac4:	0800ea61 	.word	0x0800ea61
 800eac8:	0800ea61 	.word	0x0800ea61
 800eacc:	0800ebdb 	.word	0x0800ebdb
 800ead0:	682b      	ldr	r3, [r5, #0]
 800ead2:	1d1a      	adds	r2, r3, #4
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	602a      	str	r2, [r5, #0]
 800ead8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eadc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eae0:	2301      	movs	r3, #1
 800eae2:	e0a3      	b.n	800ec2c <_printf_i+0x1f4>
 800eae4:	6820      	ldr	r0, [r4, #0]
 800eae6:	6829      	ldr	r1, [r5, #0]
 800eae8:	0606      	lsls	r6, r0, #24
 800eaea:	f101 0304 	add.w	r3, r1, #4
 800eaee:	d50a      	bpl.n	800eb06 <_printf_i+0xce>
 800eaf0:	680e      	ldr	r6, [r1, #0]
 800eaf2:	602b      	str	r3, [r5, #0]
 800eaf4:	2e00      	cmp	r6, #0
 800eaf6:	da03      	bge.n	800eb00 <_printf_i+0xc8>
 800eaf8:	232d      	movs	r3, #45	; 0x2d
 800eafa:	4276      	negs	r6, r6
 800eafc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb00:	485e      	ldr	r0, [pc, #376]	; (800ec7c <_printf_i+0x244>)
 800eb02:	230a      	movs	r3, #10
 800eb04:	e019      	b.n	800eb3a <_printf_i+0x102>
 800eb06:	680e      	ldr	r6, [r1, #0]
 800eb08:	602b      	str	r3, [r5, #0]
 800eb0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb0e:	bf18      	it	ne
 800eb10:	b236      	sxthne	r6, r6
 800eb12:	e7ef      	b.n	800eaf4 <_printf_i+0xbc>
 800eb14:	682b      	ldr	r3, [r5, #0]
 800eb16:	6820      	ldr	r0, [r4, #0]
 800eb18:	1d19      	adds	r1, r3, #4
 800eb1a:	6029      	str	r1, [r5, #0]
 800eb1c:	0601      	lsls	r1, r0, #24
 800eb1e:	d501      	bpl.n	800eb24 <_printf_i+0xec>
 800eb20:	681e      	ldr	r6, [r3, #0]
 800eb22:	e002      	b.n	800eb2a <_printf_i+0xf2>
 800eb24:	0646      	lsls	r6, r0, #25
 800eb26:	d5fb      	bpl.n	800eb20 <_printf_i+0xe8>
 800eb28:	881e      	ldrh	r6, [r3, #0]
 800eb2a:	4854      	ldr	r0, [pc, #336]	; (800ec7c <_printf_i+0x244>)
 800eb2c:	2f6f      	cmp	r7, #111	; 0x6f
 800eb2e:	bf0c      	ite	eq
 800eb30:	2308      	moveq	r3, #8
 800eb32:	230a      	movne	r3, #10
 800eb34:	2100      	movs	r1, #0
 800eb36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb3a:	6865      	ldr	r5, [r4, #4]
 800eb3c:	60a5      	str	r5, [r4, #8]
 800eb3e:	2d00      	cmp	r5, #0
 800eb40:	bfa2      	ittt	ge
 800eb42:	6821      	ldrge	r1, [r4, #0]
 800eb44:	f021 0104 	bicge.w	r1, r1, #4
 800eb48:	6021      	strge	r1, [r4, #0]
 800eb4a:	b90e      	cbnz	r6, 800eb50 <_printf_i+0x118>
 800eb4c:	2d00      	cmp	r5, #0
 800eb4e:	d04d      	beq.n	800ebec <_printf_i+0x1b4>
 800eb50:	4615      	mov	r5, r2
 800eb52:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb56:	fb03 6711 	mls	r7, r3, r1, r6
 800eb5a:	5dc7      	ldrb	r7, [r0, r7]
 800eb5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb60:	4637      	mov	r7, r6
 800eb62:	42bb      	cmp	r3, r7
 800eb64:	460e      	mov	r6, r1
 800eb66:	d9f4      	bls.n	800eb52 <_printf_i+0x11a>
 800eb68:	2b08      	cmp	r3, #8
 800eb6a:	d10b      	bne.n	800eb84 <_printf_i+0x14c>
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	07de      	lsls	r6, r3, #31
 800eb70:	d508      	bpl.n	800eb84 <_printf_i+0x14c>
 800eb72:	6923      	ldr	r3, [r4, #16]
 800eb74:	6861      	ldr	r1, [r4, #4]
 800eb76:	4299      	cmp	r1, r3
 800eb78:	bfde      	ittt	le
 800eb7a:	2330      	movle	r3, #48	; 0x30
 800eb7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eb84:	1b52      	subs	r2, r2, r5
 800eb86:	6122      	str	r2, [r4, #16]
 800eb88:	f8cd a000 	str.w	sl, [sp]
 800eb8c:	464b      	mov	r3, r9
 800eb8e:	aa03      	add	r2, sp, #12
 800eb90:	4621      	mov	r1, r4
 800eb92:	4640      	mov	r0, r8
 800eb94:	f7ff fee2 	bl	800e95c <_printf_common>
 800eb98:	3001      	adds	r0, #1
 800eb9a:	d14c      	bne.n	800ec36 <_printf_i+0x1fe>
 800eb9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eba0:	b004      	add	sp, #16
 800eba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba6:	4835      	ldr	r0, [pc, #212]	; (800ec7c <_printf_i+0x244>)
 800eba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ebac:	6829      	ldr	r1, [r5, #0]
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebb4:	6029      	str	r1, [r5, #0]
 800ebb6:	061d      	lsls	r5, r3, #24
 800ebb8:	d514      	bpl.n	800ebe4 <_printf_i+0x1ac>
 800ebba:	07df      	lsls	r7, r3, #31
 800ebbc:	bf44      	itt	mi
 800ebbe:	f043 0320 	orrmi.w	r3, r3, #32
 800ebc2:	6023      	strmi	r3, [r4, #0]
 800ebc4:	b91e      	cbnz	r6, 800ebce <_printf_i+0x196>
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	f023 0320 	bic.w	r3, r3, #32
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	2310      	movs	r3, #16
 800ebd0:	e7b0      	b.n	800eb34 <_printf_i+0xfc>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	f043 0320 	orr.w	r3, r3, #32
 800ebd8:	6023      	str	r3, [r4, #0]
 800ebda:	2378      	movs	r3, #120	; 0x78
 800ebdc:	4828      	ldr	r0, [pc, #160]	; (800ec80 <_printf_i+0x248>)
 800ebde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ebe2:	e7e3      	b.n	800ebac <_printf_i+0x174>
 800ebe4:	0659      	lsls	r1, r3, #25
 800ebe6:	bf48      	it	mi
 800ebe8:	b2b6      	uxthmi	r6, r6
 800ebea:	e7e6      	b.n	800ebba <_printf_i+0x182>
 800ebec:	4615      	mov	r5, r2
 800ebee:	e7bb      	b.n	800eb68 <_printf_i+0x130>
 800ebf0:	682b      	ldr	r3, [r5, #0]
 800ebf2:	6826      	ldr	r6, [r4, #0]
 800ebf4:	6961      	ldr	r1, [r4, #20]
 800ebf6:	1d18      	adds	r0, r3, #4
 800ebf8:	6028      	str	r0, [r5, #0]
 800ebfa:	0635      	lsls	r5, r6, #24
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	d501      	bpl.n	800ec04 <_printf_i+0x1cc>
 800ec00:	6019      	str	r1, [r3, #0]
 800ec02:	e002      	b.n	800ec0a <_printf_i+0x1d2>
 800ec04:	0670      	lsls	r0, r6, #25
 800ec06:	d5fb      	bpl.n	800ec00 <_printf_i+0x1c8>
 800ec08:	8019      	strh	r1, [r3, #0]
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	6123      	str	r3, [r4, #16]
 800ec0e:	4615      	mov	r5, r2
 800ec10:	e7ba      	b.n	800eb88 <_printf_i+0x150>
 800ec12:	682b      	ldr	r3, [r5, #0]
 800ec14:	1d1a      	adds	r2, r3, #4
 800ec16:	602a      	str	r2, [r5, #0]
 800ec18:	681d      	ldr	r5, [r3, #0]
 800ec1a:	6862      	ldr	r2, [r4, #4]
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f7f1 fb16 	bl	8000250 <memchr>
 800ec24:	b108      	cbz	r0, 800ec2a <_printf_i+0x1f2>
 800ec26:	1b40      	subs	r0, r0, r5
 800ec28:	6060      	str	r0, [r4, #4]
 800ec2a:	6863      	ldr	r3, [r4, #4]
 800ec2c:	6123      	str	r3, [r4, #16]
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec34:	e7a8      	b.n	800eb88 <_printf_i+0x150>
 800ec36:	6923      	ldr	r3, [r4, #16]
 800ec38:	462a      	mov	r2, r5
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	4640      	mov	r0, r8
 800ec3e:	47d0      	blx	sl
 800ec40:	3001      	adds	r0, #1
 800ec42:	d0ab      	beq.n	800eb9c <_printf_i+0x164>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	079b      	lsls	r3, r3, #30
 800ec48:	d413      	bmi.n	800ec72 <_printf_i+0x23a>
 800ec4a:	68e0      	ldr	r0, [r4, #12]
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	4298      	cmp	r0, r3
 800ec50:	bfb8      	it	lt
 800ec52:	4618      	movlt	r0, r3
 800ec54:	e7a4      	b.n	800eba0 <_printf_i+0x168>
 800ec56:	2301      	movs	r3, #1
 800ec58:	4632      	mov	r2, r6
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	4640      	mov	r0, r8
 800ec5e:	47d0      	blx	sl
 800ec60:	3001      	adds	r0, #1
 800ec62:	d09b      	beq.n	800eb9c <_printf_i+0x164>
 800ec64:	3501      	adds	r5, #1
 800ec66:	68e3      	ldr	r3, [r4, #12]
 800ec68:	9903      	ldr	r1, [sp, #12]
 800ec6a:	1a5b      	subs	r3, r3, r1
 800ec6c:	42ab      	cmp	r3, r5
 800ec6e:	dcf2      	bgt.n	800ec56 <_printf_i+0x21e>
 800ec70:	e7eb      	b.n	800ec4a <_printf_i+0x212>
 800ec72:	2500      	movs	r5, #0
 800ec74:	f104 0619 	add.w	r6, r4, #25
 800ec78:	e7f5      	b.n	800ec66 <_printf_i+0x22e>
 800ec7a:	bf00      	nop
 800ec7c:	08011f1d 	.word	0x08011f1d
 800ec80:	08011f2e 	.word	0x08011f2e

0800ec84 <_sbrk_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4d06      	ldr	r5, [pc, #24]	; (800eca0 <_sbrk_r+0x1c>)
 800ec88:	2300      	movs	r3, #0
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	4608      	mov	r0, r1
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	f7f2 f964 	bl	8000f5c <_sbrk>
 800ec94:	1c43      	adds	r3, r0, #1
 800ec96:	d102      	bne.n	800ec9e <_sbrk_r+0x1a>
 800ec98:	682b      	ldr	r3, [r5, #0]
 800ec9a:	b103      	cbz	r3, 800ec9e <_sbrk_r+0x1a>
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	bd38      	pop	{r3, r4, r5, pc}
 800eca0:	20006950 	.word	0x20006950

0800eca4 <__sread>:
 800eca4:	b510      	push	{r4, lr}
 800eca6:	460c      	mov	r4, r1
 800eca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecac:	f000 fa9e 	bl	800f1ec <_read_r>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	bfab      	itete	ge
 800ecb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ecb6:	89a3      	ldrhlt	r3, [r4, #12]
 800ecb8:	181b      	addge	r3, r3, r0
 800ecba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ecbe:	bfac      	ite	ge
 800ecc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ecc2:	81a3      	strhlt	r3, [r4, #12]
 800ecc4:	bd10      	pop	{r4, pc}

0800ecc6 <__swrite>:
 800ecc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecca:	461f      	mov	r7, r3
 800eccc:	898b      	ldrh	r3, [r1, #12]
 800ecce:	05db      	lsls	r3, r3, #23
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	4616      	mov	r6, r2
 800ecd6:	d505      	bpl.n	800ece4 <__swrite+0x1e>
 800ecd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecdc:	2302      	movs	r3, #2
 800ecde:	2200      	movs	r2, #0
 800ece0:	f000 f9d0 	bl	800f084 <_lseek_r>
 800ece4:	89a3      	ldrh	r3, [r4, #12]
 800ece6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecee:	81a3      	strh	r3, [r4, #12]
 800ecf0:	4632      	mov	r2, r6
 800ecf2:	463b      	mov	r3, r7
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfa:	f000 b869 	b.w	800edd0 <_write_r>

0800ecfe <__sseek>:
 800ecfe:	b510      	push	{r4, lr}
 800ed00:	460c      	mov	r4, r1
 800ed02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed06:	f000 f9bd 	bl	800f084 <_lseek_r>
 800ed0a:	1c43      	adds	r3, r0, #1
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	bf15      	itete	ne
 800ed10:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed1a:	81a3      	strheq	r3, [r4, #12]
 800ed1c:	bf18      	it	ne
 800ed1e:	81a3      	strhne	r3, [r4, #12]
 800ed20:	bd10      	pop	{r4, pc}

0800ed22 <__sclose>:
 800ed22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed26:	f000 b8db 	b.w	800eee0 <_close_r>
	...

0800ed2c <__swbuf_r>:
 800ed2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2e:	460e      	mov	r6, r1
 800ed30:	4614      	mov	r4, r2
 800ed32:	4605      	mov	r5, r0
 800ed34:	b118      	cbz	r0, 800ed3e <__swbuf_r+0x12>
 800ed36:	6983      	ldr	r3, [r0, #24]
 800ed38:	b90b      	cbnz	r3, 800ed3e <__swbuf_r+0x12>
 800ed3a:	f7ff f9bf 	bl	800e0bc <__sinit>
 800ed3e:	4b21      	ldr	r3, [pc, #132]	; (800edc4 <__swbuf_r+0x98>)
 800ed40:	429c      	cmp	r4, r3
 800ed42:	d12b      	bne.n	800ed9c <__swbuf_r+0x70>
 800ed44:	686c      	ldr	r4, [r5, #4]
 800ed46:	69a3      	ldr	r3, [r4, #24]
 800ed48:	60a3      	str	r3, [r4, #8]
 800ed4a:	89a3      	ldrh	r3, [r4, #12]
 800ed4c:	071a      	lsls	r2, r3, #28
 800ed4e:	d52f      	bpl.n	800edb0 <__swbuf_r+0x84>
 800ed50:	6923      	ldr	r3, [r4, #16]
 800ed52:	b36b      	cbz	r3, 800edb0 <__swbuf_r+0x84>
 800ed54:	6923      	ldr	r3, [r4, #16]
 800ed56:	6820      	ldr	r0, [r4, #0]
 800ed58:	1ac0      	subs	r0, r0, r3
 800ed5a:	6963      	ldr	r3, [r4, #20]
 800ed5c:	b2f6      	uxtb	r6, r6
 800ed5e:	4283      	cmp	r3, r0
 800ed60:	4637      	mov	r7, r6
 800ed62:	dc04      	bgt.n	800ed6e <__swbuf_r+0x42>
 800ed64:	4621      	mov	r1, r4
 800ed66:	4628      	mov	r0, r5
 800ed68:	f000 f950 	bl	800f00c <_fflush_r>
 800ed6c:	bb30      	cbnz	r0, 800edbc <__swbuf_r+0x90>
 800ed6e:	68a3      	ldr	r3, [r4, #8]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	60a3      	str	r3, [r4, #8]
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	6022      	str	r2, [r4, #0]
 800ed7a:	701e      	strb	r6, [r3, #0]
 800ed7c:	6963      	ldr	r3, [r4, #20]
 800ed7e:	3001      	adds	r0, #1
 800ed80:	4283      	cmp	r3, r0
 800ed82:	d004      	beq.n	800ed8e <__swbuf_r+0x62>
 800ed84:	89a3      	ldrh	r3, [r4, #12]
 800ed86:	07db      	lsls	r3, r3, #31
 800ed88:	d506      	bpl.n	800ed98 <__swbuf_r+0x6c>
 800ed8a:	2e0a      	cmp	r6, #10
 800ed8c:	d104      	bne.n	800ed98 <__swbuf_r+0x6c>
 800ed8e:	4621      	mov	r1, r4
 800ed90:	4628      	mov	r0, r5
 800ed92:	f000 f93b 	bl	800f00c <_fflush_r>
 800ed96:	b988      	cbnz	r0, 800edbc <__swbuf_r+0x90>
 800ed98:	4638      	mov	r0, r7
 800ed9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed9c:	4b0a      	ldr	r3, [pc, #40]	; (800edc8 <__swbuf_r+0x9c>)
 800ed9e:	429c      	cmp	r4, r3
 800eda0:	d101      	bne.n	800eda6 <__swbuf_r+0x7a>
 800eda2:	68ac      	ldr	r4, [r5, #8]
 800eda4:	e7cf      	b.n	800ed46 <__swbuf_r+0x1a>
 800eda6:	4b09      	ldr	r3, [pc, #36]	; (800edcc <__swbuf_r+0xa0>)
 800eda8:	429c      	cmp	r4, r3
 800edaa:	bf08      	it	eq
 800edac:	68ec      	ldreq	r4, [r5, #12]
 800edae:	e7ca      	b.n	800ed46 <__swbuf_r+0x1a>
 800edb0:	4621      	mov	r1, r4
 800edb2:	4628      	mov	r0, r5
 800edb4:	f000 f81e 	bl	800edf4 <__swsetup_r>
 800edb8:	2800      	cmp	r0, #0
 800edba:	d0cb      	beq.n	800ed54 <__swbuf_r+0x28>
 800edbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800edc0:	e7ea      	b.n	800ed98 <__swbuf_r+0x6c>
 800edc2:	bf00      	nop
 800edc4:	08011ecc 	.word	0x08011ecc
 800edc8:	08011eec 	.word	0x08011eec
 800edcc:	08011eac 	.word	0x08011eac

0800edd0 <_write_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4d07      	ldr	r5, [pc, #28]	; (800edf0 <_write_r+0x20>)
 800edd4:	4604      	mov	r4, r0
 800edd6:	4608      	mov	r0, r1
 800edd8:	4611      	mov	r1, r2
 800edda:	2200      	movs	r2, #0
 800eddc:	602a      	str	r2, [r5, #0]
 800edde:	461a      	mov	r2, r3
 800ede0:	f7f2 f86b 	bl	8000eba <_write>
 800ede4:	1c43      	adds	r3, r0, #1
 800ede6:	d102      	bne.n	800edee <_write_r+0x1e>
 800ede8:	682b      	ldr	r3, [r5, #0]
 800edea:	b103      	cbz	r3, 800edee <_write_r+0x1e>
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	bd38      	pop	{r3, r4, r5, pc}
 800edf0:	20006950 	.word	0x20006950

0800edf4 <__swsetup_r>:
 800edf4:	4b32      	ldr	r3, [pc, #200]	; (800eec0 <__swsetup_r+0xcc>)
 800edf6:	b570      	push	{r4, r5, r6, lr}
 800edf8:	681d      	ldr	r5, [r3, #0]
 800edfa:	4606      	mov	r6, r0
 800edfc:	460c      	mov	r4, r1
 800edfe:	b125      	cbz	r5, 800ee0a <__swsetup_r+0x16>
 800ee00:	69ab      	ldr	r3, [r5, #24]
 800ee02:	b913      	cbnz	r3, 800ee0a <__swsetup_r+0x16>
 800ee04:	4628      	mov	r0, r5
 800ee06:	f7ff f959 	bl	800e0bc <__sinit>
 800ee0a:	4b2e      	ldr	r3, [pc, #184]	; (800eec4 <__swsetup_r+0xd0>)
 800ee0c:	429c      	cmp	r4, r3
 800ee0e:	d10f      	bne.n	800ee30 <__swsetup_r+0x3c>
 800ee10:	686c      	ldr	r4, [r5, #4]
 800ee12:	89a3      	ldrh	r3, [r4, #12]
 800ee14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee18:	0719      	lsls	r1, r3, #28
 800ee1a:	d42c      	bmi.n	800ee76 <__swsetup_r+0x82>
 800ee1c:	06dd      	lsls	r5, r3, #27
 800ee1e:	d411      	bmi.n	800ee44 <__swsetup_r+0x50>
 800ee20:	2309      	movs	r3, #9
 800ee22:	6033      	str	r3, [r6, #0]
 800ee24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee28:	81a3      	strh	r3, [r4, #12]
 800ee2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee2e:	e03e      	b.n	800eeae <__swsetup_r+0xba>
 800ee30:	4b25      	ldr	r3, [pc, #148]	; (800eec8 <__swsetup_r+0xd4>)
 800ee32:	429c      	cmp	r4, r3
 800ee34:	d101      	bne.n	800ee3a <__swsetup_r+0x46>
 800ee36:	68ac      	ldr	r4, [r5, #8]
 800ee38:	e7eb      	b.n	800ee12 <__swsetup_r+0x1e>
 800ee3a:	4b24      	ldr	r3, [pc, #144]	; (800eecc <__swsetup_r+0xd8>)
 800ee3c:	429c      	cmp	r4, r3
 800ee3e:	bf08      	it	eq
 800ee40:	68ec      	ldreq	r4, [r5, #12]
 800ee42:	e7e6      	b.n	800ee12 <__swsetup_r+0x1e>
 800ee44:	0758      	lsls	r0, r3, #29
 800ee46:	d512      	bpl.n	800ee6e <__swsetup_r+0x7a>
 800ee48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee4a:	b141      	cbz	r1, 800ee5e <__swsetup_r+0x6a>
 800ee4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee50:	4299      	cmp	r1, r3
 800ee52:	d002      	beq.n	800ee5a <__swsetup_r+0x66>
 800ee54:	4630      	mov	r0, r6
 800ee56:	f7ff f9eb 	bl	800e230 <_free_r>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee64:	81a3      	strh	r3, [r4, #12]
 800ee66:	2300      	movs	r3, #0
 800ee68:	6063      	str	r3, [r4, #4]
 800ee6a:	6923      	ldr	r3, [r4, #16]
 800ee6c:	6023      	str	r3, [r4, #0]
 800ee6e:	89a3      	ldrh	r3, [r4, #12]
 800ee70:	f043 0308 	orr.w	r3, r3, #8
 800ee74:	81a3      	strh	r3, [r4, #12]
 800ee76:	6923      	ldr	r3, [r4, #16]
 800ee78:	b94b      	cbnz	r3, 800ee8e <__swsetup_r+0x9a>
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee84:	d003      	beq.n	800ee8e <__swsetup_r+0x9a>
 800ee86:	4621      	mov	r1, r4
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f000 f933 	bl	800f0f4 <__smakebuf_r>
 800ee8e:	89a0      	ldrh	r0, [r4, #12]
 800ee90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee94:	f010 0301 	ands.w	r3, r0, #1
 800ee98:	d00a      	beq.n	800eeb0 <__swsetup_r+0xbc>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	60a3      	str	r3, [r4, #8]
 800ee9e:	6963      	ldr	r3, [r4, #20]
 800eea0:	425b      	negs	r3, r3
 800eea2:	61a3      	str	r3, [r4, #24]
 800eea4:	6923      	ldr	r3, [r4, #16]
 800eea6:	b943      	cbnz	r3, 800eeba <__swsetup_r+0xc6>
 800eea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eeac:	d1ba      	bne.n	800ee24 <__swsetup_r+0x30>
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	0781      	lsls	r1, r0, #30
 800eeb2:	bf58      	it	pl
 800eeb4:	6963      	ldrpl	r3, [r4, #20]
 800eeb6:	60a3      	str	r3, [r4, #8]
 800eeb8:	e7f4      	b.n	800eea4 <__swsetup_r+0xb0>
 800eeba:	2000      	movs	r0, #0
 800eebc:	e7f7      	b.n	800eeae <__swsetup_r+0xba>
 800eebe:	bf00      	nop
 800eec0:	20000014 	.word	0x20000014
 800eec4:	08011ecc 	.word	0x08011ecc
 800eec8:	08011eec 	.word	0x08011eec
 800eecc:	08011eac 	.word	0x08011eac

0800eed0 <abort>:
 800eed0:	b508      	push	{r3, lr}
 800eed2:	2006      	movs	r0, #6
 800eed4:	f000 f9c4 	bl	800f260 <raise>
 800eed8:	2001      	movs	r0, #1
 800eeda:	f7f1 ffc7 	bl	8000e6c <_exit>
	...

0800eee0 <_close_r>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4d06      	ldr	r5, [pc, #24]	; (800eefc <_close_r+0x1c>)
 800eee4:	2300      	movs	r3, #0
 800eee6:	4604      	mov	r4, r0
 800eee8:	4608      	mov	r0, r1
 800eeea:	602b      	str	r3, [r5, #0]
 800eeec:	f7f2 f801 	bl	8000ef2 <_close>
 800eef0:	1c43      	adds	r3, r0, #1
 800eef2:	d102      	bne.n	800eefa <_close_r+0x1a>
 800eef4:	682b      	ldr	r3, [r5, #0]
 800eef6:	b103      	cbz	r3, 800eefa <_close_r+0x1a>
 800eef8:	6023      	str	r3, [r4, #0]
 800eefa:	bd38      	pop	{r3, r4, r5, pc}
 800eefc:	20006950 	.word	0x20006950

0800ef00 <__sflush_r>:
 800ef00:	898a      	ldrh	r2, [r1, #12]
 800ef02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef06:	4605      	mov	r5, r0
 800ef08:	0710      	lsls	r0, r2, #28
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	d458      	bmi.n	800efc0 <__sflush_r+0xc0>
 800ef0e:	684b      	ldr	r3, [r1, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	dc05      	bgt.n	800ef20 <__sflush_r+0x20>
 800ef14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	dc02      	bgt.n	800ef20 <__sflush_r+0x20>
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef22:	2e00      	cmp	r6, #0
 800ef24:	d0f9      	beq.n	800ef1a <__sflush_r+0x1a>
 800ef26:	2300      	movs	r3, #0
 800ef28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef2c:	682f      	ldr	r7, [r5, #0]
 800ef2e:	602b      	str	r3, [r5, #0]
 800ef30:	d032      	beq.n	800ef98 <__sflush_r+0x98>
 800ef32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef34:	89a3      	ldrh	r3, [r4, #12]
 800ef36:	075a      	lsls	r2, r3, #29
 800ef38:	d505      	bpl.n	800ef46 <__sflush_r+0x46>
 800ef3a:	6863      	ldr	r3, [r4, #4]
 800ef3c:	1ac0      	subs	r0, r0, r3
 800ef3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef40:	b10b      	cbz	r3, 800ef46 <__sflush_r+0x46>
 800ef42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef44:	1ac0      	subs	r0, r0, r3
 800ef46:	2300      	movs	r3, #0
 800ef48:	4602      	mov	r2, r0
 800ef4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef4c:	6a21      	ldr	r1, [r4, #32]
 800ef4e:	4628      	mov	r0, r5
 800ef50:	47b0      	blx	r6
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	89a3      	ldrh	r3, [r4, #12]
 800ef56:	d106      	bne.n	800ef66 <__sflush_r+0x66>
 800ef58:	6829      	ldr	r1, [r5, #0]
 800ef5a:	291d      	cmp	r1, #29
 800ef5c:	d82c      	bhi.n	800efb8 <__sflush_r+0xb8>
 800ef5e:	4a2a      	ldr	r2, [pc, #168]	; (800f008 <__sflush_r+0x108>)
 800ef60:	40ca      	lsrs	r2, r1
 800ef62:	07d6      	lsls	r6, r2, #31
 800ef64:	d528      	bpl.n	800efb8 <__sflush_r+0xb8>
 800ef66:	2200      	movs	r2, #0
 800ef68:	6062      	str	r2, [r4, #4]
 800ef6a:	04d9      	lsls	r1, r3, #19
 800ef6c:	6922      	ldr	r2, [r4, #16]
 800ef6e:	6022      	str	r2, [r4, #0]
 800ef70:	d504      	bpl.n	800ef7c <__sflush_r+0x7c>
 800ef72:	1c42      	adds	r2, r0, #1
 800ef74:	d101      	bne.n	800ef7a <__sflush_r+0x7a>
 800ef76:	682b      	ldr	r3, [r5, #0]
 800ef78:	b903      	cbnz	r3, 800ef7c <__sflush_r+0x7c>
 800ef7a:	6560      	str	r0, [r4, #84]	; 0x54
 800ef7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef7e:	602f      	str	r7, [r5, #0]
 800ef80:	2900      	cmp	r1, #0
 800ef82:	d0ca      	beq.n	800ef1a <__sflush_r+0x1a>
 800ef84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef88:	4299      	cmp	r1, r3
 800ef8a:	d002      	beq.n	800ef92 <__sflush_r+0x92>
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	f7ff f94f 	bl	800e230 <_free_r>
 800ef92:	2000      	movs	r0, #0
 800ef94:	6360      	str	r0, [r4, #52]	; 0x34
 800ef96:	e7c1      	b.n	800ef1c <__sflush_r+0x1c>
 800ef98:	6a21      	ldr	r1, [r4, #32]
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	47b0      	blx	r6
 800efa0:	1c41      	adds	r1, r0, #1
 800efa2:	d1c7      	bne.n	800ef34 <__sflush_r+0x34>
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d0c4      	beq.n	800ef34 <__sflush_r+0x34>
 800efaa:	2b1d      	cmp	r3, #29
 800efac:	d001      	beq.n	800efb2 <__sflush_r+0xb2>
 800efae:	2b16      	cmp	r3, #22
 800efb0:	d101      	bne.n	800efb6 <__sflush_r+0xb6>
 800efb2:	602f      	str	r7, [r5, #0]
 800efb4:	e7b1      	b.n	800ef1a <__sflush_r+0x1a>
 800efb6:	89a3      	ldrh	r3, [r4, #12]
 800efb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efbc:	81a3      	strh	r3, [r4, #12]
 800efbe:	e7ad      	b.n	800ef1c <__sflush_r+0x1c>
 800efc0:	690f      	ldr	r7, [r1, #16]
 800efc2:	2f00      	cmp	r7, #0
 800efc4:	d0a9      	beq.n	800ef1a <__sflush_r+0x1a>
 800efc6:	0793      	lsls	r3, r2, #30
 800efc8:	680e      	ldr	r6, [r1, #0]
 800efca:	bf08      	it	eq
 800efcc:	694b      	ldreq	r3, [r1, #20]
 800efce:	600f      	str	r7, [r1, #0]
 800efd0:	bf18      	it	ne
 800efd2:	2300      	movne	r3, #0
 800efd4:	eba6 0807 	sub.w	r8, r6, r7
 800efd8:	608b      	str	r3, [r1, #8]
 800efda:	f1b8 0f00 	cmp.w	r8, #0
 800efde:	dd9c      	ble.n	800ef1a <__sflush_r+0x1a>
 800efe0:	6a21      	ldr	r1, [r4, #32]
 800efe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efe4:	4643      	mov	r3, r8
 800efe6:	463a      	mov	r2, r7
 800efe8:	4628      	mov	r0, r5
 800efea:	47b0      	blx	r6
 800efec:	2800      	cmp	r0, #0
 800efee:	dc06      	bgt.n	800effe <__sflush_r+0xfe>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eff6:	81a3      	strh	r3, [r4, #12]
 800eff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800effc:	e78e      	b.n	800ef1c <__sflush_r+0x1c>
 800effe:	4407      	add	r7, r0
 800f000:	eba8 0800 	sub.w	r8, r8, r0
 800f004:	e7e9      	b.n	800efda <__sflush_r+0xda>
 800f006:	bf00      	nop
 800f008:	20400001 	.word	0x20400001

0800f00c <_fflush_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	690b      	ldr	r3, [r1, #16]
 800f010:	4605      	mov	r5, r0
 800f012:	460c      	mov	r4, r1
 800f014:	b913      	cbnz	r3, 800f01c <_fflush_r+0x10>
 800f016:	2500      	movs	r5, #0
 800f018:	4628      	mov	r0, r5
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	b118      	cbz	r0, 800f026 <_fflush_r+0x1a>
 800f01e:	6983      	ldr	r3, [r0, #24]
 800f020:	b90b      	cbnz	r3, 800f026 <_fflush_r+0x1a>
 800f022:	f7ff f84b 	bl	800e0bc <__sinit>
 800f026:	4b14      	ldr	r3, [pc, #80]	; (800f078 <_fflush_r+0x6c>)
 800f028:	429c      	cmp	r4, r3
 800f02a:	d11b      	bne.n	800f064 <_fflush_r+0x58>
 800f02c:	686c      	ldr	r4, [r5, #4]
 800f02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d0ef      	beq.n	800f016 <_fflush_r+0xa>
 800f036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f038:	07d0      	lsls	r0, r2, #31
 800f03a:	d404      	bmi.n	800f046 <_fflush_r+0x3a>
 800f03c:	0599      	lsls	r1, r3, #22
 800f03e:	d402      	bmi.n	800f046 <_fflush_r+0x3a>
 800f040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f042:	f7ff f8eb 	bl	800e21c <__retarget_lock_acquire_recursive>
 800f046:	4628      	mov	r0, r5
 800f048:	4621      	mov	r1, r4
 800f04a:	f7ff ff59 	bl	800ef00 <__sflush_r>
 800f04e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f050:	07da      	lsls	r2, r3, #31
 800f052:	4605      	mov	r5, r0
 800f054:	d4e0      	bmi.n	800f018 <_fflush_r+0xc>
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	059b      	lsls	r3, r3, #22
 800f05a:	d4dd      	bmi.n	800f018 <_fflush_r+0xc>
 800f05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f05e:	f7ff f8de 	bl	800e21e <__retarget_lock_release_recursive>
 800f062:	e7d9      	b.n	800f018 <_fflush_r+0xc>
 800f064:	4b05      	ldr	r3, [pc, #20]	; (800f07c <_fflush_r+0x70>)
 800f066:	429c      	cmp	r4, r3
 800f068:	d101      	bne.n	800f06e <_fflush_r+0x62>
 800f06a:	68ac      	ldr	r4, [r5, #8]
 800f06c:	e7df      	b.n	800f02e <_fflush_r+0x22>
 800f06e:	4b04      	ldr	r3, [pc, #16]	; (800f080 <_fflush_r+0x74>)
 800f070:	429c      	cmp	r4, r3
 800f072:	bf08      	it	eq
 800f074:	68ec      	ldreq	r4, [r5, #12]
 800f076:	e7da      	b.n	800f02e <_fflush_r+0x22>
 800f078:	08011ecc 	.word	0x08011ecc
 800f07c:	08011eec 	.word	0x08011eec
 800f080:	08011eac 	.word	0x08011eac

0800f084 <_lseek_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4d07      	ldr	r5, [pc, #28]	; (800f0a4 <_lseek_r+0x20>)
 800f088:	4604      	mov	r4, r0
 800f08a:	4608      	mov	r0, r1
 800f08c:	4611      	mov	r1, r2
 800f08e:	2200      	movs	r2, #0
 800f090:	602a      	str	r2, [r5, #0]
 800f092:	461a      	mov	r2, r3
 800f094:	f7f1 ff54 	bl	8000f40 <_lseek>
 800f098:	1c43      	adds	r3, r0, #1
 800f09a:	d102      	bne.n	800f0a2 <_lseek_r+0x1e>
 800f09c:	682b      	ldr	r3, [r5, #0]
 800f09e:	b103      	cbz	r3, 800f0a2 <_lseek_r+0x1e>
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	20006950 	.word	0x20006950

0800f0a8 <__swhatbuf_r>:
 800f0a8:	b570      	push	{r4, r5, r6, lr}
 800f0aa:	460e      	mov	r6, r1
 800f0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b0:	2900      	cmp	r1, #0
 800f0b2:	b096      	sub	sp, #88	; 0x58
 800f0b4:	4614      	mov	r4, r2
 800f0b6:	461d      	mov	r5, r3
 800f0b8:	da08      	bge.n	800f0cc <__swhatbuf_r+0x24>
 800f0ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	602a      	str	r2, [r5, #0]
 800f0c2:	061a      	lsls	r2, r3, #24
 800f0c4:	d410      	bmi.n	800f0e8 <__swhatbuf_r+0x40>
 800f0c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0ca:	e00e      	b.n	800f0ea <__swhatbuf_r+0x42>
 800f0cc:	466a      	mov	r2, sp
 800f0ce:	f000 f8e3 	bl	800f298 <_fstat_r>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	dbf1      	blt.n	800f0ba <__swhatbuf_r+0x12>
 800f0d6:	9a01      	ldr	r2, [sp, #4]
 800f0d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0e0:	425a      	negs	r2, r3
 800f0e2:	415a      	adcs	r2, r3
 800f0e4:	602a      	str	r2, [r5, #0]
 800f0e6:	e7ee      	b.n	800f0c6 <__swhatbuf_r+0x1e>
 800f0e8:	2340      	movs	r3, #64	; 0x40
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	b016      	add	sp, #88	; 0x58
 800f0f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f0f4 <__smakebuf_r>:
 800f0f4:	898b      	ldrh	r3, [r1, #12]
 800f0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0f8:	079d      	lsls	r5, r3, #30
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	460c      	mov	r4, r1
 800f0fe:	d507      	bpl.n	800f110 <__smakebuf_r+0x1c>
 800f100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	6123      	str	r3, [r4, #16]
 800f108:	2301      	movs	r3, #1
 800f10a:	6163      	str	r3, [r4, #20]
 800f10c:	b002      	add	sp, #8
 800f10e:	bd70      	pop	{r4, r5, r6, pc}
 800f110:	ab01      	add	r3, sp, #4
 800f112:	466a      	mov	r2, sp
 800f114:	f7ff ffc8 	bl	800f0a8 <__swhatbuf_r>
 800f118:	9900      	ldr	r1, [sp, #0]
 800f11a:	4605      	mov	r5, r0
 800f11c:	4630      	mov	r0, r6
 800f11e:	f7ff f8f3 	bl	800e308 <_malloc_r>
 800f122:	b948      	cbnz	r0, 800f138 <__smakebuf_r+0x44>
 800f124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f128:	059a      	lsls	r2, r3, #22
 800f12a:	d4ef      	bmi.n	800f10c <__smakebuf_r+0x18>
 800f12c:	f023 0303 	bic.w	r3, r3, #3
 800f130:	f043 0302 	orr.w	r3, r3, #2
 800f134:	81a3      	strh	r3, [r4, #12]
 800f136:	e7e3      	b.n	800f100 <__smakebuf_r+0xc>
 800f138:	4b0d      	ldr	r3, [pc, #52]	; (800f170 <__smakebuf_r+0x7c>)
 800f13a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f13c:	89a3      	ldrh	r3, [r4, #12]
 800f13e:	6020      	str	r0, [r4, #0]
 800f140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f144:	81a3      	strh	r3, [r4, #12]
 800f146:	9b00      	ldr	r3, [sp, #0]
 800f148:	6163      	str	r3, [r4, #20]
 800f14a:	9b01      	ldr	r3, [sp, #4]
 800f14c:	6120      	str	r0, [r4, #16]
 800f14e:	b15b      	cbz	r3, 800f168 <__smakebuf_r+0x74>
 800f150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f154:	4630      	mov	r0, r6
 800f156:	f000 f8b1 	bl	800f2bc <_isatty_r>
 800f15a:	b128      	cbz	r0, 800f168 <__smakebuf_r+0x74>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	f023 0303 	bic.w	r3, r3, #3
 800f162:	f043 0301 	orr.w	r3, r3, #1
 800f166:	81a3      	strh	r3, [r4, #12]
 800f168:	89a0      	ldrh	r0, [r4, #12]
 800f16a:	4305      	orrs	r5, r0
 800f16c:	81a5      	strh	r5, [r4, #12]
 800f16e:	e7cd      	b.n	800f10c <__smakebuf_r+0x18>
 800f170:	0800e055 	.word	0x0800e055

0800f174 <__malloc_lock>:
 800f174:	4801      	ldr	r0, [pc, #4]	; (800f17c <__malloc_lock+0x8>)
 800f176:	f7ff b851 	b.w	800e21c <__retarget_lock_acquire_recursive>
 800f17a:	bf00      	nop
 800f17c:	20006954 	.word	0x20006954

0800f180 <__malloc_unlock>:
 800f180:	4801      	ldr	r0, [pc, #4]	; (800f188 <__malloc_unlock+0x8>)
 800f182:	f7ff b84c 	b.w	800e21e <__retarget_lock_release_recursive>
 800f186:	bf00      	nop
 800f188:	20006954 	.word	0x20006954

0800f18c <_realloc_r>:
 800f18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f190:	4680      	mov	r8, r0
 800f192:	4614      	mov	r4, r2
 800f194:	460e      	mov	r6, r1
 800f196:	b921      	cbnz	r1, 800f1a2 <_realloc_r+0x16>
 800f198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f19c:	4611      	mov	r1, r2
 800f19e:	f7ff b8b3 	b.w	800e308 <_malloc_r>
 800f1a2:	b92a      	cbnz	r2, 800f1b0 <_realloc_r+0x24>
 800f1a4:	f7ff f844 	bl	800e230 <_free_r>
 800f1a8:	4625      	mov	r5, r4
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b0:	f000 f894 	bl	800f2dc <_malloc_usable_size_r>
 800f1b4:	4284      	cmp	r4, r0
 800f1b6:	4607      	mov	r7, r0
 800f1b8:	d802      	bhi.n	800f1c0 <_realloc_r+0x34>
 800f1ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f1be:	d812      	bhi.n	800f1e6 <_realloc_r+0x5a>
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	4640      	mov	r0, r8
 800f1c4:	f7ff f8a0 	bl	800e308 <_malloc_r>
 800f1c8:	4605      	mov	r5, r0
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d0ed      	beq.n	800f1aa <_realloc_r+0x1e>
 800f1ce:	42bc      	cmp	r4, r7
 800f1d0:	4622      	mov	r2, r4
 800f1d2:	4631      	mov	r1, r6
 800f1d4:	bf28      	it	cs
 800f1d6:	463a      	movcs	r2, r7
 800f1d8:	f7fe fe40 	bl	800de5c <memcpy>
 800f1dc:	4631      	mov	r1, r6
 800f1de:	4640      	mov	r0, r8
 800f1e0:	f7ff f826 	bl	800e230 <_free_r>
 800f1e4:	e7e1      	b.n	800f1aa <_realloc_r+0x1e>
 800f1e6:	4635      	mov	r5, r6
 800f1e8:	e7df      	b.n	800f1aa <_realloc_r+0x1e>
	...

0800f1ec <_read_r>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	4d07      	ldr	r5, [pc, #28]	; (800f20c <_read_r+0x20>)
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	4608      	mov	r0, r1
 800f1f4:	4611      	mov	r1, r2
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	602a      	str	r2, [r5, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	f7f1 fe40 	bl	8000e80 <_read>
 800f200:	1c43      	adds	r3, r0, #1
 800f202:	d102      	bne.n	800f20a <_read_r+0x1e>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	b103      	cbz	r3, 800f20a <_read_r+0x1e>
 800f208:	6023      	str	r3, [r4, #0]
 800f20a:	bd38      	pop	{r3, r4, r5, pc}
 800f20c:	20006950 	.word	0x20006950

0800f210 <_raise_r>:
 800f210:	291f      	cmp	r1, #31
 800f212:	b538      	push	{r3, r4, r5, lr}
 800f214:	4604      	mov	r4, r0
 800f216:	460d      	mov	r5, r1
 800f218:	d904      	bls.n	800f224 <_raise_r+0x14>
 800f21a:	2316      	movs	r3, #22
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f222:	bd38      	pop	{r3, r4, r5, pc}
 800f224:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f226:	b112      	cbz	r2, 800f22e <_raise_r+0x1e>
 800f228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f22c:	b94b      	cbnz	r3, 800f242 <_raise_r+0x32>
 800f22e:	4620      	mov	r0, r4
 800f230:	f000 f830 	bl	800f294 <_getpid_r>
 800f234:	462a      	mov	r2, r5
 800f236:	4601      	mov	r1, r0
 800f238:	4620      	mov	r0, r4
 800f23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f23e:	f000 b817 	b.w	800f270 <_kill_r>
 800f242:	2b01      	cmp	r3, #1
 800f244:	d00a      	beq.n	800f25c <_raise_r+0x4c>
 800f246:	1c59      	adds	r1, r3, #1
 800f248:	d103      	bne.n	800f252 <_raise_r+0x42>
 800f24a:	2316      	movs	r3, #22
 800f24c:	6003      	str	r3, [r0, #0]
 800f24e:	2001      	movs	r0, #1
 800f250:	e7e7      	b.n	800f222 <_raise_r+0x12>
 800f252:	2400      	movs	r4, #0
 800f254:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f258:	4628      	mov	r0, r5
 800f25a:	4798      	blx	r3
 800f25c:	2000      	movs	r0, #0
 800f25e:	e7e0      	b.n	800f222 <_raise_r+0x12>

0800f260 <raise>:
 800f260:	4b02      	ldr	r3, [pc, #8]	; (800f26c <raise+0xc>)
 800f262:	4601      	mov	r1, r0
 800f264:	6818      	ldr	r0, [r3, #0]
 800f266:	f7ff bfd3 	b.w	800f210 <_raise_r>
 800f26a:	bf00      	nop
 800f26c:	20000014 	.word	0x20000014

0800f270 <_kill_r>:
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	4d07      	ldr	r5, [pc, #28]	; (800f290 <_kill_r+0x20>)
 800f274:	2300      	movs	r3, #0
 800f276:	4604      	mov	r4, r0
 800f278:	4608      	mov	r0, r1
 800f27a:	4611      	mov	r1, r2
 800f27c:	602b      	str	r3, [r5, #0]
 800f27e:	f7f1 fde3 	bl	8000e48 <_kill>
 800f282:	1c43      	adds	r3, r0, #1
 800f284:	d102      	bne.n	800f28c <_kill_r+0x1c>
 800f286:	682b      	ldr	r3, [r5, #0]
 800f288:	b103      	cbz	r3, 800f28c <_kill_r+0x1c>
 800f28a:	6023      	str	r3, [r4, #0]
 800f28c:	bd38      	pop	{r3, r4, r5, pc}
 800f28e:	bf00      	nop
 800f290:	20006950 	.word	0x20006950

0800f294 <_getpid_r>:
 800f294:	f7f1 bdd0 	b.w	8000e38 <_getpid>

0800f298 <_fstat_r>:
 800f298:	b538      	push	{r3, r4, r5, lr}
 800f29a:	4d07      	ldr	r5, [pc, #28]	; (800f2b8 <_fstat_r+0x20>)
 800f29c:	2300      	movs	r3, #0
 800f29e:	4604      	mov	r4, r0
 800f2a0:	4608      	mov	r0, r1
 800f2a2:	4611      	mov	r1, r2
 800f2a4:	602b      	str	r3, [r5, #0]
 800f2a6:	f7f1 fe30 	bl	8000f0a <_fstat>
 800f2aa:	1c43      	adds	r3, r0, #1
 800f2ac:	d102      	bne.n	800f2b4 <_fstat_r+0x1c>
 800f2ae:	682b      	ldr	r3, [r5, #0]
 800f2b0:	b103      	cbz	r3, 800f2b4 <_fstat_r+0x1c>
 800f2b2:	6023      	str	r3, [r4, #0]
 800f2b4:	bd38      	pop	{r3, r4, r5, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20006950 	.word	0x20006950

0800f2bc <_isatty_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4d06      	ldr	r5, [pc, #24]	; (800f2d8 <_isatty_r+0x1c>)
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	602b      	str	r3, [r5, #0]
 800f2c8:	f7f1 fe2f 	bl	8000f2a <_isatty>
 800f2cc:	1c43      	adds	r3, r0, #1
 800f2ce:	d102      	bne.n	800f2d6 <_isatty_r+0x1a>
 800f2d0:	682b      	ldr	r3, [r5, #0]
 800f2d2:	b103      	cbz	r3, 800f2d6 <_isatty_r+0x1a>
 800f2d4:	6023      	str	r3, [r4, #0]
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	20006950 	.word	0x20006950

0800f2dc <_malloc_usable_size_r>:
 800f2dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2e0:	1f18      	subs	r0, r3, #4
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	bfbc      	itt	lt
 800f2e6:	580b      	ldrlt	r3, [r1, r0]
 800f2e8:	18c0      	addlt	r0, r0, r3
 800f2ea:	4770      	bx	lr

0800f2ec <_init>:
 800f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ee:	bf00      	nop
 800f2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2f2:	bc08      	pop	{r3}
 800f2f4:	469e      	mov	lr, r3
 800f2f6:	4770      	bx	lr

0800f2f8 <_fini>:
 800f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fa:	bf00      	nop
 800f2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2fe:	bc08      	pop	{r3}
 800f300:	469e      	mov	lr, r3
 800f302:	4770      	bx	lr
