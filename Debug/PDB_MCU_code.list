
PDB_MCU_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dffc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c1c  0800e1fc  0800e1fc  0001e1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e18  08010e18  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08010e18  08010e18  00020e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e20  08010e20  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e20  08010e20  00020e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e24  08010e24  00020e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08010e28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006834  20000078  08010ea0  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200068ac  08010ea0  000368ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172e7  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048a7  00000000  00000000  0004738d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0004bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  0004cd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031f93  00000000  00000000  0004dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0ab  00000000  00000000  0007fcfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105b69  00000000  00000000  0009eda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a490f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  001a4960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e1e4 	.word	0x0800e1e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800e1e4 	.word	0x0800e1e4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fb01 	bl	8000bee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f808 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f878 	bl	80006e4 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005f4:	f002 fc24 	bl	8002e40 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80005f8:	f002 fd54 	bl	80030a4 <MX_LWIP_Process>
 80005fc:	e7fc      	b.n	80005f8 <main+0x14>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	; 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f00c fd90 	bl	800d134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f001 ff00 	bl	8002428 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemClock_Config+0xdc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a2b      	ldr	r2, [pc, #172]	; (80006dc <SystemClock_Config+0xdc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemClock_Config+0xdc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xe0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <SystemClock_Config+0xe0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000674:	2360      	movs	r3, #96	; 0x60
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f001 ff2d 	bl	80024e8 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000694:	f000 f952 	bl	800093c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000698:	f001 fed6 	bl	8002448 <HAL_PWREx_EnableOverDrive>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a2:	f000 f94b 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2103      	movs	r1, #3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f9be 	bl	8002a44 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ce:	f000 f935 	bl	800093c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	4b89      	ldr	r3, [pc, #548]	; (8000920 <MX_GPIO_Init+0x23c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a88      	ldr	r2, [pc, #544]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b86      	ldr	r3, [pc, #536]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b83      	ldr	r3, [pc, #524]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a82      	ldr	r2, [pc, #520]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b80      	ldr	r3, [pc, #512]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b7d      	ldr	r3, [pc, #500]	; (8000920 <MX_GPIO_Init+0x23c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a7c      	ldr	r2, [pc, #496]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b7a      	ldr	r3, [pc, #488]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b77      	ldr	r3, [pc, #476]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a76      	ldr	r2, [pc, #472]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b74      	ldr	r3, [pc, #464]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b71      	ldr	r3, [pc, #452]	; (8000920 <MX_GPIO_Init+0x23c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a70      	ldr	r2, [pc, #448]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b6e      	ldr	r3, [pc, #440]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b6b      	ldr	r3, [pc, #428]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a6a      	ldr	r2, [pc, #424]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b68      	ldr	r3, [pc, #416]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078a:	4b65      	ldr	r3, [pc, #404]	; (8000920 <MX_GPIO_Init+0x23c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a64      	ldr	r2, [pc, #400]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b62      	ldr	r3, [pc, #392]	; (8000920 <MX_GPIO_Init+0x23c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007a2:	2200      	movs	r2, #0
 80007a4:	213f      	movs	r1, #63	; 0x3f
 80007a6:	485f      	ldr	r0, [pc, #380]	; (8000924 <MX_GPIO_Init+0x240>)
 80007a8:	f001 fe24 	bl	80023f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_4|GPIO_PIN_5
 80007ac:	2200      	movs	r2, #0
 80007ae:	f244 31f1 	movw	r1, #17393	; 0x43f1
 80007b2:	485d      	ldr	r0, [pc, #372]	; (8000928 <MX_GPIO_Init+0x244>)
 80007b4:	f001 fe1e 	bl	80023f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
 80007b8:	2200      	movs	r2, #0
 80007ba:	f245 6140 	movw	r1, #22080	; 0x5640
 80007be:	485b      	ldr	r0, [pc, #364]	; (800092c <MX_GPIO_Init+0x248>)
 80007c0:	f001 fe18 	bl	80023f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80007ca:	4859      	ldr	r0, [pc, #356]	; (8000930 <MX_GPIO_Init+0x24c>)
 80007cc:	f001 fe12 	bl	80023f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007d0:	2200      	movs	r2, #0
 80007d2:	21ff      	movs	r1, #255	; 0xff
 80007d4:	4857      	ldr	r0, [pc, #348]	; (8000934 <MX_GPIO_Init+0x250>)
 80007d6:	f001 fe0d 	bl	80023f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007da:	233f      	movs	r3, #63	; 0x3f
 80007dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	484c      	ldr	r0, [pc, #304]	; (8000924 <MX_GPIO_Init+0x240>)
 80007f2:	f001 fc53 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4846      	ldr	r0, [pc, #280]	; (8000924 <MX_GPIO_Init+0x240>)
 800080a:	f001 fc47 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000814:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4842      	ldr	r0, [pc, #264]	; (8000930 <MX_GPIO_Init+0x24c>)
 8000826:	f001 fc39 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4|GPIO_PIN_5
 800082a:	f244 33f1 	movw	r3, #17393	; 0x43f1
 800082e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4839      	ldr	r0, [pc, #228]	; (8000928 <MX_GPIO_Init+0x244>)
 8000844:	f001 fc2a 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000848:	f44f 7340 	mov.w	r3, #768	; 0x300
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800085a:	2307      	movs	r3, #7
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4833      	ldr	r0, [pc, #204]	; (8000934 <MX_GPIO_Init+0x250>)
 8000866:	f001 fc19 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG9 PG10 PG12
                           PG14 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
 800086a:	f245 6340 	movw	r3, #22080	; 0x5640
 800086e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	482a      	ldr	r0, [pc, #168]	; (800092c <MX_GPIO_Init+0x248>)
 8000884:	f001 fc0a 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4824      	ldr	r0, [pc, #144]	; (800092c <MX_GPIO_Init+0x248>)
 800089c:	f001 fbfe 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008a0:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 80008a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <MX_GPIO_Init+0x24c>)
 80008ba:	f001 fbef 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008d0:	230a      	movs	r3, #10
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4817      	ldr	r0, [pc, #92]	; (8000938 <MX_GPIO_Init+0x254>)
 80008dc:	f001 fbde 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <MX_GPIO_Init+0x254>)
 80008f6:	f001 fbd1 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008fa:	23ff      	movs	r3, #255	; 0xff
 80008fc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <MX_GPIO_Init+0x250>)
 8000912:	f001 fbc3 	bl	800209c <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40021000 	.word	0x40021000
 8000928:	40020400 	.word	0x40020400
 800092c:	40021800 	.word	0x40021800
 8000930:	40020800 	.word	0x40020800
 8000934:	40020c00 	.word	0x40020c00
 8000938:	40020000 	.word	0x40020000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f944 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	return 1;
 80009e8:	2301      	movs	r3, #1
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_kill>:

int _kill(int pid, int sig)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <_kill+0x20>)
 8000a00:	2216      	movs	r2, #22
 8000a02:	601a      	str	r2, [r3, #0]
	return -1;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000689c 	.word	0x2000689c

08000a18 <_exit>:

void _exit (int status)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ffe5 	bl	80009f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a2a:	e7fe      	b.n	8000a2a <_exit+0x12>

08000a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e00a      	b.n	8000a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a3e:	f3af 8000 	nop.w
 8000a42:	4601      	mov	r1, r0
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf0      	blt.n	8000a3e <_read+0x12>
	}

return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e009      	b.n	8000a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf1      	blt.n	8000a78 <_write+0x12>
	}
	return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:

int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d205      	bcs.n	8000b44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <_sbrk+0x6c>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	20080000 	.word	0x20080000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	20000094 	.word	0x20000094
 8000b70:	200068b0 	.word	0x200068b0
 8000b74:	2000689c 	.word	0x2000689c

08000b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba2:	490e      	ldr	r1, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb8:	4c0b      	ldr	r4, [pc, #44]	; (8000be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc6:	f7ff ffd7 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f00c fa71 	bl	800d0b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fd09 	bl	80005e4 <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000be0:	08010e28 	.word	0x08010e28
  ldr r2, =_sbss
 8000be4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000be8:	200068ac 	.word	0x200068ac

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>

08000bee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 f92e 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 f805 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfe:	f7ff fea3 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f93b 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	f000 f911 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000098 	.word	0x20000098

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000098 	.word	0x20000098

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffde 	bl	8000c90 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <__NVIC_SetPriorityGrouping+0x40>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x40>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	05fa0000 	.word	0x05fa0000

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff47 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff5c 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffb0 	bl	8000e10 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000ecc:	4ba0      	ldr	r3, [pc, #640]	; (8001150 <HAL_ETH_Init+0x294>)
 8000ece:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e180      	b.n	80011e4 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f002 f8e0 	bl	80030bc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	4b95      	ldr	r3, [pc, #596]	; (8001154 <HAL_ETH_Init+0x298>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	4a94      	ldr	r2, [pc, #592]	; (8001154 <HAL_ETH_Init+0x298>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f06:	6453      	str	r3, [r2, #68]	; 0x44
 8000f08:	4b92      	ldr	r3, [pc, #584]	; (8001154 <HAL_ETH_Init+0x298>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f14:	4b90      	ldr	r3, [pc, #576]	; (8001158 <HAL_ETH_Init+0x29c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a8f      	ldr	r2, [pc, #572]	; (8001158 <HAL_ETH_Init+0x29c>)
 8000f1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f1e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f20:	4b8d      	ldr	r3, [pc, #564]	; (8001158 <HAL_ETH_Init+0x29c>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	498b      	ldr	r1, [pc, #556]	; (8001158 <HAL_ETH_Init+0x29c>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000f44:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000f46:	f7ff fea3 	bl	8000c90 <HAL_GetTick>
 8000f4a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f4c:	e011      	b.n	8000f72 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000f4e:	f7ff fe9f 	bl	8000c90 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f5c:	d909      	bls.n	8000f72 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e138      	b.n	80011e4 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1e4      	bne.n	8000f4e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f023 031c 	bic.w	r3, r3, #28
 8000f92:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f94:	f001 ff48 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8000f98:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4a6f      	ldr	r2, [pc, #444]	; (800115c <HAL_ETH_Init+0x2a0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d908      	bls.n	8000fb4 <HAL_ETH_Init+0xf8>
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4a6e      	ldr	r2, [pc, #440]	; (8001160 <HAL_ETH_Init+0x2a4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d804      	bhi.n	8000fb4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e027      	b.n	8001004 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4a6a      	ldr	r2, [pc, #424]	; (8001160 <HAL_ETH_Init+0x2a4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d908      	bls.n	8000fce <HAL_ETH_Init+0x112>
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	4a64      	ldr	r2, [pc, #400]	; (8001150 <HAL_ETH_Init+0x294>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d204      	bcs.n	8000fce <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f043 030c 	orr.w	r3, r3, #12
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	e01a      	b.n	8001004 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4a5f      	ldr	r2, [pc, #380]	; (8001150 <HAL_ETH_Init+0x294>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d303      	bcc.n	8000fde <HAL_ETH_Init+0x122>
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4a62      	ldr	r2, [pc, #392]	; (8001164 <HAL_ETH_Init+0x2a8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d911      	bls.n	8001002 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4a60      	ldr	r2, [pc, #384]	; (8001164 <HAL_ETH_Init+0x2a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d908      	bls.n	8000ff8 <HAL_ETH_Init+0x13c>
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4a5f      	ldr	r2, [pc, #380]	; (8001168 <HAL_ETH_Init+0x2ac>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d804      	bhi.n	8000ff8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e005      	b.n	8001004 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	e000      	b.n	8001004 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001002:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800100c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fb94 	bl	8001740 <HAL_ETH_WritePHYRegister>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001022:	6939      	ldr	r1, [r7, #16]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fd49 	bl	8001abc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e0d6      	b.n	80011e4 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001036:	20ff      	movs	r0, #255	; 0xff
 8001038:	f7ff fe36 	bl	8000ca8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80a4 	beq.w	800118e <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001046:	f7ff fe23 	bl	8000c90 <HAL_GetTick>
 800104a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	461a      	mov	r2, r3
 8001052:	2101      	movs	r1, #1
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fb0b 	bl	8001670 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800105a:	f7ff fe19 	bl	8000c90 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f241 3288 	movw	r2, #5000	; 0x1388
 8001068:	4293      	cmp	r3, r2
 800106a:	d90f      	bls.n	800108c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fd22 	bl	8001abc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e0ab      	b.n	80011e4 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0da      	beq.n	800104c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800109a:	2100      	movs	r1, #0
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fb4f 	bl	8001740 <HAL_ETH_WritePHYRegister>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010ac:	6939      	ldr	r1, [r7, #16]
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 fd04 	bl	8001abc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010bc:	2301      	movs	r3, #1
 80010be:	e091      	b.n	80011e4 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80010c0:	f7ff fde6 	bl	8000c90 <HAL_GetTick>
 80010c4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	461a      	mov	r2, r3
 80010cc:	2101      	movs	r1, #1
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 face 	bl	8001670 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80010d4:	f7ff fddc 	bl	8000c90 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d90f      	bls.n	8001106 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80010ea:	6939      	ldr	r1, [r7, #16]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fce5 	bl	8001abc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e06e      	b.n	80011e4 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0da      	beq.n	80010c6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	461a      	mov	r2, r3
 8001116:	2110      	movs	r1, #16
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 faa9 	bl	8001670 <HAL_ETH_ReadPHYRegister>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001128:	6939      	ldr	r1, [r7, #16]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fcc6 	bl	8001abc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001138:	2301      	movs	r3, #1
 800113a:	e053      	b.n	80011e4 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d012      	beq.n	800116c <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	e010      	b.n	8001172 <HAL_ETH_Init+0x2b6>
 8001150:	03938700 	.word	0x03938700
 8001154:	40023800 	.word	0x40023800
 8001158:	40013800 	.word	0x40013800
 800115c:	01312cff 	.word	0x01312cff
 8001160:	02160ebf 	.word	0x02160ebf
 8001164:	05f5e0ff 	.word	0x05f5e0ff
 8001168:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	e026      	b.n	80011d2 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	e021      	b.n	80011d2 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	085b      	lsrs	r3, r3, #1
 800119c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800119e:	4313      	orrs	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 faca 	bl	8001740 <HAL_ETH_WritePHYRegister>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00b      	beq.n	80011ca <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011b6:	6939      	ldr	r1, [r7, #16]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fc7f 	bl	8001abc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00c      	b.n	80011e4 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80011ca:	f640 70ff 	movw	r0, #4095	; 0xfff
 80011ce:	f7ff fd6b 	bl	8000ca8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80011d2:	6939      	ldr	r1, [r7, #16]
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fc71 	bl	8001abc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_ETH_DMATxDescListInit+0x20>
 8001208:	2302      	movs	r3, #2
 800120a:	e051      	b.n	80012b0 <HAL_ETH_DMATxDescListInit+0xc4>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	e030      	b.n	800128a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	015b      	lsls	r3, r3, #5
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001238:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	461a      	mov	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3b01      	subs	r3, #1
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	d208      	bcs.n	800127e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	015b      	lsls	r3, r3, #5
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	461a      	mov	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	e002      	b.n	8001284 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3ca      	bcc.n	8001228 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800129c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_ETH_DMARxDescListInit+0x20>
 80012d8:	2302      	movs	r3, #2
 80012da:	e055      	b.n	8001388 <HAL_ETH_DMARxDescListInit+0xcc>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2202      	movs	r2, #2
 80012e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e034      	b.n	8001362 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	015b      	lsls	r3, r3, #5
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	4413      	add	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001308:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001310:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001318:	fb02 f303 	mul.w	r3, r2, r3
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	461a      	mov	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d105      	bne.n	800133a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	d208      	bcs.n	8001356 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	015b      	lsls	r3, r3, #5
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	4413      	add	r3, r2
 800134e:	461a      	mov	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	e002      	b.n	800135c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3c6      	bcc.n	80012f8 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001374:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_ETH_TransmitFrame+0x24>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e0cc      	b.n	8001552 <HAL_ETH_TransmitFrame+0x1be>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80013de:	2301      	movs	r3, #1
 80013e0:	e0b7      	b.n	8001552 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da09      	bge.n	8001400 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2212      	movs	r2, #18
 80013f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0a8      	b.n	8001552 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001406:	4293      	cmp	r3, r2
 8001408:	d915      	bls.n	8001436 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <HAL_ETH_TransmitFrame+0x1cc>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0a9b      	lsrs	r3, r3, #10
 8001414:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_ETH_TransmitFrame+0x1cc>)
 800141a:	fba3 1302 	umull	r1, r3, r3, r2
 800141e:	0a9b      	lsrs	r3, r3, #10
 8001420:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001424:	fb01 f303 	mul.w	r3, r1, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e001      	b.n	800143a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001436:	2301      	movs	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d11c      	bne.n	800147a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800144e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800145a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800146a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
 8001478:	e04b      	b.n	8001512 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	e044      	b.n	800150a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800148e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d107      	bne.n	80014a6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014ae:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d116      	bne.n	80014e8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80014c8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <HAL_ETH_TransmitFrame+0x1d0>)
 80014ce:	fb03 f202 	mul.w	r2, r3, r2
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80014da:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014e6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014f6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	3301      	adds	r3, #1
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3b6      	bcc.n	8001480 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00d      	beq.n	8001540 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152c:	461a      	mov	r2, r3
 800152e:	2304      	movs	r3, #4
 8001530:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153a:	461a      	mov	r2, r3
 800153c:	2300      	movs	r3, #0
 800153e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	ac02b00b 	.word	0xac02b00b
 8001564:	fffffa0c 	.word	0xfffffa0c

08001568 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_ETH_GetReceivedFrame+0x1a>
 800157e:	2302      	movs	r3, #2
 8001580:	e070      	b.n	8001664 <HAL_ETH_GetReceivedFrame+0xfc>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2202      	movs	r2, #2
 800158e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db5a      	blt.n	8001652 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d030      	beq.n	800160c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d103      	bne.n	80015c4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0c1b      	lsrs	r3, r3, #16
 80015d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015d8:	3b04      	subs	r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	e02b      	b.n	8001664 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001616:	2b00      	cmp	r3, #0
 8001618:	d010      	beq.n	800163c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
 800163a:	e00a      	b.n	8001652 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	460b      	mov	r3, r1
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b82      	cmp	r3, #130	; 0x82
 8001690:	d101      	bne.n	8001696 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001692:	2302      	movs	r3, #2
 8001694:	e050      	b.n	8001738 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2282      	movs	r2, #130	; 0x82
 800169a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 031c 	and.w	r3, r3, #28
 80016ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8a1b      	ldrh	r3, [r3, #16]
 80016b2:	02db      	lsls	r3, r3, #11
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80016bc:	897b      	ldrh	r3, [r7, #10]
 80016be:	019b      	lsls	r3, r3, #6
 80016c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f023 0302 	bic.w	r3, r3, #2
 80016d0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80016e2:	f7ff fad5 	bl	8000c90 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016e8:	e015      	b.n	8001716 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80016ea:	f7ff fad1 	bl	8000c90 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f8:	d309      	bcc.n	800170e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e014      	b.n	8001738 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e4      	bne.n	80016ea <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	460b      	mov	r3, r1
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b42      	cmp	r3, #66	; 0x42
 8001760:	d101      	bne.n	8001766 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001762:	2302      	movs	r3, #2
 8001764:	e04e      	b.n	8001804 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2242      	movs	r2, #66	; 0x42
 800176a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 031c 	and.w	r3, r3, #28
 800177c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8a1b      	ldrh	r3, [r3, #16]
 8001782:	02db      	lsls	r3, r3, #11
 8001784:	b29b      	uxth	r3, r3
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4313      	orrs	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800178c:	897b      	ldrh	r3, [r7, #10]
 800178e:	019b      	lsls	r3, r3, #6
 8001790:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017bc:	f7ff fa68 	bl	8000c90 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017c2:	e015      	b.n	80017f0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80017c4:	f7ff fa64 	bl	8000c90 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d309      	bcc.n	80017e8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e00d      	b.n	8001804 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1e4      	bne.n	80017c4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ETH_Start+0x16>
 800181e:	2302      	movs	r3, #2
 8001820:	e01f      	b.n	8001862 <HAL_ETH_Start+0x56>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fb40 	bl	8001eb8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fb77 	bl	8001f2c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fc06 	bl	8002050 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fbab 	bl	8001fa0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fbd4 	bl	8001ff8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_ETH_Stop+0x16>
 800187c:	2302      	movs	r3, #2
 800187e:	e01f      	b.n	80018c0 <HAL_ETH_Stop+0x56>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fb9b 	bl	8001fcc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fbc4 	bl	8002024 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fb62 	bl	8001f66 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fbd4 	bl	8002050 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fb22 	bl	8001ef2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_ETH_ConfigMAC+0x1c>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e0e4      	b.n	8001aae <HAL_ETH_ConfigMAC+0x1e6>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80b1 	beq.w	8001a5e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001914:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800191a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001920:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001926:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800192c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001932:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001938:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800193e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001944:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800194a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001950:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001956:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800196e:	2001      	movs	r0, #1
 8001970:	f7ff f99a 	bl	8000ca8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001984:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800198a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001990:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001996:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800199c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80019a2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80019ae:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019b0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff f974 	bl	8000ca8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019d0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019da:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019ea:	4013      	ands	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80019f8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80019fe:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001a04:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001a0a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001a10:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff f93d 	bl	8000ca8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f7ff f92a 	bl	8000ca8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	61da      	str	r2, [r3, #28]
 8001a5c:	e01e      	b.n	8001a9c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001a6c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff f90a 	bl	8000ca8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	ff20810f 	.word	0xff20810f

08001abc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0b0      	sub	sp, #192	; 0xc0
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b06:	663b      	str	r3, [r7, #96]	; 0x60
 8001b08:	e001      	b.n	8001b0e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b12:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b28:	2340      	movs	r3, #64	; 0x40
 8001b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001b90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b94:	4ba9      	ldr	r3, [pc, #676]	; (8001e3c <ETH_MACDMAConfig+0x380>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ba0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001ba4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ba8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001bae:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001bb2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001bb6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001bbc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001bc0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001bc4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001bc8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001bcc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001bd0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001bd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001be4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff f859 	bl	8000ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bfe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c04:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c08:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c0e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c14:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c1a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c20:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c24:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c2c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c2e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7ff f834 	bl	8000ca8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c48:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c52:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c5c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001c68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c6c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c70:	4013      	ands	r3, r2
 8001c72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c7a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c80:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c86:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c8c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c92:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c98:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cac:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7fe fff5 	bl	8000ca8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cc6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cc8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001ccc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7fe ffe0 	bl	8000ca8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cfa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d04:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d16:	2304      	movs	r3, #4
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001d4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d50:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <ETH_MACDMAConfig+0x384>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d58:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d5c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d5e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d60:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d62:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d64:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d66:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d68:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d6a:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d6c:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d70:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d74:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d78:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d92:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7fe ff80 	bl	8000ca8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db0:	461a      	mov	r2, r3
 8001db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001db6:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dbc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001dc0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dc4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001dc8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dcc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001dce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001dd2:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ddc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001de0:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7fe ff59 	bl	8000ca8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e04:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10b      	bne.n	8001e26 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	69d9      	ldr	r1, [r3, #28]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <ETH_MACDMAConfig+0x388>)
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e24:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f80a 	bl	8001e48 <ETH_MACAddressConfig>
}
 8001e34:	bf00      	nop
 8001e36:	37c0      	adds	r7, #192	; 0xc0
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	ff20810f 	.word	0xff20810f
 8001e40:	f8de3f23 	.word	0xf8de3f23
 8001e44:	00010040 	.word	0x00010040

08001e48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3305      	adds	r3, #5
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	3204      	adds	r2, #4
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <ETH_MACAddressConfig+0x68>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3303      	adds	r3, #3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	061a      	lsls	r2, r3, #24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3301      	adds	r3, #1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	7812      	ldrb	r2, [r2, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <ETH_MACAddressConfig+0x6c>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	6013      	str	r3, [r2, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40028040 	.word	0x40028040
 8001eb4:	40028044 	.word	0x40028044

08001eb8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7fe fee3 	bl	8000ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	601a      	str	r2, [r3, #0]
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0208 	bic.w	r2, r2, #8
 8001f0c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7fe fec6 	bl	8000ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0204 	orr.w	r2, r2, #4
 8001f46:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7fe fea9 	bl	8000ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	601a      	str	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0204 	bic.w	r2, r2, #4
 8001f80:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7fe fe8c 	bl	8000ca8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fbe:	6193      	str	r3, [r2, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fe6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fea:	6193      	str	r3, [r2, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002016:	6193      	str	r3, [r2, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	f023 0302 	bic.w	r3, r3, #2
 800203e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002042:	6193      	str	r3, [r2, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002072:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002080:	2001      	movs	r0, #1
 8002082:	f7fe fe11 	bl	8000ca8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002090:	6193      	str	r3, [r2, #24]
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e175      	b.n	80023a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8164 	bne.w	80023a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d005      	beq.n	80020f2 <HAL_GPIO_Init+0x56>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d130      	bne.n	8002154 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 0201 	and.w	r2, r3, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d017      	beq.n	8002190 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d123      	bne.n	80021e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80be 	beq.w	80023a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_GPIO_Init+0x324>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800223e:	4a61      	ldr	r2, [pc, #388]	; (80023c4 <HAL_GPIO_Init+0x328>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	220f      	movs	r2, #15
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_GPIO_Init+0x32c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d037      	beq.n	80022da <HAL_GPIO_Init+0x23e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a57      	ldr	r2, [pc, #348]	; (80023cc <HAL_GPIO_Init+0x330>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d031      	beq.n	80022d6 <HAL_GPIO_Init+0x23a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a56      	ldr	r2, [pc, #344]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d02b      	beq.n	80022d2 <HAL_GPIO_Init+0x236>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a55      	ldr	r2, [pc, #340]	; (80023d4 <HAL_GPIO_Init+0x338>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d025      	beq.n	80022ce <HAL_GPIO_Init+0x232>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a54      	ldr	r2, [pc, #336]	; (80023d8 <HAL_GPIO_Init+0x33c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01f      	beq.n	80022ca <HAL_GPIO_Init+0x22e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a53      	ldr	r2, [pc, #332]	; (80023dc <HAL_GPIO_Init+0x340>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d019      	beq.n	80022c6 <HAL_GPIO_Init+0x22a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_GPIO_Init+0x344>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0x226>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a51      	ldr	r2, [pc, #324]	; (80023e4 <HAL_GPIO_Init+0x348>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00d      	beq.n	80022be <HAL_GPIO_Init+0x222>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a50      	ldr	r2, [pc, #320]	; (80023e8 <HAL_GPIO_Init+0x34c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x21e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4f      	ldr	r2, [pc, #316]	; (80023ec <HAL_GPIO_Init+0x350>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_GPIO_Init+0x21a>
 80022b2:	2309      	movs	r3, #9
 80022b4:	e012      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022b6:	230a      	movs	r3, #10
 80022b8:	e010      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022ba:	2308      	movs	r3, #8
 80022bc:	e00e      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022be:	2307      	movs	r3, #7
 80022c0:	e00c      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e00a      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022da:	2300      	movs	r3, #0
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022ec:	4935      	ldr	r1, [pc, #212]	; (80023c4 <HAL_GPIO_Init+0x328>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_GPIO_Init+0x354>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231e:	4a34      	ldr	r2, [pc, #208]	; (80023f0 <HAL_GPIO_Init+0x354>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_GPIO_Init+0x354>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002348:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_GPIO_Init+0x354>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_GPIO_Init+0x354>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002372:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <HAL_GPIO_Init+0x354>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_GPIO_Init+0x354>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <HAL_GPIO_Init+0x354>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	f67f ae86 	bls.w	80020bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40021400 	.word	0x40021400
 80023e0:	40021800 	.word	0x40021800
 80023e4:	40021c00 	.word	0x40021c00
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40022400 	.word	0x40022400
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002476:	f7fe fc0b 	bl	8000c90 <HAL_GetTick>
 800247a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800247c:	e009      	b.n	8002492 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800247e:	f7fe fc07 	bl	8000c90 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248c:	d901      	bls.n	8002492 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e022      	b.n	80024d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249e:	d1ee      	bne.n	800247e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ac:	f7fe fbf0 	bl	8000c90 <HAL_GetTick>
 80024b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024b2:	e009      	b.n	80024c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024b4:	f7fe fbec 	bl	8000c90 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c2:	d901      	bls.n	80024c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e007      	b.n	80024d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024d4:	d1ee      	bne.n	80024b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e29b      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8087 	beq.w	800261a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b96      	ldr	r3, [pc, #600]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00c      	beq.n	8002532 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002518:	4b93      	ldr	r3, [pc, #588]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d112      	bne.n	800254a <HAL_RCC_OscConfig+0x62>
 8002524:	4b90      	ldr	r3, [pc, #576]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	4b8d      	ldr	r3, [pc, #564]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06c      	beq.n	8002618 <HAL_RCC_OscConfig+0x130>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d168      	bne.n	8002618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e275      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x7a>
 8002554:	4b84      	ldr	r3, [pc, #528]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a83      	ldr	r2, [pc, #524]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e02e      	b.n	80025c0 <HAL_RCC_OscConfig+0xd8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x9c>
 800256a:	4b7f      	ldr	r3, [pc, #508]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7e      	ldr	r2, [pc, #504]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b7c      	ldr	r3, [pc, #496]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7b      	ldr	r2, [pc, #492]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xd8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0xc0>
 800258e:	4b76      	ldr	r3, [pc, #472]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a75      	ldr	r2, [pc, #468]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b73      	ldr	r3, [pc, #460]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a72      	ldr	r2, [pc, #456]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xd8>
 80025a8:	4b6f      	ldr	r3, [pc, #444]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b6c      	ldr	r3, [pc, #432]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6b      	ldr	r2, [pc, #428]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fb62 	bl	8000c90 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe fb5e 	bl	8000c90 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e229      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b61      	ldr	r3, [pc, #388]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe8>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fb4e 	bl	8000c90 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fb4a 	bl	8000c90 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e215      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x110>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d069      	beq.n	80026fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x190>
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x17a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1e9      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	493d      	ldr	r1, [pc, #244]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e040      	b.n	80026fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a38      	ldr	r2, [pc, #224]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fb00 	bl	8000c90 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe fafc 	bl	8000c90 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1c7      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4929      	ldr	r1, [pc, #164]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
 80026c6:	e018      	b.n	80026fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fadc 	bl	8000c90 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe fad8 	bl	8000c90 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1a3      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d038      	beq.n	8002778 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d019      	beq.n	8002742 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	4a15      	ldr	r2, [pc, #84]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7fe fab9 	bl	8000c90 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002722:	f7fe fab5 	bl	8000c90 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e180      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x23a>
 8002740:	e01a      	b.n	8002778 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe fa9f 	bl	8000c90 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002756:	f7fe fa9b 	bl	8000c90 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d903      	bls.n	800276c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e166      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
 8002768:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a4 	beq.w	80028ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b89      	ldr	r3, [pc, #548]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a88      	ldr	r2, [pc, #544]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ae:	4b83      	ldr	r3, [pc, #524]	; (80029bc <HAL_RCC_OscConfig+0x4d4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027ba:	4b80      	ldr	r3, [pc, #512]	; (80029bc <HAL_RCC_OscConfig+0x4d4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7f      	ldr	r2, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x4d4>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fa63 	bl	8000c90 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fa5f 	bl	8000c90 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e12a      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e0:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x4d4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x31a>
 80027f4:	4b70      	ldr	r3, [pc, #448]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a6f      	ldr	r2, [pc, #444]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002800:	e02d      	b.n	800285e <HAL_RCC_OscConfig+0x376>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x33c>
 800280a:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a6a      	ldr	r2, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	4a67      	ldr	r2, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
 8002822:	e01c      	b.n	800285e <HAL_RCC_OscConfig+0x376>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d10c      	bne.n	8002846 <HAL_RCC_OscConfig+0x35e>
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a61      	ldr	r2, [pc, #388]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	4a5e      	ldr	r2, [pc, #376]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	; 0x70
 8002844:	e00b      	b.n	800285e <HAL_RCC_OscConfig+0x376>
 8002846:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
 8002852:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d015      	beq.n	8002892 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fa13 	bl	8000c90 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fa0f 	bl	8000c90 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0d8      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCC_OscConfig+0x386>
 8002890:	e014      	b.n	80028bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7fe f9fd 	bl	8000c90 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe f9f9 	bl	8000c90 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0c2      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ee      	bne.n	800289a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a3c      	ldr	r2, [pc, #240]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80ae 	beq.w	8002a34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d8:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d06d      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d14b      	bne.n	8002984 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe f9ca 	bl	8000c90 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe f9c6 	bl	8000c90 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e091      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	3b01      	subs	r3, #1
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	071b      	lsls	r3, r3, #28
 800294a:	491b      	ldr	r1, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe f998 	bl	8000c90 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe f994 	bl	8000c90 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e05f      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x47c>
 8002982:	e057      	b.n	8002a34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800298a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe f97e 	bl	8000c90 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe f97a 	bl	8000c90 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e045      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x4b0>
 80029b6:	e03d      	b.n	8002a34 <HAL_RCC_OscConfig+0x54c>
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_OscConfig+0x558>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d030      	beq.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d129      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d122      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d119      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d10f      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0d0      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d910      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 020f 	bic.w	r2, r3, #15
 8002a72:	4965      	ldr	r1, [pc, #404]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d040      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e073      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06b      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4936      	ldr	r1, [pc, #216]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7fe f8aa 	bl	8000c90 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe f8a6 	bl	8000c90 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e053      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d210      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	4922      	ldr	r1, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x1cc>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1d4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f806 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023c00 	.word	0x40023c00
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08010bdc 	.word	0x08010bdc
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000004 	.word	0x20000004

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b094      	sub	sp, #80	; 0x50
 8002c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	647b      	str	r3, [r7, #68]	; 0x44
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c34:	4b79      	ldr	r3, [pc, #484]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x40>
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	f200 80e1 	bhi.w	8002e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4e:	e0db      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c54:	e0db      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c56:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c5a:	e0d8      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c66:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
 8002c86:	2300      	movs	r3, #0
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c8e:	4622      	mov	r2, r4
 8002c90:	462b      	mov	r3, r5
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	0159      	lsls	r1, r3, #5
 8002c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca0:	0150      	lsls	r0, r2, #5
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	1a51      	subs	r1, r2, r1
 8002caa:	6139      	str	r1, [r7, #16]
 8002cac:	4629      	mov	r1, r5
 8002cae:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	018b      	lsls	r3, r1, #6
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cca:	4651      	mov	r1, sl
 8002ccc:	018a      	lsls	r2, r1, #6
 8002cce:	4651      	mov	r1, sl
 8002cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cee:	4690      	mov	r8, r2
 8002cf0:	4699      	mov	r9, r3
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	eb18 0303 	adds.w	r3, r8, r3
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	462b      	mov	r3, r5
 8002cfc:	eb49 0303 	adc.w	r3, r9, r3
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d0e:	4629      	mov	r1, r5
 8002d10:	024b      	lsls	r3, r1, #9
 8002d12:	4621      	mov	r1, r4
 8002d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d18:	4621      	mov	r1, r4
 8002d1a:	024a      	lsls	r2, r1, #9
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d22:	2200      	movs	r2, #0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d2c:	f7fd fad8 	bl	80002e0 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d38:	e058      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	2200      	movs	r2, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	4611      	mov	r1, r2
 8002d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d54:	4642      	mov	r2, r8
 8002d56:	464b      	mov	r3, r9
 8002d58:	f04f 0000 	mov.w	r0, #0
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	0159      	lsls	r1, r3, #5
 8002d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d66:	0150      	lsls	r0, r2, #5
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d72:	4649      	mov	r1, r9
 8002d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d90:	eb63 050b 	sbc.w	r5, r3, fp
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	00eb      	lsls	r3, r5, #3
 8002d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da2:	00e2      	lsls	r2, r4, #3
 8002da4:	4614      	mov	r4, r2
 8002da6:	461d      	mov	r5, r3
 8002da8:	4643      	mov	r3, r8
 8002daa:	18e3      	adds	r3, r4, r3
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	464b      	mov	r3, r9
 8002db0:	eb45 0303 	adc.w	r3, r5, r3
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	028b      	lsls	r3, r1, #10
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dcc:	4621      	mov	r1, r4
 8002dce:	028a      	lsls	r2, r1, #10
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	61fa      	str	r2, [r7, #28]
 8002ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de0:	f7fd fa7e 	bl	80002e0 <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4613      	mov	r3, r2
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	3301      	adds	r3, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3750      	adds	r7, #80	; 0x50
 8002e14:	46bd      	mov	sp, r7
 8002e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	00f42400 	.word	0x00f42400
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000000 	.word	0x20000000

08002e40 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 1;
 8002e46:	4b8d      	ldr	r3, [pc, #564]	; (800307c <MX_LWIP_Init+0x23c>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 1;
 8002e4c:	4b8b      	ldr	r3, [pc, #556]	; (800307c <MX_LWIP_Init+0x23c>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002e52:	4b8a      	ldr	r3, [pc, #552]	; (800307c <MX_LWIP_Init+0x23c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8002e58:	4b88      	ldr	r3, [pc, #544]	; (800307c <MX_LWIP_Init+0x23c>)
 8002e5a:	226f      	movs	r2, #111	; 0x6f
 8002e5c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <MX_LWIP_Init+0x240>)
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002e64:	4b86      	ldr	r3, [pc, #536]	; (8003080 <MX_LWIP_Init+0x240>)
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <MX_LWIP_Init+0x240>)
 8002e6c:	22ff      	movs	r2, #255	; 0xff
 8002e6e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002e70:	4b83      	ldr	r3, [pc, #524]	; (8003080 <MX_LWIP_Init+0x240>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8002e76:	4b83      	ldr	r3, [pc, #524]	; (8003084 <MX_LWIP_Init+0x244>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <MX_LWIP_Init+0x244>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002e82:	4b80      	ldr	r3, [pc, #512]	; (8003084 <MX_LWIP_Init+0x244>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8002e88:	4b7e      	ldr	r3, [pc, #504]	; (8003084 <MX_LWIP_Init+0x244>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002e8e:	f000 fcd5 	bl	800383c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002e92:	4b7a      	ldr	r3, [pc, #488]	; (800307c <MX_LWIP_Init+0x23c>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	061a      	lsls	r2, r3, #24
 8002e98:	4b78      	ldr	r3, [pc, #480]	; (800307c <MX_LWIP_Init+0x23c>)
 8002e9a:	785b      	ldrb	r3, [r3, #1]
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	4b76      	ldr	r3, [pc, #472]	; (800307c <MX_LWIP_Init+0x23c>)
 8002ea2:	789b      	ldrb	r3, [r3, #2]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	4a74      	ldr	r2, [pc, #464]	; (800307c <MX_LWIP_Init+0x23c>)
 8002eaa:	78d2      	ldrb	r2, [r2, #3]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	061a      	lsls	r2, r3, #24
 8002eb0:	4b72      	ldr	r3, [pc, #456]	; (800307c <MX_LWIP_Init+0x23c>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	0619      	lsls	r1, r3, #24
 8002eb6:	4b71      	ldr	r3, [pc, #452]	; (800307c <MX_LWIP_Init+0x23c>)
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	4319      	orrs	r1, r3
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	; (800307c <MX_LWIP_Init+0x23c>)
 8002ec0:	789b      	ldrb	r3, [r3, #2]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	496d      	ldr	r1, [pc, #436]	; (800307c <MX_LWIP_Init+0x23c>)
 8002ec8:	78c9      	ldrb	r1, [r1, #3]
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	4b69      	ldr	r3, [pc, #420]	; (800307c <MX_LWIP_Init+0x23c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	0619      	lsls	r1, r3, #24
 8002eda:	4b68      	ldr	r3, [pc, #416]	; (800307c <MX_LWIP_Init+0x23c>)
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	4319      	orrs	r1, r3
 8002ee2:	4b66      	ldr	r3, [pc, #408]	; (800307c <MX_LWIP_Init+0x23c>)
 8002ee4:	789b      	ldrb	r3, [r3, #2]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	4964      	ldr	r1, [pc, #400]	; (800307c <MX_LWIP_Init+0x23c>)
 8002eec:	78c9      	ldrb	r1, [r1, #3]
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	4b60      	ldr	r3, [pc, #384]	; (800307c <MX_LWIP_Init+0x23c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	0619      	lsls	r1, r3, #24
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <MX_LWIP_Init+0x23c>)
 8002f00:	785b      	ldrb	r3, [r3, #1]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	4319      	orrs	r1, r3
 8002f06:	4b5d      	ldr	r3, [pc, #372]	; (800307c <MX_LWIP_Init+0x23c>)
 8002f08:	789b      	ldrb	r3, [r3, #2]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	495b      	ldr	r1, [pc, #364]	; (800307c <MX_LWIP_Init+0x23c>)
 8002f10:	78c9      	ldrb	r1, [r1, #3]
 8002f12:	430b      	orrs	r3, r1
 8002f14:	0e1b      	lsrs	r3, r3, #24
 8002f16:	4313      	orrs	r3, r2
 8002f18:	4a5b      	ldr	r2, [pc, #364]	; (8003088 <MX_LWIP_Init+0x248>)
 8002f1a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002f1c:	4b58      	ldr	r3, [pc, #352]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	061a      	lsls	r2, r3, #24
 8002f22:	4b57      	ldr	r3, [pc, #348]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	4b55      	ldr	r3, [pc, #340]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f2c:	789b      	ldrb	r3, [r3, #2]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	4313      	orrs	r3, r2
 8002f32:	4a53      	ldr	r2, [pc, #332]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f34:	78d2      	ldrb	r2, [r2, #3]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	061a      	lsls	r2, r3, #24
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	0619      	lsls	r1, r3, #24
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f42:	785b      	ldrb	r3, [r3, #1]
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	4319      	orrs	r1, r3
 8002f48:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f4a:	789b      	ldrb	r3, [r3, #2]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	494b      	ldr	r1, [pc, #300]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f52:	78c9      	ldrb	r1, [r1, #3]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	4b48      	ldr	r3, [pc, #288]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	0619      	lsls	r1, r3, #24
 8002f64:	4b46      	ldr	r3, [pc, #280]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	4319      	orrs	r1, r3
 8002f6c:	4b44      	ldr	r3, [pc, #272]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f6e:	789b      	ldrb	r3, [r3, #2]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	430b      	orrs	r3, r1
 8002f74:	4942      	ldr	r1, [pc, #264]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f76:	78c9      	ldrb	r1, [r1, #3]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f80:	431a      	orrs	r2, r3
 8002f82:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	0619      	lsls	r1, r3, #24
 8002f88:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f8a:	785b      	ldrb	r3, [r3, #1]
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	4319      	orrs	r1, r3
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f92:	789b      	ldrb	r3, [r3, #2]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	430b      	orrs	r3, r1
 8002f98:	4939      	ldr	r1, [pc, #228]	; (8003080 <MX_LWIP_Init+0x240>)
 8002f9a:	78c9      	ldrb	r1, [r1, #3]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	0e1b      	lsrs	r3, r3, #24
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	4a3a      	ldr	r2, [pc, #232]	; (800308c <MX_LWIP_Init+0x24c>)
 8002fa4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002fa6:	4b37      	ldr	r3, [pc, #220]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	061a      	lsls	r2, r3, #24
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	4b33      	ldr	r3, [pc, #204]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fb6:	789b      	ldrb	r3, [r3, #2]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	4a31      	ldr	r2, [pc, #196]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fbe:	78d2      	ldrb	r2, [r2, #3]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	061a      	lsls	r2, r3, #24
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	0619      	lsls	r1, r3, #24
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	4319      	orrs	r1, r3
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fd4:	789b      	ldrb	r3, [r3, #2]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	492a      	ldr	r1, [pc, #168]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fdc:	78c9      	ldrb	r1, [r1, #3]
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <MX_LWIP_Init+0x244>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	0619      	lsls	r1, r3, #24
 8002fee:	4b25      	ldr	r3, [pc, #148]	; (8003084 <MX_LWIP_Init+0x244>)
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	4319      	orrs	r1, r3
 8002ff6:	4b23      	ldr	r3, [pc, #140]	; (8003084 <MX_LWIP_Init+0x244>)
 8002ff8:	789b      	ldrb	r3, [r3, #2]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	4921      	ldr	r1, [pc, #132]	; (8003084 <MX_LWIP_Init+0x244>)
 8003000:	78c9      	ldrb	r1, [r1, #3]
 8003002:	430b      	orrs	r3, r1
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800300a:	431a      	orrs	r2, r3
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <MX_LWIP_Init+0x244>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	0619      	lsls	r1, r3, #24
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <MX_LWIP_Init+0x244>)
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	4319      	orrs	r1, r3
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <MX_LWIP_Init+0x244>)
 800301c:	789b      	ldrb	r3, [r3, #2]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	430b      	orrs	r3, r1
 8003022:	4918      	ldr	r1, [pc, #96]	; (8003084 <MX_LWIP_Init+0x244>)
 8003024:	78c9      	ldrb	r1, [r1, #3]
 8003026:	430b      	orrs	r3, r1
 8003028:	0e1b      	lsrs	r3, r3, #24
 800302a:	4313      	orrs	r3, r2
 800302c:	4a18      	ldr	r2, [pc, #96]	; (8003090 <MX_LWIP_Init+0x250>)
 800302e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003030:	4b18      	ldr	r3, [pc, #96]	; (8003094 <MX_LWIP_Init+0x254>)
 8003032:	9302      	str	r3, [sp, #8]
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <MX_LWIP_Init+0x258>)
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	2300      	movs	r3, #0
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <MX_LWIP_Init+0x250>)
 800303e:	4a13      	ldr	r2, [pc, #76]	; (800308c <MX_LWIP_Init+0x24c>)
 8003040:	4911      	ldr	r1, [pc, #68]	; (8003088 <MX_LWIP_Init+0x248>)
 8003042:	4816      	ldr	r0, [pc, #88]	; (800309c <MX_LWIP_Init+0x25c>)
 8003044:	f001 f8a0 	bl	8004188 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003048:	4814      	ldr	r0, [pc, #80]	; (800309c <MX_LWIP_Init+0x25c>)
 800304a:	f001 fa4f 	bl	80044ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <MX_LWIP_Init+0x25c>)
 8003050:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003060:	480e      	ldr	r0, [pc, #56]	; (800309c <MX_LWIP_Init+0x25c>)
 8003062:	f001 fa53 	bl	800450c <netif_set_up>
 8003066:	e002      	b.n	800306e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <MX_LWIP_Init+0x25c>)
 800306a:	f001 fabb 	bl	80045e4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800306e:	490c      	ldr	r1, [pc, #48]	; (80030a0 <MX_LWIP_Init+0x260>)
 8003070:	480a      	ldr	r0, [pc, #40]	; (800309c <MX_LWIP_Init+0x25c>)
 8003072:	f001 fae9 	bl	8004648 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	200000dc 	.word	0x200000dc
 8003080:	200000e0 	.word	0x200000e0
 8003084:	200000e4 	.word	0x200000e4
 8003088:	200000d0 	.word	0x200000d0
 800308c:	200000d4 	.word	0x200000d4
 8003090:	200000d8 	.word	0x200000d8
 8003094:	0800cf05 	.word	0x0800cf05
 8003098:	08003669 	.word	0x08003669
 800309c:	2000009c 	.word	0x2000009c
 80030a0:	080036d5 	.word	0x080036d5

080030a4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80030a8:	4803      	ldr	r0, [pc, #12]	; (80030b8 <MX_LWIP_Process+0x14>)
 80030aa:	f000 fabd 	bl	8003628 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80030ae:	f007 fb3d 	bl	800a72c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000009c 	.word	0x2000009c

080030bc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08e      	sub	sp, #56	; 0x38
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a4e      	ldr	r2, [pc, #312]	; (8003214 <HAL_ETH_MspInit+0x158>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	f040 8096 	bne.w	800320c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80030e0:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	4a4c      	ldr	r2, [pc, #304]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 80030e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ea:	6313      	str	r3, [r2, #48]	; 0x30
 80030ec:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4a46      	ldr	r2, [pc, #280]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 80030fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003102:	6313      	str	r3, [r2, #48]	; 0x30
 8003104:	4b44      	ldr	r3, [pc, #272]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4a40      	ldr	r2, [pc, #256]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003116:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800311a:	6313      	str	r3, [r2, #48]	; 0x30
 800311c:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	4a3a      	ldr	r2, [pc, #232]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6313      	str	r3, [r2, #48]	; 0x30
 8003134:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003140:	4b35      	ldr	r3, [pc, #212]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	4a34      	ldr	r2, [pc, #208]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6313      	str	r3, [r2, #48]	; 0x30
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4a2e      	ldr	r2, [pc, #184]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	6313      	str	r3, [r2, #48]	; 0x30
 8003164:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003170:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4a28      	ldr	r2, [pc, #160]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 8003176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317a:	6313      	str	r3, [r2, #48]	; 0x30
 800317c:	4b26      	ldr	r3, [pc, #152]	; (8003218 <HAL_ETH_MspInit+0x15c>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003188:	2332      	movs	r3, #50	; 0x32
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003198:	230b      	movs	r3, #11
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a0:	4619      	mov	r1, r3
 80031a2:	481e      	ldr	r0, [pc, #120]	; (800321c <HAL_ETH_MspInit+0x160>)
 80031a4:	f7fe ff7a 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80031a8:	2386      	movs	r3, #134	; 0x86
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031b8:	230b      	movs	r3, #11
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c0:	4619      	mov	r1, r3
 80031c2:	4817      	ldr	r0, [pc, #92]	; (8003220 <HAL_ETH_MspInit+0x164>)
 80031c4:	f7fe ff6a 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80031c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031da:	230b      	movs	r3, #11
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80031de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e2:	4619      	mov	r1, r3
 80031e4:	480f      	ldr	r0, [pc, #60]	; (8003224 <HAL_ETH_MspInit+0x168>)
 80031e6:	f7fe ff59 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80031ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f8:	2303      	movs	r3, #3
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031fc:	230b      	movs	r3, #11
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003204:	4619      	mov	r1, r3
 8003206:	4808      	ldr	r0, [pc, #32]	; (8003228 <HAL_ETH_MspInit+0x16c>)
 8003208:	f7fe ff48 	bl	800209c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800320c:	bf00      	nop
 800320e:	3738      	adds	r7, #56	; 0x38
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40028000 	.word	0x40028000
 8003218:	40023800 	.word	0x40023800
 800321c:	40020800 	.word	0x40020800
 8003220:	40020000 	.word	0x40020000
 8003224:	40020400 	.word	0x40020400
 8003228:	40021800 	.word	0x40021800

0800322c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003238:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <low_level_init+0x144>)
 800323a:	4a4e      	ldr	r2, [pc, #312]	; (8003374 <low_level_init+0x148>)
 800323c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800323e:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <low_level_init+0x144>)
 8003240:	2201      	movs	r2, #1
 8003242:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003244:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <low_level_init+0x144>)
 8003246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800324a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800324c:	4b48      	ldr	r3, [pc, #288]	; (8003370 <low_level_init+0x144>)
 800324e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003252:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <low_level_init+0x144>)
 8003256:	2200      	movs	r2, #0
 8003258:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800325a:	2300      	movs	r3, #0
 800325c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003262:	23e1      	movs	r3, #225	; 0xe1
 8003264:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003266:	2300      	movs	r3, #0
 8003268:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800326a:	2300      	movs	r3, #0
 800326c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800326e:	2300      	movs	r3, #0
 8003270:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003272:	4a3f      	ldr	r2, [pc, #252]	; (8003370 <low_level_init+0x144>)
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800327a:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <low_level_init+0x144>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003280:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <low_level_init+0x144>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003286:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <low_level_init+0x144>)
 8003288:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800328c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800328e:	4838      	ldr	r0, [pc, #224]	; (8003370 <low_level_init+0x144>)
 8003290:	f7fd fe14 	bl	8000ebc <HAL_ETH_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80032b0:	2304      	movs	r3, #4
 80032b2:	4a31      	ldr	r2, [pc, #196]	; (8003378 <low_level_init+0x14c>)
 80032b4:	4931      	ldr	r1, [pc, #196]	; (800337c <low_level_init+0x150>)
 80032b6:	482e      	ldr	r0, [pc, #184]	; (8003370 <low_level_init+0x144>)
 80032b8:	f7fd ff98 	bl	80011ec <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80032bc:	2304      	movs	r3, #4
 80032be:	4a30      	ldr	r2, [pc, #192]	; (8003380 <low_level_init+0x154>)
 80032c0:	4930      	ldr	r1, [pc, #192]	; (8003384 <low_level_init+0x158>)
 80032c2:	482b      	ldr	r0, [pc, #172]	; (8003370 <low_level_init+0x144>)
 80032c4:	f7fd fffa 	bl	80012bc <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2206      	movs	r2, #6
 80032cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <low_level_init+0x144>)
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80032dc:	4b24      	ldr	r3, [pc, #144]	; (8003370 <low_level_init+0x144>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	785a      	ldrb	r2, [r3, #1]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <low_level_init+0x144>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	789a      	ldrb	r2, [r3, #2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <low_level_init+0x144>)
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	78da      	ldrb	r2, [r3, #3]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <low_level_init+0x144>)
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	791a      	ldrb	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <low_level_init+0x144>)
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	795a      	ldrb	r2, [r3, #5]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800331e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003326:	f043 030a 	orr.w	r3, r3, #10
 800332a:	b2da      	uxtb	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003332:	480f      	ldr	r0, [pc, #60]	; (8003370 <low_level_init+0x144>)
 8003334:	f7fe fa6a 	bl	800180c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003338:	f107 0310 	add.w	r3, r7, #16
 800333c:	461a      	mov	r2, r3
 800333e:	211d      	movs	r1, #29
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <low_level_init+0x144>)
 8003342:	f7fe f995 	bl	8001670 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f043 030b 	orr.w	r3, r3, #11
 800334c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	461a      	mov	r2, r3
 8003352:	211d      	movs	r1, #29
 8003354:	4806      	ldr	r0, [pc, #24]	; (8003370 <low_level_init+0x144>)
 8003356:	f7fe f9f3 	bl	8001740 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800335a:	f107 0310 	add.w	r3, r7, #16
 800335e:	461a      	mov	r2, r3
 8003360:	211d      	movs	r1, #29
 8003362:	4803      	ldr	r0, [pc, #12]	; (8003370 <low_level_init+0x144>)
 8003364:	f7fe f984 	bl	8001670 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003368:	bf00      	nop
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20003188 	.word	0x20003188
 8003374:	40028000 	.word	0x40028000
 8003378:	200019b8 	.word	0x200019b8
 800337c:	20000168 	.word	0x20000168
 8003380:	200001e8 	.word	0x200001e8
 8003384:	200000e8 	.word	0x200000e8

08003388 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003392:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <low_level_output+0x138>)
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80033aa:	4b45      	ldr	r3, [pc, #276]	; (80034c0 <low_level_output+0x138>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	e05a      	b.n	8003470 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	da03      	bge.n	80033ca <low_level_output+0x42>
      {
        errval = ERR_USE;
 80033c2:	23f8      	movs	r3, #248	; 0xf8
 80033c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80033c8:	e05c      	b.n	8003484 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	895b      	ldrh	r3, [r3, #10]
 80033ce:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80033d4:	e02f      	b.n	8003436 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	18d0      	adds	r0, r2, r3
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	18d1      	adds	r1, r2, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	f009 fe93 	bl	800d118 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da03      	bge.n	8003408 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003400:	23f8      	movs	r3, #248	; 0xf8
 8003402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003406:	e03d      	b.n	8003484 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003418:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003424:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003430:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003440:	4293      	cmp	r3, r2
 8003442:	d8c8      	bhi.n	80033d6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	18d0      	adds	r0, r2, r3
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4413      	add	r3, r2
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4619      	mov	r1, r3
 8003456:	f009 fe5f 	bl	800d118 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	623b      	str	r3, [r7, #32]
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1a1      	bne.n	80033ba <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	4811      	ldr	r0, [pc, #68]	; (80034c0 <low_level_output+0x138>)
 800347a:	f7fd ff8b 	bl	8001394 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <low_level_output+0x138>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <low_level_output+0x138>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349e:	461a      	mov	r2, r3
 80034a0:	2320      	movs	r3, #32
 80034a2:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <low_level_output+0x138>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ac:	461a      	mov	r2, r3
 80034ae:	2300      	movs	r3, #0
 80034b0:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80034b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3728      	adds	r7, #40	; 0x28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20003188 	.word	0x20003188

080034c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80034e8:	484e      	ldr	r0, [pc, #312]	; (8003624 <low_level_input+0x160>)
 80034ea:	f7fe f83d 	bl	8001568 <HAL_ETH_GetReceivedFrame>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <low_level_input+0x34>

    return NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e091      	b.n	800361c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80034f8:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <low_level_input+0x160>)
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80034fe:	4b49      	ldr	r3, [pc, #292]	; (8003624 <low_level_input+0x160>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003510:	4619      	mov	r1, r3
 8003512:	2000      	movs	r0, #0
 8003514:	f001 f934 	bl	8004780 <pbuf_alloc>
 8003518:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d04b      	beq.n	80035b8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003520:	4b40      	ldr	r3, [pc, #256]	; (8003624 <low_level_input+0x160>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	e040      	b.n	80035b2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	895b      	ldrh	r3, [r3, #10]
 8003534:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800353a:	e021      	b.n	8003580 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	18d0      	adds	r0, r2, r3
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	18d1      	adds	r1, r2, r3
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	461a      	mov	r2, r3
 8003554:	f009 fde0 	bl	800d118 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4413      	add	r3, r2
 800356a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800356e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800357a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800358a:	4293      	cmp	r3, r2
 800358c:	d8d6      	bhi.n	800353c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	18d0      	adds	r0, r2, r3
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4619      	mov	r1, r3
 80035a0:	f009 fdba 	bl	800d118 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4413      	add	r3, r2
 80035aa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1bb      	bne.n	8003530 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <low_level_input+0x160>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	e00b      	b.n	80035dc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	3301      	adds	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <low_level_input+0x160>)
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3ee      	bcc.n	80035c4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <low_level_input+0x160>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <low_level_input+0x160>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00d      	beq.n	800361a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <low_level_input+0x160>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003606:	461a      	mov	r2, r3
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <low_level_input+0x160>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003614:	461a      	mov	r2, r3
 8003616:	2300      	movs	r3, #0
 8003618:	6093      	str	r3, [r2, #8]
  }
  return p;
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800361c:	4618      	mov	r0, r3
 800361e:	3730      	adds	r7, #48	; 0x30
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20003188 	.word	0x20003188

08003628 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff47 	bl	80034c4 <low_level_input>
 8003636:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d010      	beq.n	8003660 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	4798      	blx	r3
 8003648:	4603      	mov	r3, r0
 800364a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800364c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f001 fb77 	bl	8004d48 <pbuf_free>
    p = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e000      	b.n	8003662 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003660:	bf00      	nop
  }
}
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <ethernetif_init+0x1c>
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <ethernetif_init+0x48>)
 8003678:	f240 2212 	movw	r2, #530	; 0x212
 800367c:	490d      	ldr	r1, [pc, #52]	; (80036b4 <ethernetif_init+0x4c>)
 800367e:	480e      	ldr	r0, [pc, #56]	; (80036b8 <ethernetif_init+0x50>)
 8003680:	f009 fd60 	bl	800d144 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2273      	movs	r2, #115	; 0x73
 8003688:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2274      	movs	r2, #116	; 0x74
 8003690:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <ethernetif_init+0x54>)
 8003698:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <ethernetif_init+0x58>)
 800369e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fdc3 	bl	800322c <low_level_init>

  return ERR_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	0800e1fc 	.word	0x0800e1fc
 80036b4:	0800e218 	.word	0x0800e218
 80036b8:	0800e228 	.word	0x0800e228
 80036bc:	0800b3bd 	.word	0x0800b3bd
 80036c0:	08003389 	.word	0x08003389

080036c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80036c8:	f7fd fae2 	bl	8000c90 <HAL_GetTick>
 80036cc:	4603      	mov	r3, r0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d05d      	beq.n	80037b2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80036f6:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <ethernetif_update_config+0xf4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d03f      	beq.n	800377e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80036fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003702:	2100      	movs	r1, #0
 8003704:	4830      	ldr	r0, [pc, #192]	; (80037c8 <ethernetif_update_config+0xf4>)
 8003706:	f7fe f81b 	bl	8001740 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800370a:	f7fd fac1 	bl	8000c90 <HAL_GetTick>
 800370e:	4603      	mov	r3, r0
 8003710:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003712:	f107 0308 	add.w	r3, r7, #8
 8003716:	461a      	mov	r2, r3
 8003718:	2101      	movs	r1, #1
 800371a:	482b      	ldr	r0, [pc, #172]	; (80037c8 <ethernetif_update_config+0xf4>)
 800371c:	f7fd ffa8 	bl	8001670 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003720:	f7fd fab6 	bl	8000c90 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800372e:	d828      	bhi.n	8003782 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0eb      	beq.n	8003712 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800373a:	f107 0308 	add.w	r3, r7, #8
 800373e:	461a      	mov	r2, r3
 8003740:	2110      	movs	r1, #16
 8003742:	4821      	ldr	r0, [pc, #132]	; (80037c8 <ethernetif_update_config+0xf4>)
 8003744:	f7fd ff94 	bl	8001670 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <ethernetif_update_config+0xf4>)
 8003754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e002      	b.n	8003762 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <ethernetif_update_config+0xf4>)
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <ethernetif_update_config+0xf4>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	e016      	b.n	80037a2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <ethernetif_update_config+0xf4>)
 8003776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	e011      	b.n	80037a2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <ethernetif_update_config+0xb0>
          goto error;
 8003782:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <ethernetif_update_config+0xf4>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <ethernetif_update_config+0xf4>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003794:	4313      	orrs	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	2100      	movs	r1, #0
 800379c:	480a      	ldr	r0, [pc, #40]	; (80037c8 <ethernetif_update_config+0xf4>)
 800379e:	f7fd ffcf 	bl	8001740 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80037a2:	2100      	movs	r1, #0
 80037a4:	4808      	ldr	r0, [pc, #32]	; (80037c8 <ethernetif_update_config+0xf4>)
 80037a6:	f7fe f88f 	bl	80018c8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80037aa:	4807      	ldr	r0, [pc, #28]	; (80037c8 <ethernetif_update_config+0xf4>)
 80037ac:	f7fe f82e 	bl	800180c <HAL_ETH_Start>
 80037b0:	e002      	b.n	80037b8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80037b2:	4805      	ldr	r0, [pc, #20]	; (80037c8 <ethernetif_update_config+0xf4>)
 80037b4:	f7fe f859 	bl	800186a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f807 	bl	80037cc <ethernetif_notify_conn_changed>
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20003188 	.word	0x20003188

080037cc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	b21a      	sxth	r2, r3
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	b21b      	sxth	r3, r3
 80037f8:	4313      	orrs	r3, r2
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	b29b      	uxth	r3, r3
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	061a      	lsls	r2, r3, #24
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0e1b      	lsrs	r3, r3, #24
 800382e:	4313      	orrs	r3, r2
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003846:	f000 f8d5 	bl	80039f4 <mem_init>
  memp_init();
 800384a:	f000 fbdb 	bl	8004004 <memp_init>
  pbuf_init();
  netif_init();
 800384e:	f000 fc93 	bl	8004178 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003852:	f006 ffad 	bl	800a7b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003856:	f001 fd05 	bl	8005264 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800385a:	f006 ff1f 	bl	800a69c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <ptr_to_mem+0x20>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	4413      	add	r3, r2
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	2000383c 	.word	0x2000383c

0800388c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <mem_to_ptr+0x20>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	b29b      	uxth	r3, r3
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	2000383c 	.word	0x2000383c

080038b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80038b8:	4b45      	ldr	r3, [pc, #276]	; (80039d0 <plug_holes+0x120>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d206      	bcs.n	80038d0 <plug_holes+0x20>
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <plug_holes+0x124>)
 80038c4:	f240 12df 	movw	r2, #479	; 0x1df
 80038c8:	4943      	ldr	r1, [pc, #268]	; (80039d8 <plug_holes+0x128>)
 80038ca:	4844      	ldr	r0, [pc, #272]	; (80039dc <plug_holes+0x12c>)
 80038cc:	f009 fc3a 	bl	800d144 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80038d0:	4b43      	ldr	r3, [pc, #268]	; (80039e0 <plug_holes+0x130>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d306      	bcc.n	80038e8 <plug_holes+0x38>
 80038da:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <plug_holes+0x124>)
 80038dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038e0:	4940      	ldr	r1, [pc, #256]	; (80039e4 <plug_holes+0x134>)
 80038e2:	483e      	ldr	r0, [pc, #248]	; (80039dc <plug_holes+0x12c>)
 80038e4:	f009 fc2e 	bl	800d144 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	791b      	ldrb	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <plug_holes+0x4e>
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <plug_holes+0x124>)
 80038f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80038f6:	493c      	ldr	r1, [pc, #240]	; (80039e8 <plug_holes+0x138>)
 80038f8:	4838      	ldr	r0, [pc, #224]	; (80039dc <plug_holes+0x12c>)
 80038fa:	f009 fc23 	bl	800d144 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003906:	d906      	bls.n	8003916 <plug_holes+0x66>
 8003908:	4b32      	ldr	r3, [pc, #200]	; (80039d4 <plug_holes+0x124>)
 800390a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800390e:	4937      	ldr	r1, [pc, #220]	; (80039ec <plug_holes+0x13c>)
 8003910:	4832      	ldr	r0, [pc, #200]	; (80039dc <plug_holes+0x12c>)
 8003912:	f009 fc17 	bl	800d144 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ffa4 	bl	8003868 <ptr_to_mem>
 8003920:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	429a      	cmp	r2, r3
 8003928:	d024      	beq.n	8003974 <plug_holes+0xc4>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	791b      	ldrb	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d120      	bne.n	8003974 <plug_holes+0xc4>
 8003932:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <plug_holes+0x130>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	429a      	cmp	r2, r3
 800393a:	d01b      	beq.n	8003974 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800393c:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <plug_holes+0x140>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	429a      	cmp	r2, r3
 8003944:	d102      	bne.n	800394c <plug_holes+0x9c>
      lfree = mem;
 8003946:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <plug_holes+0x140>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800395c:	d00a      	beq.n	8003974 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff80 	bl	8003868 <ptr_to_mem>
 8003968:	4604      	mov	r4, r0
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff8e 	bl	800388c <mem_to_ptr>
 8003970:	4603      	mov	r3, r0
 8003972:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	885b      	ldrh	r3, [r3, #2]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff75 	bl	8003868 <ptr_to_mem>
 800397e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d01f      	beq.n	80039c8 <plug_holes+0x118>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	791b      	ldrb	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d11b      	bne.n	80039c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003990:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <plug_holes+0x140>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d102      	bne.n	80039a0 <plug_holes+0xf0>
      lfree = pmem;
 800399a:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <plug_holes+0x140>)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	881a      	ldrh	r2, [r3, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80039b0:	d00a      	beq.n	80039c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff56 	bl	8003868 <ptr_to_mem>
 80039bc:	4604      	mov	r4, r0
 80039be:	68b8      	ldr	r0, [r7, #8]
 80039c0:	f7ff ff64 	bl	800388c <mem_to_ptr>
 80039c4:	4603      	mov	r3, r0
 80039c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	2000383c 	.word	0x2000383c
 80039d4:	0800e250 	.word	0x0800e250
 80039d8:	0800e280 	.word	0x0800e280
 80039dc:	0800e298 	.word	0x0800e298
 80039e0:	20003840 	.word	0x20003840
 80039e4:	0800e2c0 	.word	0x0800e2c0
 80039e8:	0800e2dc 	.word	0x0800e2dc
 80039ec:	0800e2f8 	.word	0x0800e2f8
 80039f0:	20003844 	.word	0x20003844

080039f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <mem_init+0x68>)
 80039fc:	3303      	adds	r3, #3
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <mem_init+0x6c>)
 8003a06:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <mem_init+0x6c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003a14:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003a22:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8003a26:	f7ff ff1f 	bl	8003868 <ptr_to_mem>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	; (8003a64 <mem_init+0x70>)
 8003a2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <mem_init+0x70>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2201      	movs	r2, #1
 8003a36:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <mem_init+0x70>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003a40:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <mem_init+0x70>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003a4a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <mem_init+0x6c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <mem_init+0x74>)
 8003a52:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200031e8 	.word	0x200031e8
 8003a60:	2000383c 	.word	0x2000383c
 8003a64:	20003840 	.word	0x20003840
 8003a68:	20003844 	.word	0x20003844

08003a6c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff09 	bl	800388c <mem_to_ptr>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fef0 	bl	8003868 <ptr_to_mem>
 8003a88:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	885b      	ldrh	r3, [r3, #2]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff feea 	bl	8003868 <ptr_to_mem>
 8003a94:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a9e:	d818      	bhi.n	8003ad2 <mem_link_valid+0x66>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	885b      	ldrh	r3, [r3, #2]
 8003aa4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003aa8:	d813      	bhi.n	8003ad2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003aae:	8afa      	ldrh	r2, [r7, #22]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d004      	beq.n	8003abe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	8afa      	ldrh	r2, [r7, #22]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d109      	bne.n	8003ad2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <mem_link_valid+0x74>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d006      	beq.n	8003ad6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	885b      	ldrh	r3, [r3, #2]
 8003acc:	8afa      	ldrh	r2, [r7, #22]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d001      	beq.n	8003ad6 <mem_link_valid+0x6a>
    return 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <mem_link_valid+0x6c>
  }
  return 1;
 8003ad6:	2301      	movs	r3, #1
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20003840 	.word	0x20003840

08003ae4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04c      	beq.n	8003b8c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003afc:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <mem_free+0xb0>)
 8003afe:	f240 2273 	movw	r2, #627	; 0x273
 8003b02:	4925      	ldr	r1, [pc, #148]	; (8003b98 <mem_free+0xb4>)
 8003b04:	4825      	ldr	r0, [pc, #148]	; (8003b9c <mem_free+0xb8>)
 8003b06:	f009 fb1d 	bl	800d144 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b0a:	e040      	b.n	8003b8e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3b08      	subs	r3, #8
 8003b10:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <mem_free+0xbc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d306      	bcc.n	8003b2a <mem_free+0x46>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f103 020c 	add.w	r2, r3, #12
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <mem_free+0xc0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d907      	bls.n	8003b3a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <mem_free+0xb0>)
 8003b2c:	f240 227f 	movw	r2, #639	; 0x27f
 8003b30:	491d      	ldr	r1, [pc, #116]	; (8003ba8 <mem_free+0xc4>)
 8003b32:	481a      	ldr	r0, [pc, #104]	; (8003b9c <mem_free+0xb8>)
 8003b34:	f009 fb06 	bl	800d144 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b38:	e029      	b.n	8003b8e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	791b      	ldrb	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d107      	bne.n	8003b52 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <mem_free+0xb0>)
 8003b44:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003b48:	4918      	ldr	r1, [pc, #96]	; (8003bac <mem_free+0xc8>)
 8003b4a:	4814      	ldr	r0, [pc, #80]	; (8003b9c <mem_free+0xb8>)
 8003b4c:	f009 fafa 	bl	800d144 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b50:	e01d      	b.n	8003b8e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7ff ff8a 	bl	8003a6c <mem_link_valid>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d107      	bne.n	8003b6e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <mem_free+0xb0>)
 8003b60:	f240 2295 	movw	r2, #661	; 0x295
 8003b64:	4912      	ldr	r1, [pc, #72]	; (8003bb0 <mem_free+0xcc>)
 8003b66:	480d      	ldr	r0, [pc, #52]	; (8003b9c <mem_free+0xb8>)
 8003b68:	f009 faec 	bl	800d144 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b6c:	e00f      	b.n	8003b8e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <mem_free+0xd0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d202      	bcs.n	8003b84 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <mem_free+0xd0>)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff fe93 	bl	80038b0 <plug_holes>
 8003b8a:	e000      	b.n	8003b8e <mem_free+0xaa>
    return;
 8003b8c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	0800e250 	.word	0x0800e250
 8003b98:	0800e324 	.word	0x0800e324
 8003b9c:	0800e298 	.word	0x0800e298
 8003ba0:	2000383c 	.word	0x2000383c
 8003ba4:	20003840 	.word	0x20003840
 8003ba8:	0800e348 	.word	0x0800e348
 8003bac:	0800e364 	.word	0x0800e364
 8003bb0:	0800e38c 	.word	0x0800e38c
 8003bb4:	20003844 	.word	0x20003844

08003bb8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	3303      	adds	r3, #3
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003bd0:	8bfb      	ldrh	r3, [r7, #30]
 8003bd2:	2b0b      	cmp	r3, #11
 8003bd4:	d801      	bhi.n	8003bda <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003bda:	8bfb      	ldrh	r3, [r7, #30]
 8003bdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003be0:	d803      	bhi.n	8003bea <mem_trim+0x32>
 8003be2:	8bfa      	ldrh	r2, [r7, #30]
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d201      	bcs.n	8003bee <mem_trim+0x36>
    return NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e0cc      	b.n	8003d88 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003bee:	4b68      	ldr	r3, [pc, #416]	; (8003d90 <mem_trim+0x1d8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d304      	bcc.n	8003c02 <mem_trim+0x4a>
 8003bf8:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <mem_trim+0x1dc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d306      	bcc.n	8003c10 <mem_trim+0x58>
 8003c02:	4b65      	ldr	r3, [pc, #404]	; (8003d98 <mem_trim+0x1e0>)
 8003c04:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003c08:	4964      	ldr	r1, [pc, #400]	; (8003d9c <mem_trim+0x1e4>)
 8003c0a:	4865      	ldr	r0, [pc, #404]	; (8003da0 <mem_trim+0x1e8>)
 8003c0c:	f009 fa9a 	bl	800d144 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003c10:	4b5f      	ldr	r3, [pc, #380]	; (8003d90 <mem_trim+0x1d8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d304      	bcc.n	8003c24 <mem_trim+0x6c>
 8003c1a:	4b5e      	ldr	r3, [pc, #376]	; (8003d94 <mem_trim+0x1dc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d301      	bcc.n	8003c28 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	e0af      	b.n	8003d88 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3b08      	subs	r3, #8
 8003c2c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003c2e:	69b8      	ldr	r0, [r7, #24]
 8003c30:	f7ff fe2c 	bl	800388c <mem_to_ptr>
 8003c34:	4603      	mov	r3, r0
 8003c36:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	881a      	ldrh	r2, [r3, #0]
 8003c3c:	8afb      	ldrh	r3, [r7, #22]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b08      	subs	r3, #8
 8003c44:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003c46:	8bfa      	ldrh	r2, [r7, #30]
 8003c48:	8abb      	ldrh	r3, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d906      	bls.n	8003c5c <mem_trim+0xa4>
 8003c4e:	4b52      	ldr	r3, [pc, #328]	; (8003d98 <mem_trim+0x1e0>)
 8003c50:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003c54:	4953      	ldr	r1, [pc, #332]	; (8003da4 <mem_trim+0x1ec>)
 8003c56:	4852      	ldr	r0, [pc, #328]	; (8003da0 <mem_trim+0x1e8>)
 8003c58:	f009 fa74 	bl	800d144 <iprintf>
  if (newsize > size) {
 8003c5c:	8bfa      	ldrh	r2, [r7, #30]
 8003c5e:	8abb      	ldrh	r3, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d901      	bls.n	8003c68 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e08f      	b.n	8003d88 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003c68:	8bfa      	ldrh	r2, [r7, #30]
 8003c6a:	8abb      	ldrh	r3, [r7, #20]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d101      	bne.n	8003c74 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	e089      	b.n	8003d88 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fdf5 	bl	8003868 <ptr_to_mem>
 8003c7e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	791b      	ldrb	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d13f      	bne.n	8003d08 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c90:	d106      	bne.n	8003ca0 <mem_trim+0xe8>
 8003c92:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <mem_trim+0x1e0>)
 8003c94:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003c98:	4943      	ldr	r1, [pc, #268]	; (8003da8 <mem_trim+0x1f0>)
 8003c9a:	4841      	ldr	r0, [pc, #260]	; (8003da0 <mem_trim+0x1e8>)
 8003c9c:	f009 fa52 	bl	800d144 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003ca6:	8afa      	ldrh	r2, [r7, #22]
 8003ca8:	8bfb      	ldrh	r3, [r7, #30]
 8003caa:	4413      	add	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3308      	adds	r3, #8
 8003cb0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <mem_trim+0x1f4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d106      	bne.n	8003cca <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003cbc:	89fb      	ldrh	r3, [r7, #14]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fdd2 	bl	8003868 <ptr_to_mem>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4a39      	ldr	r2, [pc, #228]	; (8003dac <mem_trim+0x1f4>)
 8003cc8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fdcb 	bl	8003868 <ptr_to_mem>
 8003cd2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	89ba      	ldrh	r2, [r7, #12]
 8003cde:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	8afa      	ldrh	r2, [r7, #22]
 8003ce4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	89fa      	ldrh	r2, [r7, #14]
 8003cea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cf4:	d047      	beq.n	8003d86 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fdb4 	bl	8003868 <ptr_to_mem>
 8003d00:	4602      	mov	r2, r0
 8003d02:	89fb      	ldrh	r3, [r7, #14]
 8003d04:	8053      	strh	r3, [r2, #2]
 8003d06:	e03e      	b.n	8003d86 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003d08:	8bfb      	ldrh	r3, [r7, #30]
 8003d0a:	f103 0214 	add.w	r2, r3, #20
 8003d0e:	8abb      	ldrh	r3, [r7, #20]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d838      	bhi.n	8003d86 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003d14:	8afa      	ldrh	r2, [r7, #22]
 8003d16:	8bfb      	ldrh	r3, [r7, #30]
 8003d18:	4413      	add	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d28:	d106      	bne.n	8003d38 <mem_trim+0x180>
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <mem_trim+0x1e0>)
 8003d2c:	f240 3216 	movw	r2, #790	; 0x316
 8003d30:	491d      	ldr	r1, [pc, #116]	; (8003da8 <mem_trim+0x1f0>)
 8003d32:	481b      	ldr	r0, [pc, #108]	; (8003da0 <mem_trim+0x1e8>)
 8003d34:	f009 fa06 	bl	800d144 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003d38:	89fb      	ldrh	r3, [r7, #14]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff fd94 	bl	8003868 <ptr_to_mem>
 8003d40:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <mem_trim+0x1f4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d202      	bcs.n	8003d52 <mem_trim+0x19a>
      lfree = mem2;
 8003d4c:	4a17      	ldr	r2, [pc, #92]	; (8003dac <mem_trim+0x1f4>)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2200      	movs	r2, #0
 8003d56:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	881a      	ldrh	r2, [r3, #0]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	8afa      	ldrh	r2, [r7, #22]
 8003d64:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	89fa      	ldrh	r2, [r7, #14]
 8003d6a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d74:	d007      	beq.n	8003d86 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fd74 	bl	8003868 <ptr_to_mem>
 8003d80:	4602      	mov	r2, r0
 8003d82:	89fb      	ldrh	r3, [r7, #14]
 8003d84:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003d86:	687b      	ldr	r3, [r7, #4]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	2000383c 	.word	0x2000383c
 8003d94:	20003840 	.word	0x20003840
 8003d98:	0800e250 	.word	0x0800e250
 8003d9c:	0800e3c0 	.word	0x0800e3c0
 8003da0:	0800e298 	.word	0x0800e298
 8003da4:	0800e3d8 	.word	0x0800e3d8
 8003da8:	0800e3f8 	.word	0x0800e3f8
 8003dac:	20003844 	.word	0x20003844

08003db0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <mem_malloc+0x14>
    return NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e0d9      	b.n	8003f78 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	3303      	adds	r3, #3
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003dd0:	8bbb      	ldrh	r3, [r7, #28]
 8003dd2:	2b0b      	cmp	r3, #11
 8003dd4:	d801      	bhi.n	8003dda <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003dda:	8bbb      	ldrh	r3, [r7, #28]
 8003ddc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003de0:	d803      	bhi.n	8003dea <mem_malloc+0x3a>
 8003de2:	8bba      	ldrh	r2, [r7, #28]
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d201      	bcs.n	8003dee <mem_malloc+0x3e>
    return NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e0c4      	b.n	8003f78 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003dee:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <mem_malloc+0x1d0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fd4a 	bl	800388c <mem_to_ptr>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	83fb      	strh	r3, [r7, #30]
 8003dfc:	e0b4      	b.n	8003f68 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003dfe:	8bfb      	ldrh	r3, [r7, #30]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fd31 	bl	8003868 <ptr_to_mem>
 8003e06:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	791b      	ldrb	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 80a4 	bne.w	8003f5a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	8bfb      	ldrh	r3, [r7, #30]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f1a3 0208 	sub.w	r2, r3, #8
 8003e20:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003e22:	429a      	cmp	r2, r3
 8003e24:	f0c0 8099 	bcc.w	8003f5a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	8bfb      	ldrh	r3, [r7, #30]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f1a3 0208 	sub.w	r2, r3, #8
 8003e36:	8bbb      	ldrh	r3, [r7, #28]
 8003e38:	3314      	adds	r3, #20
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d333      	bcc.n	8003ea6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003e3e:	8bfa      	ldrh	r2, [r7, #30]
 8003e40:	8bbb      	ldrh	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3308      	adds	r3, #8
 8003e48:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003e4a:	8a7b      	ldrh	r3, [r7, #18]
 8003e4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e50:	d106      	bne.n	8003e60 <mem_malloc+0xb0>
 8003e52:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <mem_malloc+0x1d4>)
 8003e54:	f240 3287 	movw	r2, #903	; 0x387
 8003e58:	494b      	ldr	r1, [pc, #300]	; (8003f88 <mem_malloc+0x1d8>)
 8003e5a:	484c      	ldr	r0, [pc, #304]	; (8003f8c <mem_malloc+0x1dc>)
 8003e5c:	f009 f972 	bl	800d144 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003e60:	8a7b      	ldrh	r3, [r7, #18]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fd00 	bl	8003868 <ptr_to_mem>
 8003e68:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8bfa      	ldrh	r2, [r7, #30]
 8003e7c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	8a7a      	ldrh	r2, [r7, #18]
 8003e82:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2201      	movs	r2, #1
 8003e88:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e92:	d00b      	beq.n	8003eac <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fce5 	bl	8003868 <ptr_to_mem>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	8a7b      	ldrh	r3, [r7, #18]
 8003ea2:	8053      	strh	r3, [r2, #2]
 8003ea4:	e002      	b.n	8003eac <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <mem_malloc+0x1d0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d127      	bne.n	8003f06 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003eb6:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <mem_malloc+0x1d0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003ebc:	e005      	b.n	8003eca <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fcd0 	bl	8003868 <ptr_to_mem>
 8003ec8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	791b      	ldrb	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <mem_malloc+0x12c>
 8003ed2:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <mem_malloc+0x1e0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1f0      	bne.n	8003ebe <mem_malloc+0x10e>
          }
          lfree = cur;
 8003edc:	4a28      	ldr	r2, [pc, #160]	; (8003f80 <mem_malloc+0x1d0>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <mem_malloc+0x1d0>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <mem_malloc+0x1e0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d00b      	beq.n	8003f06 <mem_malloc+0x156>
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <mem_malloc+0x1d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <mem_malloc+0x156>
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <mem_malloc+0x1d4>)
 8003efa:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003efe:	4925      	ldr	r1, [pc, #148]	; (8003f94 <mem_malloc+0x1e4>)
 8003f00:	4822      	ldr	r0, [pc, #136]	; (8003f8c <mem_malloc+0x1dc>)
 8003f02:	f009 f91f 	bl	800d144 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003f06:	8bba      	ldrh	r2, [r7, #28]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	4a20      	ldr	r2, [pc, #128]	; (8003f90 <mem_malloc+0x1e0>)
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d906      	bls.n	8003f24 <mem_malloc+0x174>
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <mem_malloc+0x1d4>)
 8003f18:	f240 32b9 	movw	r2, #953	; 0x3b9
 8003f1c:	491e      	ldr	r1, [pc, #120]	; (8003f98 <mem_malloc+0x1e8>)
 8003f1e:	481b      	ldr	r0, [pc, #108]	; (8003f8c <mem_malloc+0x1dc>)
 8003f20:	f009 f910 	bl	800d144 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d006      	beq.n	8003f3c <mem_malloc+0x18c>
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <mem_malloc+0x1d4>)
 8003f30:	f240 32bb 	movw	r2, #955	; 0x3bb
 8003f34:	4919      	ldr	r1, [pc, #100]	; (8003f9c <mem_malloc+0x1ec>)
 8003f36:	4815      	ldr	r0, [pc, #84]	; (8003f8c <mem_malloc+0x1dc>)
 8003f38:	f009 f904 	bl	800d144 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <mem_malloc+0x1a4>
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <mem_malloc+0x1d4>)
 8003f48:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003f4c:	4914      	ldr	r1, [pc, #80]	; (8003fa0 <mem_malloc+0x1f0>)
 8003f4e:	480f      	ldr	r0, [pc, #60]	; (8003f8c <mem_malloc+0x1dc>)
 8003f50:	f009 f8f8 	bl	800d144 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3308      	adds	r3, #8
 8003f58:	e00e      	b.n	8003f78 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003f5a:	8bfb      	ldrh	r3, [r7, #30]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fc83 	bl	8003868 <ptr_to_mem>
 8003f62:	4603      	mov	r3, r0
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003f68:	8bfa      	ldrh	r2, [r7, #30]
 8003f6a:	8bbb      	ldrh	r3, [r7, #28]
 8003f6c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003f70:	429a      	cmp	r2, r3
 8003f72:	f4ff af44 	bcc.w	8003dfe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20003844 	.word	0x20003844
 8003f84:	0800e250 	.word	0x0800e250
 8003f88:	0800e3f8 	.word	0x0800e3f8
 8003f8c:	0800e298 	.word	0x0800e298
 8003f90:	20003840 	.word	0x20003840
 8003f94:	0800e40c 	.word	0x0800e40c
 8003f98:	0800e428 	.word	0x0800e428
 8003f9c:	0800e458 	.word	0x0800e458
 8003fa0:	0800e488 	.word	0x0800e488

08003fa4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	3303      	adds	r3, #3
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e011      	b.n	8003fea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	885b      	ldrh	r3, [r3, #2]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	dbe7      	blt.n	8003fc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800400a:	2300      	movs	r3, #0
 800400c:	80fb      	strh	r3, [r7, #6]
 800400e:	e009      	b.n	8004024 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	4a08      	ldr	r2, [pc, #32]	; (8004034 <memp_init+0x30>)
 8004014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ffc3 	bl	8003fa4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	3301      	adds	r3, #1
 8004022:	80fb      	strh	r3, [r7, #6]
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	2b08      	cmp	r3, #8
 8004028:	d9f2      	bls.n	8004010 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	08010c58 	.word	0x08010c58

08004038 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d012      	beq.n	8004074 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <do_memp_malloc_pool+0x38>
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <do_memp_malloc_pool+0x48>)
 8004064:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004068:	4906      	ldr	r1, [pc, #24]	; (8004084 <do_memp_malloc_pool+0x4c>)
 800406a:	4807      	ldr	r0, [pc, #28]	; (8004088 <do_memp_malloc_pool+0x50>)
 800406c:	f009 f86a 	bl	800d144 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	e000      	b.n	8004076 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	0800e4ac 	.word	0x0800e4ac
 8004084:	0800e4dc 	.word	0x0800e4dc
 8004088:	0800e500 	.word	0x0800e500

0800408c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d908      	bls.n	80040ae <memp_malloc+0x22>
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <memp_malloc+0x3c>)
 800409e:	f240 1257 	movw	r2, #343	; 0x157
 80040a2:	490a      	ldr	r1, [pc, #40]	; (80040cc <memp_malloc+0x40>)
 80040a4:	480a      	ldr	r0, [pc, #40]	; (80040d0 <memp_malloc+0x44>)
 80040a6:	f009 f84d 	bl	800d144 <iprintf>
 80040aa:	2300      	movs	r3, #0
 80040ac:	e008      	b.n	80040c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <memp_malloc+0x48>)
 80040b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ffbe 	bl	8004038 <do_memp_malloc_pool>
 80040bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80040be:	68fb      	ldr	r3, [r7, #12]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	0800e4ac 	.word	0x0800e4ac
 80040cc:	0800e53c 	.word	0x0800e53c
 80040d0:	0800e500 	.word	0x0800e500
 80040d4:	08010c58 	.word	0x08010c58

080040d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d006      	beq.n	80040fa <do_memp_free_pool+0x22>
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <do_memp_free_pool+0x40>)
 80040ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80040f2:	490a      	ldr	r1, [pc, #40]	; (800411c <do_memp_free_pool+0x44>)
 80040f4:	480a      	ldr	r0, [pc, #40]	; (8004120 <do_memp_free_pool+0x48>)
 80040f6:	f009 f825 	bl	800d144 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	0800e4ac 	.word	0x0800e4ac
 800411c:	0800e55c 	.word	0x0800e55c
 8004120:	0800e500 	.word	0x0800e500

08004124 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	2b08      	cmp	r3, #8
 8004134:	d907      	bls.n	8004146 <memp_free+0x22>
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <memp_free+0x44>)
 8004138:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800413c:	490b      	ldr	r1, [pc, #44]	; (800416c <memp_free+0x48>)
 800413e:	480c      	ldr	r0, [pc, #48]	; (8004170 <memp_free+0x4c>)
 8004140:	f009 f800 	bl	800d144 <iprintf>
 8004144:	e00c      	b.n	8004160 <memp_free+0x3c>

  if (mem == NULL) {
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <memp_free+0x50>)
 8004150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004154:	6839      	ldr	r1, [r7, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ffbe 	bl	80040d8 <do_memp_free_pool>
 800415c:	e000      	b.n	8004160 <memp_free+0x3c>
    return;
 800415e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	0800e4ac 	.word	0x0800e4ac
 800416c:	0800e57c 	.word	0x0800e57c
 8004170:	0800e500 	.word	0x0800e500
 8004174:	08010c58 	.word	0x08010c58

08004178 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d108      	bne.n	80041ae <netif_add+0x26>
 800419c:	4b57      	ldr	r3, [pc, #348]	; (80042fc <netif_add+0x174>)
 800419e:	f240 1227 	movw	r2, #295	; 0x127
 80041a2:	4957      	ldr	r1, [pc, #348]	; (8004300 <netif_add+0x178>)
 80041a4:	4857      	ldr	r0, [pc, #348]	; (8004304 <netif_add+0x17c>)
 80041a6:	f008 ffcd 	bl	800d144 <iprintf>
 80041aa:	2300      	movs	r3, #0
 80041ac:	e0a2      	b.n	80042f4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <netif_add+0x3e>
 80041b4:	4b51      	ldr	r3, [pc, #324]	; (80042fc <netif_add+0x174>)
 80041b6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80041ba:	4953      	ldr	r1, [pc, #332]	; (8004308 <netif_add+0x180>)
 80041bc:	4851      	ldr	r0, [pc, #324]	; (8004304 <netif_add+0x17c>)
 80041be:	f008 ffc1 	bl	800d144 <iprintf>
 80041c2:	2300      	movs	r3, #0
 80041c4:	e096      	b.n	80042f4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80041cc:	4b4f      	ldr	r3, [pc, #316]	; (800430c <netif_add+0x184>)
 80041ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80041d6:	4b4d      	ldr	r3, [pc, #308]	; (800430c <netif_add+0x184>)
 80041d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80041e0:	4b4a      	ldr	r3, [pc, #296]	; (800430c <netif_add+0x184>)
 80041e2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a45      	ldr	r2, [pc, #276]	; (8004310 <netif_add+0x188>)
 80041fa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004216:	4b3f      	ldr	r3, [pc, #252]	; (8004314 <netif_add+0x18c>)
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004224:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f913 	bl	8004458 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	4798      	blx	r3
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <netif_add+0xba>
    return NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	e058      	b.n	80042f4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004248:	2bff      	cmp	r3, #255	; 0xff
 800424a:	d103      	bne.n	8004254 <netif_add+0xcc>
        netif->num = 0;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004258:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <netif_add+0x190>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e02b      	b.n	80042b8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d106      	bne.n	8004276 <netif_add+0xee>
 8004268:	4b24      	ldr	r3, [pc, #144]	; (80042fc <netif_add+0x174>)
 800426a:	f240 128b 	movw	r2, #395	; 0x18b
 800426e:	492b      	ldr	r1, [pc, #172]	; (800431c <netif_add+0x194>)
 8004270:	4824      	ldr	r0, [pc, #144]	; (8004304 <netif_add+0x17c>)
 8004272:	f008 ff67 	bl	800d144 <iprintf>
        num_netifs++;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3301      	adds	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2bff      	cmp	r3, #255	; 0xff
 8004280:	dd06      	ble.n	8004290 <netif_add+0x108>
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <netif_add+0x174>)
 8004284:	f240 128d 	movw	r2, #397	; 0x18d
 8004288:	4925      	ldr	r1, [pc, #148]	; (8004320 <netif_add+0x198>)
 800428a:	481e      	ldr	r0, [pc, #120]	; (8004304 <netif_add+0x17c>)
 800428c:	f008 ff5a 	bl	800d144 <iprintf>
        if (netif2->num == netif->num) {
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800429c:	429a      	cmp	r2, r3
 800429e:	d108      	bne.n	80042b2 <netif_add+0x12a>
          netif->num++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042a6:	3301      	adds	r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80042b0:	e005      	b.n	80042be <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1d0      	bne.n	8004260 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1be      	bne.n	8004242 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042ca:	2bfe      	cmp	r3, #254	; 0xfe
 80042cc:	d103      	bne.n	80042d6 <netif_add+0x14e>
    netif_num = 0;
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <netif_add+0x18c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	e006      	b.n	80042e4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042dc:	3301      	adds	r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <netif_add+0x18c>)
 80042e2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <netif_add+0x190>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <netif_add+0x190>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	0800e598 	.word	0x0800e598
 8004300:	0800e62c 	.word	0x0800e62c
 8004304:	0800e5e8 	.word	0x0800e5e8
 8004308:	0800e648 	.word	0x0800e648
 800430c:	08010cbc 	.word	0x08010cbc
 8004310:	0800466b 	.word	0x0800466b
 8004314:	2000673c 	.word	0x2000673c
 8004318:	20006734 	.word	0x20006734
 800431c:	0800e66c 	.word	0x0800e66c
 8004320:	0800e680 	.word	0x0800e680

08004324 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f002 fadf 	bl	80068f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f006 fbc3 	bl	800aac4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <netif_do_set_ipaddr+0x20>
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <netif_do_set_ipaddr+0x88>)
 800435c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004360:	491c      	ldr	r1, [pc, #112]	; (80043d4 <netif_do_set_ipaddr+0x8c>)
 8004362:	481d      	ldr	r0, [pc, #116]	; (80043d8 <netif_do_set_ipaddr+0x90>)
 8004364:	f008 feee 	bl	800d144 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <netif_do_set_ipaddr+0x34>
 800436e:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <netif_do_set_ipaddr+0x88>)
 8004370:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004374:	4917      	ldr	r1, [pc, #92]	; (80043d4 <netif_do_set_ipaddr+0x8c>)
 8004376:	4818      	ldr	r0, [pc, #96]	; (80043d8 <netif_do_set_ipaddr+0x90>)
 8004378:	f008 fee4 	bl	800d144 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3304      	adds	r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d01c      	beq.n	80043c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3304      	adds	r3, #4
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800439a:	f107 0314 	add.w	r3, r7, #20
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ffbf 	bl	8004324 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <netif_do_set_ipaddr+0x6a>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	e000      	b.n	80043b4 <netif_do_set_ipaddr+0x6c>
 80043b2:	2300      	movs	r3, #0
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80043b8:	2101      	movs	r1, #1
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8d2 	bl	8004564 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	0800e598 	.word	0x0800e598
 80043d4:	0800e6b0 	.word	0x0800e6b0
 80043d8:	0800e5e8 	.word	0x0800e5e8

080043dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3308      	adds	r3, #8
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d00a      	beq.n	800440c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <netif_do_set_netmask+0x26>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	e000      	b.n	8004404 <netif_do_set_netmask+0x28>
 8004402:	2300      	movs	r3, #0
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	330c      	adds	r3, #12
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d00a      	beq.n	800444a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <netif_do_set_gw+0x26>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	e000      	b.n	8004442 <netif_do_set_gw+0x28>
 8004440:	2300      	movs	r3, #0
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004474:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <netif_set_addr+0x90>)
 8004476:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <netif_set_addr+0x90>)
 8004480:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004488:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <netif_set_addr+0x90>)
 800448a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <netif_set_addr+0x42>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <netif_set_addr+0x46>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <netif_set_addr+0x48>
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d006      	beq.n	80044b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	461a      	mov	r2, r3
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff ff49 	bl	8004348 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff ff8e 	bl	80043dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff ffa8 	bl	800441a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80044d0:	f107 0310 	add.w	r3, r7, #16
 80044d4:	461a      	mov	r2, r3
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff ff35 	bl	8004348 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80044de:	bf00      	nop
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	08010cbc 	.word	0x08010cbc

080044ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <netif_set_default+0x1c>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20006738 	.word	0x20006738

0800450c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <netif_set_up+0x1e>
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <netif_set_up+0x4c>)
 800451c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004520:	490e      	ldr	r1, [pc, #56]	; (800455c <netif_set_up+0x50>)
 8004522:	480f      	ldr	r0, [pc, #60]	; (8004560 <netif_set_up+0x54>)
 8004524:	f008 fe0e 	bl	800d144 <iprintf>
 8004528:	e013      	b.n	8004552 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800454a:	2103      	movs	r1, #3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f809 	bl	8004564 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	0800e598 	.word	0x0800e598
 800455c:	0800e720 	.word	0x0800e720
 8004560:	0800e5e8 	.word	0x0800e5e8

08004564 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <netif_issue_reports+0x20>
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <netif_issue_reports+0x74>)
 8004578:	f240 326d 	movw	r2, #877	; 0x36d
 800457c:	4917      	ldr	r1, [pc, #92]	; (80045dc <netif_issue_reports+0x78>)
 800457e:	4818      	ldr	r0, [pc, #96]	; (80045e0 <netif_issue_reports+0x7c>)
 8004580:	f008 fde0 	bl	800d144 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01e      	beq.n	80045d0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004598:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800459c:	2b00      	cmp	r3, #0
 800459e:	d017      	beq.n	80045d0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d013      	beq.n	80045d2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f007 f9e5 	bl	800b998 <etharp_request>
 80045ce:	e000      	b.n	80045d2 <netif_issue_reports+0x6e>
    return;
 80045d0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	0800e598 	.word	0x0800e598
 80045dc:	0800e73c 	.word	0x0800e73c
 80045e0:	0800e5e8 	.word	0x0800e5e8

080045e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d107      	bne.n	8004602 <netif_set_down+0x1e>
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <netif_set_down+0x58>)
 80045f4:	f240 329b 	movw	r2, #923	; 0x39b
 80045f8:	4911      	ldr	r1, [pc, #68]	; (8004640 <netif_set_down+0x5c>)
 80045fa:	4812      	ldr	r0, [pc, #72]	; (8004644 <netif_set_down+0x60>)
 80045fc:	f008 fda2 	bl	800d144 <iprintf>
 8004600:	e019      	b.n	8004636 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d012      	beq.n	8004636 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f006 fd6f 	bl	800b114 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	0800e598 	.word	0x0800e598
 8004640:	0800e760 	.word	0x0800e760
 8004644:	0800e5e8 	.word	0x0800e5e8

08004648 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	61da      	str	r2, [r3, #28]
  }
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004676:	f06f 030b 	mvn.w	r3, #11
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <netif_get_by_index+0x48>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e00c      	b.n	80046ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046a6:	3301      	adds	r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	79fa      	ldrb	r2, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d101      	bne.n	80046b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	e006      	b.n	80046c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ef      	bne.n	80046a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20006734 	.word	0x20006734

080046d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <pbuf_free_ooseq+0x38>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <pbuf_free_ooseq+0x3c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	e00a      	b.n	80046fe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f002 f93d 	bl	8006970 <tcp_free_ooseq>
      return;
 80046f6:	e005      	b.n	8004704 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f1      	bne.n	80046e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	2000673d 	.word	0x2000673d
 8004710:	2000674c 	.word	0x2000674c

08004714 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <pbuf_pool_is_empty+0x14>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800471e:	bf00      	nop
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	2000673d 	.word	0x2000673d

0800472c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	460b      	mov	r3, r1
 800473c:	80fb      	strh	r3, [r7, #6]
 800473e:	4613      	mov	r3, r2
 8004740:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88ba      	ldrh	r2, [r7, #4]
 8004758:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800475a:	8b3b      	ldrh	r3, [r7, #24]
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	7f3a      	ldrb	r2, [r7, #28]
 8004766:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	73da      	strb	r2, [r3, #15]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	; 0x30
 8004784:	af02      	add	r7, sp, #8
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
 800478a:	460b      	mov	r3, r1
 800478c:	80bb      	strh	r3, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800479c:	d07f      	beq.n	800489e <pbuf_alloc+0x11e>
 800479e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80047a2:	f300 80c8 	bgt.w	8004936 <pbuf_alloc+0x1b6>
 80047a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80047aa:	d010      	beq.n	80047ce <pbuf_alloc+0x4e>
 80047ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80047b0:	f300 80c1 	bgt.w	8004936 <pbuf_alloc+0x1b6>
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d002      	beq.n	80047be <pbuf_alloc+0x3e>
 80047b8:	2b41      	cmp	r3, #65	; 0x41
 80047ba:	f040 80bc 	bne.w	8004936 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	88bb      	ldrh	r3, [r7, #4]
 80047c2:	4619      	mov	r1, r3
 80047c4:	2000      	movs	r0, #0
 80047c6:	f000 f8d1 	bl	800496c <pbuf_alloc_reference>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80047cc:	e0bd      	b.n	800494a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80047d6:	88bb      	ldrh	r3, [r7, #4]
 80047d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80047da:	2008      	movs	r0, #8
 80047dc:	f7ff fc56 	bl	800408c <memp_malloc>
 80047e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80047e8:	f7ff ff94 	bl	8004714 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80047f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047f4:	f000 faa8 	bl	8004d48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e0a7      	b.n	800494c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80047fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047fe:	3303      	adds	r3, #3
 8004800:	b29b      	uxth	r3, r3
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	b29b      	uxth	r3, r3
 8004808:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800480c:	b29b      	uxth	r3, r3
 800480e:	8b7a      	ldrh	r2, [r7, #26]
 8004810:	4293      	cmp	r3, r2
 8004812:	bf28      	it	cs
 8004814:	4613      	movcs	r3, r2
 8004816:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800481a:	3310      	adds	r3, #16
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	3303      	adds	r3, #3
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	4618      	mov	r0, r3
 8004828:	89f9      	ldrh	r1, [r7, #14]
 800482a:	8b7a      	ldrh	r2, [r7, #26]
 800482c:	2300      	movs	r3, #0
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	460b      	mov	r3, r1
 8004836:	4601      	mov	r1, r0
 8004838:	6938      	ldr	r0, [r7, #16]
 800483a:	f7ff ff77 	bl	800472c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <pbuf_alloc+0xd8>
 800484a:	4b42      	ldr	r3, [pc, #264]	; (8004954 <pbuf_alloc+0x1d4>)
 800484c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004850:	4941      	ldr	r1, [pc, #260]	; (8004958 <pbuf_alloc+0x1d8>)
 8004852:	4842      	ldr	r0, [pc, #264]	; (800495c <pbuf_alloc+0x1dc>)
 8004854:	f008 fc76 	bl	800d144 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004858:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800485a:	3303      	adds	r3, #3
 800485c:	f023 0303 	bic.w	r3, r3, #3
 8004860:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004864:	d106      	bne.n	8004874 <pbuf_alloc+0xf4>
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <pbuf_alloc+0x1d4>)
 8004868:	f44f 7281 	mov.w	r2, #258	; 0x102
 800486c:	493c      	ldr	r1, [pc, #240]	; (8004960 <pbuf_alloc+0x1e0>)
 800486e:	483b      	ldr	r0, [pc, #236]	; (800495c <pbuf_alloc+0x1dc>)
 8004870:	f008 fc68 	bl	800d144 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
 800487e:	e002      	b.n	8004886 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800488a:	8b7a      	ldrh	r2, [r7, #26]
 800488c:	89fb      	ldrh	r3, [r7, #14]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004896:	8b7b      	ldrh	r3, [r7, #26]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d19e      	bne.n	80047da <pbuf_alloc+0x5a>
      break;
 800489c:	e055      	b.n	800494a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800489e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048a0:	3303      	adds	r3, #3
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f023 0303 	bic.w	r3, r3, #3
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	88bb      	ldrh	r3, [r7, #4]
 80048ac:	3303      	adds	r3, #3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f023 0303 	bic.w	r3, r3, #3
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80048ba:	8b3b      	ldrh	r3, [r7, #24]
 80048bc:	3310      	adds	r3, #16
 80048be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80048c0:	8b3a      	ldrh	r2, [r7, #24]
 80048c2:	88bb      	ldrh	r3, [r7, #4]
 80048c4:	3303      	adds	r3, #3
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d306      	bcc.n	80048dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80048ce:	8afa      	ldrh	r2, [r7, #22]
 80048d0:	88bb      	ldrh	r3, [r7, #4]
 80048d2:	3303      	adds	r3, #3
 80048d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d201      	bcs.n	80048e0 <pbuf_alloc+0x160>
        return NULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	e035      	b.n	800494c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80048e0:	8afb      	ldrh	r3, [r7, #22]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fa64 	bl	8003db0 <mem_malloc>
 80048e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <pbuf_alloc+0x174>
        return NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e02b      	b.n	800494c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80048f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048f6:	3310      	adds	r3, #16
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	4413      	add	r3, r2
 80048fc:	3303      	adds	r3, #3
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	4618      	mov	r0, r3
 8004904:	88b9      	ldrh	r1, [r7, #4]
 8004906:	88ba      	ldrh	r2, [r7, #4]
 8004908:	2300      	movs	r3, #0
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	887b      	ldrh	r3, [r7, #2]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	460b      	mov	r3, r1
 8004912:	4601      	mov	r1, r0
 8004914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004916:	f7ff ff09 	bl	800472c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d010      	beq.n	8004948 <pbuf_alloc+0x1c8>
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <pbuf_alloc+0x1d4>)
 8004928:	f44f 7291 	mov.w	r2, #290	; 0x122
 800492c:	490d      	ldr	r1, [pc, #52]	; (8004964 <pbuf_alloc+0x1e4>)
 800492e:	480b      	ldr	r0, [pc, #44]	; (800495c <pbuf_alloc+0x1dc>)
 8004930:	f008 fc08 	bl	800d144 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004934:	e008      	b.n	8004948 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <pbuf_alloc+0x1d4>)
 8004938:	f240 1227 	movw	r2, #295	; 0x127
 800493c:	490a      	ldr	r1, [pc, #40]	; (8004968 <pbuf_alloc+0x1e8>)
 800493e:	4807      	ldr	r0, [pc, #28]	; (800495c <pbuf_alloc+0x1dc>)
 8004940:	f008 fc00 	bl	800d144 <iprintf>
      return NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	e001      	b.n	800494c <pbuf_alloc+0x1cc>
      break;
 8004948:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800494c:	4618      	mov	r0, r3
 800494e:	3728      	adds	r7, #40	; 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	0800e7c8 	.word	0x0800e7c8
 8004958:	0800e7f8 	.word	0x0800e7f8
 800495c:	0800e828 	.word	0x0800e828
 8004960:	0800e850 	.word	0x0800e850
 8004964:	0800e884 	.word	0x0800e884
 8004968:	0800e8b0 	.word	0x0800e8b0

0800496c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af02      	add	r7, sp, #8
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	807b      	strh	r3, [r7, #2]
 8004978:	4613      	mov	r3, r2
 800497a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800497c:	883b      	ldrh	r3, [r7, #0]
 800497e:	2b41      	cmp	r3, #65	; 0x41
 8004980:	d009      	beq.n	8004996 <pbuf_alloc_reference+0x2a>
 8004982:	883b      	ldrh	r3, [r7, #0]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d006      	beq.n	8004996 <pbuf_alloc_reference+0x2a>
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <pbuf_alloc_reference+0x5c>)
 800498a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800498e:	490f      	ldr	r1, [pc, #60]	; (80049cc <pbuf_alloc_reference+0x60>)
 8004990:	480f      	ldr	r0, [pc, #60]	; (80049d0 <pbuf_alloc_reference+0x64>)
 8004992:	f008 fbd7 	bl	800d144 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004996:	2007      	movs	r0, #7
 8004998:	f7ff fb78 	bl	800408c <memp_malloc>
 800499c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e00b      	b.n	80049c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80049a8:	8879      	ldrh	r1, [r7, #2]
 80049aa:	887a      	ldrh	r2, [r7, #2]
 80049ac:	2300      	movs	r3, #0
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	883b      	ldrh	r3, [r7, #0]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	460b      	mov	r3, r1
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff feb7 	bl	800472c <pbuf_init_alloced_pbuf>
  return p;
 80049be:	68fb      	ldr	r3, [r7, #12]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	0800e7c8 	.word	0x0800e7c8
 80049cc:	0800e8cc 	.word	0x0800e8cc
 80049d0:	0800e828 	.word	0x0800e828

080049d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	607b      	str	r3, [r7, #4]
 80049dc:	4603      	mov	r3, r0
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	460b      	mov	r3, r1
 80049e2:	81bb      	strh	r3, [r7, #12]
 80049e4:	4613      	mov	r3, r2
 80049e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80049ec:	8a7b      	ldrh	r3, [r7, #18]
 80049ee:	3303      	adds	r3, #3
 80049f0:	f023 0203 	bic.w	r2, r3, #3
 80049f4:	89bb      	ldrh	r3, [r7, #12]
 80049f6:	441a      	add	r2, r3
 80049f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d901      	bls.n	8004a02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e018      	b.n	8004a34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004a08:	8a7b      	ldrh	r3, [r7, #18]
 8004a0a:	3303      	adds	r3, #3
 8004a0c:	f023 0303 	bic.w	r3, r3, #3
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	4413      	add	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e001      	b.n	8004a1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	89b9      	ldrh	r1, [r7, #12]
 8004a20:	89ba      	ldrh	r2, [r7, #12]
 8004a22:	2302      	movs	r3, #2
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	897b      	ldrh	r3, [r7, #10]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	6979      	ldr	r1, [r7, #20]
 8004a2e:	f7ff fe7d 	bl	800472c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004a32:	687b      	ldr	r3, [r7, #4]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <pbuf_realloc+0x20>
 8004a4e:	4b3a      	ldr	r3, [pc, #232]	; (8004b38 <pbuf_realloc+0xfc>)
 8004a50:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004a54:	4939      	ldr	r1, [pc, #228]	; (8004b3c <pbuf_realloc+0x100>)
 8004a56:	483a      	ldr	r0, [pc, #232]	; (8004b40 <pbuf_realloc+0x104>)
 8004a58:	f008 fb74 	bl	800d144 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	891b      	ldrh	r3, [r3, #8]
 8004a60:	887a      	ldrh	r2, [r7, #2]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d263      	bcs.n	8004b2e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	891a      	ldrh	r2, [r3, #8]
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	817b      	strh	r3, [r7, #10]
  q = p;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004a78:	e018      	b.n	8004aac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	895b      	ldrh	r3, [r3, #10]
 8004a7e:	897a      	ldrh	r2, [r7, #10]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	891a      	ldrh	r2, [r3, #8]
 8004a88:	893b      	ldrh	r3, [r7, #8]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <pbuf_realloc+0x70>
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <pbuf_realloc+0xfc>)
 8004aa0:	f240 12af 	movw	r2, #431	; 0x1af
 8004aa4:	4927      	ldr	r1, [pc, #156]	; (8004b44 <pbuf_realloc+0x108>)
 8004aa6:	4826      	ldr	r0, [pc, #152]	; (8004b40 <pbuf_realloc+0x104>)
 8004aa8:	f008 fb4c 	bl	800d144 <iprintf>
  while (rem_len > q->len) {
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	895b      	ldrh	r3, [r3, #10]
 8004ab0:	897a      	ldrh	r2, [r7, #10]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d8e1      	bhi.n	8004a7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	7b1b      	ldrb	r3, [r3, #12]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d121      	bne.n	8004b06 <pbuf_realloc+0xca>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	895b      	ldrh	r3, [r3, #10]
 8004ac6:	897a      	ldrh	r2, [r7, #10]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d01c      	beq.n	8004b06 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	7b5b      	ldrb	r3, [r3, #13]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d116      	bne.n	8004b06 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	897b      	ldrh	r3, [r7, #10]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff f864 	bl	8003bb8 <mem_trim>
 8004af0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <pbuf_realloc+0xca>
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <pbuf_realloc+0xfc>)
 8004afa:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004afe:	4912      	ldr	r1, [pc, #72]	; (8004b48 <pbuf_realloc+0x10c>)
 8004b00:	480f      	ldr	r0, [pc, #60]	; (8004b40 <pbuf_realloc+0x104>)
 8004b02:	f008 fb1f 	bl	800d144 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	897a      	ldrh	r2, [r7, #10]
 8004b0a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	895a      	ldrh	r2, [r3, #10]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f911 	bl	8004d48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e000      	b.n	8004b30 <pbuf_realloc+0xf4>
    return;
 8004b2e:	bf00      	nop

}
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	0800e7c8 	.word	0x0800e7c8
 8004b3c:	0800e8e0 	.word	0x0800e8e0
 8004b40:	0800e828 	.word	0x0800e828
 8004b44:	0800e8f8 	.word	0x0800e8f8
 8004b48:	0800e910 	.word	0x0800e910

08004b4c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <pbuf_add_header_impl+0x22>
 8004b60:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <pbuf_add_header_impl+0xc4>)
 8004b62:	f240 12df 	movw	r2, #479	; 0x1df
 8004b66:	492b      	ldr	r1, [pc, #172]	; (8004c14 <pbuf_add_header_impl+0xc8>)
 8004b68:	482b      	ldr	r0, [pc, #172]	; (8004c18 <pbuf_add_header_impl+0xcc>)
 8004b6a:	f008 faeb 	bl	800d144 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <pbuf_add_header_impl+0x30>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7a:	d301      	bcc.n	8004b80 <pbuf_add_header_impl+0x34>
    return 1;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e043      	b.n	8004c08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <pbuf_add_header_impl+0x3e>
    return 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e03e      	b.n	8004c08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	891a      	ldrh	r2, [r3, #8]
 8004b92:	8a7b      	ldrh	r3, [r7, #18]
 8004b94:	4413      	add	r3, r2
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8a7a      	ldrh	r2, [r7, #18]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d901      	bls.n	8004ba2 <pbuf_add_header_impl+0x56>
    return 1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e032      	b.n	8004c08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	7b1b      	ldrb	r3, [r3, #12]
 8004ba6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004ba8:	8a3b      	ldrh	r3, [r7, #16]
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	425b      	negs	r3, r3
 8004bba:	4413      	add	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3310      	adds	r3, #16
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d20d      	bcs.n	8004be4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e01d      	b.n	8004c08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	425b      	negs	r3, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e001      	b.n	8004be4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e011      	b.n	8004c08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	895a      	ldrh	r2, [r3, #10]
 8004bee:	8a7b      	ldrh	r3, [r7, #18]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	891a      	ldrh	r2, [r3, #8]
 8004bfc:	8a7b      	ldrh	r3, [r7, #18]
 8004bfe:	4413      	add	r3, r2
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	811a      	strh	r2, [r3, #8]


  return 0;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	0800e7c8 	.word	0x0800e7c8
 8004c14:	0800e92c 	.word	0x0800e92c
 8004c18:	0800e828 	.word	0x0800e828

08004c1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004c26:	2200      	movs	r2, #0
 8004c28:	6839      	ldr	r1, [r7, #0]
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff ff8e 	bl	8004b4c <pbuf_add_header_impl>
 8004c30:	4603      	mov	r3, r0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <pbuf_remove_header+0x1e>
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <pbuf_remove_header+0x94>)
 8004c4e:	f240 224b 	movw	r2, #587	; 0x24b
 8004c52:	4920      	ldr	r1, [pc, #128]	; (8004cd4 <pbuf_remove_header+0x98>)
 8004c54:	4820      	ldr	r0, [pc, #128]	; (8004cd8 <pbuf_remove_header+0x9c>)
 8004c56:	f008 fa75 	bl	800d144 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <pbuf_remove_header+0x2c>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c66:	d301      	bcc.n	8004c6c <pbuf_remove_header+0x30>
    return 1;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e02c      	b.n	8004cc6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <pbuf_remove_header+0x3a>
    return 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e027      	b.n	8004cc6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	895b      	ldrh	r3, [r3, #10]
 8004c7e:	89fa      	ldrh	r2, [r7, #14]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d908      	bls.n	8004c96 <pbuf_remove_header+0x5a>
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <pbuf_remove_header+0x94>)
 8004c86:	f240 2255 	movw	r2, #597	; 0x255
 8004c8a:	4914      	ldr	r1, [pc, #80]	; (8004cdc <pbuf_remove_header+0xa0>)
 8004c8c:	4812      	ldr	r0, [pc, #72]	; (8004cd8 <pbuf_remove_header+0x9c>)
 8004c8e:	f008 fa59 	bl	800d144 <iprintf>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e017      	b.n	8004cc6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	895a      	ldrh	r2, [r3, #10]
 8004cac:	89fb      	ldrh	r3, [r7, #14]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	891a      	ldrh	r2, [r3, #8]
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	0800e7c8 	.word	0x0800e7c8
 8004cd4:	0800e92c 	.word	0x0800e92c
 8004cd8:	0800e828 	.word	0x0800e828
 8004cdc:	0800e938 	.word	0x0800e938

08004ce0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	807b      	strh	r3, [r7, #2]
 8004cec:	4613      	mov	r3, r2
 8004cee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	da08      	bge.n	8004d0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004cf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cfc:	425b      	negs	r3, r3
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff9b 	bl	8004c3c <pbuf_remove_header>
 8004d06:	4603      	mov	r3, r0
 8004d08:	e007      	b.n	8004d1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004d0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d0e:	787a      	ldrb	r2, [r7, #1]
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff ff1a 	bl	8004b4c <pbuf_add_header_impl>
 8004d18:	4603      	mov	r3, r0
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004d2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d32:	2201      	movs	r2, #1
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff ffd2 	bl	8004ce0 <pbuf_header_impl>
 8004d3c:	4603      	mov	r3, r0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <pbuf_free+0x22>
 8004d5c:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <pbuf_free+0xf8>)
 8004d5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004d62:	4938      	ldr	r1, [pc, #224]	; (8004e44 <pbuf_free+0xfc>)
 8004d64:	4838      	ldr	r0, [pc, #224]	; (8004e48 <pbuf_free+0x100>)
 8004d66:	f008 f9ed 	bl	800d144 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e063      	b.n	8004e36 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004d72:	e05c      	b.n	8004e2e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7b9b      	ldrb	r3, [r3, #14]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <pbuf_free+0x42>
 8004d7c:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <pbuf_free+0xf8>)
 8004d7e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004d82:	4932      	ldr	r1, [pc, #200]	; (8004e4c <pbuf_free+0x104>)
 8004d84:	4830      	ldr	r0, [pc, #192]	; (8004e48 <pbuf_free+0x100>)
 8004d86:	f008 f9dd 	bl	800d144 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	7b9b      	ldrb	r3, [r3, #14]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	739a      	strb	r2, [r3, #14]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	7b9b      	ldrb	r3, [r3, #14]
 8004d9a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004d9c:	7dbb      	ldrb	r3, [r7, #22]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d143      	bne.n	8004e2a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7b1b      	ldrb	r3, [r3, #12]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	7b5b      	ldrb	r3, [r3, #13]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d011      	beq.n	8004de2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <pbuf_free+0x90>
 8004dca:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <pbuf_free+0xf8>)
 8004dcc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004dd0:	491f      	ldr	r1, [pc, #124]	; (8004e50 <pbuf_free+0x108>)
 8004dd2:	481d      	ldr	r0, [pc, #116]	; (8004e48 <pbuf_free+0x100>)
 8004dd4:	f008 f9b6 	bl	800d144 <iprintf>
        pc->custom_free_function(p);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
 8004de0:	e01d      	b.n	8004e1e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d104      	bne.n	8004df2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	2008      	movs	r0, #8
 8004dec:	f7ff f99a 	bl	8004124 <memp_free>
 8004df0:	e015      	b.n	8004e1e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d104      	bne.n	8004e02 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	2007      	movs	r0, #7
 8004dfc:	f7ff f992 	bl	8004124 <memp_free>
 8004e00:	e00d      	b.n	8004e1e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d103      	bne.n	8004e10 <pbuf_free+0xc8>
          mem_free(p);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fe fe6b 	bl	8003ae4 <mem_free>
 8004e0e:	e006      	b.n	8004e1e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <pbuf_free+0xf8>)
 8004e12:	f240 320f 	movw	r2, #783	; 0x30f
 8004e16:	490f      	ldr	r1, [pc, #60]	; (8004e54 <pbuf_free+0x10c>)
 8004e18:	480b      	ldr	r0, [pc, #44]	; (8004e48 <pbuf_free+0x100>)
 8004e1a:	f008 f993 	bl	800d144 <iprintf>
        }
      }
      count++;
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	3301      	adds	r3, #1
 8004e22:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	e001      	b.n	8004e2e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d19f      	bne.n	8004d74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	0800e7c8 	.word	0x0800e7c8
 8004e44:	0800e92c 	.word	0x0800e92c
 8004e48:	0800e828 	.word	0x0800e828
 8004e4c:	0800e958 	.word	0x0800e958
 8004e50:	0800e970 	.word	0x0800e970
 8004e54:	0800e994 	.word	0x0800e994

08004e58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004e64:	e005      	b.n	8004e72 <pbuf_clen+0x1a>
    ++len;
 8004e66:	89fb      	ldrh	r3, [r7, #14]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f6      	bne.n	8004e66 <pbuf_clen+0xe>
  }
  return len;
 8004e78:	89fb      	ldrh	r3, [r7, #14]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d010      	beq.n	8004eb8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	7b9b      	ldrb	r3, [r3, #14]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7b9b      	ldrb	r3, [r3, #14]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <pbuf_ref+0x30>
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <pbuf_ref+0x38>)
 8004eac:	f240 3242 	movw	r2, #834	; 0x342
 8004eb0:	4904      	ldr	r1, [pc, #16]	; (8004ec4 <pbuf_ref+0x3c>)
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <pbuf_ref+0x40>)
 8004eb4:	f008 f946 	bl	800d144 <iprintf>
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	0800e7c8 	.word	0x0800e7c8
 8004ec4:	0800e9a8 	.word	0x0800e9a8
 8004ec8:	0800e828 	.word	0x0800e828

08004ecc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <pbuf_cat+0x16>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d107      	bne.n	8004ef2 <pbuf_cat+0x26>
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <pbuf_cat+0x98>)
 8004ee4:	f240 3259 	movw	r2, #857	; 0x359
 8004ee8:	491f      	ldr	r1, [pc, #124]	; (8004f68 <pbuf_cat+0x9c>)
 8004eea:	4820      	ldr	r0, [pc, #128]	; (8004f6c <pbuf_cat+0xa0>)
 8004eec:	f008 f92a 	bl	800d144 <iprintf>
 8004ef0:	e034      	b.n	8004f5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e00a      	b.n	8004f0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	891a      	ldrh	r2, [r3, #8]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	891b      	ldrh	r3, [r3, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	891a      	ldrh	r2, [r3, #8]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	895b      	ldrh	r3, [r3, #10]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d006      	beq.n	8004f30 <pbuf_cat+0x64>
 8004f22:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <pbuf_cat+0x98>)
 8004f24:	f240 3262 	movw	r2, #866	; 0x362
 8004f28:	4911      	ldr	r1, [pc, #68]	; (8004f70 <pbuf_cat+0xa4>)
 8004f2a:	4810      	ldr	r0, [pc, #64]	; (8004f6c <pbuf_cat+0xa0>)
 8004f2c:	f008 f90a 	bl	800d144 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d006      	beq.n	8004f46 <pbuf_cat+0x7a>
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <pbuf_cat+0x98>)
 8004f3a:	f240 3263 	movw	r2, #867	; 0x363
 8004f3e:	490d      	ldr	r1, [pc, #52]	; (8004f74 <pbuf_cat+0xa8>)
 8004f40:	480a      	ldr	r0, [pc, #40]	; (8004f6c <pbuf_cat+0xa0>)
 8004f42:	f008 f8ff 	bl	800d144 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	891a      	ldrh	r2, [r3, #8]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	891b      	ldrh	r3, [r3, #8]
 8004f4e:	4413      	add	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	0800e7c8 	.word	0x0800e7c8
 8004f68:	0800e9bc 	.word	0x0800e9bc
 8004f6c:	0800e828 	.word	0x0800e828
 8004f70:	0800e9f4 	.word	0x0800e9f4
 8004f74:	0800ea24 	.word	0x0800ea24

08004f78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <pbuf_copy+0x2a>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <pbuf_copy+0x2a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	891a      	ldrh	r2, [r3, #8]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	891b      	ldrh	r3, [r3, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d209      	bcs.n	8004fb6 <pbuf_copy+0x3e>
 8004fa2:	4b57      	ldr	r3, [pc, #348]	; (8005100 <pbuf_copy+0x188>)
 8004fa4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004fa8:	4956      	ldr	r1, [pc, #344]	; (8005104 <pbuf_copy+0x18c>)
 8004faa:	4857      	ldr	r0, [pc, #348]	; (8005108 <pbuf_copy+0x190>)
 8004fac:	f008 f8ca 	bl	800d144 <iprintf>
 8004fb0:	f06f 030f 	mvn.w	r3, #15
 8004fb4:	e09f      	b.n	80050f6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	895b      	ldrh	r3, [r3, #10]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	895b      	ldrh	r3, [r3, #10]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1acb      	subs	r3, r1, r3
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d306      	bcc.n	8004fdc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	895b      	ldrh	r3, [r3, #10]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e005      	b.n	8004fe8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	895b      	ldrh	r3, [r3, #10]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	18d0      	adds	r0, r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f008 f88c 	bl	800d118 <memcpy>
    offset_to += len;
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	895b      	ldrh	r3, [r3, #10]
 8005014:	461a      	mov	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	4293      	cmp	r3, r2
 800501a:	d906      	bls.n	800502a <pbuf_copy+0xb2>
 800501c:	4b38      	ldr	r3, [pc, #224]	; (8005100 <pbuf_copy+0x188>)
 800501e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005022:	493a      	ldr	r1, [pc, #232]	; (800510c <pbuf_copy+0x194>)
 8005024:	4838      	ldr	r0, [pc, #224]	; (8005108 <pbuf_copy+0x190>)
 8005026:	f008 f88d 	bl	800d144 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	895b      	ldrh	r3, [r3, #10]
 800502e:	461a      	mov	r2, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4293      	cmp	r3, r2
 8005034:	d906      	bls.n	8005044 <pbuf_copy+0xcc>
 8005036:	4b32      	ldr	r3, [pc, #200]	; (8005100 <pbuf_copy+0x188>)
 8005038:	f240 32da 	movw	r2, #986	; 0x3da
 800503c:	4934      	ldr	r1, [pc, #208]	; (8005110 <pbuf_copy+0x198>)
 800503e:	4832      	ldr	r0, [pc, #200]	; (8005108 <pbuf_copy+0x190>)
 8005040:	f008 f880 	bl	800d144 <iprintf>
    if (offset_from >= p_from->len) {
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	895b      	ldrh	r3, [r3, #10]
 8005048:	461a      	mov	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4293      	cmp	r3, r2
 800504e:	d304      	bcc.n	800505a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	895b      	ldrh	r3, [r3, #10]
 800505e:	461a      	mov	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4293      	cmp	r3, r2
 8005064:	d114      	bne.n	8005090 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10c      	bne.n	8005090 <pbuf_copy+0x118>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <pbuf_copy+0x118>
 800507c:	4b20      	ldr	r3, [pc, #128]	; (8005100 <pbuf_copy+0x188>)
 800507e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005082:	4924      	ldr	r1, [pc, #144]	; (8005114 <pbuf_copy+0x19c>)
 8005084:	4820      	ldr	r0, [pc, #128]	; (8005108 <pbuf_copy+0x190>)
 8005086:	f008 f85d 	bl	800d144 <iprintf>
 800508a:	f06f 030f 	mvn.w	r3, #15
 800508e:	e032      	b.n	80050f6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d013      	beq.n	80050be <pbuf_copy+0x146>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	895a      	ldrh	r2, [r3, #10]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	891b      	ldrh	r3, [r3, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d10d      	bne.n	80050be <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <pbuf_copy+0x146>
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <pbuf_copy+0x188>)
 80050ac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80050b0:	4919      	ldr	r1, [pc, #100]	; (8005118 <pbuf_copy+0x1a0>)
 80050b2:	4815      	ldr	r0, [pc, #84]	; (8005108 <pbuf_copy+0x190>)
 80050b4:	f008 f846 	bl	800d144 <iprintf>
 80050b8:	f06f 0305 	mvn.w	r3, #5
 80050bc:	e01b      	b.n	80050f6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <pbuf_copy+0x174>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	895a      	ldrh	r2, [r3, #10]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	891b      	ldrh	r3, [r3, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d10d      	bne.n	80050ec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <pbuf_copy+0x174>
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <pbuf_copy+0x188>)
 80050da:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80050de:	490e      	ldr	r1, [pc, #56]	; (8005118 <pbuf_copy+0x1a0>)
 80050e0:	4809      	ldr	r0, [pc, #36]	; (8005108 <pbuf_copy+0x190>)
 80050e2:	f008 f82f 	bl	800d144 <iprintf>
 80050e6:	f06f 0305 	mvn.w	r3, #5
 80050ea:	e004      	b.n	80050f6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f47f af61 	bne.w	8004fb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	0800e7c8 	.word	0x0800e7c8
 8005104:	0800ea70 	.word	0x0800ea70
 8005108:	0800e828 	.word	0x0800e828
 800510c:	0800eaa0 	.word	0x0800eaa0
 8005110:	0800eab8 	.word	0x0800eab8
 8005114:	0800ead4 	.word	0x0800ead4
 8005118:	0800eae4 	.word	0x0800eae4

0800511c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4611      	mov	r1, r2
 8005128:	461a      	mov	r2, r3
 800512a:	460b      	mov	r3, r1
 800512c:	80fb      	strh	r3, [r7, #6]
 800512e:	4613      	mov	r3, r2
 8005130:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <pbuf_copy_partial+0x36>
 8005140:	4b2b      	ldr	r3, [pc, #172]	; (80051f0 <pbuf_copy_partial+0xd4>)
 8005142:	f240 420a 	movw	r2, #1034	; 0x40a
 8005146:	492b      	ldr	r1, [pc, #172]	; (80051f4 <pbuf_copy_partial+0xd8>)
 8005148:	482b      	ldr	r0, [pc, #172]	; (80051f8 <pbuf_copy_partial+0xdc>)
 800514a:	f007 fffb 	bl	800d144 <iprintf>
 800514e:	2300      	movs	r3, #0
 8005150:	e04a      	b.n	80051e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d108      	bne.n	800516a <pbuf_copy_partial+0x4e>
 8005158:	4b25      	ldr	r3, [pc, #148]	; (80051f0 <pbuf_copy_partial+0xd4>)
 800515a:	f240 420b 	movw	r2, #1035	; 0x40b
 800515e:	4927      	ldr	r1, [pc, #156]	; (80051fc <pbuf_copy_partial+0xe0>)
 8005160:	4825      	ldr	r0, [pc, #148]	; (80051f8 <pbuf_copy_partial+0xdc>)
 8005162:	f007 ffef 	bl	800d144 <iprintf>
 8005166:	2300      	movs	r3, #0
 8005168:	e03e      	b.n	80051e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e034      	b.n	80051da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005170:	88bb      	ldrh	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <pbuf_copy_partial+0x70>
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	895b      	ldrh	r3, [r3, #10]
 800517a:	88ba      	ldrh	r2, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d305      	bcc.n	800518c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	895b      	ldrh	r3, [r3, #10]
 8005184:	88ba      	ldrh	r2, [r7, #4]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	80bb      	strh	r3, [r7, #4]
 800518a:	e023      	b.n	80051d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	895a      	ldrh	r2, [r3, #10]
 8005190:	88bb      	ldrh	r3, [r7, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005196:	8b3a      	ldrh	r2, [r7, #24]
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	429a      	cmp	r2, r3
 800519c:	d901      	bls.n	80051a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80051a2:	8b7b      	ldrh	r3, [r7, #26]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	18d0      	adds	r0, r2, r3
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	88bb      	ldrh	r3, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	8b3a      	ldrh	r2, [r7, #24]
 80051b2:	4619      	mov	r1, r3
 80051b4:	f007 ffb0 	bl	800d118 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80051b8:	8afa      	ldrh	r2, [r7, #22]
 80051ba:	8b3b      	ldrh	r3, [r7, #24]
 80051bc:	4413      	add	r3, r2
 80051be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80051c0:	8b7a      	ldrh	r2, [r7, #26]
 80051c2:	8b3b      	ldrh	r3, [r7, #24]
 80051c4:	4413      	add	r3, r2
 80051c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	8b3b      	ldrh	r3, [r7, #24]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <pbuf_copy_partial+0xca>
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1c4      	bne.n	8005170 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80051e6:	8afb      	ldrh	r3, [r7, #22]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3720      	adds	r7, #32
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	0800e7c8 	.word	0x0800e7c8
 80051f4:	0800eb10 	.word	0x0800eb10
 80051f8:	0800e828 	.word	0x0800e828
 80051fc:	0800eb30 	.word	0x0800eb30

08005200 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	603a      	str	r2, [r7, #0]
 800520a:	71fb      	strb	r3, [r7, #7]
 800520c:	460b      	mov	r3, r1
 800520e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	8919      	ldrh	r1, [r3, #8]
 8005214:	88ba      	ldrh	r2, [r7, #4]
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fab1 	bl	8004780 <pbuf_alloc>
 800521e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <pbuf_clone+0x2a>
    return NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	e011      	b.n	800524e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fea3 	bl	8004f78 <pbuf_copy>
 8005232:	4603      	mov	r3, r0
 8005234:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005236:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <pbuf_clone+0x4c>
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <pbuf_clone+0x58>)
 8005240:	f240 5224 	movw	r2, #1316	; 0x524
 8005244:	4905      	ldr	r1, [pc, #20]	; (800525c <pbuf_clone+0x5c>)
 8005246:	4806      	ldr	r0, [pc, #24]	; (8005260 <pbuf_clone+0x60>)
 8005248:	f007 ff7c 	bl	800d144 <iprintf>
  return q;
 800524c:	68fb      	ldr	r3, [r7, #12]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	0800e7c8 	.word	0x0800e7c8
 800525c:	0800ec3c 	.word	0x0800ec3c
 8005260:	0800e828 	.word	0x0800e828

08005264 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005268:	f007 ff84 	bl	800d174 <rand>
 800526c:	4603      	mov	r3, r0
 800526e:	b29b      	uxth	r3, r3
 8005270:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005274:	b29b      	uxth	r3, r3
 8005276:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800527a:	b29a      	uxth	r2, r3
 800527c:	4b01      	ldr	r3, [pc, #4]	; (8005284 <tcp_init+0x20>)
 800527e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005280:	bf00      	nop
 8005282:	bd80      	pop	{r7, pc}
 8005284:	2000000a 	.word	0x2000000a

08005288 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	7d1b      	ldrb	r3, [r3, #20]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <tcp_free+0x1c>
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <tcp_free+0x2c>)
 800529a:	22d4      	movs	r2, #212	; 0xd4
 800529c:	4906      	ldr	r1, [pc, #24]	; (80052b8 <tcp_free+0x30>)
 800529e:	4807      	ldr	r0, [pc, #28]	; (80052bc <tcp_free+0x34>)
 80052a0:	f007 ff50 	bl	800d144 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7fe ff3c 	bl	8004124 <memp_free>
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	0800ecc8 	.word	0x0800ecc8
 80052b8:	0800ecf8 	.word	0x0800ecf8
 80052bc:	0800ed0c 	.word	0x0800ed0c

080052c0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	7d1b      	ldrb	r3, [r3, #20]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d105      	bne.n	80052dc <tcp_free_listen+0x1c>
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <tcp_free_listen+0x2c>)
 80052d2:	22df      	movs	r2, #223	; 0xdf
 80052d4:	4906      	ldr	r1, [pc, #24]	; (80052f0 <tcp_free_listen+0x30>)
 80052d6:	4807      	ldr	r0, [pc, #28]	; (80052f4 <tcp_free_listen+0x34>)
 80052d8:	f007 ff34 	bl	800d144 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	2002      	movs	r0, #2
 80052e0:	f7fe ff20 	bl	8004124 <memp_free>
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	0800ecc8 	.word	0x0800ecc8
 80052f0:	0800ed34 	.word	0x0800ed34
 80052f4:	0800ed0c 	.word	0x0800ed0c

080052f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80052fc:	f000 fea2 	bl	8006044 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <tcp_tmr+0x28>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <tcp_tmr+0x28>)
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <tcp_tmr+0x28>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005318:	f000 fb54 	bl	80059c4 <tcp_slowtmr>
  }
}
 800531c:	bf00      	nop
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20006755 	.word	0x20006755

08005324 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <tcp_remove_listener+0x1c>
 8005334:	4b0d      	ldr	r3, [pc, #52]	; (800536c <tcp_remove_listener+0x48>)
 8005336:	22ff      	movs	r2, #255	; 0xff
 8005338:	490d      	ldr	r1, [pc, #52]	; (8005370 <tcp_remove_listener+0x4c>)
 800533a:	480e      	ldr	r0, [pc, #56]	; (8005374 <tcp_remove_listener+0x50>)
 800533c:	f007 ff02 	bl	800d144 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e00a      	b.n	800535c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d102      	bne.n	8005356 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f1      	bne.n	8005346 <tcp_remove_listener+0x22>
    }
  }
}
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	0800ecc8 	.word	0x0800ecc8
 8005370:	0800ed50 	.word	0x0800ed50
 8005374:	0800ed0c 	.word	0x0800ed0c

08005378 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <tcp_listen_closed+0x1c>
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <tcp_listen_closed+0x60>)
 8005388:	f240 1211 	movw	r2, #273	; 0x111
 800538c:	4913      	ldr	r1, [pc, #76]	; (80053dc <tcp_listen_closed+0x64>)
 800538e:	4814      	ldr	r0, [pc, #80]	; (80053e0 <tcp_listen_closed+0x68>)
 8005390:	f007 fed8 	bl	800d144 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7d1b      	ldrb	r3, [r3, #20]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d006      	beq.n	80053aa <tcp_listen_closed+0x32>
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <tcp_listen_closed+0x60>)
 800539e:	f44f 7289 	mov.w	r2, #274	; 0x112
 80053a2:	4910      	ldr	r1, [pc, #64]	; (80053e4 <tcp_listen_closed+0x6c>)
 80053a4:	480e      	ldr	r0, [pc, #56]	; (80053e0 <tcp_listen_closed+0x68>)
 80053a6:	f007 fecd 	bl	800d144 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80053aa:	2301      	movs	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e00b      	b.n	80053c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80053b0:	4a0d      	ldr	r2, [pc, #52]	; (80053e8 <tcp_listen_closed+0x70>)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff ffb1 	bl	8005324 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d9f0      	bls.n	80053b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	0800ecc8 	.word	0x0800ecc8
 80053dc:	0800ed78 	.word	0x0800ed78
 80053e0:	0800ed0c 	.word	0x0800ed0c
 80053e4:	0800ed84 	.word	0x0800ed84
 80053e8:	08010c94 	.word	0x08010c94

080053ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80053ec:	b5b0      	push	{r4, r5, r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af04      	add	r7, sp, #16
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <tcp_close_shutdown+0x20>
 80053fe:	4b63      	ldr	r3, [pc, #396]	; (800558c <tcp_close_shutdown+0x1a0>)
 8005400:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005404:	4962      	ldr	r1, [pc, #392]	; (8005590 <tcp_close_shutdown+0x1a4>)
 8005406:	4863      	ldr	r0, [pc, #396]	; (8005594 <tcp_close_shutdown+0x1a8>)
 8005408:	f007 fe9c 	bl	800d144 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d066      	beq.n	80054e0 <tcp_close_shutdown+0xf4>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	7d1b      	ldrb	r3, [r3, #20]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d003      	beq.n	8005422 <tcp_close_shutdown+0x36>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	7d1b      	ldrb	r3, [r3, #20]
 800541e:	2b07      	cmp	r3, #7
 8005420:	d15e      	bne.n	80054e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <tcp_close_shutdown+0x48>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005432:	d055      	beq.n	80054e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8b5b      	ldrh	r3, [r3, #26]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d106      	bne.n	800544e <tcp_close_shutdown+0x62>
 8005440:	4b52      	ldr	r3, [pc, #328]	; (800558c <tcp_close_shutdown+0x1a0>)
 8005442:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005446:	4954      	ldr	r1, [pc, #336]	; (8005598 <tcp_close_shutdown+0x1ac>)
 8005448:	4852      	ldr	r0, [pc, #328]	; (8005594 <tcp_close_shutdown+0x1a8>)
 800544a:	f007 fe7b 	bl	800d144 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005456:	687d      	ldr	r5, [r7, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	8ad2      	ldrh	r2, [r2, #22]
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	8b09      	ldrh	r1, [r1, #24]
 8005464:	9102      	str	r1, [sp, #8]
 8005466:	9201      	str	r2, [sp, #4]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	462b      	mov	r3, r5
 800546c:	4622      	mov	r2, r4
 800546e:	4601      	mov	r1, r0
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f004 fe91 	bl	800a198 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 f8c6 	bl	8006608 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800547c:	4b47      	ldr	r3, [pc, #284]	; (800559c <tcp_close_shutdown+0x1b0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d105      	bne.n	8005492 <tcp_close_shutdown+0xa6>
 8005486:	4b45      	ldr	r3, [pc, #276]	; (800559c <tcp_close_shutdown+0x1b0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4a43      	ldr	r2, [pc, #268]	; (800559c <tcp_close_shutdown+0x1b0>)
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	e013      	b.n	80054ba <tcp_close_shutdown+0xce>
 8005492:	4b42      	ldr	r3, [pc, #264]	; (800559c <tcp_close_shutdown+0x1b0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e00c      	b.n	80054b4 <tcp_close_shutdown+0xc8>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d104      	bne.n	80054ae <tcp_close_shutdown+0xc2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	60da      	str	r2, [r3, #12]
 80054ac:	e005      	b.n	80054ba <tcp_close_shutdown+0xce>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1ef      	bne.n	800549a <tcp_close_shutdown+0xae>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	60da      	str	r2, [r3, #12]
 80054c0:	4b37      	ldr	r3, [pc, #220]	; (80055a0 <tcp_close_shutdown+0x1b4>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80054c6:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <tcp_close_shutdown+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d102      	bne.n	80054d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80054d0:	f003 fd5e 	bl	8008f90 <tcp_trigger_input_pcb_close>
 80054d4:	e002      	b.n	80054dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff fed6 	bl	8005288 <tcp_free>
      }
      return ERR_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e050      	b.n	8005582 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7d1b      	ldrb	r3, [r3, #20]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d03b      	beq.n	8005560 <tcp_close_shutdown+0x174>
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	dc44      	bgt.n	8005576 <tcp_close_shutdown+0x18a>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <tcp_close_shutdown+0x10a>
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d02a      	beq.n	800554a <tcp_close_shutdown+0x15e>
 80054f4:	e03f      	b.n	8005576 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8adb      	ldrh	r3, [r3, #22]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d021      	beq.n	8005542 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80054fe:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <tcp_close_shutdown+0x1bc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d105      	bne.n	8005514 <tcp_close_shutdown+0x128>
 8005508:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <tcp_close_shutdown+0x1bc>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <tcp_close_shutdown+0x1bc>)
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e013      	b.n	800553c <tcp_close_shutdown+0x150>
 8005514:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <tcp_close_shutdown+0x1bc>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	e00c      	b.n	8005536 <tcp_close_shutdown+0x14a>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d104      	bne.n	8005530 <tcp_close_shutdown+0x144>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	e005      	b.n	800553c <tcp_close_shutdown+0x150>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ef      	bne.n	800551c <tcp_close_shutdown+0x130>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fea0 	bl	8005288 <tcp_free>
      break;
 8005548:	e01a      	b.n	8005580 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff ff14 	bl	8005378 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4816      	ldr	r0, [pc, #88]	; (80055ac <tcp_close_shutdown+0x1c0>)
 8005554:	f001 f8a8 	bl	80066a8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff feb1 	bl	80052c0 <tcp_free_listen>
      break;
 800555e:	e00f      	b.n	8005580 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	480e      	ldr	r0, [pc, #56]	; (800559c <tcp_close_shutdown+0x1b0>)
 8005564:	f001 f8a0 	bl	80066a8 <tcp_pcb_remove>
 8005568:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <tcp_close_shutdown+0x1b4>)
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fe8a 	bl	8005288 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005574:	e004      	b.n	8005580 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f81a 	bl	80055b0 <tcp_close_shutdown_fin>
 800557c:	4603      	mov	r3, r0
 800557e:	e000      	b.n	8005582 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bdb0      	pop	{r4, r5, r7, pc}
 800558a:	bf00      	nop
 800558c:	0800ecc8 	.word	0x0800ecc8
 8005590:	0800ed9c 	.word	0x0800ed9c
 8005594:	0800ed0c 	.word	0x0800ed0c
 8005598:	0800edbc 	.word	0x0800edbc
 800559c:	2000674c 	.word	0x2000674c
 80055a0:	20006754 	.word	0x20006754
 80055a4:	2000678c 	.word	0x2000678c
 80055a8:	20006744 	.word	0x20006744
 80055ac:	20006748 	.word	0x20006748

080055b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <tcp_close_shutdown_fin+0x1c>
 80055be:	4b2e      	ldr	r3, [pc, #184]	; (8005678 <tcp_close_shutdown_fin+0xc8>)
 80055c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80055c4:	492d      	ldr	r1, [pc, #180]	; (800567c <tcp_close_shutdown_fin+0xcc>)
 80055c6:	482e      	ldr	r0, [pc, #184]	; (8005680 <tcp_close_shutdown_fin+0xd0>)
 80055c8:	f007 fdbc 	bl	800d144 <iprintf>

  switch (pcb->state) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	7d1b      	ldrb	r3, [r3, #20]
 80055d0:	2b07      	cmp	r3, #7
 80055d2:	d020      	beq.n	8005616 <tcp_close_shutdown_fin+0x66>
 80055d4:	2b07      	cmp	r3, #7
 80055d6:	dc2b      	bgt.n	8005630 <tcp_close_shutdown_fin+0x80>
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d002      	beq.n	80055e2 <tcp_close_shutdown_fin+0x32>
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d00d      	beq.n	80055fc <tcp_close_shutdown_fin+0x4c>
 80055e0:	e026      	b.n	8005630 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f003 fee6 	bl	80093b4 <tcp_send_fin>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80055ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11f      	bne.n	8005634 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2205      	movs	r2, #5
 80055f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80055fa:	e01b      	b.n	8005634 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f003 fed9 	bl	80093b4 <tcp_send_fin>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d114      	bne.n	8005638 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2205      	movs	r2, #5
 8005612:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005614:	e010      	b.n	8005638 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f003 fecc 	bl	80093b4 <tcp_send_fin>
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2209      	movs	r2, #9
 800562c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800562e:	e005      	b.n	800563c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e01c      	b.n	800566e <tcp_close_shutdown_fin+0xbe>
      break;
 8005634:	bf00      	nop
 8005636:	e002      	b.n	800563e <tcp_close_shutdown_fin+0x8e>
      break;
 8005638:	bf00      	nop
 800563a:	e000      	b.n	800563e <tcp_close_shutdown_fin+0x8e>
      break;
 800563c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800563e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f003 fff2 	bl	8009630 <tcp_output>
 800564c:	e00d      	b.n	800566a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800564e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005656:	d108      	bne.n	800566a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8b5b      	ldrh	r3, [r3, #26]
 800565c:	f043 0308 	orr.w	r3, r3, #8
 8005660:	b29a      	uxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e001      	b.n	800566e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800566a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	0800ecc8 	.word	0x0800ecc8
 800567c:	0800ed78 	.word	0x0800ed78
 8005680:	0800ed0c 	.word	0x0800ed0c

08005684 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <tcp_close+0x22>
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <tcp_close+0x4c>)
 8005694:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005698:	490e      	ldr	r1, [pc, #56]	; (80056d4 <tcp_close+0x50>)
 800569a:	480f      	ldr	r0, [pc, #60]	; (80056d8 <tcp_close+0x54>)
 800569c:	f007 fd52 	bl	800d144 <iprintf>
 80056a0:	f06f 030f 	mvn.w	r3, #15
 80056a4:	e00f      	b.n	80056c6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7d1b      	ldrb	r3, [r3, #20]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d006      	beq.n	80056bc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8b5b      	ldrh	r3, [r3, #26]
 80056b2:	f043 0310 	orr.w	r3, r3, #16
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80056bc:	2101      	movs	r1, #1
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fe94 	bl	80053ec <tcp_close_shutdown>
 80056c4:	4603      	mov	r3, r0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	0800ecc8 	.word	0x0800ecc8
 80056d4:	0800edd8 	.word	0x0800edd8
 80056d8:	0800ed0c 	.word	0x0800ed0c

080056dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	; 0x38
 80056e0:	af04      	add	r7, sp, #16
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d107      	bne.n	80056fc <tcp_abandon+0x20>
 80056ec:	4b52      	ldr	r3, [pc, #328]	; (8005838 <tcp_abandon+0x15c>)
 80056ee:	f240 223d 	movw	r2, #573	; 0x23d
 80056f2:	4952      	ldr	r1, [pc, #328]	; (800583c <tcp_abandon+0x160>)
 80056f4:	4852      	ldr	r0, [pc, #328]	; (8005840 <tcp_abandon+0x164>)
 80056f6:	f007 fd25 	bl	800d144 <iprintf>
 80056fa:	e099      	b.n	8005830 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	7d1b      	ldrb	r3, [r3, #20]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d106      	bne.n	8005712 <tcp_abandon+0x36>
 8005704:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <tcp_abandon+0x15c>)
 8005706:	f44f 7210 	mov.w	r2, #576	; 0x240
 800570a:	494e      	ldr	r1, [pc, #312]	; (8005844 <tcp_abandon+0x168>)
 800570c:	484c      	ldr	r0, [pc, #304]	; (8005840 <tcp_abandon+0x164>)
 800570e:	f007 fd19 	bl	800d144 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7d1b      	ldrb	r3, [r3, #20]
 8005716:	2b0a      	cmp	r3, #10
 8005718:	d107      	bne.n	800572a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	484a      	ldr	r0, [pc, #296]	; (8005848 <tcp_abandon+0x16c>)
 800571e:	f000 ffc3 	bl	80066a8 <tcp_pcb_remove>
    tcp_free(pcb);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fdb0 	bl	8005288 <tcp_free>
 8005728:	e082      	b.n	8005830 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005736:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005744:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7d1b      	ldrb	r3, [r3, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d126      	bne.n	80057a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8adb      	ldrh	r3, [r3, #22]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d02e      	beq.n	80057ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800575c:	4b3b      	ldr	r3, [pc, #236]	; (800584c <tcp_abandon+0x170>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d105      	bne.n	8005772 <tcp_abandon+0x96>
 8005766:	4b39      	ldr	r3, [pc, #228]	; (800584c <tcp_abandon+0x170>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a37      	ldr	r2, [pc, #220]	; (800584c <tcp_abandon+0x170>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e013      	b.n	800579a <tcp_abandon+0xbe>
 8005772:	4b36      	ldr	r3, [pc, #216]	; (800584c <tcp_abandon+0x170>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	e00c      	b.n	8005794 <tcp_abandon+0xb8>
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d104      	bne.n	800578e <tcp_abandon+0xb2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e005      	b.n	800579a <tcp_abandon+0xbe>
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	61fb      	str	r3, [r7, #28]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ef      	bne.n	800577a <tcp_abandon+0x9e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	60da      	str	r2, [r3, #12]
 80057a0:	e00b      	b.n	80057ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8adb      	ldrh	r3, [r3, #22]
 80057aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4828      	ldr	r0, [pc, #160]	; (8005850 <tcp_abandon+0x174>)
 80057b0:	f000 ff7a 	bl	80066a8 <tcp_pcb_remove>
 80057b4:	4b27      	ldr	r3, [pc, #156]	; (8005854 <tcp_abandon+0x178>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fd1c 	bl	8006204 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fd13 	bl	8006204 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fd0a 	bl	8006204 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	8b12      	ldrh	r2, [r2, #24]
 8005800:	9202      	str	r2, [sp, #8]
 8005802:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005804:	9201      	str	r2, [sp, #4]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	460b      	mov	r3, r1
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f004 fcc2 	bl	800a198 <tcp_rst>
    }
    last_state = pcb->state;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7d1b      	ldrb	r3, [r3, #20]
 8005818:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fd34 	bl	8005288 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d004      	beq.n	8005830 <tcp_abandon+0x154>
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f06f 010c 	mvn.w	r1, #12
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	4798      	blx	r3
  }
}
 8005830:	3728      	adds	r7, #40	; 0x28
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	0800ecc8 	.word	0x0800ecc8
 800583c:	0800ee0c 	.word	0x0800ee0c
 8005840:	0800ed0c 	.word	0x0800ed0c
 8005844:	0800ee28 	.word	0x0800ee28
 8005848:	20006750 	.word	0x20006750
 800584c:	20006744 	.word	0x20006744
 8005850:	2000674c 	.word	0x2000674c
 8005854:	20006754 	.word	0x20006754

08005858 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005860:	2101      	movs	r1, #1
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff ff3a 	bl	80056dc <tcp_abandon>
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <tcp_update_rcv_ann_wnd+0x1c>
 800587e:	4b25      	ldr	r3, [pc, #148]	; (8005914 <tcp_update_rcv_ann_wnd+0xa4>)
 8005880:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005884:	4924      	ldr	r1, [pc, #144]	; (8005918 <tcp_update_rcv_ann_wnd+0xa8>)
 8005886:	4825      	ldr	r0, [pc, #148]	; (800591c <tcp_update_rcv_ann_wnd+0xac>)
 8005888:	f007 fc5c 	bl	800d144 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005894:	4413      	add	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80058a0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80058a4:	bf28      	it	cs
 80058a6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80058aa:	b292      	uxth	r2, r2
 80058ac:	4413      	add	r3, r2
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	db08      	blt.n	80058c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	e020      	b.n	800590a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dd03      	ble.n	80058de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058dc:	e014      	b.n	8005908 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f0:	d306      	bcc.n	8005900 <tcp_update_rcv_ann_wnd+0x90>
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <tcp_update_rcv_ann_wnd+0xa4>)
 80058f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80058f8:	4909      	ldr	r1, [pc, #36]	; (8005920 <tcp_update_rcv_ann_wnd+0xb0>)
 80058fa:	4808      	ldr	r0, [pc, #32]	; (800591c <tcp_update_rcv_ann_wnd+0xac>)
 80058fc:	f007 fc22 	bl	800d144 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005908:	2300      	movs	r3, #0
  }
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	0800ecc8 	.word	0x0800ecc8
 8005918:	0800ef24 	.word	0x0800ef24
 800591c:	0800ed0c 	.word	0x0800ed0c
 8005920:	0800ef48 	.word	0x0800ef48

08005924 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d107      	bne.n	8005946 <tcp_recved+0x22>
 8005936:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <tcp_recved+0x90>)
 8005938:	f240 32cf 	movw	r2, #975	; 0x3cf
 800593c:	491e      	ldr	r1, [pc, #120]	; (80059b8 <tcp_recved+0x94>)
 800593e:	481f      	ldr	r0, [pc, #124]	; (80059bc <tcp_recved+0x98>)
 8005940:	f007 fc00 	bl	800d144 <iprintf>
 8005944:	e032      	b.n	80059ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	7d1b      	ldrb	r3, [r3, #20]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d106      	bne.n	800595c <tcp_recved+0x38>
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <tcp_recved+0x90>)
 8005950:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005954:	491a      	ldr	r1, [pc, #104]	; (80059c0 <tcp_recved+0x9c>)
 8005956:	4819      	ldr	r0, [pc, #100]	; (80059bc <tcp_recved+0x98>)
 8005958:	f007 fbf4 	bl	800d144 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	4413      	add	r3, r2
 8005964:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800596c:	d804      	bhi.n	8005978 <tcp_recved+0x54>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005972:	89fa      	ldrh	r2, [r7, #14]
 8005974:	429a      	cmp	r2, r3
 8005976:	d204      	bcs.n	8005982 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800597e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005980:	e002      	b.n	8005988 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	89fa      	ldrh	r2, [r7, #14]
 8005986:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ff71 	bl	8005870 <tcp_update_rcv_ann_wnd>
 800598e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005996:	d309      	bcc.n	80059ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8b5b      	ldrh	r3, [r3, #26]
 800599c:	f043 0302 	orr.w	r3, r3, #2
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f003 fe42 	bl	8009630 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	0800ecc8 	.word	0x0800ecc8
 80059b8:	0800ef64 	.word	0x0800ef64
 80059bc:	0800ed0c 	.word	0x0800ed0c
 80059c0:	0800ef7c 	.word	0x0800ef7c

080059c4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80059c4:	b5b0      	push	{r4, r5, r7, lr}
 80059c6:	b090      	sub	sp, #64	; 0x40
 80059c8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80059d0:	4b94      	ldr	r3, [pc, #592]	; (8005c24 <tcp_slowtmr+0x260>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	4a93      	ldr	r2, [pc, #588]	; (8005c24 <tcp_slowtmr+0x260>)
 80059d8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80059da:	4b93      	ldr	r3, [pc, #588]	; (8005c28 <tcp_slowtmr+0x264>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4b91      	ldr	r3, [pc, #580]	; (8005c28 <tcp_slowtmr+0x264>)
 80059e4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80059ea:	4b90      	ldr	r3, [pc, #576]	; (8005c2c <tcp_slowtmr+0x268>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80059f0:	e29d      	b.n	8005f2e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	7d1b      	ldrb	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <tcp_slowtmr+0x44>
 80059fa:	4b8d      	ldr	r3, [pc, #564]	; (8005c30 <tcp_slowtmr+0x26c>)
 80059fc:	f240 42be 	movw	r2, #1214	; 0x4be
 8005a00:	498c      	ldr	r1, [pc, #560]	; (8005c34 <tcp_slowtmr+0x270>)
 8005a02:	488d      	ldr	r0, [pc, #564]	; (8005c38 <tcp_slowtmr+0x274>)
 8005a04:	f007 fb9e 	bl	800d144 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	7d1b      	ldrb	r3, [r3, #20]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d106      	bne.n	8005a1e <tcp_slowtmr+0x5a>
 8005a10:	4b87      	ldr	r3, [pc, #540]	; (8005c30 <tcp_slowtmr+0x26c>)
 8005a12:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005a16:	4989      	ldr	r1, [pc, #548]	; (8005c3c <tcp_slowtmr+0x278>)
 8005a18:	4887      	ldr	r0, [pc, #540]	; (8005c38 <tcp_slowtmr+0x274>)
 8005a1a:	f007 fb93 	bl	800d144 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	7d1b      	ldrb	r3, [r3, #20]
 8005a22:	2b0a      	cmp	r3, #10
 8005a24:	d106      	bne.n	8005a34 <tcp_slowtmr+0x70>
 8005a26:	4b82      	ldr	r3, [pc, #520]	; (8005c30 <tcp_slowtmr+0x26c>)
 8005a28:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005a2c:	4984      	ldr	r1, [pc, #528]	; (8005c40 <tcp_slowtmr+0x27c>)
 8005a2e:	4882      	ldr	r0, [pc, #520]	; (8005c38 <tcp_slowtmr+0x274>)
 8005a30:	f007 fb88 	bl	800d144 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	7f9a      	ldrb	r2, [r3, #30]
 8005a38:	4b7b      	ldr	r3, [pc, #492]	; (8005c28 <tcp_slowtmr+0x264>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d105      	bne.n	8005a4c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005a4a:	e270      	b.n	8005f2e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005a4c:	4b76      	ldr	r3, [pc, #472]	; (8005c28 <tcp_slowtmr+0x264>)
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	7d1b      	ldrb	r3, [r3, #20]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d10a      	bne.n	8005a7e <tcp_slowtmr+0xba>
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d905      	bls.n	8005a7e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a76:	3301      	adds	r3, #1
 8005a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a7c:	e11e      	b.n	8005cbc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a84:	2b0b      	cmp	r3, #11
 8005a86:	d905      	bls.n	8005a94 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a92:	e113      	b.n	8005cbc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d075      	beq.n	8005b8a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d006      	beq.n	8005ab4 <tcp_slowtmr+0xf0>
 8005aa6:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <tcp_slowtmr+0x26c>)
 8005aa8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005aac:	4965      	ldr	r1, [pc, #404]	; (8005c44 <tcp_slowtmr+0x280>)
 8005aae:	4862      	ldr	r0, [pc, #392]	; (8005c38 <tcp_slowtmr+0x274>)
 8005ab0:	f007 fb48 	bl	800d144 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <tcp_slowtmr+0x106>
 8005abc:	4b5c      	ldr	r3, [pc, #368]	; (8005c30 <tcp_slowtmr+0x26c>)
 8005abe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005ac2:	4961      	ldr	r1, [pc, #388]	; (8005c48 <tcp_slowtmr+0x284>)
 8005ac4:	485c      	ldr	r0, [pc, #368]	; (8005c38 <tcp_slowtmr+0x274>)
 8005ac6:	f007 fb3d 	bl	800d144 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005ad0:	2b0b      	cmp	r3, #11
 8005ad2:	d905      	bls.n	8005ae0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ad8:	3301      	adds	r3, #1
 8005ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ade:	e0ed      	b.n	8005cbc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4a58      	ldr	r2, [pc, #352]	; (8005c4c <tcp_slowtmr+0x288>)
 8005aea:	5cd3      	ldrb	r3, [r2, r3]
 8005aec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005af4:	7c7a      	ldrb	r2, [r7, #17]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d907      	bls.n	8005b0a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b00:	3301      	adds	r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b10:	7c7a      	ldrb	r2, [r7, #17]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	f200 80d2 	bhi.w	8005cbc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005b18:	2301      	movs	r3, #1
 8005b1a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d108      	bne.n	8005b38 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b28:	f004 fc2a 	bl	800a380 <tcp_zero_window_probe>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d014      	beq.n	8005b5c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005b32:	2300      	movs	r3, #0
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	e011      	b.n	8005b5c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b42:	f003 faef 	bl	8009124 <tcp_split_unsent_seg>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d107      	bne.n	8005b5c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b4e:	f003 fd6f 	bl	8009630 <tcp_output>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80ac 	beq.w	8005cbc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005b72:	2b06      	cmp	r3, #6
 8005b74:	f200 80a2 	bhi.w	8005cbc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005b7e:	3301      	adds	r3, #1
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005b88:	e098      	b.n	8005cbc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	db0f      	blt.n	8005bb4 <tcp_slowtmr+0x1f0>
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d008      	beq.n	8005bb4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	b21a      	sxth	r2, r3
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	db7b      	blt.n	8005cbc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005bc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bc6:	f004 f825 	bl	8009c14 <tcp_rexmit_rto_prepare>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <tcp_slowtmr+0x21c>
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d171      	bne.n	8005cbc <tcp_slowtmr+0x2f8>
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d06d      	beq.n	8005cbc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	7d1b      	ldrb	r3, [r3, #20]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d03a      	beq.n	8005c5e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bee:	2b0c      	cmp	r3, #12
 8005bf0:	bf28      	it	cs
 8005bf2:	230c      	movcs	r3, #12
 8005bf4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005bfc:	10db      	asrs	r3, r3, #3
 8005bfe:	b21b      	sxth	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005c08:	4413      	add	r3, r2
 8005c0a:	7efa      	ldrb	r2, [r7, #27]
 8005c0c:	4910      	ldr	r1, [pc, #64]	; (8005c50 <tcp_slowtmr+0x28c>)
 8005c0e:	5c8a      	ldrb	r2, [r1, r2]
 8005c10:	4093      	lsls	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	dc1a      	bgt.n	8005c54 <tcp_slowtmr+0x290>
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	b21a      	sxth	r2, r3
 8005c22:	e019      	b.n	8005c58 <tcp_slowtmr+0x294>
 8005c24:	20006740 	.word	0x20006740
 8005c28:	20006756 	.word	0x20006756
 8005c2c:	2000674c 	.word	0x2000674c
 8005c30:	0800ecc8 	.word	0x0800ecc8
 8005c34:	0800f00c 	.word	0x0800f00c
 8005c38:	0800ed0c 	.word	0x0800ed0c
 8005c3c:	0800f038 	.word	0x0800f038
 8005c40:	0800f064 	.word	0x0800f064
 8005c44:	0800f094 	.word	0x0800f094
 8005c48:	0800f0c8 	.word	0x0800f0c8
 8005c4c:	08010c8c 	.word	0x08010c8c
 8005c50:	08010c7c 	.word	0x08010c7c
 8005c54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	2200      	movs	r2, #0
 8005c62:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005c70:	4293      	cmp	r3, r2
 8005c72:	bf28      	it	cs
 8005c74:	4613      	movcs	r3, r2
 8005c76:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005c78:	8a7b      	ldrh	r3, [r7, #18]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d206      	bcs.n	8005ca4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cb8:	f004 f81c 	bl	8009cf4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	7d1b      	ldrb	r3, [r3, #20]
 8005cc0:	2b06      	cmp	r3, #6
 8005cc2:	d111      	bne.n	8005ce8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	8b5b      	ldrh	r3, [r3, #26]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cd0:	4b9c      	ldr	r3, [pc, #624]	; (8005f44 <tcp_slowtmr+0x580>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b28      	cmp	r3, #40	; 0x28
 8005cdc:	d904      	bls.n	8005ce8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	7a5b      	ldrb	r3, [r3, #9]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04a      	beq.n	8005d8a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d003      	beq.n	8005d04 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005d00:	2b07      	cmp	r3, #7
 8005d02:	d142      	bne.n	8005d8a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d04:	4b8f      	ldr	r3, [pc, #572]	; (8005f44 <tcp_slowtmr+0x580>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005d14:	4b8c      	ldr	r3, [pc, #560]	; (8005f48 <tcp_slowtmr+0x584>)
 8005d16:	440b      	add	r3, r1
 8005d18:	498c      	ldr	r1, [pc, #560]	; (8005f4c <tcp_slowtmr+0x588>)
 8005d1a:	fba1 1303 	umull	r1, r3, r1, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d90a      	bls.n	8005d3a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d28:	3301      	adds	r3, #1
 8005d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005d2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d32:	3301      	adds	r3, #1
 8005d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d38:	e027      	b.n	8005d8a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d3a:	4b82      	ldr	r3, [pc, #520]	; (8005f44 <tcp_slowtmr+0x580>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005d50:	4618      	mov	r0, r3
 8005d52:	4b7f      	ldr	r3, [pc, #508]	; (8005f50 <tcp_slowtmr+0x58c>)
 8005d54:	fb00 f303 	mul.w	r3, r0, r3
 8005d58:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005d5a:	497c      	ldr	r1, [pc, #496]	; (8005f4c <tcp_slowtmr+0x588>)
 8005d5c:	fba1 1303 	umull	r1, r3, r1, r3
 8005d60:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d911      	bls.n	8005d8a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8005d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d68:	f004 faca 	bl	800a300 <tcp_keepalive>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005d72:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d107      	bne.n	8005d8a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005d80:	3301      	adds	r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d011      	beq.n	8005db6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005d92:	4b6c      	ldr	r3, [pc, #432]	; (8005f44 <tcp_slowtmr+0x580>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	1ad2      	subs	r2, r2, r3
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005da2:	4619      	mov	r1, r3
 8005da4:	460b      	mov	r3, r1
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	440b      	add	r3, r1
 8005daa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d302      	bcc.n	8005db6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005db2:	f000 fddd 	bl	8006970 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	7d1b      	ldrb	r3, [r3, #20]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d10b      	bne.n	8005dd6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005dbe:	4b61      	ldr	r3, [pc, #388]	; (8005f44 <tcp_slowtmr+0x580>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b28      	cmp	r3, #40	; 0x28
 8005dca:	d904      	bls.n	8005dd6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	7d1b      	ldrb	r3, [r3, #20]
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d10b      	bne.n	8005df6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005dde:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <tcp_slowtmr+0x580>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2bf0      	cmp	r3, #240	; 0xf0
 8005dea:	d904      	bls.n	8005df6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8005dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df0:	3301      	adds	r3, #1
 8005df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d060      	beq.n	8005ec0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e04:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e08:	f000 fbfe 	bl	8006608 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d010      	beq.n	8005e34 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005e12:	4b50      	ldr	r3, [pc, #320]	; (8005f54 <tcp_slowtmr+0x590>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d106      	bne.n	8005e2a <tcp_slowtmr+0x466>
 8005e1c:	4b4e      	ldr	r3, [pc, #312]	; (8005f58 <tcp_slowtmr+0x594>)
 8005e1e:	f240 526d 	movw	r2, #1389	; 0x56d
 8005e22:	494e      	ldr	r1, [pc, #312]	; (8005f5c <tcp_slowtmr+0x598>)
 8005e24:	484e      	ldr	r0, [pc, #312]	; (8005f60 <tcp_slowtmr+0x59c>)
 8005e26:	f007 f98d 	bl	800d144 <iprintf>
        prev->next = pcb->next;
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	e00f      	b.n	8005e54 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005e34:	4b47      	ldr	r3, [pc, #284]	; (8005f54 <tcp_slowtmr+0x590>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d006      	beq.n	8005e4c <tcp_slowtmr+0x488>
 8005e3e:	4b46      	ldr	r3, [pc, #280]	; (8005f58 <tcp_slowtmr+0x594>)
 8005e40:	f240 5271 	movw	r2, #1393	; 0x571
 8005e44:	4947      	ldr	r1, [pc, #284]	; (8005f64 <tcp_slowtmr+0x5a0>)
 8005e46:	4846      	ldr	r0, [pc, #280]	; (8005f60 <tcp_slowtmr+0x59c>)
 8005e48:	f007 f97c 	bl	800d144 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a40      	ldr	r2, [pc, #256]	; (8005f54 <tcp_slowtmr+0x590>)
 8005e52:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005e54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d013      	beq.n	8005e84 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005e64:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	3304      	adds	r3, #4
 8005e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e6c:	8ad2      	ldrh	r2, [r2, #22]
 8005e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e70:	8b09      	ldrh	r1, [r1, #24]
 8005e72:	9102      	str	r1, [sp, #8]
 8005e74:	9201      	str	r2, [sp, #4]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	462b      	mov	r3, r5
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	4601      	mov	r1, r0
 8005e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e80:	f004 f98a 	bl	800a198 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	7d1b      	ldrb	r3, [r3, #20]
 8005e8e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005e9a:	6838      	ldr	r0, [r7, #0]
 8005e9c:	f7ff f9f4 	bl	8005288 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005ea0:	4b31      	ldr	r3, [pc, #196]	; (8005f68 <tcp_slowtmr+0x5a4>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <tcp_slowtmr+0x4f2>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f06f 010c 	mvn.w	r1, #12
 8005eb2:	68b8      	ldr	r0, [r7, #8]
 8005eb4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005eb6:	4b2c      	ldr	r3, [pc, #176]	; (8005f68 <tcp_slowtmr+0x5a4>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d037      	beq.n	8005f2e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8005ebe:	e592      	b.n	80059e6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	7f1b      	ldrb	r3, [r3, #28]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	7f1a      	ldrb	r2, [r3, #28]
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	7f5b      	ldrb	r3, [r3, #29]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d325      	bcc.n	8005f2e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005ee8:	4b1f      	ldr	r3, [pc, #124]	; (8005f68 <tcp_slowtmr+0x5a4>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <tcp_slowtmr+0x54c>
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f00:	6912      	ldr	r2, [r2, #16]
 8005f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f04:	4610      	mov	r0, r2
 8005f06:	4798      	blx	r3
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005f0e:	e002      	b.n	8005f16 <tcp_slowtmr+0x552>
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <tcp_slowtmr+0x5a4>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d000      	beq.n	8005f20 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8005f1e:	e562      	b.n	80059e6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005f20:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8005f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f2a:	f003 fb81 	bl	8009630 <tcp_output>
  while (pcb != NULL) {
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f47f ad5e 	bne.w	80059f2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <tcp_slowtmr+0x5a8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005f40:	e069      	b.n	8006016 <tcp_slowtmr+0x652>
 8005f42:	bf00      	nop
 8005f44:	20006740 	.word	0x20006740
 8005f48:	000a4cb8 	.word	0x000a4cb8
 8005f4c:	10624dd3 	.word	0x10624dd3
 8005f50:	000124f8 	.word	0x000124f8
 8005f54:	2000674c 	.word	0x2000674c
 8005f58:	0800ecc8 	.word	0x0800ecc8
 8005f5c:	0800f100 	.word	0x0800f100
 8005f60:	0800ed0c 	.word	0x0800ed0c
 8005f64:	0800f12c 	.word	0x0800f12c
 8005f68:	20006754 	.word	0x20006754
 8005f6c:	20006750 	.word	0x20006750
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	7d1b      	ldrb	r3, [r3, #20]
 8005f74:	2b0a      	cmp	r3, #10
 8005f76:	d006      	beq.n	8005f86 <tcp_slowtmr+0x5c2>
 8005f78:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <tcp_slowtmr+0x664>)
 8005f7a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8005f7e:	492b      	ldr	r1, [pc, #172]	; (800602c <tcp_slowtmr+0x668>)
 8005f80:	482b      	ldr	r0, [pc, #172]	; (8006030 <tcp_slowtmr+0x66c>)
 8005f82:	f007 f8df 	bl	800d144 <iprintf>
    pcb_remove = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f8c:	4b29      	ldr	r3, [pc, #164]	; (8006034 <tcp_slowtmr+0x670>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2bf0      	cmp	r3, #240	; 0xf0
 8005f98:	d904      	bls.n	8005fa4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8005f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d02f      	beq.n	800600c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fae:	f000 fb2b 	bl	8006608 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d010      	beq.n	8005fda <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005fb8:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <tcp_slowtmr+0x674>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d106      	bne.n	8005fd0 <tcp_slowtmr+0x60c>
 8005fc2:	4b19      	ldr	r3, [pc, #100]	; (8006028 <tcp_slowtmr+0x664>)
 8005fc4:	f240 52af 	movw	r2, #1455	; 0x5af
 8005fc8:	491c      	ldr	r1, [pc, #112]	; (800603c <tcp_slowtmr+0x678>)
 8005fca:	4819      	ldr	r0, [pc, #100]	; (8006030 <tcp_slowtmr+0x66c>)
 8005fcc:	f007 f8ba 	bl	800d144 <iprintf>
        prev->next = pcb->next;
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	60da      	str	r2, [r3, #12]
 8005fd8:	e00f      	b.n	8005ffa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <tcp_slowtmr+0x674>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d006      	beq.n	8005ff2 <tcp_slowtmr+0x62e>
 8005fe4:	4b10      	ldr	r3, [pc, #64]	; (8006028 <tcp_slowtmr+0x664>)
 8005fe6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005fea:	4915      	ldr	r1, [pc, #84]	; (8006040 <tcp_slowtmr+0x67c>)
 8005fec:	4810      	ldr	r0, [pc, #64]	; (8006030 <tcp_slowtmr+0x66c>)
 8005fee:	f007 f8a9 	bl	800d144 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	4a10      	ldr	r2, [pc, #64]	; (8006038 <tcp_slowtmr+0x674>)
 8005ff8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006004:	69f8      	ldr	r0, [r7, #28]
 8006006:	f7ff f93f 	bl	8005288 <tcp_free>
 800600a:	e004      	b.n	8006016 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1a9      	bne.n	8005f70 <tcp_slowtmr+0x5ac>
    }
  }
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	3730      	adds	r7, #48	; 0x30
 8006022:	46bd      	mov	sp, r7
 8006024:	bdb0      	pop	{r4, r5, r7, pc}
 8006026:	bf00      	nop
 8006028:	0800ecc8 	.word	0x0800ecc8
 800602c:	0800f158 	.word	0x0800f158
 8006030:	0800ed0c 	.word	0x0800ed0c
 8006034:	20006740 	.word	0x20006740
 8006038:	20006750 	.word	0x20006750
 800603c:	0800f188 	.word	0x0800f188
 8006040:	0800f1b0 	.word	0x0800f1b0

08006044 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800604a:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <tcp_fasttmr+0xbc>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	3301      	adds	r3, #1
 8006050:	b2da      	uxtb	r2, r3
 8006052:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <tcp_fasttmr+0xbc>)
 8006054:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <tcp_fasttmr+0xc0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800605c:	e048      	b.n	80060f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	7f9a      	ldrb	r2, [r3, #30]
 8006062:	4b27      	ldr	r3, [pc, #156]	; (8006100 <tcp_fasttmr+0xbc>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d03f      	beq.n	80060ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800606a:	4b25      	ldr	r3, [pc, #148]	; (8006100 <tcp_fasttmr+0xbc>)
 800606c:	781a      	ldrb	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8b5b      	ldrh	r3, [r3, #26]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d010      	beq.n	80060a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8b5b      	ldrh	r3, [r3, #26]
 8006082:	f043 0302 	orr.w	r3, r3, #2
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f003 facf 	bl	8009630 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	8b5b      	ldrh	r3, [r3, #26]
 8006096:	f023 0303 	bic.w	r3, r3, #3
 800609a:	b29a      	uxth	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8b5b      	ldrh	r3, [r3, #26]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	8b5b      	ldrh	r3, [r3, #26]
 80060b0:	f023 0308 	bic.w	r3, r3, #8
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fa78 	bl	80055b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80060ce:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <tcp_fasttmr+0xc4>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f819 	bl	800610c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80060da:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <tcp_fasttmr+0xc4>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d000      	beq.n	80060e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80060e2:	e7b8      	b.n	8006056 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	607b      	str	r3, [r7, #4]
 80060e8:	e002      	b.n	80060f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1b3      	bne.n	800605e <tcp_fasttmr+0x1a>
    }
  }
}
 80060f6:	bf00      	nop
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20006756 	.word	0x20006756
 8006104:	2000674c 	.word	0x2000674c
 8006108:	20006754 	.word	0x20006754

0800610c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <tcp_process_refused_data+0x22>
 800611a:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <tcp_process_refused_data+0xec>)
 800611c:	f240 6209 	movw	r2, #1545	; 0x609
 8006120:	4936      	ldr	r1, [pc, #216]	; (80061fc <tcp_process_refused_data+0xf0>)
 8006122:	4837      	ldr	r0, [pc, #220]	; (8006200 <tcp_process_refused_data+0xf4>)
 8006124:	f007 f80e 	bl	800d144 <iprintf>
 8006128:	f06f 030f 	mvn.w	r3, #15
 800612c:	e060      	b.n	80061f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006132:	7b5b      	ldrb	r3, [r3, #13]
 8006134:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800613a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <tcp_process_refused_data+0x58>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6918      	ldr	r0, [r3, #16]
 8006156:	2300      	movs	r3, #0
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	47a0      	blx	r4
 800615e:	4603      	mov	r3, r0
 8006160:	73fb      	strb	r3, [r7, #15]
 8006162:	e007      	b.n	8006174 <tcp_process_refused_data+0x68>
 8006164:	2300      	movs	r3, #0
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	2000      	movs	r0, #0
 800616c:	f000 f8a4 	bl	80062b8 <tcp_recv_null>
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d12a      	bne.n	80061d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d033      	beq.n	80061ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800618e:	d005      	beq.n	800619c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	3301      	adds	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <tcp_process_refused_data+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6918      	ldr	r0, [r3, #16]
 80061b0:	2300      	movs	r3, #0
 80061b2:	2200      	movs	r2, #0
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	47a0      	blx	r4
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
 80061bc:	e001      	b.n	80061c2 <tcp_process_refused_data+0xb6>
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80061c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c6:	f113 0f0d 	cmn.w	r3, #13
 80061ca:	d110      	bne.n	80061ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80061cc:	f06f 030c 	mvn.w	r3, #12
 80061d0:	e00e      	b.n	80061f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	f113 0f0d 	cmn.w	r3, #13
 80061da:	d102      	bne.n	80061e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80061dc:	f06f 030c 	mvn.w	r3, #12
 80061e0:	e006      	b.n	80061f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80061e8:	f06f 0304 	mvn.w	r3, #4
 80061ec:	e000      	b.n	80061f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd90      	pop	{r4, r7, pc}
 80061f8:	0800ecc8 	.word	0x0800ecc8
 80061fc:	0800f1d8 	.word	0x0800f1d8
 8006200:	0800ed0c 	.word	0x0800ed0c

08006204 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800620c:	e007      	b.n	800621e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f80a 	bl	800622e <tcp_seg_free>
    seg = next;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f4      	bne.n	800620e <tcp_segs_free+0xa>
  }
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00c      	beq.n	8006256 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe fd7d 	bl	8004d48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	2003      	movs	r0, #3
 8006252:	f7fd ff67 	bl	8004124 <memp_free>
  }
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <tcp_seg_copy+0x1c>
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <tcp_seg_copy+0x4c>)
 8006270:	f240 6282 	movw	r2, #1666	; 0x682
 8006274:	490e      	ldr	r1, [pc, #56]	; (80062b0 <tcp_seg_copy+0x50>)
 8006276:	480f      	ldr	r0, [pc, #60]	; (80062b4 <tcp_seg_copy+0x54>)
 8006278:	f006 ff64 	bl	800d144 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800627c:	2003      	movs	r0, #3
 800627e:	f7fd ff05 	bl	800408c <memp_malloc>
 8006282:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <tcp_seg_copy+0x2e>
    return NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	e00a      	b.n	80062a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800628e:	2210      	movs	r2, #16
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f006 ff40 	bl	800d118 <memcpy>
  pbuf_ref(cseg->p);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fdf3 	bl	8004e88 <pbuf_ref>
  return cseg;
 80062a2:	68fb      	ldr	r3, [r7, #12]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	0800ecc8 	.word	0x0800ecc8
 80062b0:	0800f21c 	.word	0x0800f21c
 80062b4:	0800ed0c 	.word	0x0800ed0c

080062b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <tcp_recv_null+0x28>
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <tcp_recv_null+0x60>)
 80062ce:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80062d2:	4912      	ldr	r1, [pc, #72]	; (800631c <tcp_recv_null+0x64>)
 80062d4:	4812      	ldr	r0, [pc, #72]	; (8006320 <tcp_recv_null+0x68>)
 80062d6:	f006 ff35 	bl	800d144 <iprintf>
 80062da:	f06f 030f 	mvn.w	r3, #15
 80062de:	e016      	b.n	800630e <tcp_recv_null+0x56>

  if (p != NULL) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	891b      	ldrh	r3, [r3, #8]
 80062ea:	4619      	mov	r1, r3
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f7ff fb19 	bl	8005924 <tcp_recved>
    pbuf_free(p);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fe fd28 	bl	8004d48 <pbuf_free>
 80062f8:	e008      	b.n	800630c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80062fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006302:	68b8      	ldr	r0, [r7, #8]
 8006304:	f7ff f9be 	bl	8005684 <tcp_close>
 8006308:	4603      	mov	r3, r0
 800630a:	e000      	b.n	800630e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	0800ecc8 	.word	0x0800ecc8
 800631c:	0800f238 	.word	0x0800f238
 8006320:	0800ed0c 	.word	0x0800ed0c

08006324 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800632e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006332:	2b00      	cmp	r3, #0
 8006334:	db01      	blt.n	800633a <tcp_kill_prio+0x16>
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	e000      	b.n	800633c <tcp_kill_prio+0x18>
 800633a:	237f      	movs	r3, #127	; 0x7f
 800633c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800633e:	7afb      	ldrb	r3, [r7, #11]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d034      	beq.n	80063ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006344:	7afb      	ldrb	r3, [r7, #11]
 8006346:	3b01      	subs	r3, #1
 8006348:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006352:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <tcp_kill_prio+0x94>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	e01f      	b.n	800639a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	7d5b      	ldrb	r3, [r3, #21]
 800635e:	7afa      	ldrb	r2, [r7, #11]
 8006360:	429a      	cmp	r2, r3
 8006362:	d80c      	bhi.n	800637e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006368:	7afa      	ldrb	r2, [r7, #11]
 800636a:	429a      	cmp	r2, r3
 800636c:	d112      	bne.n	8006394 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800636e:	4b13      	ldr	r3, [pc, #76]	; (80063bc <tcp_kill_prio+0x98>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	429a      	cmp	r2, r3
 800637c:	d80a      	bhi.n	8006394 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800637e:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <tcp_kill_prio+0x98>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	7d5b      	ldrb	r3, [r3, #21]
 8006392:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1dc      	bne.n	800635a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d004      	beq.n	80063b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80063a6:	6938      	ldr	r0, [r7, #16]
 80063a8:	f7ff fa56 	bl	8005858 <tcp_abort>
 80063ac:	e000      	b.n	80063b0 <tcp_kill_prio+0x8c>
    return;
 80063ae:	bf00      	nop
  }
}
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	2000674c 	.word	0x2000674c
 80063bc:	20006740 	.word	0x20006740

080063c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d009      	beq.n	80063e4 <tcp_kill_state+0x24>
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	2b09      	cmp	r3, #9
 80063d4:	d006      	beq.n	80063e4 <tcp_kill_state+0x24>
 80063d6:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <tcp_kill_state+0x80>)
 80063d8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80063dc:	4919      	ldr	r1, [pc, #100]	; (8006444 <tcp_kill_state+0x84>)
 80063de:	481a      	ldr	r0, [pc, #104]	; (8006448 <tcp_kill_state+0x88>)
 80063e0:	f006 feb0 	bl	800d144 <iprintf>

  inactivity = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80063ec:	4b17      	ldr	r3, [pc, #92]	; (800644c <tcp_kill_state+0x8c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e017      	b.n	8006424 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	7d1b      	ldrb	r3, [r3, #20]
 80063f8:	79fa      	ldrb	r2, [r7, #7]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d10f      	bne.n	800641e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80063fe:	4b14      	ldr	r3, [pc, #80]	; (8006450 <tcp_kill_state+0x90>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	429a      	cmp	r2, r3
 800640c:	d807      	bhi.n	800641e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800640e:	4b10      	ldr	r3, [pc, #64]	; (8006450 <tcp_kill_state+0x90>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e4      	bne.n	80063f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006430:	2100      	movs	r1, #0
 8006432:	6938      	ldr	r0, [r7, #16]
 8006434:	f7ff f952 	bl	80056dc <tcp_abandon>
  }
}
 8006438:	bf00      	nop
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	0800ecc8 	.word	0x0800ecc8
 8006444:	0800f254 	.word	0x0800f254
 8006448:	0800ed0c 	.word	0x0800ed0c
 800644c:	2000674c 	.word	0x2000674c
 8006450:	20006740 	.word	0x20006740

08006454 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <tcp_kill_timewait+0x58>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	e012      	b.n	8006490 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <tcp_kill_timewait+0x5c>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d807      	bhi.n	800648a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <tcp_kill_timewait+0x5c>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e9      	bne.n	800646a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800649c:	68b8      	ldr	r0, [r7, #8]
 800649e:	f7ff f9db 	bl	8005858 <tcp_abort>
  }
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20006750 	.word	0x20006750
 80064b0:	20006740 	.word	0x20006740

080064b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <tcp_handle_closepend+0x48>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80064c0:	e014      	b.n	80064ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8b5b      	ldrh	r3, [r3, #26]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8b5b      	ldrh	r3, [r3, #26]
 80064d8:	f023 0308 	bic.w	r3, r3, #8
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff f864 	bl	80055b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e7      	bne.n	80064c2 <tcp_handle_closepend+0xe>
  }
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	2000674c 	.word	0x2000674c

08006500 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800650a:	2001      	movs	r0, #1
 800650c:	f7fd fdbe 	bl	800408c <memp_malloc>
 8006510:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d126      	bne.n	8006566 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006518:	f7ff ffcc 	bl	80064b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800651c:	f7ff ff9a 	bl	8006454 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006520:	2001      	movs	r0, #1
 8006522:	f7fd fdb3 	bl	800408c <memp_malloc>
 8006526:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d11b      	bne.n	8006566 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800652e:	2009      	movs	r0, #9
 8006530:	f7ff ff46 	bl	80063c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006534:	2001      	movs	r0, #1
 8006536:	f7fd fda9 	bl	800408c <memp_malloc>
 800653a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d111      	bne.n	8006566 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006542:	2008      	movs	r0, #8
 8006544:	f7ff ff3c 	bl	80063c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006548:	2001      	movs	r0, #1
 800654a:	f7fd fd9f 	bl	800408c <memp_malloc>
 800654e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d107      	bne.n	8006566 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fee3 	bl	8006324 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800655e:	2001      	movs	r0, #1
 8006560:	f7fd fd94 	bl	800408c <memp_malloc>
 8006564:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d03f      	beq.n	80065ec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800656c:	229c      	movs	r2, #156	; 0x9c
 800656e:	2100      	movs	r1, #0
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f006 fddf 	bl	800d134 <memset>
    pcb->prio = prio;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	79fa      	ldrb	r2, [r7, #7]
 800657a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006582:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800658c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	22ff      	movs	r2, #255	; 0xff
 800659a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f44f 7206 	mov.w	r2, #536	; 0x218
 80065a2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2206      	movs	r2, #6
 80065a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2206      	movs	r2, #6
 80065b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065b8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80065c2:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <tcp_alloc+0xf8>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80065ca:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <tcp_alloc+0xfc>)
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80065d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4a08      	ldr	r2, [pc, #32]	; (8006600 <tcp_alloc+0x100>)
 80065e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a07      	ldr	r2, [pc, #28]	; (8006604 <tcp_alloc+0x104>)
 80065e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20006740 	.word	0x20006740
 80065fc:	20006756 	.word	0x20006756
 8006600:	080062b9 	.word	0x080062b9
 8006604:	006ddd00 	.word	0x006ddd00

08006608 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <tcp_pcb_purge+0x1e>
 8006616:	4b21      	ldr	r3, [pc, #132]	; (800669c <tcp_pcb_purge+0x94>)
 8006618:	f640 0251 	movw	r2, #2129	; 0x851
 800661c:	4920      	ldr	r1, [pc, #128]	; (80066a0 <tcp_pcb_purge+0x98>)
 800661e:	4821      	ldr	r0, [pc, #132]	; (80066a4 <tcp_pcb_purge+0x9c>)
 8006620:	f006 fd90 	bl	800d144 <iprintf>
 8006624:	e037      	b.n	8006696 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	7d1b      	ldrb	r3, [r3, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d033      	beq.n	8006696 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006632:	2b0a      	cmp	r3, #10
 8006634:	d02f      	beq.n	8006696 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800663a:	2b01      	cmp	r3, #1
 800663c:	d02b      	beq.n	8006696 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006642:	2b00      	cmp	r3, #0
 8006644:	d007      	beq.n	8006656 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fb7c 	bl	8004d48 <pbuf_free>
      pcb->refused_data = NULL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f986 	bl	8006970 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800666a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fdc7 	bl	8006204 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fdc2 	bl	8006204 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	66da      	str	r2, [r3, #108]	; 0x6c
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	0800ecc8 	.word	0x0800ecc8
 80066a0:	0800f314 	.word	0x0800f314
 80066a4:	0800ed0c 	.word	0x0800ed0c

080066a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <tcp_pcb_remove+0x1e>
 80066b8:	4b3e      	ldr	r3, [pc, #248]	; (80067b4 <tcp_pcb_remove+0x10c>)
 80066ba:	f640 0283 	movw	r2, #2179	; 0x883
 80066be:	493e      	ldr	r1, [pc, #248]	; (80067b8 <tcp_pcb_remove+0x110>)
 80066c0:	483e      	ldr	r0, [pc, #248]	; (80067bc <tcp_pcb_remove+0x114>)
 80066c2:	f006 fd3f 	bl	800d144 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <tcp_pcb_remove+0x32>
 80066cc:	4b39      	ldr	r3, [pc, #228]	; (80067b4 <tcp_pcb_remove+0x10c>)
 80066ce:	f640 0284 	movw	r2, #2180	; 0x884
 80066d2:	493b      	ldr	r1, [pc, #236]	; (80067c0 <tcp_pcb_remove+0x118>)
 80066d4:	4839      	ldr	r0, [pc, #228]	; (80067bc <tcp_pcb_remove+0x114>)
 80066d6:	f006 fd35 	bl	800d144 <iprintf>

  TCP_RMV(pcblist, pcb);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d105      	bne.n	80066f0 <tcp_pcb_remove+0x48>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e013      	b.n	8006718 <tcp_pcb_remove+0x70>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e00c      	b.n	8006712 <tcp_pcb_remove+0x6a>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d104      	bne.n	800670c <tcp_pcb_remove+0x64>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	e005      	b.n	8006718 <tcp_pcb_remove+0x70>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1ef      	bne.n	80066f8 <tcp_pcb_remove+0x50>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2200      	movs	r2, #0
 800671c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800671e:	6838      	ldr	r0, [r7, #0]
 8006720:	f7ff ff72 	bl	8006608 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	7d1b      	ldrb	r3, [r3, #20]
 8006728:	2b0a      	cmp	r3, #10
 800672a:	d013      	beq.n	8006754 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006730:	2b01      	cmp	r3, #1
 8006732:	d00f      	beq.n	8006754 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	8b5b      	ldrh	r3, [r3, #26]
 8006738:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	8b5b      	ldrh	r3, [r3, #26]
 8006744:	f043 0302 	orr.w	r3, r3, #2
 8006748:	b29a      	uxth	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800674e:	6838      	ldr	r0, [r7, #0]
 8006750:	f002 ff6e 	bl	8009630 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	7d1b      	ldrb	r3, [r3, #20]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d020      	beq.n	800679e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <tcp_pcb_remove+0xca>
 8006764:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <tcp_pcb_remove+0x10c>)
 8006766:	f640 0293 	movw	r2, #2195	; 0x893
 800676a:	4916      	ldr	r1, [pc, #88]	; (80067c4 <tcp_pcb_remove+0x11c>)
 800676c:	4813      	ldr	r0, [pc, #76]	; (80067bc <tcp_pcb_remove+0x114>)
 800676e:	f006 fce9 	bl	800d144 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <tcp_pcb_remove+0xe0>
 800677a:	4b0e      	ldr	r3, [pc, #56]	; (80067b4 <tcp_pcb_remove+0x10c>)
 800677c:	f640 0294 	movw	r2, #2196	; 0x894
 8006780:	4911      	ldr	r1, [pc, #68]	; (80067c8 <tcp_pcb_remove+0x120>)
 8006782:	480e      	ldr	r0, [pc, #56]	; (80067bc <tcp_pcb_remove+0x114>)
 8006784:	f006 fcde 	bl	800d144 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <tcp_pcb_remove+0xf6>
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <tcp_pcb_remove+0x10c>)
 8006792:	f640 0296 	movw	r2, #2198	; 0x896
 8006796:	490d      	ldr	r1, [pc, #52]	; (80067cc <tcp_pcb_remove+0x124>)
 8006798:	4808      	ldr	r0, [pc, #32]	; (80067bc <tcp_pcb_remove+0x114>)
 800679a:	f006 fcd3 	bl	800d144 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2200      	movs	r2, #0
 80067a2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2200      	movs	r2, #0
 80067a8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80067aa:	bf00      	nop
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	0800ecc8 	.word	0x0800ecc8
 80067b8:	0800f330 	.word	0x0800f330
 80067bc:	0800ed0c 	.word	0x0800ed0c
 80067c0:	0800f34c 	.word	0x0800f34c
 80067c4:	0800f36c 	.word	0x0800f36c
 80067c8:	0800f384 	.word	0x0800f384
 80067cc:	0800f3a0 	.word	0x0800f3a0

080067d0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <tcp_next_iss+0x1c>
 80067de:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <tcp_next_iss+0x38>)
 80067e0:	f640 02af 	movw	r2, #2223	; 0x8af
 80067e4:	4909      	ldr	r1, [pc, #36]	; (800680c <tcp_next_iss+0x3c>)
 80067e6:	480a      	ldr	r0, [pc, #40]	; (8006810 <tcp_next_iss+0x40>)
 80067e8:	f006 fcac 	bl	800d144 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80067ec:	4b09      	ldr	r3, [pc, #36]	; (8006814 <tcp_next_iss+0x44>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4b09      	ldr	r3, [pc, #36]	; (8006818 <tcp_next_iss+0x48>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4413      	add	r3, r2
 80067f6:	4a07      	ldr	r2, [pc, #28]	; (8006814 <tcp_next_iss+0x44>)
 80067f8:	6013      	str	r3, [r2, #0]
  return iss;
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <tcp_next_iss+0x44>)
 80067fc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	0800ecc8 	.word	0x0800ecc8
 800680c:	0800f3b8 	.word	0x0800f3b8
 8006810:	0800ed0c 	.word	0x0800ed0c
 8006814:	2000000c 	.word	0x2000000c
 8006818:	20006740 	.word	0x20006740

0800681c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <tcp_eff_send_mss_netif+0x22>
 8006830:	4b14      	ldr	r3, [pc, #80]	; (8006884 <tcp_eff_send_mss_netif+0x68>)
 8006832:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006836:	4914      	ldr	r1, [pc, #80]	; (8006888 <tcp_eff_send_mss_netif+0x6c>)
 8006838:	4814      	ldr	r0, [pc, #80]	; (800688c <tcp_eff_send_mss_netif+0x70>)
 800683a:	f006 fc83 	bl	800d144 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006844:	89fb      	ldrh	r3, [r7, #14]
 8006846:	e019      	b.n	800687c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800684c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800684e:	8afb      	ldrh	r3, [r7, #22]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d012      	beq.n	800687a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006854:	2328      	movs	r3, #40	; 0x28
 8006856:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006858:	8afa      	ldrh	r2, [r7, #22]
 800685a:	8abb      	ldrh	r3, [r7, #20]
 800685c:	429a      	cmp	r2, r3
 800685e:	d904      	bls.n	800686a <tcp_eff_send_mss_netif+0x4e>
 8006860:	8afa      	ldrh	r2, [r7, #22]
 8006862:	8abb      	ldrh	r3, [r7, #20]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	b29b      	uxth	r3, r3
 8006868:	e000      	b.n	800686c <tcp_eff_send_mss_netif+0x50>
 800686a:	2300      	movs	r3, #0
 800686c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800686e:	8a7a      	ldrh	r2, [r7, #18]
 8006870:	89fb      	ldrh	r3, [r7, #14]
 8006872:	4293      	cmp	r3, r2
 8006874:	bf28      	it	cs
 8006876:	4613      	movcs	r3, r2
 8006878:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800687a:	89fb      	ldrh	r3, [r7, #14]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	0800ecc8 	.word	0x0800ecc8
 8006888:	0800f3d4 	.word	0x0800f3d4
 800688c:	0800ed0c 	.word	0x0800ed0c

08006890 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d119      	bne.n	80068d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80068a6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80068aa:	4910      	ldr	r1, [pc, #64]	; (80068ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80068ac:	4810      	ldr	r0, [pc, #64]	; (80068f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80068ae:	f006 fc49 	bl	800d144 <iprintf>

  while (pcb != NULL) {
 80068b2:	e011      	b.n	80068d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d108      	bne.n	80068d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7fe ffc6 	bl	8005858 <tcp_abort>
      pcb = next;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e002      	b.n	80068d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1ea      	bne.n	80068b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	0800ecc8 	.word	0x0800ecc8
 80068ec:	0800f3fc 	.word	0x0800f3fc
 80068f0:	0800ed0c 	.word	0x0800ed0c

080068f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d02a      	beq.n	800695a <tcp_netif_ip_addr_changed+0x66>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d026      	beq.n	800695a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800690c:	4b15      	ldr	r3, [pc, #84]	; (8006964 <tcp_netif_ip_addr_changed+0x70>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ffbc 	bl	8006890 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006918:	4b13      	ldr	r3, [pc, #76]	; (8006968 <tcp_netif_ip_addr_changed+0x74>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff ffb6 	bl	8006890 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d017      	beq.n	800695a <tcp_netif_ip_addr_changed+0x66>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d013      	beq.n	800695a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <tcp_netif_ip_addr_changed+0x78>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e00c      	b.n	8006954 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d103      	bne.n	800694e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1ef      	bne.n	800693a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	2000674c 	.word	0x2000674c
 8006968:	20006744 	.word	0x20006744
 800696c:	20006748 	.word	0x20006748

08006970 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697c:	2b00      	cmp	r3, #0
 800697e:	d007      	beq.n	8006990 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff fc3d 	bl	8006204 <tcp_segs_free>
    pcb->ooseq = NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b08d      	sub	sp, #52	; 0x34
 800699c:	af04      	add	r7, sp, #16
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <tcp_input+0x1c>
 80069a8:	4b9b      	ldr	r3, [pc, #620]	; (8006c18 <tcp_input+0x280>)
 80069aa:	2283      	movs	r2, #131	; 0x83
 80069ac:	499b      	ldr	r1, [pc, #620]	; (8006c1c <tcp_input+0x284>)
 80069ae:	489c      	ldr	r0, [pc, #624]	; (8006c20 <tcp_input+0x288>)
 80069b0:	f006 fbc8 	bl	800d144 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a9a      	ldr	r2, [pc, #616]	; (8006c24 <tcp_input+0x28c>)
 80069ba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	895b      	ldrh	r3, [r3, #10]
 80069c0:	2b13      	cmp	r3, #19
 80069c2:	f240 83d1 	bls.w	8007168 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80069c6:	4b98      	ldr	r3, [pc, #608]	; (8006c28 <tcp_input+0x290>)
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	4a97      	ldr	r2, [pc, #604]	; (8006c28 <tcp_input+0x290>)
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	4611      	mov	r1, r2
 80069d0:	4618      	mov	r0, r3
 80069d2:	f005 fc17 	bl	800c204 <ip4_addr_isbroadcast_u32>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 83c7 	bne.w	800716c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80069de:	4b92      	ldr	r3, [pc, #584]	; (8006c28 <tcp_input+0x290>)
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80069e6:	2be0      	cmp	r3, #224	; 0xe0
 80069e8:	f000 83c0 	beq.w	800716c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80069ec:	4b8d      	ldr	r3, [pc, #564]	; (8006c24 <tcp_input+0x28c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	899b      	ldrh	r3, [r3, #12]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fc fef3 	bl	80037e0 <lwip_htons>
 80069fa:	4603      	mov	r3, r0
 80069fc:	0b1b      	lsrs	r3, r3, #12
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006a06:	7cbb      	ldrb	r3, [r7, #18]
 8006a08:	2b13      	cmp	r3, #19
 8006a0a:	f240 83b1 	bls.w	8007170 <tcp_input+0x7d8>
 8006a0e:	7cbb      	ldrb	r3, [r7, #18]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	891b      	ldrh	r3, [r3, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	f200 83aa 	bhi.w	8007170 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006a1c:	7cbb      	ldrb	r3, [r7, #18]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b14      	subs	r3, #20
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	4b81      	ldr	r3, [pc, #516]	; (8006c2c <tcp_input+0x294>)
 8006a26:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006a28:	4b81      	ldr	r3, [pc, #516]	; (8006c30 <tcp_input+0x298>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	895a      	ldrh	r2, [r3, #10]
 8006a32:	7cbb      	ldrb	r3, [r7, #18]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d309      	bcc.n	8006a4e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006a3a:	4b7c      	ldr	r3, [pc, #496]	; (8006c2c <tcp_input+0x294>)
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	4b7d      	ldr	r3, [pc, #500]	; (8006c34 <tcp_input+0x29c>)
 8006a40:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006a42:	7cbb      	ldrb	r3, [r7, #18]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fe f8f8 	bl	8004c3c <pbuf_remove_header>
 8006a4c:	e04e      	b.n	8006aec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d105      	bne.n	8006a62 <tcp_input+0xca>
 8006a56:	4b70      	ldr	r3, [pc, #448]	; (8006c18 <tcp_input+0x280>)
 8006a58:	22c2      	movs	r2, #194	; 0xc2
 8006a5a:	4977      	ldr	r1, [pc, #476]	; (8006c38 <tcp_input+0x2a0>)
 8006a5c:	4870      	ldr	r0, [pc, #448]	; (8006c20 <tcp_input+0x288>)
 8006a5e:	f006 fb71 	bl	800d144 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006a62:	2114      	movs	r1, #20
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fe f8e9 	bl	8004c3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	895a      	ldrh	r2, [r3, #10]
 8006a6e:	4b71      	ldr	r3, [pc, #452]	; (8006c34 <tcp_input+0x29c>)
 8006a70:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006a72:	4b6e      	ldr	r3, [pc, #440]	; (8006c2c <tcp_input+0x294>)
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	4b6f      	ldr	r3, [pc, #444]	; (8006c34 <tcp_input+0x29c>)
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006a7e:	4b6d      	ldr	r3, [pc, #436]	; (8006c34 <tcp_input+0x29c>)
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fe f8d9 	bl	8004c3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	895b      	ldrh	r3, [r3, #10]
 8006a90:	8a3a      	ldrh	r2, [r7, #16]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	f200 836e 	bhi.w	8007174 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4a64      	ldr	r2, [pc, #400]	; (8006c30 <tcp_input+0x298>)
 8006aa0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	8a3a      	ldrh	r2, [r7, #16]
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe f8c6 	bl	8004c3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	891a      	ldrh	r2, [r3, #8]
 8006ab4:	8a3b      	ldrh	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	895b      	ldrh	r3, [r3, #10]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <tcp_input+0x13a>
 8006ac6:	4b54      	ldr	r3, [pc, #336]	; (8006c18 <tcp_input+0x280>)
 8006ac8:	22df      	movs	r2, #223	; 0xdf
 8006aca:	495c      	ldr	r1, [pc, #368]	; (8006c3c <tcp_input+0x2a4>)
 8006acc:	4854      	ldr	r0, [pc, #336]	; (8006c20 <tcp_input+0x288>)
 8006ace:	f006 fb39 	bl	800d144 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	891a      	ldrh	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	891b      	ldrh	r3, [r3, #8]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d005      	beq.n	8006aec <tcp_input+0x154>
 8006ae0:	4b4d      	ldr	r3, [pc, #308]	; (8006c18 <tcp_input+0x280>)
 8006ae2:	22e0      	movs	r2, #224	; 0xe0
 8006ae4:	4956      	ldr	r1, [pc, #344]	; (8006c40 <tcp_input+0x2a8>)
 8006ae6:	484e      	ldr	r0, [pc, #312]	; (8006c20 <tcp_input+0x288>)
 8006ae8:	f006 fb2c 	bl	800d144 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006aec:	4b4d      	ldr	r3, [pc, #308]	; (8006c24 <tcp_input+0x28c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	4a4b      	ldr	r2, [pc, #300]	; (8006c24 <tcp_input+0x28c>)
 8006af6:	6814      	ldr	r4, [r2, #0]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fc fe71 	bl	80037e0 <lwip_htons>
 8006afe:	4603      	mov	r3, r0
 8006b00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006b02:	4b48      	ldr	r3, [pc, #288]	; (8006c24 <tcp_input+0x28c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	885b      	ldrh	r3, [r3, #2]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	4a46      	ldr	r2, [pc, #280]	; (8006c24 <tcp_input+0x28c>)
 8006b0c:	6814      	ldr	r4, [r2, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fc fe66 	bl	80037e0 <lwip_htons>
 8006b14:	4603      	mov	r3, r0
 8006b16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006b18:	4b42      	ldr	r3, [pc, #264]	; (8006c24 <tcp_input+0x28c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4a41      	ldr	r2, [pc, #260]	; (8006c24 <tcp_input+0x28c>)
 8006b20:	6814      	ldr	r4, [r2, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fc fe71 	bl	800380a <lwip_htonl>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	6063      	str	r3, [r4, #4]
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	4a45      	ldr	r2, [pc, #276]	; (8006c44 <tcp_input+0x2ac>)
 8006b30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006b32:	4b3c      	ldr	r3, [pc, #240]	; (8006c24 <tcp_input+0x28c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4a3a      	ldr	r2, [pc, #232]	; (8006c24 <tcp_input+0x28c>)
 8006b3a:	6814      	ldr	r4, [r2, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fc fe64 	bl	800380a <lwip_htonl>
 8006b42:	4603      	mov	r3, r0
 8006b44:	60a3      	str	r3, [r4, #8]
 8006b46:	68a3      	ldr	r3, [r4, #8]
 8006b48:	4a3f      	ldr	r2, [pc, #252]	; (8006c48 <tcp_input+0x2b0>)
 8006b4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006b4c:	4b35      	ldr	r3, [pc, #212]	; (8006c24 <tcp_input+0x28c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	89db      	ldrh	r3, [r3, #14]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4a33      	ldr	r2, [pc, #204]	; (8006c24 <tcp_input+0x28c>)
 8006b56:	6814      	ldr	r4, [r2, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fc fe41 	bl	80037e0 <lwip_htons>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006b62:	4b30      	ldr	r3, [pc, #192]	; (8006c24 <tcp_input+0x28c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	899b      	ldrh	r3, [r3, #12]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fc fe38 	bl	80037e0 <lwip_htons>
 8006b70:	4603      	mov	r3, r0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	4b34      	ldr	r3, [pc, #208]	; (8006c4c <tcp_input+0x2b4>)
 8006b7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	891a      	ldrh	r2, [r3, #8]
 8006b82:	4b33      	ldr	r3, [pc, #204]	; (8006c50 <tcp_input+0x2b8>)
 8006b84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006b86:	4b31      	ldr	r3, [pc, #196]	; (8006c4c <tcp_input+0x2b4>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <tcp_input+0x214>
    tcplen++;
 8006b92:	4b2f      	ldr	r3, [pc, #188]	; (8006c50 <tcp_input+0x2b8>)
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	3301      	adds	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <tcp_input+0x2b8>)
 8006b9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	891a      	ldrh	r2, [r3, #8]
 8006ba2:	4b2b      	ldr	r3, [pc, #172]	; (8006c50 <tcp_input+0x2b8>)
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	f200 82e6 	bhi.w	8007178 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <tcp_input+0x2bc>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e09d      	b.n	8006cf4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	7d1b      	ldrb	r3, [r3, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d105      	bne.n	8006bcc <tcp_input+0x234>
 8006bc0:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <tcp_input+0x280>)
 8006bc2:	22fb      	movs	r2, #251	; 0xfb
 8006bc4:	4924      	ldr	r1, [pc, #144]	; (8006c58 <tcp_input+0x2c0>)
 8006bc6:	4816      	ldr	r0, [pc, #88]	; (8006c20 <tcp_input+0x288>)
 8006bc8:	f006 fabc 	bl	800d144 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	7d1b      	ldrb	r3, [r3, #20]
 8006bd0:	2b0a      	cmp	r3, #10
 8006bd2:	d105      	bne.n	8006be0 <tcp_input+0x248>
 8006bd4:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <tcp_input+0x280>)
 8006bd6:	22fc      	movs	r2, #252	; 0xfc
 8006bd8:	4920      	ldr	r1, [pc, #128]	; (8006c5c <tcp_input+0x2c4>)
 8006bda:	4811      	ldr	r0, [pc, #68]	; (8006c20 <tcp_input+0x288>)
 8006bdc:	f006 fab2 	bl	800d144 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	7d1b      	ldrb	r3, [r3, #20]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d105      	bne.n	8006bf4 <tcp_input+0x25c>
 8006be8:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <tcp_input+0x280>)
 8006bea:	22fd      	movs	r2, #253	; 0xfd
 8006bec:	491c      	ldr	r1, [pc, #112]	; (8006c60 <tcp_input+0x2c8>)
 8006bee:	480c      	ldr	r0, [pc, #48]	; (8006c20 <tcp_input+0x288>)
 8006bf0:	f006 faa8 	bl	800d144 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	7a1b      	ldrb	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d033      	beq.n	8006c64 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	7a1a      	ldrb	r2, [r3, #8]
 8006c00:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <tcp_input+0x290>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c08:	3301      	adds	r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d029      	beq.n	8006c64 <tcp_input+0x2cc>
      prev = pcb;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	61bb      	str	r3, [r7, #24]
      continue;
 8006c14:	e06b      	b.n	8006cee <tcp_input+0x356>
 8006c16:	bf00      	nop
 8006c18:	0800f430 	.word	0x0800f430
 8006c1c:	0800f464 	.word	0x0800f464
 8006c20:	0800f47c 	.word	0x0800f47c
 8006c24:	20006768 	.word	0x20006768
 8006c28:	200031d0 	.word	0x200031d0
 8006c2c:	2000676c 	.word	0x2000676c
 8006c30:	20006770 	.word	0x20006770
 8006c34:	2000676e 	.word	0x2000676e
 8006c38:	0800f4a4 	.word	0x0800f4a4
 8006c3c:	0800f4b4 	.word	0x0800f4b4
 8006c40:	0800f4c0 	.word	0x0800f4c0
 8006c44:	20006778 	.word	0x20006778
 8006c48:	2000677c 	.word	0x2000677c
 8006c4c:	20006784 	.word	0x20006784
 8006c50:	20006782 	.word	0x20006782
 8006c54:	2000674c 	.word	0x2000674c
 8006c58:	0800f4e0 	.word	0x0800f4e0
 8006c5c:	0800f508 	.word	0x0800f508
 8006c60:	0800f534 	.word	0x0800f534
    }

    if (pcb->remote_port == tcphdr->src &&
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	8b1a      	ldrh	r2, [r3, #24]
 8006c68:	4b72      	ldr	r3, [pc, #456]	; (8006e34 <tcp_input+0x49c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d13a      	bne.n	8006cea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	8ada      	ldrh	r2, [r3, #22]
 8006c78:	4b6e      	ldr	r3, [pc, #440]	; (8006e34 <tcp_input+0x49c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d132      	bne.n	8006cea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	4b6b      	ldr	r3, [pc, #428]	; (8006e38 <tcp_input+0x4a0>)
 8006c8a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d12c      	bne.n	8006cea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b68      	ldr	r3, [pc, #416]	; (8006e38 <tcp_input+0x4a0>)
 8006c96:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d126      	bne.n	8006cea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d106      	bne.n	8006cb4 <tcp_input+0x31c>
 8006ca6:	4b65      	ldr	r3, [pc, #404]	; (8006e3c <tcp_input+0x4a4>)
 8006ca8:	f240 120d 	movw	r2, #269	; 0x10d
 8006cac:	4964      	ldr	r1, [pc, #400]	; (8006e40 <tcp_input+0x4a8>)
 8006cae:	4865      	ldr	r0, [pc, #404]	; (8006e44 <tcp_input+0x4ac>)
 8006cb0:	f006 fa48 	bl	800d144 <iprintf>
      if (prev != NULL) {
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <tcp_input+0x338>
        prev->next = pcb->next;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006cc2:	4b61      	ldr	r3, [pc, #388]	; (8006e48 <tcp_input+0x4b0>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006cca:	4a5f      	ldr	r2, [pc, #380]	; (8006e48 <tcp_input+0x4b0>)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d111      	bne.n	8006cfe <tcp_input+0x366>
 8006cda:	4b58      	ldr	r3, [pc, #352]	; (8006e3c <tcp_input+0x4a4>)
 8006cdc:	f240 1215 	movw	r2, #277	; 0x115
 8006ce0:	495a      	ldr	r1, [pc, #360]	; (8006e4c <tcp_input+0x4b4>)
 8006ce2:	4858      	ldr	r0, [pc, #352]	; (8006e44 <tcp_input+0x4ac>)
 8006ce4:	f006 fa2e 	bl	800d144 <iprintf>
      break;
 8006ce8:	e009      	b.n	8006cfe <tcp_input+0x366>
    }
    prev = pcb;
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f47f af5e 	bne.w	8006bb8 <tcp_input+0x220>
 8006cfc:	e000      	b.n	8006d00 <tcp_input+0x368>
      break;
 8006cfe:	bf00      	nop
  }

  if (pcb == NULL) {
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 80aa 	bne.w	8006e5c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d08:	4b51      	ldr	r3, [pc, #324]	; (8006e50 <tcp_input+0x4b8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	e03f      	b.n	8006d90 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	7d1b      	ldrb	r3, [r3, #20]
 8006d14:	2b0a      	cmp	r3, #10
 8006d16:	d006      	beq.n	8006d26 <tcp_input+0x38e>
 8006d18:	4b48      	ldr	r3, [pc, #288]	; (8006e3c <tcp_input+0x4a4>)
 8006d1a:	f240 121f 	movw	r2, #287	; 0x11f
 8006d1e:	494d      	ldr	r1, [pc, #308]	; (8006e54 <tcp_input+0x4bc>)
 8006d20:	4848      	ldr	r0, [pc, #288]	; (8006e44 <tcp_input+0x4ac>)
 8006d22:	f006 fa0f 	bl	800d144 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	7a1b      	ldrb	r3, [r3, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	7a1a      	ldrb	r2, [r3, #8]
 8006d32:	4b41      	ldr	r3, [pc, #260]	; (8006e38 <tcp_input+0x4a0>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d122      	bne.n	8006d88 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	8b1a      	ldrh	r2, [r3, #24]
 8006d46:	4b3b      	ldr	r3, [pc, #236]	; (8006e34 <tcp_input+0x49c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d11b      	bne.n	8006d8a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	8ada      	ldrh	r2, [r3, #22]
 8006d56:	4b37      	ldr	r3, [pc, #220]	; (8006e34 <tcp_input+0x49c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	885b      	ldrh	r3, [r3, #2]
 8006d5c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d113      	bne.n	8006d8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	4b34      	ldr	r3, [pc, #208]	; (8006e38 <tcp_input+0x4a0>)
 8006d68:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d10d      	bne.n	8006d8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b31      	ldr	r3, [pc, #196]	; (8006e38 <tcp_input+0x4a0>)
 8006d74:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d107      	bne.n	8006d8a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006d7a:	69f8      	ldr	r0, [r7, #28]
 8006d7c:	f000 fb56 	bl	800742c <tcp_timewait_input>
        }
        pbuf_free(p);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fd ffe1 	bl	8004d48 <pbuf_free>
        return;
 8006d86:	e1fd      	b.n	8007184 <tcp_input+0x7ec>
        continue;
 8006d88:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1bc      	bne.n	8006d10 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006d9a:	4b2f      	ldr	r3, [pc, #188]	; (8006e58 <tcp_input+0x4c0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	e02a      	b.n	8006df8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	7a1b      	ldrb	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00c      	beq.n	8006dc4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	7a1a      	ldrb	r2, [r3, #8]
 8006dae:	4b22      	ldr	r3, [pc, #136]	; (8006e38 <tcp_input+0x4a0>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006db6:	3301      	adds	r3, #1
 8006db8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d002      	beq.n	8006dc4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	61bb      	str	r3, [r7, #24]
        continue;
 8006dc2:	e016      	b.n	8006df2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	8ada      	ldrh	r2, [r3, #22]
 8006dc8:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <tcp_input+0x49c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d10c      	bne.n	8006dee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <tcp_input+0x4a0>)
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d00f      	beq.n	8006e00 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00d      	beq.n	8006e02 <tcp_input+0x46a>
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d009      	beq.n	8006e02 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1d1      	bne.n	8006da2 <tcp_input+0x40a>
 8006dfe:	e000      	b.n	8006e02 <tcp_input+0x46a>
            break;
 8006e00:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d029      	beq.n	8006e5c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006e16:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <tcp_input+0x4c0>)
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006e1e:	4a0e      	ldr	r2, [pc, #56]	; (8006e58 <tcp_input+0x4c0>)
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006e24:	6978      	ldr	r0, [r7, #20]
 8006e26:	f000 fa03 	bl	8007230 <tcp_listen_input>
      }
      pbuf_free(p);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fd ff8c 	bl	8004d48 <pbuf_free>
      return;
 8006e30:	e1a8      	b.n	8007184 <tcp_input+0x7ec>
 8006e32:	bf00      	nop
 8006e34:	20006768 	.word	0x20006768
 8006e38:	200031d0 	.word	0x200031d0
 8006e3c:	0800f430 	.word	0x0800f430
 8006e40:	0800f55c 	.word	0x0800f55c
 8006e44:	0800f47c 	.word	0x0800f47c
 8006e48:	2000674c 	.word	0x2000674c
 8006e4c:	0800f588 	.word	0x0800f588
 8006e50:	20006750 	.word	0x20006750
 8006e54:	0800f5b4 	.word	0x0800f5b4
 8006e58:	20006748 	.word	0x20006748
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8158 	beq.w	8007114 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006e64:	4b95      	ldr	r3, [pc, #596]	; (80070bc <tcp_input+0x724>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	891a      	ldrh	r2, [r3, #8]
 8006e6e:	4b93      	ldr	r3, [pc, #588]	; (80070bc <tcp_input+0x724>)
 8006e70:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006e72:	4a92      	ldr	r2, [pc, #584]	; (80070bc <tcp_input+0x724>)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006e78:	4b91      	ldr	r3, [pc, #580]	; (80070c0 <tcp_input+0x728>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a8f      	ldr	r2, [pc, #572]	; (80070bc <tcp_input+0x724>)
 8006e7e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006e80:	4b90      	ldr	r3, [pc, #576]	; (80070c4 <tcp_input+0x72c>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006e86:	4b90      	ldr	r3, [pc, #576]	; (80070c8 <tcp_input+0x730>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006e8c:	4b8f      	ldr	r3, [pc, #572]	; (80070cc <tcp_input+0x734>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006e92:	4b8f      	ldr	r3, [pc, #572]	; (80070d0 <tcp_input+0x738>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d006      	beq.n	8006eac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7b5b      	ldrb	r3, [r3, #13]
 8006ea2:	f043 0301 	orr.w	r3, r3, #1
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d017      	beq.n	8006ee4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006eb4:	69f8      	ldr	r0, [r7, #28]
 8006eb6:	f7ff f929 	bl	800610c <tcp_process_refused_data>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f113 0f0d 	cmn.w	r3, #13
 8006ec0:	d007      	beq.n	8006ed2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00c      	beq.n	8006ee4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006eca:	4b82      	ldr	r3, [pc, #520]	; (80070d4 <tcp_input+0x73c>)
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f040 80e3 	bne.w	80070a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006edc:	69f8      	ldr	r0, [r7, #28]
 8006ede:	f003 f9ad 	bl	800a23c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006ee2:	e0de      	b.n	80070a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8006ee4:	4a7c      	ldr	r2, [pc, #496]	; (80070d8 <tcp_input+0x740>)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006eea:	69f8      	ldr	r0, [r7, #28]
 8006eec:	f000 fb18 	bl	8007520 <tcp_process>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006ef4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ef8:	f113 0f0d 	cmn.w	r3, #13
 8006efc:	f000 80d3 	beq.w	80070a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8006f00:	4b71      	ldr	r3, [pc, #452]	; (80070c8 <tcp_input+0x730>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d015      	beq.n	8006f38 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <tcp_input+0x590>
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	6912      	ldr	r2, [r2, #16]
 8006f20:	f06f 010d 	mvn.w	r1, #13
 8006f24:	4610      	mov	r0, r2
 8006f26:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006f28:	69f9      	ldr	r1, [r7, #28]
 8006f2a:	486c      	ldr	r0, [pc, #432]	; (80070dc <tcp_input+0x744>)
 8006f2c:	f7ff fbbc 	bl	80066a8 <tcp_pcb_remove>
        tcp_free(pcb);
 8006f30:	69f8      	ldr	r0, [r7, #28]
 8006f32:	f7fe f9a9 	bl	8005288 <tcp_free>
 8006f36:	e0da      	b.n	80070ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006f3c:	4b63      	ldr	r3, [pc, #396]	; (80070cc <tcp_input+0x734>)
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01d      	beq.n	8006f80 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006f44:	4b61      	ldr	r3, [pc, #388]	; (80070cc <tcp_input+0x734>)
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <tcp_input+0x5d2>
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	6910      	ldr	r0, [r2, #16]
 8006f5e:	89fa      	ldrh	r2, [r7, #14]
 8006f60:	69f9      	ldr	r1, [r7, #28]
 8006f62:	4798      	blx	r3
 8006f64:	4603      	mov	r3, r0
 8006f66:	74fb      	strb	r3, [r7, #19]
 8006f68:	e001      	b.n	8006f6e <tcp_input+0x5d6>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006f6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006f72:	f113 0f0d 	cmn.w	r3, #13
 8006f76:	f000 8098 	beq.w	80070aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8006f7a:	4b54      	ldr	r3, [pc, #336]	; (80070cc <tcp_input+0x734>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006f80:	69f8      	ldr	r0, [r7, #28]
 8006f82:	f000 f915 	bl	80071b0 <tcp_input_delayed_close>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 8090 	bne.w	80070ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006f8e:	4b4d      	ldr	r3, [pc, #308]	; (80070c4 <tcp_input+0x72c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d041      	beq.n	800701a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d006      	beq.n	8006fac <tcp_input+0x614>
 8006f9e:	4b50      	ldr	r3, [pc, #320]	; (80070e0 <tcp_input+0x748>)
 8006fa0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006fa4:	494f      	ldr	r1, [pc, #316]	; (80070e4 <tcp_input+0x74c>)
 8006fa6:	4850      	ldr	r0, [pc, #320]	; (80070e8 <tcp_input+0x750>)
 8006fa8:	f006 f8cc 	bl	800d144 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	8b5b      	ldrh	r3, [r3, #26]
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d008      	beq.n	8006fca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006fb8:	4b42      	ldr	r3, [pc, #264]	; (80070c4 <tcp_input+0x72c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fd fec3 	bl	8004d48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006fc2:	69f8      	ldr	r0, [r7, #28]
 8006fc4:	f7fe fc48 	bl	8005858 <tcp_abort>
            goto aborted;
 8006fc8:	e091      	b.n	80070ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00c      	beq.n	8006fee <tcp_input+0x656>
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	6918      	ldr	r0, [r3, #16]
 8006fde:	4b39      	ldr	r3, [pc, #228]	; (80070c4 <tcp_input+0x72c>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	69f9      	ldr	r1, [r7, #28]
 8006fe6:	47a0      	blx	r4
 8006fe8:	4603      	mov	r3, r0
 8006fea:	74fb      	strb	r3, [r7, #19]
 8006fec:	e008      	b.n	8007000 <tcp_input+0x668>
 8006fee:	4b35      	ldr	r3, [pc, #212]	; (80070c4 <tcp_input+0x72c>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	69f9      	ldr	r1, [r7, #28]
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	f7ff f95e 	bl	80062b8 <tcp_recv_null>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007004:	f113 0f0d 	cmn.w	r3, #13
 8007008:	d053      	beq.n	80070b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800700a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007012:	4b2c      	ldr	r3, [pc, #176]	; (80070c4 <tcp_input+0x72c>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800701a:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <tcp_input+0x730>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d030      	beq.n	8007088 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007032:	7b5a      	ldrb	r2, [r3, #13]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007038:	f042 0220 	orr.w	r2, r2, #32
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	735a      	strb	r2, [r3, #13]
 8007040:	e022      	b.n	8007088 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007046:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800704a:	d005      	beq.n	8007058 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007050:	3301      	adds	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <tcp_input+0x6e2>
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	6918      	ldr	r0, [r3, #16]
 800706c:	2300      	movs	r3, #0
 800706e:	2200      	movs	r2, #0
 8007070:	69f9      	ldr	r1, [r7, #28]
 8007072:	47a0      	blx	r4
 8007074:	4603      	mov	r3, r0
 8007076:	74fb      	strb	r3, [r7, #19]
 8007078:	e001      	b.n	800707e <tcp_input+0x6e6>
 800707a:	2300      	movs	r3, #0
 800707c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800707e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007082:	f113 0f0d 	cmn.w	r3, #13
 8007086:	d016      	beq.n	80070b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007088:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <tcp_input+0x740>)
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800708e:	69f8      	ldr	r0, [r7, #28]
 8007090:	f000 f88e 	bl	80071b0 <tcp_input_delayed_close>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d128      	bne.n	80070ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800709a:	69f8      	ldr	r0, [r7, #28]
 800709c:	f002 fac8 	bl	8009630 <tcp_output>
 80070a0:	e025      	b.n	80070ee <tcp_input+0x756>
        goto aborted;
 80070a2:	bf00      	nop
 80070a4:	e023      	b.n	80070ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80070a6:	bf00      	nop
 80070a8:	e021      	b.n	80070ee <tcp_input+0x756>
              goto aborted;
 80070aa:	bf00      	nop
 80070ac:	e01f      	b.n	80070ee <tcp_input+0x756>
          goto aborted;
 80070ae:	bf00      	nop
 80070b0:	e01d      	b.n	80070ee <tcp_input+0x756>
            goto aborted;
 80070b2:	bf00      	nop
 80070b4:	e01b      	b.n	80070ee <tcp_input+0x756>
              goto aborted;
 80070b6:	bf00      	nop
 80070b8:	e019      	b.n	80070ee <tcp_input+0x756>
 80070ba:	bf00      	nop
 80070bc:	20006758 	.word	0x20006758
 80070c0:	20006768 	.word	0x20006768
 80070c4:	20006788 	.word	0x20006788
 80070c8:	20006785 	.word	0x20006785
 80070cc:	20006780 	.word	0x20006780
 80070d0:	20006784 	.word	0x20006784
 80070d4:	20006782 	.word	0x20006782
 80070d8:	2000678c 	.word	0x2000678c
 80070dc:	2000674c 	.word	0x2000674c
 80070e0:	0800f430 	.word	0x0800f430
 80070e4:	0800f5e4 	.word	0x0800f5e4
 80070e8:	0800f47c 	.word	0x0800f47c
          goto aborted;
 80070ec:	bf00      	nop
    tcp_input_pcb = NULL;
 80070ee:	4b27      	ldr	r3, [pc, #156]	; (800718c <tcp_input+0x7f4>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80070f4:	4b26      	ldr	r3, [pc, #152]	; (8007190 <tcp_input+0x7f8>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80070fa:	4b26      	ldr	r3, [pc, #152]	; (8007194 <tcp_input+0x7fc>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d03f      	beq.n	8007182 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007102:	4b24      	ldr	r3, [pc, #144]	; (8007194 <tcp_input+0x7fc>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	4618      	mov	r0, r3
 8007108:	f7fd fe1e 	bl	8004d48 <pbuf_free>
      inseg.p = NULL;
 800710c:	4b21      	ldr	r3, [pc, #132]	; (8007194 <tcp_input+0x7fc>)
 800710e:	2200      	movs	r2, #0
 8007110:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007112:	e036      	b.n	8007182 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007114:	4b20      	ldr	r3, [pc, #128]	; (8007198 <tcp_input+0x800>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	899b      	ldrh	r3, [r3, #12]
 800711a:	b29b      	uxth	r3, r3
 800711c:	4618      	mov	r0, r3
 800711e:	f7fc fb5f 	bl	80037e0 <lwip_htons>
 8007122:	4603      	mov	r3, r0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d118      	bne.n	8007160 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800712e:	4b1b      	ldr	r3, [pc, #108]	; (800719c <tcp_input+0x804>)
 8007130:	6819      	ldr	r1, [r3, #0]
 8007132:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <tcp_input+0x808>)
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	4b1a      	ldr	r3, [pc, #104]	; (80071a4 <tcp_input+0x80c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800713e:	4b16      	ldr	r3, [pc, #88]	; (8007198 <tcp_input+0x800>)
 8007140:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007142:	885b      	ldrh	r3, [r3, #2]
 8007144:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007146:	4a14      	ldr	r2, [pc, #80]	; (8007198 <tcp_input+0x800>)
 8007148:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800714a:	8812      	ldrh	r2, [r2, #0]
 800714c:	b292      	uxth	r2, r2
 800714e:	9202      	str	r2, [sp, #8]
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	4b15      	ldr	r3, [pc, #84]	; (80071a8 <tcp_input+0x810>)
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <tcp_input+0x814>)
 8007158:	4602      	mov	r2, r0
 800715a:	2000      	movs	r0, #0
 800715c:	f003 f81c 	bl	800a198 <tcp_rst>
    pbuf_free(p);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7fd fdf1 	bl	8004d48 <pbuf_free>
  return;
 8007166:	e00c      	b.n	8007182 <tcp_input+0x7ea>
    goto dropped;
 8007168:	bf00      	nop
 800716a:	e006      	b.n	800717a <tcp_input+0x7e2>
    goto dropped;
 800716c:	bf00      	nop
 800716e:	e004      	b.n	800717a <tcp_input+0x7e2>
    goto dropped;
 8007170:	bf00      	nop
 8007172:	e002      	b.n	800717a <tcp_input+0x7e2>
      goto dropped;
 8007174:	bf00      	nop
 8007176:	e000      	b.n	800717a <tcp_input+0x7e2>
      goto dropped;
 8007178:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fd fde4 	bl	8004d48 <pbuf_free>
 8007180:	e000      	b.n	8007184 <tcp_input+0x7ec>
  return;
 8007182:	bf00      	nop
}
 8007184:	3724      	adds	r7, #36	; 0x24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd90      	pop	{r4, r7, pc}
 800718a:	bf00      	nop
 800718c:	2000678c 	.word	0x2000678c
 8007190:	20006788 	.word	0x20006788
 8007194:	20006758 	.word	0x20006758
 8007198:	20006768 	.word	0x20006768
 800719c:	2000677c 	.word	0x2000677c
 80071a0:	20006782 	.word	0x20006782
 80071a4:	20006778 	.word	0x20006778
 80071a8:	200031e0 	.word	0x200031e0
 80071ac:	200031e4 	.word	0x200031e4

080071b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <tcp_input_delayed_close+0x1c>
 80071be:	4b17      	ldr	r3, [pc, #92]	; (800721c <tcp_input_delayed_close+0x6c>)
 80071c0:	f240 225a 	movw	r2, #602	; 0x25a
 80071c4:	4916      	ldr	r1, [pc, #88]	; (8007220 <tcp_input_delayed_close+0x70>)
 80071c6:	4817      	ldr	r0, [pc, #92]	; (8007224 <tcp_input_delayed_close+0x74>)
 80071c8:	f005 ffbc 	bl	800d144 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80071cc:	4b16      	ldr	r3, [pc, #88]	; (8007228 <tcp_input_delayed_close+0x78>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01c      	beq.n	8007212 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	8b5b      	ldrh	r3, [r3, #26]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d008      	beq.n	8007200 <tcp_input_delayed_close+0x50>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6912      	ldr	r2, [r2, #16]
 80071f8:	f06f 010e 	mvn.w	r1, #14
 80071fc:	4610      	mov	r0, r2
 80071fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	480a      	ldr	r0, [pc, #40]	; (800722c <tcp_input_delayed_close+0x7c>)
 8007204:	f7ff fa50 	bl	80066a8 <tcp_pcb_remove>
    tcp_free(pcb);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fe f83d 	bl	8005288 <tcp_free>
    return 1;
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	0800f430 	.word	0x0800f430
 8007220:	0800f600 	.word	0x0800f600
 8007224:	0800f47c 	.word	0x0800f47c
 8007228:	20006785 	.word	0x20006785
 800722c:	2000674c 	.word	0x2000674c

08007230 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007230:	b590      	push	{r4, r7, lr}
 8007232:	b08b      	sub	sp, #44	; 0x2c
 8007234:	af04      	add	r7, sp, #16
 8007236:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007238:	4b6f      	ldr	r3, [pc, #444]	; (80073f8 <tcp_listen_input+0x1c8>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 80d2 	bne.w	80073ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <tcp_listen_input+0x2a>
 800724c:	4b6b      	ldr	r3, [pc, #428]	; (80073fc <tcp_listen_input+0x1cc>)
 800724e:	f240 2281 	movw	r2, #641	; 0x281
 8007252:	496b      	ldr	r1, [pc, #428]	; (8007400 <tcp_listen_input+0x1d0>)
 8007254:	486b      	ldr	r0, [pc, #428]	; (8007404 <tcp_listen_input+0x1d4>)
 8007256:	f005 ff75 	bl	800d144 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800725a:	4b67      	ldr	r3, [pc, #412]	; (80073f8 <tcp_listen_input+0x1c8>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b00      	cmp	r3, #0
 8007264:	d019      	beq.n	800729a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007266:	4b68      	ldr	r3, [pc, #416]	; (8007408 <tcp_listen_input+0x1d8>)
 8007268:	6819      	ldr	r1, [r3, #0]
 800726a:	4b68      	ldr	r3, [pc, #416]	; (800740c <tcp_listen_input+0x1dc>)
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	4b67      	ldr	r3, [pc, #412]	; (8007410 <tcp_listen_input+0x1e0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007276:	4b67      	ldr	r3, [pc, #412]	; (8007414 <tcp_listen_input+0x1e4>)
 8007278:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800727a:	885b      	ldrh	r3, [r3, #2]
 800727c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800727e:	4a65      	ldr	r2, [pc, #404]	; (8007414 <tcp_listen_input+0x1e4>)
 8007280:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007282:	8812      	ldrh	r2, [r2, #0]
 8007284:	b292      	uxth	r2, r2
 8007286:	9202      	str	r2, [sp, #8]
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	4b63      	ldr	r3, [pc, #396]	; (8007418 <tcp_listen_input+0x1e8>)
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4b63      	ldr	r3, [pc, #396]	; (800741c <tcp_listen_input+0x1ec>)
 8007290:	4602      	mov	r2, r0
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f002 ff80 	bl	800a198 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007298:	e0a9      	b.n	80073ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800729a:	4b57      	ldr	r3, [pc, #348]	; (80073f8 <tcp_listen_input+0x1c8>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80a3 	beq.w	80073ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7d5b      	ldrb	r3, [r3, #21]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff f927 	bl	8006500 <tcp_alloc>
 80072b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d111      	bne.n	80072de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <tcp_listen_input+0xa8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6910      	ldr	r0, [r2, #16]
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ce:	2100      	movs	r1, #0
 80072d0:	4798      	blx	r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	73bb      	strb	r3, [r7, #14]
      return;
 80072d6:	e08b      	b.n	80073f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80072d8:	23f0      	movs	r3, #240	; 0xf0
 80072da:	73bb      	strb	r3, [r7, #14]
      return;
 80072dc:	e088      	b.n	80073f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80072de:	4b50      	ldr	r3, [pc, #320]	; (8007420 <tcp_listen_input+0x1f0>)
 80072e0:	695a      	ldr	r2, [r3, #20]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80072e6:	4b4e      	ldr	r3, [pc, #312]	; (8007420 <tcp_listen_input+0x1f0>)
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8ada      	ldrh	r2, [r3, #22]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80072f6:	4b47      	ldr	r3, [pc, #284]	; (8007414 <tcp_listen_input+0x1e4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2203      	movs	r2, #3
 8007306:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007308:	4b41      	ldr	r3, [pc, #260]	; (8007410 <tcp_listen_input+0x1e0>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800731a:	6978      	ldr	r0, [r7, #20]
 800731c:	f7ff fa58 	bl	80067d0 <tcp_next_iss>
 8007320:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800733a:	4b35      	ldr	r3, [pc, #212]	; (8007410 <tcp_listen_input+0x1e0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	1e5a      	subs	r2, r3, #1
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7a5b      	ldrb	r3, [r3, #9]
 8007356:	f003 030c 	and.w	r3, r3, #12
 800735a:	b2da      	uxtb	r2, r3
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7a1a      	ldrb	r2, [r3, #8]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007368:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <tcp_listen_input+0x1f4>)
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	4a2c      	ldr	r2, [pc, #176]	; (8007424 <tcp_listen_input+0x1f4>)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	f003 f8d1 	bl	800a51c <tcp_timer_needed>
 800737a:	4b2b      	ldr	r3, [pc, #172]	; (8007428 <tcp_listen_input+0x1f8>)
 800737c:	2201      	movs	r2, #1
 800737e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007380:	6978      	ldr	r0, [r7, #20]
 8007382:	f001 fd8f 	bl	8008ea4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007386:	4b23      	ldr	r3, [pc, #140]	; (8007414 <tcp_listen_input+0x1e4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	89db      	ldrh	r3, [r3, #14]
 800738c:	b29a      	uxth	r2, r3
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4618      	mov	r0, r3
 80073aa:	f004 fc95 	bl	800bcd8 <ip4_route>
 80073ae:	4601      	mov	r1, r0
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3304      	adds	r3, #4
 80073b4:	461a      	mov	r2, r3
 80073b6:	4620      	mov	r0, r4
 80073b8:	f7ff fa30 	bl	800681c <tcp_eff_send_mss_netif>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80073c4:	2112      	movs	r1, #18
 80073c6:	6978      	ldr	r0, [r7, #20]
 80073c8:	f002 f844 	bl	8009454 <tcp_enqueue_flags>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80073d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80073d8:	2100      	movs	r1, #0
 80073da:	6978      	ldr	r0, [r7, #20]
 80073dc:	f7fe f97e 	bl	80056dc <tcp_abandon>
      return;
 80073e0:	e006      	b.n	80073f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80073e2:	6978      	ldr	r0, [r7, #20]
 80073e4:	f002 f924 	bl	8009630 <tcp_output>
  return;
 80073e8:	e001      	b.n	80073ee <tcp_listen_input+0x1be>
    return;
 80073ea:	bf00      	nop
 80073ec:	e000      	b.n	80073f0 <tcp_listen_input+0x1c0>
  return;
 80073ee:	bf00      	nop
}
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd90      	pop	{r4, r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20006784 	.word	0x20006784
 80073fc:	0800f430 	.word	0x0800f430
 8007400:	0800f628 	.word	0x0800f628
 8007404:	0800f47c 	.word	0x0800f47c
 8007408:	2000677c 	.word	0x2000677c
 800740c:	20006782 	.word	0x20006782
 8007410:	20006778 	.word	0x20006778
 8007414:	20006768 	.word	0x20006768
 8007418:	200031e0 	.word	0x200031e0
 800741c:	200031e4 	.word	0x200031e4
 8007420:	200031d0 	.word	0x200031d0
 8007424:	2000674c 	.word	0x2000674c
 8007428:	20006754 	.word	0x20006754

0800742c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af04      	add	r7, sp, #16
 8007432:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007434:	4b2f      	ldr	r3, [pc, #188]	; (80074f4 <tcp_timewait_input+0xc8>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d153      	bne.n	80074e8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <tcp_timewait_input+0x28>
 8007446:	4b2c      	ldr	r3, [pc, #176]	; (80074f8 <tcp_timewait_input+0xcc>)
 8007448:	f240 22ee 	movw	r2, #750	; 0x2ee
 800744c:	492b      	ldr	r1, [pc, #172]	; (80074fc <tcp_timewait_input+0xd0>)
 800744e:	482c      	ldr	r0, [pc, #176]	; (8007500 <tcp_timewait_input+0xd4>)
 8007450:	f005 fe78 	bl	800d144 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007454:	4b27      	ldr	r3, [pc, #156]	; (80074f4 <tcp_timewait_input+0xc8>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02a      	beq.n	80074b6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007460:	4b28      	ldr	r3, [pc, #160]	; (8007504 <tcp_timewait_input+0xd8>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	db2d      	blt.n	80074ca <tcp_timewait_input+0x9e>
 800746e:	4b25      	ldr	r3, [pc, #148]	; (8007504 <tcp_timewait_input+0xd8>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800747a:	440b      	add	r3, r1
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	dc23      	bgt.n	80074ca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007482:	4b21      	ldr	r3, [pc, #132]	; (8007508 <tcp_timewait_input+0xdc>)
 8007484:	6819      	ldr	r1, [r3, #0]
 8007486:	4b21      	ldr	r3, [pc, #132]	; (800750c <tcp_timewait_input+0xe0>)
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	4b1d      	ldr	r3, [pc, #116]	; (8007504 <tcp_timewait_input+0xd8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007492:	4b1f      	ldr	r3, [pc, #124]	; (8007510 <tcp_timewait_input+0xe4>)
 8007494:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007496:	885b      	ldrh	r3, [r3, #2]
 8007498:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800749a:	4a1d      	ldr	r2, [pc, #116]	; (8007510 <tcp_timewait_input+0xe4>)
 800749c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800749e:	8812      	ldrh	r2, [r2, #0]
 80074a0:	b292      	uxth	r2, r2
 80074a2:	9202      	str	r2, [sp, #8]
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <tcp_timewait_input+0xe8>)
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <tcp_timewait_input+0xec>)
 80074ac:	4602      	mov	r2, r0
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f002 fe72 	bl	800a198 <tcp_rst>
      return;
 80074b4:	e01b      	b.n	80074ee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80074b6:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <tcp_timewait_input+0xc8>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80074c2:	4b16      	ldr	r3, [pc, #88]	; (800751c <tcp_timewait_input+0xf0>)
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80074ca:	4b10      	ldr	r3, [pc, #64]	; (800750c <tcp_timewait_input+0xe0>)
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	8b5b      	ldrh	r3, [r3, #26]
 80074d6:	f043 0302 	orr.w	r3, r3, #2
 80074da:	b29a      	uxth	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 f8a5 	bl	8009630 <tcp_output>
  }
  return;
 80074e6:	e001      	b.n	80074ec <tcp_timewait_input+0xc0>
    return;
 80074e8:	bf00      	nop
 80074ea:	e000      	b.n	80074ee <tcp_timewait_input+0xc2>
  return;
 80074ec:	bf00      	nop
}
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20006784 	.word	0x20006784
 80074f8:	0800f430 	.word	0x0800f430
 80074fc:	0800f648 	.word	0x0800f648
 8007500:	0800f47c 	.word	0x0800f47c
 8007504:	20006778 	.word	0x20006778
 8007508:	2000677c 	.word	0x2000677c
 800750c:	20006782 	.word	0x20006782
 8007510:	20006768 	.word	0x20006768
 8007514:	200031e0 	.word	0x200031e0
 8007518:	200031e4 	.word	0x200031e4
 800751c:	20006740 	.word	0x20006740

08007520 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007520:	b590      	push	{r4, r7, lr}
 8007522:	b08d      	sub	sp, #52	; 0x34
 8007524:	af04      	add	r7, sp, #16
 8007526:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <tcp_process+0x24>
 8007536:	4b9d      	ldr	r3, [pc, #628]	; (80077ac <tcp_process+0x28c>)
 8007538:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800753c:	499c      	ldr	r1, [pc, #624]	; (80077b0 <tcp_process+0x290>)
 800753e:	489d      	ldr	r0, [pc, #628]	; (80077b4 <tcp_process+0x294>)
 8007540:	f005 fe00 	bl	800d144 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007544:	4b9c      	ldr	r3, [pc, #624]	; (80077b8 <tcp_process+0x298>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d04e      	beq.n	80075ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	7d1b      	ldrb	r3, [r3, #20]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d108      	bne.n	800756a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800755c:	4b97      	ldr	r3, [pc, #604]	; (80077bc <tcp_process+0x29c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d123      	bne.n	80075ac <tcp_process+0x8c>
        acceptable = 1;
 8007564:	2301      	movs	r3, #1
 8007566:	76fb      	strb	r3, [r7, #27]
 8007568:	e020      	b.n	80075ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800756e:	4b94      	ldr	r3, [pc, #592]	; (80077c0 <tcp_process+0x2a0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d102      	bne.n	800757c <tcp_process+0x5c>
        acceptable = 1;
 8007576:	2301      	movs	r3, #1
 8007578:	76fb      	strb	r3, [r7, #27]
 800757a:	e017      	b.n	80075ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800757c:	4b90      	ldr	r3, [pc, #576]	; (80077c0 <tcp_process+0x2a0>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	db10      	blt.n	80075ac <tcp_process+0x8c>
 800758a:	4b8d      	ldr	r3, [pc, #564]	; (80077c0 <tcp_process+0x2a0>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007596:	440b      	add	r3, r1
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	dc06      	bgt.n	80075ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8b5b      	ldrh	r3, [r3, #26]
 80075a2:	f043 0302 	orr.w	r3, r3, #2
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80075ac:	7efb      	ldrb	r3, [r7, #27]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01b      	beq.n	80075ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	7d1b      	ldrb	r3, [r3, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <tcp_process+0xa8>
 80075ba:	4b7c      	ldr	r3, [pc, #496]	; (80077ac <tcp_process+0x28c>)
 80075bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80075c0:	4980      	ldr	r1, [pc, #512]	; (80077c4 <tcp_process+0x2a4>)
 80075c2:	487c      	ldr	r0, [pc, #496]	; (80077b4 <tcp_process+0x294>)
 80075c4:	f005 fdbe 	bl	800d144 <iprintf>
      recv_flags |= TF_RESET;
 80075c8:	4b7f      	ldr	r3, [pc, #508]	; (80077c8 <tcp_process+0x2a8>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f043 0308 	orr.w	r3, r3, #8
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	4b7d      	ldr	r3, [pc, #500]	; (80077c8 <tcp_process+0x2a8>)
 80075d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	8b5b      	ldrh	r3, [r3, #26]
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80075e4:	f06f 030d 	mvn.w	r3, #13
 80075e8:	e37a      	b.n	8007ce0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	e378      	b.n	8007ce0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80075ee:	4b72      	ldr	r3, [pc, #456]	; (80077b8 <tcp_process+0x298>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d010      	beq.n	800761c <tcp_process+0xfc>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7d1b      	ldrb	r3, [r3, #20]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d00c      	beq.n	800761c <tcp_process+0xfc>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	7d1b      	ldrb	r3, [r3, #20]
 8007606:	2b03      	cmp	r3, #3
 8007608:	d008      	beq.n	800761c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	8b5b      	ldrh	r3, [r3, #26]
 800760e:	f043 0302 	orr.w	r3, r3, #2
 8007612:	b29a      	uxth	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e361      	b.n	8007ce0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	8b5b      	ldrh	r3, [r3, #26]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d103      	bne.n	8007630 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007628:	4b68      	ldr	r3, [pc, #416]	; (80077cc <tcp_process+0x2ac>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fc2f 	bl	8008ea4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7d1b      	ldrb	r3, [r3, #20]
 800764a:	3b02      	subs	r3, #2
 800764c:	2b07      	cmp	r3, #7
 800764e:	f200 8337 	bhi.w	8007cc0 <tcp_process+0x7a0>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <tcp_process+0x138>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	08007679 	.word	0x08007679
 800765c:	080078a9 	.word	0x080078a9
 8007660:	08007a21 	.word	0x08007a21
 8007664:	08007a4b 	.word	0x08007a4b
 8007668:	08007b6f 	.word	0x08007b6f
 800766c:	08007a21 	.word	0x08007a21
 8007670:	08007bfb 	.word	0x08007bfb
 8007674:	08007c8b 	.word	0x08007c8b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007678:	4b4f      	ldr	r3, [pc, #316]	; (80077b8 <tcp_process+0x298>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80e4 	beq.w	800784e <tcp_process+0x32e>
 8007686:	4b4c      	ldr	r3, [pc, #304]	; (80077b8 <tcp_process+0x298>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80dd 	beq.w	800784e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	4b48      	ldr	r3, [pc, #288]	; (80077bc <tcp_process+0x29c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	f040 80d5 	bne.w	800784e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80076a4:	4b46      	ldr	r3, [pc, #280]	; (80077c0 <tcp_process+0x2a0>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80076b6:	4b41      	ldr	r3, [pc, #260]	; (80077bc <tcp_process+0x29c>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80076be:	4b44      	ldr	r3, [pc, #272]	; (80077d0 <tcp_process+0x2b0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	89db      	ldrh	r3, [r3, #14]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80076d8:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <tcp_process+0x2a0>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	1e5a      	subs	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2204      	movs	r2, #4
 80076e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4618      	mov	r0, r3
 80076f2:	f004 faf1 	bl	800bcd8 <ip4_route>
 80076f6:	4601      	mov	r1, r0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	461a      	mov	r2, r3
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff f88c 	bl	800681c <tcp_eff_send_mss_netif>
 8007704:	4603      	mov	r3, r0
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007710:	009a      	lsls	r2, r3, #2
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	f241 111c 	movw	r1, #4380	; 0x111c
 800771c:	428b      	cmp	r3, r1
 800771e:	bf38      	it	cc
 8007720:	460b      	movcc	r3, r1
 8007722:	429a      	cmp	r2, r3
 8007724:	d204      	bcs.n	8007730 <tcp_process+0x210>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	b29b      	uxth	r3, r3
 800772e:	e00d      	b.n	800774c <tcp_process+0x22c>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	f241 121c 	movw	r2, #4380	; 0x111c
 800773a:	4293      	cmp	r3, r2
 800773c:	d904      	bls.n	8007748 <tcp_process+0x228>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	b29b      	uxth	r3, r3
 8007746:	e001      	b.n	800774c <tcp_process+0x22c>
 8007748:	f241 131c 	movw	r3, #4380	; 0x111c
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <tcp_process+0x24a>
 800775c:	4b13      	ldr	r3, [pc, #76]	; (80077ac <tcp_process+0x28c>)
 800775e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007762:	491c      	ldr	r1, [pc, #112]	; (80077d4 <tcp_process+0x2b4>)
 8007764:	4813      	ldr	r0, [pc, #76]	; (80077b4 <tcp_process+0x294>)
 8007766:	f005 fced 	bl	800d144 <iprintf>
        --pcb->snd_queuelen;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d12a      	bne.n	80077dc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <tcp_process+0x280>
 8007792:	4b06      	ldr	r3, [pc, #24]	; (80077ac <tcp_process+0x28c>)
 8007794:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007798:	490f      	ldr	r1, [pc, #60]	; (80077d8 <tcp_process+0x2b8>)
 800779a:	4806      	ldr	r0, [pc, #24]	; (80077b4 <tcp_process+0x294>)
 800779c:	f005 fcd2 	bl	800d144 <iprintf>
          pcb->unsent = rseg->next;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80077a8:	e01c      	b.n	80077e4 <tcp_process+0x2c4>
 80077aa:	bf00      	nop
 80077ac:	0800f430 	.word	0x0800f430
 80077b0:	0800f668 	.word	0x0800f668
 80077b4:	0800f47c 	.word	0x0800f47c
 80077b8:	20006784 	.word	0x20006784
 80077bc:	2000677c 	.word	0x2000677c
 80077c0:	20006778 	.word	0x20006778
 80077c4:	0800f684 	.word	0x0800f684
 80077c8:	20006785 	.word	0x20006785
 80077cc:	20006740 	.word	0x20006740
 80077d0:	20006768 	.word	0x20006768
 80077d4:	0800f6a4 	.word	0x0800f6a4
 80077d8:	0800f6bc 	.word	0x0800f6bc
        } else {
          pcb->unacked = rseg->next;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80077e4:	69f8      	ldr	r0, [r7, #28]
 80077e6:	f7fe fd22 	bl	800622e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d104      	bne.n	80077fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077f8:	861a      	strh	r2, [r3, #48]	; 0x30
 80077fa:	e006      	b.n	800780a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00a      	beq.n	800782a <tcp_process+0x30a>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6910      	ldr	r0, [r2, #16]
 800781e:	2200      	movs	r2, #0
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4798      	blx	r3
 8007824:	4603      	mov	r3, r0
 8007826:	76bb      	strb	r3, [r7, #26]
 8007828:	e001      	b.n	800782e <tcp_process+0x30e>
 800782a:	2300      	movs	r3, #0
 800782c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800782e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007832:	f113 0f0d 	cmn.w	r3, #13
 8007836:	d102      	bne.n	800783e <tcp_process+0x31e>
          return ERR_ABRT;
 8007838:	f06f 030c 	mvn.w	r3, #12
 800783c:	e250      	b.n	8007ce0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8b5b      	ldrh	r3, [r3, #26]
 8007842:	f043 0302 	orr.w	r3, r3, #2
 8007846:	b29a      	uxth	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800784c:	e23a      	b.n	8007cc4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800784e:	4b98      	ldr	r3, [pc, #608]	; (8007ab0 <tcp_process+0x590>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	f003 0310 	and.w	r3, r3, #16
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 8234 	beq.w	8007cc4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800785c:	4b95      	ldr	r3, [pc, #596]	; (8007ab4 <tcp_process+0x594>)
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	4b95      	ldr	r3, [pc, #596]	; (8007ab8 <tcp_process+0x598>)
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	4b95      	ldr	r3, [pc, #596]	; (8007abc <tcp_process+0x59c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800786c:	4b94      	ldr	r3, [pc, #592]	; (8007ac0 <tcp_process+0x5a0>)
 800786e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007870:	885b      	ldrh	r3, [r3, #2]
 8007872:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007874:	4a92      	ldr	r2, [pc, #584]	; (8007ac0 <tcp_process+0x5a0>)
 8007876:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007878:	8812      	ldrh	r2, [r2, #0]
 800787a:	b292      	uxth	r2, r2
 800787c:	9202      	str	r2, [sp, #8]
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	4b90      	ldr	r3, [pc, #576]	; (8007ac4 <tcp_process+0x5a4>)
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	4b90      	ldr	r3, [pc, #576]	; (8007ac8 <tcp_process+0x5a8>)
 8007886:	4602      	mov	r2, r0
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f002 fc85 	bl	800a198 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007894:	2b05      	cmp	r3, #5
 8007896:	f200 8215 	bhi.w	8007cc4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f002 fa4f 	bl	8009d44 <tcp_rexmit_rto>
      break;
 80078a6:	e20d      	b.n	8007cc4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80078a8:	4b81      	ldr	r3, [pc, #516]	; (8007ab0 <tcp_process+0x590>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 80a1 	beq.w	80079f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80078b6:	4b7f      	ldr	r3, [pc, #508]	; (8007ab4 <tcp_process+0x594>)
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	db7e      	blt.n	80079c4 <tcp_process+0x4a4>
 80078c6:	4b7b      	ldr	r3, [pc, #492]	; (8007ab4 <tcp_process+0x594>)
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dc77      	bgt.n	80079c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2204      	movs	r2, #4
 80078d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80078e2:	23fa      	movs	r3, #250	; 0xfa
 80078e4:	76bb      	strb	r3, [r7, #26]
 80078e6:	e01d      	b.n	8007924 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <tcp_process+0x3e0>
 80078f2:	4b76      	ldr	r3, [pc, #472]	; (8007acc <tcp_process+0x5ac>)
 80078f4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80078f8:	4975      	ldr	r1, [pc, #468]	; (8007ad0 <tcp_process+0x5b0>)
 80078fa:	4876      	ldr	r0, [pc, #472]	; (8007ad4 <tcp_process+0x5b4>)
 80078fc:	f005 fc22 	bl	800d144 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <tcp_process+0x400>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6910      	ldr	r0, [r2, #16]
 8007914:	2200      	movs	r2, #0
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4798      	blx	r3
 800791a:	4603      	mov	r3, r0
 800791c:	76bb      	strb	r3, [r7, #26]
 800791e:	e001      	b.n	8007924 <tcp_process+0x404>
 8007920:	23f0      	movs	r3, #240	; 0xf0
 8007922:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007924:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800792c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007930:	f113 0f0d 	cmn.w	r3, #13
 8007934:	d002      	beq.n	800793c <tcp_process+0x41c>
              tcp_abort(pcb);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7fd ff8e 	bl	8005858 <tcp_abort>
            }
            return ERR_ABRT;
 800793c:	f06f 030c 	mvn.w	r3, #12
 8007940:	e1ce      	b.n	8007ce0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fae0 	bl	8007f08 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007948:	4b63      	ldr	r3, [pc, #396]	; (8007ad8 <tcp_process+0x5b8>)
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <tcp_process+0x43c>
            recv_acked--;
 8007950:	4b61      	ldr	r3, [pc, #388]	; (8007ad8 <tcp_process+0x5b8>)
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	4b5f      	ldr	r3, [pc, #380]	; (8007ad8 <tcp_process+0x5b8>)
 800795a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007960:	009a      	lsls	r2, r3, #2
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	f241 111c 	movw	r1, #4380	; 0x111c
 800796c:	428b      	cmp	r3, r1
 800796e:	bf38      	it	cc
 8007970:	460b      	movcc	r3, r1
 8007972:	429a      	cmp	r2, r3
 8007974:	d204      	bcs.n	8007980 <tcp_process+0x460>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	b29b      	uxth	r3, r3
 800797e:	e00d      	b.n	800799c <tcp_process+0x47c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	f241 121c 	movw	r2, #4380	; 0x111c
 800798a:	4293      	cmp	r3, r2
 800798c:	d904      	bls.n	8007998 <tcp_process+0x478>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	b29b      	uxth	r3, r3
 8007996:	e001      	b.n	800799c <tcp_process+0x47c>
 8007998:	f241 131c 	movw	r3, #4380	; 0x111c
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80079a2:	4b4e      	ldr	r3, [pc, #312]	; (8007adc <tcp_process+0x5bc>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d037      	beq.n	8007a1e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	8b5b      	ldrh	r3, [r3, #26]
 80079b2:	f043 0302 	orr.w	r3, r3, #2
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2207      	movs	r2, #7
 80079c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80079c2:	e02c      	b.n	8007a1e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079c4:	4b3b      	ldr	r3, [pc, #236]	; (8007ab4 <tcp_process+0x594>)
 80079c6:	6819      	ldr	r1, [r3, #0]
 80079c8:	4b3b      	ldr	r3, [pc, #236]	; (8007ab8 <tcp_process+0x598>)
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	4b3b      	ldr	r3, [pc, #236]	; (8007abc <tcp_process+0x59c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079d4:	4b3a      	ldr	r3, [pc, #232]	; (8007ac0 <tcp_process+0x5a0>)
 80079d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079dc:	4a38      	ldr	r2, [pc, #224]	; (8007ac0 <tcp_process+0x5a0>)
 80079de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079e0:	8812      	ldrh	r2, [r2, #0]
 80079e2:	b292      	uxth	r2, r2
 80079e4:	9202      	str	r2, [sp, #8]
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	4b36      	ldr	r3, [pc, #216]	; (8007ac4 <tcp_process+0x5a4>)
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	4b36      	ldr	r3, [pc, #216]	; (8007ac8 <tcp_process+0x5a8>)
 80079ee:	4602      	mov	r2, r0
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f002 fbd1 	bl	800a198 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80079f6:	e167      	b.n	8007cc8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80079f8:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <tcp_process+0x590>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8161 	beq.w	8007cc8 <tcp_process+0x7a8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	1e5a      	subs	r2, r3, #1
 8007a0c:	4b2b      	ldr	r3, [pc, #172]	; (8007abc <tcp_process+0x59c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	f040 8159 	bne.w	8007cc8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f002 f9b6 	bl	8009d88 <tcp_rexmit>
      break;
 8007a1c:	e154      	b.n	8007cc8 <tcp_process+0x7a8>
 8007a1e:	e153      	b.n	8007cc8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fa71 	bl	8007f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007a26:	4b2d      	ldr	r3, [pc, #180]	; (8007adc <tcp_process+0x5bc>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 814c 	beq.w	8007ccc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8b5b      	ldrh	r3, [r3, #26]
 8007a38:	f043 0302 	orr.w	r3, r3, #2
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2207      	movs	r2, #7
 8007a46:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a48:	e140      	b.n	8007ccc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa5c 	bl	8007f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007a50:	4b22      	ldr	r3, [pc, #136]	; (8007adc <tcp_process+0x5bc>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d071      	beq.n	8007b40 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a5c:	4b14      	ldr	r3, [pc, #80]	; (8007ab0 <tcp_process+0x590>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	f003 0310 	and.w	r3, r3, #16
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d060      	beq.n	8007b2a <tcp_process+0x60a>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a6c:	4b11      	ldr	r3, [pc, #68]	; (8007ab4 <tcp_process+0x594>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d15a      	bne.n	8007b2a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d156      	bne.n	8007b2a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8b5b      	ldrh	r3, [r3, #26]
 8007a80:	f043 0302 	orr.w	r3, r3, #2
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fe fdbc 	bl	8006608 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007a90:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <tcp_process+0x5c0>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d105      	bne.n	8007aa6 <tcp_process+0x586>
 8007a9a:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <tcp_process+0x5c0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	4a0f      	ldr	r2, [pc, #60]	; (8007ae0 <tcp_process+0x5c0>)
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	e02e      	b.n	8007b04 <tcp_process+0x5e4>
 8007aa6:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <tcp_process+0x5c0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e027      	b.n	8007afe <tcp_process+0x5de>
 8007aae:	bf00      	nop
 8007ab0:	20006784 	.word	0x20006784
 8007ab4:	2000677c 	.word	0x2000677c
 8007ab8:	20006782 	.word	0x20006782
 8007abc:	20006778 	.word	0x20006778
 8007ac0:	20006768 	.word	0x20006768
 8007ac4:	200031e0 	.word	0x200031e0
 8007ac8:	200031e4 	.word	0x200031e4
 8007acc:	0800f430 	.word	0x0800f430
 8007ad0:	0800f6d0 	.word	0x0800f6d0
 8007ad4:	0800f47c 	.word	0x0800f47c
 8007ad8:	20006780 	.word	0x20006780
 8007adc:	20006785 	.word	0x20006785
 8007ae0:	2000674c 	.word	0x2000674c
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d104      	bne.n	8007af8 <tcp_process+0x5d8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	e005      	b.n	8007b04 <tcp_process+0x5e4>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1ef      	bne.n	8007ae4 <tcp_process+0x5c4>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	60da      	str	r2, [r3, #12]
 8007b0a:	4b77      	ldr	r3, [pc, #476]	; (8007ce8 <tcp_process+0x7c8>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	220a      	movs	r2, #10
 8007b14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007b16:	4b75      	ldr	r3, [pc, #468]	; (8007cec <tcp_process+0x7cc>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60da      	str	r2, [r3, #12]
 8007b1e:	4a73      	ldr	r2, [pc, #460]	; (8007cec <tcp_process+0x7cc>)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	f002 fcfa 	bl	800a51c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007b28:	e0d2      	b.n	8007cd0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	8b5b      	ldrh	r3, [r3, #26]
 8007b2e:	f043 0302 	orr.w	r3, r3, #2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	751a      	strb	r2, [r3, #20]
      break;
 8007b3e:	e0c7      	b.n	8007cd0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b40:	4b6b      	ldr	r3, [pc, #428]	; (8007cf0 <tcp_process+0x7d0>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 80c1 	beq.w	8007cd0 <tcp_process+0x7b0>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b52:	4b68      	ldr	r3, [pc, #416]	; (8007cf4 <tcp_process+0x7d4>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	f040 80ba 	bne.w	8007cd0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 80b5 	bne.w	8007cd0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2206      	movs	r2, #6
 8007b6a:	751a      	strb	r2, [r3, #20]
      break;
 8007b6c:	e0b0      	b.n	8007cd0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9ca 	bl	8007f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007b74:	4b60      	ldr	r3, [pc, #384]	; (8007cf8 <tcp_process+0x7d8>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80a9 	beq.w	8007cd4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8b5b      	ldrh	r3, [r3, #26]
 8007b86:	f043 0302 	orr.w	r3, r3, #2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7fe fd39 	bl	8006608 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007b96:	4b59      	ldr	r3, [pc, #356]	; (8007cfc <tcp_process+0x7dc>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d105      	bne.n	8007bac <tcp_process+0x68c>
 8007ba0:	4b56      	ldr	r3, [pc, #344]	; (8007cfc <tcp_process+0x7dc>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	4a55      	ldr	r2, [pc, #340]	; (8007cfc <tcp_process+0x7dc>)
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	e013      	b.n	8007bd4 <tcp_process+0x6b4>
 8007bac:	4b53      	ldr	r3, [pc, #332]	; (8007cfc <tcp_process+0x7dc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	e00c      	b.n	8007bce <tcp_process+0x6ae>
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d104      	bne.n	8007bc8 <tcp_process+0x6a8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	60da      	str	r2, [r3, #12]
 8007bc6:	e005      	b.n	8007bd4 <tcp_process+0x6b4>
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1ef      	bne.n	8007bb4 <tcp_process+0x694>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	4b43      	ldr	r3, [pc, #268]	; (8007ce8 <tcp_process+0x7c8>)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	220a      	movs	r2, #10
 8007be4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007be6:	4b41      	ldr	r3, [pc, #260]	; (8007cec <tcp_process+0x7cc>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60da      	str	r2, [r3, #12]
 8007bee:	4a3f      	ldr	r2, [pc, #252]	; (8007cec <tcp_process+0x7cc>)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	f002 fc92 	bl	800a51c <tcp_timer_needed>
      }
      break;
 8007bf8:	e06c      	b.n	8007cd4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f984 	bl	8007f08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007c00:	4b3b      	ldr	r3, [pc, #236]	; (8007cf0 <tcp_process+0x7d0>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d065      	beq.n	8007cd8 <tcp_process+0x7b8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c10:	4b38      	ldr	r3, [pc, #224]	; (8007cf4 <tcp_process+0x7d4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d15f      	bne.n	8007cd8 <tcp_process+0x7b8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d15b      	bne.n	8007cd8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7fe fcf1 	bl	8006608 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007c26:	4b35      	ldr	r3, [pc, #212]	; (8007cfc <tcp_process+0x7dc>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d105      	bne.n	8007c3c <tcp_process+0x71c>
 8007c30:	4b32      	ldr	r3, [pc, #200]	; (8007cfc <tcp_process+0x7dc>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	4a31      	ldr	r2, [pc, #196]	; (8007cfc <tcp_process+0x7dc>)
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	e013      	b.n	8007c64 <tcp_process+0x744>
 8007c3c:	4b2f      	ldr	r3, [pc, #188]	; (8007cfc <tcp_process+0x7dc>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	e00c      	b.n	8007c5e <tcp_process+0x73e>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d104      	bne.n	8007c58 <tcp_process+0x738>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e005      	b.n	8007c64 <tcp_process+0x744>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1ef      	bne.n	8007c44 <tcp_process+0x724>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	60da      	str	r2, [r3, #12]
 8007c6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ce8 <tcp_process+0x7c8>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	220a      	movs	r2, #10
 8007c74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007c76:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <tcp_process+0x7cc>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	60da      	str	r2, [r3, #12]
 8007c7e:	4a1b      	ldr	r2, [pc, #108]	; (8007cec <tcp_process+0x7cc>)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	f002 fc4a 	bl	800a51c <tcp_timer_needed>
      }
      break;
 8007c88:	e026      	b.n	8007cd8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f93c 	bl	8007f08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007c90:	4b17      	ldr	r3, [pc, #92]	; (8007cf0 <tcp_process+0x7d0>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01f      	beq.n	8007cdc <tcp_process+0x7bc>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ca0:	4b14      	ldr	r3, [pc, #80]	; (8007cf4 <tcp_process+0x7d4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d119      	bne.n	8007cdc <tcp_process+0x7bc>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d115      	bne.n	8007cdc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007cb0:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <tcp_process+0x7d8>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f043 0310 	orr.w	r3, r3, #16
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <tcp_process+0x7d8>)
 8007cbc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007cbe:	e00d      	b.n	8007cdc <tcp_process+0x7bc>
    default:
      break;
 8007cc0:	bf00      	nop
 8007cc2:	e00c      	b.n	8007cde <tcp_process+0x7be>
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e00a      	b.n	8007cde <tcp_process+0x7be>
      break;
 8007cc8:	bf00      	nop
 8007cca:	e008      	b.n	8007cde <tcp_process+0x7be>
      break;
 8007ccc:	bf00      	nop
 8007cce:	e006      	b.n	8007cde <tcp_process+0x7be>
      break;
 8007cd0:	bf00      	nop
 8007cd2:	e004      	b.n	8007cde <tcp_process+0x7be>
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e002      	b.n	8007cde <tcp_process+0x7be>
      break;
 8007cd8:	bf00      	nop
 8007cda:	e000      	b.n	8007cde <tcp_process+0x7be>
      break;
 8007cdc:	bf00      	nop
  }
  return ERR_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3724      	adds	r7, #36	; 0x24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd90      	pop	{r4, r7, pc}
 8007ce8:	20006754 	.word	0x20006754
 8007cec:	20006750 	.word	0x20006750
 8007cf0:	20006784 	.word	0x20006784
 8007cf4:	2000677c 	.word	0x2000677c
 8007cf8:	20006785 	.word	0x20006785
 8007cfc:	2000674c 	.word	0x2000674c

08007d00 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007d00:	b590      	push	{r4, r7, lr}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <tcp_oos_insert_segment+0x1e>
 8007d10:	4b3b      	ldr	r3, [pc, #236]	; (8007e00 <tcp_oos_insert_segment+0x100>)
 8007d12:	f240 421f 	movw	r2, #1055	; 0x41f
 8007d16:	493b      	ldr	r1, [pc, #236]	; (8007e04 <tcp_oos_insert_segment+0x104>)
 8007d18:	483b      	ldr	r0, [pc, #236]	; (8007e08 <tcp_oos_insert_segment+0x108>)
 8007d1a:	f005 fa13 	bl	800d144 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	899b      	ldrh	r3, [r3, #12]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fb fd5a 	bl	80037e0 <lwip_htons>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d028      	beq.n	8007d8a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007d38:	6838      	ldr	r0, [r7, #0]
 8007d3a:	f7fe fa63 	bl	8006204 <tcp_segs_free>
    next = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	603b      	str	r3, [r7, #0]
 8007d42:	e056      	b.n	8007df2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	899b      	ldrh	r3, [r3, #12]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fb fd47 	bl	80037e0 <lwip_htons>
 8007d52:	4603      	mov	r3, r0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00d      	beq.n	8007d7a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	899b      	ldrh	r3, [r3, #12]
 8007d64:	b29c      	uxth	r4, r3
 8007d66:	2001      	movs	r0, #1
 8007d68:	f7fb fd3a 	bl	80037e0 <lwip_htons>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	4322      	orrs	r2, r4
 8007d76:	b292      	uxth	r2, r2
 8007d78:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7fe fa52 	bl	800622e <tcp_seg_free>
    while (next &&
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	891b      	ldrh	r3, [r3, #8]
 8007d94:	461a      	mov	r2, r3
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <tcp_oos_insert_segment+0x10c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	441a      	add	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	8909      	ldrh	r1, [r1, #8]
 8007da6:	440b      	add	r3, r1
 8007da8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	daca      	bge.n	8007d44 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01e      	beq.n	8007df2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	891b      	ldrh	r3, [r3, #8]
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b14      	ldr	r3, [pc, #80]	; (8007e0c <tcp_oos_insert_segment+0x10c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	441a      	add	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dd12      	ble.n	8007df2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <tcp_oos_insert_segment+0x10c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	891b      	ldrh	r3, [r3, #8]
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f7fc fe25 	bl	8004a3c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	601a      	str	r2, [r3, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd90      	pop	{r4, r7, pc}
 8007e00:	0800f430 	.word	0x0800f430
 8007e04:	0800f6f0 	.word	0x0800f6f0
 8007e08:	0800f47c 	.word	0x0800f47c
 8007e0c:	20006778 	.word	0x20006778

08007e10 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007e10:	b5b0      	push	{r4, r5, r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007e1e:	e03e      	b.n	8007e9e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fd f812 	bl	8004e58 <pbuf_clen>
 8007e34:	4603      	mov	r3, r0
 8007e36:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007e3e:	8a7a      	ldrh	r2, [r7, #18]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d906      	bls.n	8007e52 <tcp_free_acked_segments+0x42>
 8007e44:	4b2a      	ldr	r3, [pc, #168]	; (8007ef0 <tcp_free_acked_segments+0xe0>)
 8007e46:	f240 4257 	movw	r2, #1111	; 0x457
 8007e4a:	492a      	ldr	r1, [pc, #168]	; (8007ef4 <tcp_free_acked_segments+0xe4>)
 8007e4c:	482a      	ldr	r0, [pc, #168]	; (8007ef8 <tcp_free_acked_segments+0xe8>)
 8007e4e:	f005 f979 	bl	800d144 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007e58:	8a7b      	ldrh	r3, [r7, #18]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	891a      	ldrh	r2, [r3, #8]
 8007e68:	4b24      	ldr	r3, [pc, #144]	; (8007efc <tcp_free_acked_segments+0xec>)
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	4b22      	ldr	r3, [pc, #136]	; (8007efc <tcp_free_acked_segments+0xec>)
 8007e72:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007e74:	6978      	ldr	r0, [r7, #20]
 8007e76:	f7fe f9da 	bl	800622e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00c      	beq.n	8007e9e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <tcp_free_acked_segments+0x8e>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d106      	bne.n	8007e9e <tcp_free_acked_segments+0x8e>
 8007e90:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <tcp_free_acked_segments+0xe0>)
 8007e92:	f240 4261 	movw	r2, #1121	; 0x461
 8007e96:	491a      	ldr	r1, [pc, #104]	; (8007f00 <tcp_free_acked_segments+0xf0>)
 8007e98:	4817      	ldr	r0, [pc, #92]	; (8007ef8 <tcp_free_acked_segments+0xe8>)
 8007e9a:	f005 f953 	bl	800d144 <iprintf>
  while (seg_list != NULL &&
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d020      	beq.n	8007ee6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fb fcad 	bl	800380a <lwip_htonl>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	891b      	ldrh	r3, [r3, #8]
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	899b      	ldrh	r3, [r3, #12]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fb fc8d 	bl	80037e0 <lwip_htons>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <tcp_free_acked_segments+0xc6>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e000      	b.n	8007ed8 <tcp_free_acked_segments+0xc8>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	442b      	add	r3, r5
 8007eda:	18e2      	adds	r2, r4, r3
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <tcp_free_acked_segments+0xf4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dd9c      	ble.n	8007e20 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef0:	0800f430 	.word	0x0800f430
 8007ef4:	0800f718 	.word	0x0800f718
 8007ef8:	0800f47c 	.word	0x0800f47c
 8007efc:	20006780 	.word	0x20006780
 8007f00:	0800f740 	.word	0x0800f740
 8007f04:	2000677c 	.word	0x2000677c

08007f08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007f08:	b5b0      	push	{r4, r5, r7, lr}
 8007f0a:	b094      	sub	sp, #80	; 0x50
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <tcp_receive+0x20>
 8007f1a:	4b91      	ldr	r3, [pc, #580]	; (8008160 <tcp_receive+0x258>)
 8007f1c:	f240 427b 	movw	r2, #1147	; 0x47b
 8007f20:	4990      	ldr	r1, [pc, #576]	; (8008164 <tcp_receive+0x25c>)
 8007f22:	4891      	ldr	r0, [pc, #580]	; (8008168 <tcp_receive+0x260>)
 8007f24:	f005 f90e 	bl	800d144 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	7d1b      	ldrb	r3, [r3, #20]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d806      	bhi.n	8007f3e <tcp_receive+0x36>
 8007f30:	4b8b      	ldr	r3, [pc, #556]	; (8008160 <tcp_receive+0x258>)
 8007f32:	f240 427c 	movw	r2, #1148	; 0x47c
 8007f36:	498d      	ldr	r1, [pc, #564]	; (800816c <tcp_receive+0x264>)
 8007f38:	488b      	ldr	r0, [pc, #556]	; (8008168 <tcp_receive+0x260>)
 8007f3a:	f005 f903 	bl	800d144 <iprintf>

  if (flags & TCP_ACK) {
 8007f3e:	4b8c      	ldr	r3, [pc, #560]	; (8008170 <tcp_receive+0x268>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 8264 	beq.w	8008414 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f52:	461a      	mov	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f58:	4413      	add	r3, r2
 8007f5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f60:	4b84      	ldr	r3, [pc, #528]	; (8008174 <tcp_receive+0x26c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	db1b      	blt.n	8007fa2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f6e:	4b81      	ldr	r3, [pc, #516]	; (8008174 <tcp_receive+0x26c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d106      	bne.n	8007f84 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f7a:	4b7f      	ldr	r3, [pc, #508]	; (8008178 <tcp_receive+0x270>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	db0e      	blt.n	8007fa2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f88:	4b7b      	ldr	r3, [pc, #492]	; (8008178 <tcp_receive+0x270>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d125      	bne.n	8007fdc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f90:	4b7a      	ldr	r3, [pc, #488]	; (800817c <tcp_receive+0x274>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	89db      	ldrh	r3, [r3, #14]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d91c      	bls.n	8007fdc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007fa2:	4b76      	ldr	r3, [pc, #472]	; (800817c <tcp_receive+0x274>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	89db      	ldrh	r3, [r3, #14]
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d205      	bcs.n	8007fcc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8007fcc:	4b69      	ldr	r3, [pc, #420]	; (8008174 <tcp_receive+0x26c>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8007fd4:	4b68      	ldr	r3, [pc, #416]	; (8008178 <tcp_receive+0x270>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007fdc:	4b66      	ldr	r3, [pc, #408]	; (8008178 <tcp_receive+0x270>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dc58      	bgt.n	800809c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8007fea:	4b65      	ldr	r3, [pc, #404]	; (8008180 <tcp_receive+0x278>)
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d14b      	bne.n	800808a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8007ffc:	4413      	add	r3, r2
 8007ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008000:	429a      	cmp	r2, r3
 8008002:	d142      	bne.n	800808a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800800a:	2b00      	cmp	r3, #0
 800800c:	db3d      	blt.n	800808a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008012:	4b59      	ldr	r3, [pc, #356]	; (8008178 <tcp_receive+0x270>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d137      	bne.n	800808a <tcp_receive+0x182>
              found_dupack = 1;
 800801a:	2301      	movs	r3, #1
 800801c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008024:	2bff      	cmp	r3, #255	; 0xff
 8008026:	d007      	beq.n	8008038 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800802e:	3301      	adds	r3, #1
 8008030:	b2da      	uxtb	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800803e:	2b03      	cmp	r3, #3
 8008040:	d91b      	bls.n	800807a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800804c:	4413      	add	r3, r2
 800804e:	b29a      	uxth	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008056:	429a      	cmp	r2, r3
 8008058:	d30a      	bcc.n	8008070 <tcp_receive+0x168>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008064:	4413      	add	r3, r2
 8008066:	b29a      	uxth	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800806e:	e004      	b.n	800807a <tcp_receive+0x172>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008080:	2b02      	cmp	r3, #2
 8008082:	d902      	bls.n	800808a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 feeb 	bl	8009e60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800808a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 8161 	bne.w	8008354 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800809a:	e15b      	b.n	8008354 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800809c:	4b36      	ldr	r3, [pc, #216]	; (8008178 <tcp_receive+0x270>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f2c0 814e 	blt.w	800834a <tcp_receive+0x442>
 80080ae:	4b32      	ldr	r3, [pc, #200]	; (8008178 <tcp_receive+0x270>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f300 8146 	bgt.w	800834a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	8b5b      	ldrh	r3, [r3, #26]
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d010      	beq.n	80080ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8b5b      	ldrh	r3, [r3, #26]
 80080ce:	f023 0304 	bic.w	r3, r3, #4
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80080fa:	10db      	asrs	r3, r3, #3
 80080fc:	b21b      	sxth	r3, r3
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	4413      	add	r3, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	b21a      	sxth	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008114:	4b18      	ldr	r3, [pc, #96]	; (8008178 <tcp_receive+0x270>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811e:	b29b      	uxth	r3, r3
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800812c:	4b12      	ldr	r3, [pc, #72]	; (8008178 <tcp_receive+0x270>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7d1b      	ldrb	r3, [r3, #20]
 8008138:	2b03      	cmp	r3, #3
 800813a:	f240 8097 	bls.w	800826c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800814a:	429a      	cmp	r2, r3
 800814c:	d245      	bcs.n	80081da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	8b5b      	ldrh	r3, [r3, #26]
 8008152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008156:	2b00      	cmp	r3, #0
 8008158:	d014      	beq.n	8008184 <tcp_receive+0x27c>
 800815a:	2301      	movs	r3, #1
 800815c:	e013      	b.n	8008186 <tcp_receive+0x27e>
 800815e:	bf00      	nop
 8008160:	0800f430 	.word	0x0800f430
 8008164:	0800f760 	.word	0x0800f760
 8008168:	0800f47c 	.word	0x0800f47c
 800816c:	0800f77c 	.word	0x0800f77c
 8008170:	20006784 	.word	0x20006784
 8008174:	20006778 	.word	0x20006778
 8008178:	2000677c 	.word	0x2000677c
 800817c:	20006768 	.word	0x20006768
 8008180:	20006782 	.word	0x20006782
 8008184:	2302      	movs	r3, #2
 8008186:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800818a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008194:	fb12 f303 	smulbb	r3, r2, r3
 8008198:	b29b      	uxth	r3, r3
 800819a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800819c:	4293      	cmp	r3, r2
 800819e:	bf28      	it	cs
 80081a0:	4613      	movcs	r3, r2
 80081a2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80081aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081ac:	4413      	add	r3, r2
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d309      	bcc.n	80081ce <tcp_receive+0x2c6>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80081c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081c2:	4413      	add	r3, r2
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80081cc:	e04e      	b.n	800826c <tcp_receive+0x364>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80081d8:	e048      	b.n	800826c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80081e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081e2:	4413      	add	r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d309      	bcc.n	8008204 <tcp_receive+0x2fc>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80081f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081f8:	4413      	add	r3, r2
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008202:	e004      	b.n	800820e <tcp_receive+0x306>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800820a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800821a:	429a      	cmp	r2, r3
 800821c:	d326      	bcc.n	800826c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	b29a      	uxth	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800823e:	4413      	add	r3, r2
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008248:	429a      	cmp	r2, r3
 800824a:	d30a      	bcc.n	8008262 <tcp_receive+0x35a>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008256:	4413      	add	r3, r2
 8008258:	b29a      	uxth	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008260:	e004      	b.n	800826c <tcp_receive+0x364>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008268:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008274:	4a98      	ldr	r2, [pc, #608]	; (80084d8 <tcp_receive+0x5d0>)
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fdca 	bl	8007e10 <tcp_free_acked_segments>
 800827c:	4602      	mov	r2, r0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	4a94      	ldr	r2, [pc, #592]	; (80084dc <tcp_receive+0x5d4>)
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff fdbf 	bl	8007e10 <tcp_free_acked_segments>
 8008292:	4602      	mov	r2, r0
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829c:	2b00      	cmp	r3, #0
 800829e:	d104      	bne.n	80082aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80082a8:	e002      	b.n	80082b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d103      	bne.n	80082c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80082cc:	4b84      	ldr	r3, [pc, #528]	; (80084e0 <tcp_receive+0x5d8>)
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	4413      	add	r3, r2
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8b5b      	ldrh	r3, [r3, #26]
 80082de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d035      	beq.n	8008352 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d118      	bne.n	8008320 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00c      	beq.n	8008310 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4618      	mov	r0, r3
 8008304:	f7fb fa81 	bl	800380a <lwip_htonl>
 8008308:	4603      	mov	r3, r0
 800830a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800830c:	2b00      	cmp	r3, #0
 800830e:	dc20      	bgt.n	8008352 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	8b5b      	ldrh	r3, [r3, #26]
 8008314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008318:	b29a      	uxth	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800831e:	e018      	b.n	8008352 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	4618      	mov	r0, r3
 800832e:	f7fb fa6c 	bl	800380a <lwip_htonl>
 8008332:	4603      	mov	r3, r0
 8008334:	1ae3      	subs	r3, r4, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	dc0b      	bgt.n	8008352 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	8b5b      	ldrh	r3, [r3, #26]
 800833e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008342:	b29a      	uxth	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008348:	e003      	b.n	8008352 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 ff76 	bl	800a23c <tcp_send_empty_ack>
 8008350:	e000      	b.n	8008354 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008352:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008358:	2b00      	cmp	r3, #0
 800835a:	d05b      	beq.n	8008414 <tcp_receive+0x50c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008360:	4b60      	ldr	r3, [pc, #384]	; (80084e4 <tcp_receive+0x5dc>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	da54      	bge.n	8008414 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800836a:	4b5f      	ldr	r3, [pc, #380]	; (80084e8 <tcp_receive+0x5e0>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008374:	b29b      	uxth	r3, r3
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	b29b      	uxth	r3, r3
 800837a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800837e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008388:	10db      	asrs	r3, r3, #3
 800838a:	b21b      	sxth	r3, r3
 800838c:	b29b      	uxth	r3, r3
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	b29b      	uxth	r3, r3
 8008392:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800839c:	b29a      	uxth	r2, r3
 800839e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80083a2:	4413      	add	r3, r2
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	b21a      	sxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80083ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	da05      	bge.n	80083c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80083b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80083b8:	425b      	negs	r3, r3
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80083c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083ca:	109b      	asrs	r3, r3, #2
 80083cc:	b21b      	sxth	r3, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083de:	b29a      	uxth	r2, r3
 80083e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80083e4:	4413      	add	r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	b21a      	sxth	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80083f4:	10db      	asrs	r3, r3, #3
 80083f6:	b21b      	sxth	r3, r3
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008400:	b29b      	uxth	r3, r3
 8008402:	4413      	add	r3, r2
 8008404:	b29b      	uxth	r3, r3
 8008406:	b21a      	sxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008414:	4b35      	ldr	r3, [pc, #212]	; (80084ec <tcp_receive+0x5e4>)
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 84e2 	beq.w	8008de2 <tcp_receive+0xeda>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	7d1b      	ldrb	r3, [r3, #20]
 8008422:	2b06      	cmp	r3, #6
 8008424:	f200 84dd 	bhi.w	8008de2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800842c:	4b30      	ldr	r3, [pc, #192]	; (80084f0 <tcp_receive+0x5e8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	f2c0 808f 	blt.w	8008558 <tcp_receive+0x650>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800843e:	4b2b      	ldr	r3, [pc, #172]	; (80084ec <tcp_receive+0x5e4>)
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	4b2a      	ldr	r3, [pc, #168]	; (80084f0 <tcp_receive+0x5e8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	440b      	add	r3, r1
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	3301      	adds	r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	f300 8082 	bgt.w	8008558 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008454:	4b27      	ldr	r3, [pc, #156]	; (80084f4 <tcp_receive+0x5ec>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800845e:	4b24      	ldr	r3, [pc, #144]	; (80084f0 <tcp_receive+0x5e8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008466:	4b23      	ldr	r3, [pc, #140]	; (80084f4 <tcp_receive+0x5ec>)
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d106      	bne.n	800847c <tcp_receive+0x574>
 800846e:	4b22      	ldr	r3, [pc, #136]	; (80084f8 <tcp_receive+0x5f0>)
 8008470:	f240 5294 	movw	r2, #1428	; 0x594
 8008474:	4921      	ldr	r1, [pc, #132]	; (80084fc <tcp_receive+0x5f4>)
 8008476:	4822      	ldr	r0, [pc, #136]	; (8008500 <tcp_receive+0x5f8>)
 8008478:	f004 fe64 	bl	800d144 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008482:	4293      	cmp	r3, r2
 8008484:	d906      	bls.n	8008494 <tcp_receive+0x58c>
 8008486:	4b1c      	ldr	r3, [pc, #112]	; (80084f8 <tcp_receive+0x5f0>)
 8008488:	f240 5295 	movw	r2, #1429	; 0x595
 800848c:	491d      	ldr	r1, [pc, #116]	; (8008504 <tcp_receive+0x5fc>)
 800848e:	481c      	ldr	r0, [pc, #112]	; (8008500 <tcp_receive+0x5f8>)
 8008490:	f004 fe58 	bl	800d144 <iprintf>
      off = (u16_t)off32;
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800849a:	4b16      	ldr	r3, [pc, #88]	; (80084f4 <tcp_receive+0x5ec>)
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	891b      	ldrh	r3, [r3, #8]
 80084a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d906      	bls.n	80084b6 <tcp_receive+0x5ae>
 80084a8:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <tcp_receive+0x5f0>)
 80084aa:	f240 5297 	movw	r2, #1431	; 0x597
 80084ae:	4916      	ldr	r1, [pc, #88]	; (8008508 <tcp_receive+0x600>)
 80084b0:	4813      	ldr	r0, [pc, #76]	; (8008500 <tcp_receive+0x5f8>)
 80084b2:	f004 fe47 	bl	800d144 <iprintf>
      inseg.len -= off;
 80084b6:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <tcp_receive+0x5ec>)
 80084b8:	891a      	ldrh	r2, [r3, #8]
 80084ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <tcp_receive+0x5ec>)
 80084c4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <tcp_receive+0x5ec>)
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	891a      	ldrh	r2, [r3, #8]
 80084cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80084d4:	e02a      	b.n	800852c <tcp_receive+0x624>
 80084d6:	bf00      	nop
 80084d8:	0800f798 	.word	0x0800f798
 80084dc:	0800f7a0 	.word	0x0800f7a0
 80084e0:	20006780 	.word	0x20006780
 80084e4:	2000677c 	.word	0x2000677c
 80084e8:	20006740 	.word	0x20006740
 80084ec:	20006782 	.word	0x20006782
 80084f0:	20006778 	.word	0x20006778
 80084f4:	20006758 	.word	0x20006758
 80084f8:	0800f430 	.word	0x0800f430
 80084fc:	0800f7a8 	.word	0x0800f7a8
 8008500:	0800f47c 	.word	0x0800f47c
 8008504:	0800f7b8 	.word	0x0800f7b8
 8008508:	0800f7c8 	.word	0x0800f7c8
        off -= p->len;
 800850c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850e:	895b      	ldrh	r3, [r3, #10]
 8008510:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800851a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800851e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008522:	2200      	movs	r2, #0
 8008524:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800852c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852e:	895b      	ldrh	r3, [r3, #10]
 8008530:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008534:	429a      	cmp	r2, r3
 8008536:	d8e9      	bhi.n	800850c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800853c:	4619      	mov	r1, r3
 800853e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008540:	f7fc fb7c 	bl	8004c3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	4a91      	ldr	r2, [pc, #580]	; (8008790 <tcp_receive+0x888>)
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	4b91      	ldr	r3, [pc, #580]	; (8008794 <tcp_receive+0x88c>)
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	4a8f      	ldr	r2, [pc, #572]	; (8008790 <tcp_receive+0x888>)
 8008552:	6812      	ldr	r2, [r2, #0]
 8008554:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008556:	e00d      	b.n	8008574 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008558:	4b8d      	ldr	r3, [pc, #564]	; (8008790 <tcp_receive+0x888>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	da06      	bge.n	8008574 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	8b5b      	ldrh	r3, [r3, #26]
 800856a:	f043 0302 	orr.w	r3, r3, #2
 800856e:	b29a      	uxth	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008574:	4b86      	ldr	r3, [pc, #536]	; (8008790 <tcp_receive+0x888>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	f2c0 842a 	blt.w	8008dd8 <tcp_receive+0xed0>
 8008584:	4b82      	ldr	r3, [pc, #520]	; (8008790 <tcp_receive+0x888>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008590:	440b      	add	r3, r1
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	3301      	adds	r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	f300 841e 	bgt.w	8008dd8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085a0:	4b7b      	ldr	r3, [pc, #492]	; (8008790 <tcp_receive+0x888>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	f040 829a 	bne.w	8008ade <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80085aa:	4b7a      	ldr	r3, [pc, #488]	; (8008794 <tcp_receive+0x88c>)
 80085ac:	891c      	ldrh	r4, [r3, #8]
 80085ae:	4b79      	ldr	r3, [pc, #484]	; (8008794 <tcp_receive+0x88c>)
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	899b      	ldrh	r3, [r3, #12]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fb f912 	bl	80037e0 <lwip_htons>
 80085bc:	4603      	mov	r3, r0
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <tcp_receive+0x6c4>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e000      	b.n	80085ce <tcp_receive+0x6c6>
 80085cc:	2300      	movs	r3, #0
 80085ce:	4423      	add	r3, r4
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	4b71      	ldr	r3, [pc, #452]	; (8008798 <tcp_receive+0x890>)
 80085d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80085da:	4b6f      	ldr	r3, [pc, #444]	; (8008798 <tcp_receive+0x890>)
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d275      	bcs.n	80086ce <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80085e2:	4b6c      	ldr	r3, [pc, #432]	; (8008794 <tcp_receive+0x88c>)
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	899b      	ldrh	r3, [r3, #12]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fb f8f8 	bl	80037e0 <lwip_htons>
 80085f0:	4603      	mov	r3, r0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01f      	beq.n	800863c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80085fc:	4b65      	ldr	r3, [pc, #404]	; (8008794 <tcp_receive+0x88c>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	899b      	ldrh	r3, [r3, #12]
 8008602:	b29b      	uxth	r3, r3
 8008604:	b21b      	sxth	r3, r3
 8008606:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800860a:	b21c      	sxth	r4, r3
 800860c:	4b61      	ldr	r3, [pc, #388]	; (8008794 <tcp_receive+0x88c>)
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	899b      	ldrh	r3, [r3, #12]
 8008612:	b29b      	uxth	r3, r3
 8008614:	4618      	mov	r0, r3
 8008616:	f7fb f8e3 	bl	80037e0 <lwip_htons>
 800861a:	4603      	mov	r3, r0
 800861c:	b2db      	uxtb	r3, r3
 800861e:	b29b      	uxth	r3, r3
 8008620:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008624:	b29b      	uxth	r3, r3
 8008626:	4618      	mov	r0, r3
 8008628:	f7fb f8da 	bl	80037e0 <lwip_htons>
 800862c:	4603      	mov	r3, r0
 800862e:	b21b      	sxth	r3, r3
 8008630:	4323      	orrs	r3, r4
 8008632:	b21a      	sxth	r2, r3
 8008634:	4b57      	ldr	r3, [pc, #348]	; (8008794 <tcp_receive+0x88c>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	b292      	uxth	r2, r2
 800863a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008640:	4b54      	ldr	r3, [pc, #336]	; (8008794 <tcp_receive+0x88c>)
 8008642:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008644:	4b53      	ldr	r3, [pc, #332]	; (8008794 <tcp_receive+0x88c>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	899b      	ldrh	r3, [r3, #12]
 800864a:	b29b      	uxth	r3, r3
 800864c:	4618      	mov	r0, r3
 800864e:	f7fb f8c7 	bl	80037e0 <lwip_htons>
 8008652:	4603      	mov	r3, r0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <tcp_receive+0x762>
            inseg.len -= 1;
 800865e:	4b4d      	ldr	r3, [pc, #308]	; (8008794 <tcp_receive+0x88c>)
 8008660:	891b      	ldrh	r3, [r3, #8]
 8008662:	3b01      	subs	r3, #1
 8008664:	b29a      	uxth	r2, r3
 8008666:	4b4b      	ldr	r3, [pc, #300]	; (8008794 <tcp_receive+0x88c>)
 8008668:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800866a:	4b4a      	ldr	r3, [pc, #296]	; (8008794 <tcp_receive+0x88c>)
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	4a49      	ldr	r2, [pc, #292]	; (8008794 <tcp_receive+0x88c>)
 8008670:	8912      	ldrh	r2, [r2, #8]
 8008672:	4611      	mov	r1, r2
 8008674:	4618      	mov	r0, r3
 8008676:	f7fc f9e1 	bl	8004a3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800867a:	4b46      	ldr	r3, [pc, #280]	; (8008794 <tcp_receive+0x88c>)
 800867c:	891c      	ldrh	r4, [r3, #8]
 800867e:	4b45      	ldr	r3, [pc, #276]	; (8008794 <tcp_receive+0x88c>)
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	899b      	ldrh	r3, [r3, #12]
 8008684:	b29b      	uxth	r3, r3
 8008686:	4618      	mov	r0, r3
 8008688:	f7fb f8aa 	bl	80037e0 <lwip_htons>
 800868c:	4603      	mov	r3, r0
 800868e:	b2db      	uxtb	r3, r3
 8008690:	f003 0303 	and.w	r3, r3, #3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <tcp_receive+0x794>
 8008698:	2301      	movs	r3, #1
 800869a:	e000      	b.n	800869e <tcp_receive+0x796>
 800869c:	2300      	movs	r3, #0
 800869e:	4423      	add	r3, r4
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	4b3d      	ldr	r3, [pc, #244]	; (8008798 <tcp_receive+0x890>)
 80086a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80086a6:	4b3c      	ldr	r3, [pc, #240]	; (8008798 <tcp_receive+0x890>)
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	4b38      	ldr	r3, [pc, #224]	; (8008790 <tcp_receive+0x888>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	441a      	add	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80086ba:	440b      	add	r3, r1
 80086bc:	429a      	cmp	r2, r3
 80086be:	d006      	beq.n	80086ce <tcp_receive+0x7c6>
 80086c0:	4b36      	ldr	r3, [pc, #216]	; (800879c <tcp_receive+0x894>)
 80086c2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80086c6:	4936      	ldr	r1, [pc, #216]	; (80087a0 <tcp_receive+0x898>)
 80086c8:	4836      	ldr	r0, [pc, #216]	; (80087a4 <tcp_receive+0x89c>)
 80086ca:	f004 fd3b 	bl	800d144 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 80e7 	beq.w	80088a6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80086d8:	4b2e      	ldr	r3, [pc, #184]	; (8008794 <tcp_receive+0x88c>)
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	899b      	ldrh	r3, [r3, #12]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fb f87d 	bl	80037e0 <lwip_htons>
 80086e6:	4603      	mov	r3, r0
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d010      	beq.n	8008714 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80086f2:	e00a      	b.n	800870a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f7fd fd92 	bl	800622e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f0      	bne.n	80086f4 <tcp_receive+0x7ec>
 8008712:	e0c8      	b.n	80088a6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008718:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800871a:	e052      	b.n	80087c2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800871c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	899b      	ldrh	r3, [r3, #12]
 8008722:	b29b      	uxth	r3, r3
 8008724:	4618      	mov	r0, r3
 8008726:	f7fb f85b 	bl	80037e0 <lwip_htons>
 800872a:	4603      	mov	r3, r0
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d03d      	beq.n	80087b2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008736:	4b17      	ldr	r3, [pc, #92]	; (8008794 <tcp_receive+0x88c>)
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	899b      	ldrh	r3, [r3, #12]
 800873c:	b29b      	uxth	r3, r3
 800873e:	4618      	mov	r0, r3
 8008740:	f7fb f84e 	bl	80037e0 <lwip_htons>
 8008744:	4603      	mov	r3, r0
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800874c:	2b00      	cmp	r3, #0
 800874e:	d130      	bne.n	80087b2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008750:	4b10      	ldr	r3, [pc, #64]	; (8008794 <tcp_receive+0x88c>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	899b      	ldrh	r3, [r3, #12]
 8008756:	b29c      	uxth	r4, r3
 8008758:	2001      	movs	r0, #1
 800875a:	f7fb f841 	bl	80037e0 <lwip_htons>
 800875e:	4603      	mov	r3, r0
 8008760:	461a      	mov	r2, r3
 8008762:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <tcp_receive+0x88c>)
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	4322      	orrs	r2, r4
 8008768:	b292      	uxth	r2, r2
 800876a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800876c:	4b09      	ldr	r3, [pc, #36]	; (8008794 <tcp_receive+0x88c>)
 800876e:	891c      	ldrh	r4, [r3, #8]
 8008770:	4b08      	ldr	r3, [pc, #32]	; (8008794 <tcp_receive+0x88c>)
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	899b      	ldrh	r3, [r3, #12]
 8008776:	b29b      	uxth	r3, r3
 8008778:	4618      	mov	r0, r3
 800877a:	f7fb f831 	bl	80037e0 <lwip_htons>
 800877e:	4603      	mov	r3, r0
 8008780:	b2db      	uxtb	r3, r3
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00e      	beq.n	80087a8 <tcp_receive+0x8a0>
 800878a:	2301      	movs	r3, #1
 800878c:	e00d      	b.n	80087aa <tcp_receive+0x8a2>
 800878e:	bf00      	nop
 8008790:	20006778 	.word	0x20006778
 8008794:	20006758 	.word	0x20006758
 8008798:	20006782 	.word	0x20006782
 800879c:	0800f430 	.word	0x0800f430
 80087a0:	0800f7d8 	.word	0x0800f7d8
 80087a4:	0800f47c 	.word	0x0800f47c
 80087a8:	2300      	movs	r3, #0
 80087aa:	4423      	add	r3, r4
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	4b98      	ldr	r3, [pc, #608]	; (8008a10 <tcp_receive+0xb08>)
 80087b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80087b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80087b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80087bc:	6938      	ldr	r0, [r7, #16]
 80087be:	f7fd fd36 	bl	800622e <tcp_seg_free>
            while (next &&
 80087c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00e      	beq.n	80087e6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80087c8:	4b91      	ldr	r3, [pc, #580]	; (8008a10 <tcp_receive+0xb08>)
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	4b91      	ldr	r3, [pc, #580]	; (8008a14 <tcp_receive+0xb0c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	441a      	add	r2, r3
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087dc:	8909      	ldrh	r1, [r1, #8]
 80087de:	440b      	add	r3, r1
 80087e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	da9a      	bge.n	800871c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d059      	beq.n	80088a0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80087ec:	4b88      	ldr	r3, [pc, #544]	; (8008a10 <tcp_receive+0xb08>)
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b88      	ldr	r3, [pc, #544]	; (8008a14 <tcp_receive+0xb0c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	441a      	add	r2, r3
 80087f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008800:	2b00      	cmp	r3, #0
 8008802:	dd4d      	ble.n	80088a0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	b29a      	uxth	r2, r3
 800880c:	4b81      	ldr	r3, [pc, #516]	; (8008a14 <tcp_receive+0xb0c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	b29a      	uxth	r2, r3
 8008816:	4b80      	ldr	r3, [pc, #512]	; (8008a18 <tcp_receive+0xb10>)
 8008818:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800881a:	4b7f      	ldr	r3, [pc, #508]	; (8008a18 <tcp_receive+0xb10>)
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	899b      	ldrh	r3, [r3, #12]
 8008820:	b29b      	uxth	r3, r3
 8008822:	4618      	mov	r0, r3
 8008824:	f7fa ffdc 	bl	80037e0 <lwip_htons>
 8008828:	4603      	mov	r3, r0
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <tcp_receive+0x938>
                inseg.len -= 1;
 8008834:	4b78      	ldr	r3, [pc, #480]	; (8008a18 <tcp_receive+0xb10>)
 8008836:	891b      	ldrh	r3, [r3, #8]
 8008838:	3b01      	subs	r3, #1
 800883a:	b29a      	uxth	r2, r3
 800883c:	4b76      	ldr	r3, [pc, #472]	; (8008a18 <tcp_receive+0xb10>)
 800883e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008840:	4b75      	ldr	r3, [pc, #468]	; (8008a18 <tcp_receive+0xb10>)
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	4a74      	ldr	r2, [pc, #464]	; (8008a18 <tcp_receive+0xb10>)
 8008846:	8912      	ldrh	r2, [r2, #8]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7fc f8f6 	bl	8004a3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008850:	4b71      	ldr	r3, [pc, #452]	; (8008a18 <tcp_receive+0xb10>)
 8008852:	891c      	ldrh	r4, [r3, #8]
 8008854:	4b70      	ldr	r3, [pc, #448]	; (8008a18 <tcp_receive+0xb10>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	899b      	ldrh	r3, [r3, #12]
 800885a:	b29b      	uxth	r3, r3
 800885c:	4618      	mov	r0, r3
 800885e:	f7fa ffbf 	bl	80037e0 <lwip_htons>
 8008862:	4603      	mov	r3, r0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <tcp_receive+0x96a>
 800886e:	2301      	movs	r3, #1
 8008870:	e000      	b.n	8008874 <tcp_receive+0x96c>
 8008872:	2300      	movs	r3, #0
 8008874:	4423      	add	r3, r4
 8008876:	b29a      	uxth	r2, r3
 8008878:	4b65      	ldr	r3, [pc, #404]	; (8008a10 <tcp_receive+0xb08>)
 800887a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800887c:	4b64      	ldr	r3, [pc, #400]	; (8008a10 <tcp_receive+0xb08>)
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	4b64      	ldr	r3, [pc, #400]	; (8008a14 <tcp_receive+0xb0c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	441a      	add	r2, r3
 8008888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d006      	beq.n	80088a0 <tcp_receive+0x998>
 8008892:	4b62      	ldr	r3, [pc, #392]	; (8008a1c <tcp_receive+0xb14>)
 8008894:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008898:	4961      	ldr	r1, [pc, #388]	; (8008a20 <tcp_receive+0xb18>)
 800889a:	4862      	ldr	r0, [pc, #392]	; (8008a24 <tcp_receive+0xb1c>)
 800889c:	f004 fc52 	bl	800d144 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80088a6:	4b5a      	ldr	r3, [pc, #360]	; (8008a10 <tcp_receive+0xb08>)
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	4b59      	ldr	r3, [pc, #356]	; (8008a14 <tcp_receive+0xb0c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	441a      	add	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80088ba:	4b55      	ldr	r3, [pc, #340]	; (8008a10 <tcp_receive+0xb08>)
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d206      	bcs.n	80088d0 <tcp_receive+0x9c8>
 80088c2:	4b56      	ldr	r3, [pc, #344]	; (8008a1c <tcp_receive+0xb14>)
 80088c4:	f240 6207 	movw	r2, #1543	; 0x607
 80088c8:	4957      	ldr	r1, [pc, #348]	; (8008a28 <tcp_receive+0xb20>)
 80088ca:	4856      	ldr	r0, [pc, #344]	; (8008a24 <tcp_receive+0xb1c>)
 80088cc:	f004 fc3a 	bl	800d144 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80088d4:	4b4e      	ldr	r3, [pc, #312]	; (8008a10 <tcp_receive+0xb08>)
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	b29a      	uxth	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fc ffc5 	bl	8005870 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80088e6:	4b4c      	ldr	r3, [pc, #304]	; (8008a18 <tcp_receive+0xb10>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	891b      	ldrh	r3, [r3, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80088f0:	4b49      	ldr	r3, [pc, #292]	; (8008a18 <tcp_receive+0xb10>)
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	4a4d      	ldr	r2, [pc, #308]	; (8008a2c <tcp_receive+0xb24>)
 80088f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80088f8:	4b47      	ldr	r3, [pc, #284]	; (8008a18 <tcp_receive+0xb10>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088fe:	4b46      	ldr	r3, [pc, #280]	; (8008a18 <tcp_receive+0xb10>)
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	899b      	ldrh	r3, [r3, #12]
 8008904:	b29b      	uxth	r3, r3
 8008906:	4618      	mov	r0, r3
 8008908:	f7fa ff6a 	bl	80037e0 <lwip_htons>
 800890c:	4603      	mov	r3, r0
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80b8 	beq.w	8008a8a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800891a:	4b45      	ldr	r3, [pc, #276]	; (8008a30 <tcp_receive+0xb28>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	f043 0320 	orr.w	r3, r3, #32
 8008922:	b2da      	uxtb	r2, r3
 8008924:	4b42      	ldr	r3, [pc, #264]	; (8008a30 <tcp_receive+0xb28>)
 8008926:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008928:	e0af      	b.n	8008a8a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800892e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4a36      	ldr	r2, [pc, #216]	; (8008a14 <tcp_receive+0xb0c>)
 800893a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	891b      	ldrh	r3, [r3, #8]
 8008940:	461c      	mov	r4, r3
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	899b      	ldrh	r3, [r3, #12]
 8008948:	b29b      	uxth	r3, r3
 800894a:	4618      	mov	r0, r3
 800894c:	f7fa ff48 	bl	80037e0 <lwip_htons>
 8008950:	4603      	mov	r3, r0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <tcp_receive+0xa58>
 800895c:	2301      	movs	r3, #1
 800895e:	e000      	b.n	8008962 <tcp_receive+0xa5a>
 8008960:	2300      	movs	r3, #0
 8008962:	191a      	adds	r2, r3, r4
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	441a      	add	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008972:	461c      	mov	r4, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	891b      	ldrh	r3, [r3, #8]
 8008978:	461d      	mov	r5, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	899b      	ldrh	r3, [r3, #12]
 8008980:	b29b      	uxth	r3, r3
 8008982:	4618      	mov	r0, r3
 8008984:	f7fa ff2c 	bl	80037e0 <lwip_htons>
 8008988:	4603      	mov	r3, r0
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <tcp_receive+0xa90>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <tcp_receive+0xa92>
 8008998:	2300      	movs	r3, #0
 800899a:	442b      	add	r3, r5
 800899c:	429c      	cmp	r4, r3
 800899e:	d206      	bcs.n	80089ae <tcp_receive+0xaa6>
 80089a0:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <tcp_receive+0xb14>)
 80089a2:	f240 622b 	movw	r2, #1579	; 0x62b
 80089a6:	4923      	ldr	r1, [pc, #140]	; (8008a34 <tcp_receive+0xb2c>)
 80089a8:	481e      	ldr	r0, [pc, #120]	; (8008a24 <tcp_receive+0xb1c>)
 80089aa:	f004 fbcb 	bl	800d144 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	891b      	ldrh	r3, [r3, #8]
 80089b2:	461c      	mov	r4, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	899b      	ldrh	r3, [r3, #12]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fa ff0f 	bl	80037e0 <lwip_htons>
 80089c2:	4603      	mov	r3, r0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <tcp_receive+0xaca>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <tcp_receive+0xacc>
 80089d2:	2300      	movs	r3, #0
 80089d4:	1919      	adds	r1, r3, r4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089da:	b28b      	uxth	r3, r1
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	b29a      	uxth	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fc ff43 	bl	8005870 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	891b      	ldrh	r3, [r3, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d028      	beq.n	8008a46 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80089f4:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <tcp_receive+0xb24>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01d      	beq.n	8008a38 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80089fc:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <tcp_receive+0xb24>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f7fc fa60 	bl	8004ecc <pbuf_cat>
 8008a0c:	e018      	b.n	8008a40 <tcp_receive+0xb38>
 8008a0e:	bf00      	nop
 8008a10:	20006782 	.word	0x20006782
 8008a14:	20006778 	.word	0x20006778
 8008a18:	20006758 	.word	0x20006758
 8008a1c:	0800f430 	.word	0x0800f430
 8008a20:	0800f810 	.word	0x0800f810
 8008a24:	0800f47c 	.word	0x0800f47c
 8008a28:	0800f84c 	.word	0x0800f84c
 8008a2c:	20006788 	.word	0x20006788
 8008a30:	20006785 	.word	0x20006785
 8008a34:	0800f86c 	.word	0x0800f86c
            } else {
              recv_data = cseg->p;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	4a70      	ldr	r2, [pc, #448]	; (8008c00 <tcp_receive+0xcf8>)
 8008a3e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2200      	movs	r2, #0
 8008a44:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	899b      	ldrh	r3, [r3, #12]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fa fec6 	bl	80037e0 <lwip_htons>
 8008a54:	4603      	mov	r3, r0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00d      	beq.n	8008a7c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008a60:	4b68      	ldr	r3, [pc, #416]	; (8008c04 <tcp_receive+0xcfc>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	f043 0320 	orr.w	r3, r3, #32
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	4b66      	ldr	r3, [pc, #408]	; (8008c04 <tcp_receive+0xcfc>)
 8008a6c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7d1b      	ldrb	r3, [r3, #20]
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d102      	bne.n	8008a7c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2207      	movs	r2, #7
 8008a7a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7fd fbd2 	bl	800622e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d008      	beq.n	8008aa4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	f43f af43 	beq.w	800892a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	8b5b      	ldrh	r3, [r3, #26]
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <tcp_receive+0xbc6>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	8b5b      	ldrh	r3, [r3, #26]
 8008ab4:	f023 0301 	bic.w	r3, r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	835a      	strh	r2, [r3, #26]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	8b5b      	ldrh	r3, [r3, #26]
 8008ac2:	f043 0302 	orr.w	r3, r3, #2
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008acc:	e188      	b.n	8008de0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	8b5b      	ldrh	r3, [r3, #26]
 8008ad2:	f043 0301 	orr.w	r3, r3, #1
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008adc:	e180      	b.n	8008de0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d106      	bne.n	8008af4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008ae6:	4848      	ldr	r0, [pc, #288]	; (8008c08 <tcp_receive+0xd00>)
 8008ae8:	f7fd fbba 	bl	8006260 <tcp_seg_copy>
 8008aec:	4602      	mov	r2, r0
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	675a      	str	r2, [r3, #116]	; 0x74
 8008af2:	e16d      	b.n	8008dd0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8008afe:	e157      	b.n	8008db0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	4b41      	ldr	r3, [pc, #260]	; (8008c0c <tcp_receive+0xd04>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d11d      	bne.n	8008b4a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008b0e:	4b3e      	ldr	r3, [pc, #248]	; (8008c08 <tcp_receive+0xd00>)
 8008b10:	891a      	ldrh	r2, [r3, #8]
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	891b      	ldrh	r3, [r3, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	f240 814f 	bls.w	8008dba <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008b1c:	483a      	ldr	r0, [pc, #232]	; (8008c08 <tcp_receive+0xd00>)
 8008b1e:	f7fd fb9f 	bl	8006260 <tcp_seg_copy>
 8008b22:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f000 8149 	beq.w	8008dbe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <tcp_receive+0xc32>
                    prev->next = cseg;
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e002      	b.n	8008b40 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f7ff f8dc 	bl	8007d00 <tcp_oos_insert_segment>
                }
                break;
 8008b48:	e139      	b.n	8008dbe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d117      	bne.n	8008b80 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008b50:	4b2e      	ldr	r3, [pc, #184]	; (8008c0c <tcp_receive+0xd04>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	da57      	bge.n	8008c10 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008b60:	4829      	ldr	r0, [pc, #164]	; (8008c08 <tcp_receive+0xd00>)
 8008b62:	f7fd fb7d 	bl	8006260 <tcp_seg_copy>
 8008b66:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 8129 	beq.w	8008dc2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b78:	69b8      	ldr	r0, [r7, #24]
 8008b7a:	f7ff f8c1 	bl	8007d00 <tcp_oos_insert_segment>
                  }
                  break;
 8008b7e:	e120      	b.n	8008dc2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008b80:	4b22      	ldr	r3, [pc, #136]	; (8008c0c <tcp_receive+0xd04>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	db3e      	blt.n	8008c10 <tcp_receive+0xd08>
 8008b92:	4b1e      	ldr	r3, [pc, #120]	; (8008c0c <tcp_receive+0xd04>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	dc35      	bgt.n	8008c10 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008ba4:	4818      	ldr	r0, [pc, #96]	; (8008c08 <tcp_receive+0xd00>)
 8008ba6:	f7fd fb5b 	bl	8006260 <tcp_seg_copy>
 8008baa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 8109 	beq.w	8008dc6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bbc:	8912      	ldrh	r2, [r2, #8]
 8008bbe:	441a      	add	r2, r3
 8008bc0:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <tcp_receive+0xd04>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dd12      	ble.n	8008bf0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008bca:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <tcp_receive+0xd04>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bde:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be6:	891b      	ldrh	r3, [r3, #8]
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7fb ff26 	bl	8004a3c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008bf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bf8:	69f8      	ldr	r0, [r7, #28]
 8008bfa:	f7ff f881 	bl	8007d00 <tcp_oos_insert_segment>
                  }
                  break;
 8008bfe:	e0e2      	b.n	8008dc6 <tcp_receive+0xebe>
 8008c00:	20006788 	.word	0x20006788
 8008c04:	20006785 	.word	0x20006785
 8008c08:	20006758 	.word	0x20006758
 8008c0c:	20006778 	.word	0x20006778
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f040 80c6 	bne.w	8008daa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008c1e:	4b80      	ldr	r3, [pc, #512]	; (8008e20 <tcp_receive+0xf18>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f340 80bd 	ble.w	8008daa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	899b      	ldrh	r3, [r3, #12]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fa fdd1 	bl	80037e0 <lwip_htons>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f040 80bf 	bne.w	8008dca <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008c4c:	4875      	ldr	r0, [pc, #468]	; (8008e24 <tcp_receive+0xf1c>)
 8008c4e:	f7fd fb07 	bl	8006260 <tcp_seg_copy>
 8008c52:	4602      	mov	r2, r0
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80b6 	beq.w	8008dce <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c6a:	8912      	ldrh	r2, [r2, #8]
 8008c6c:	441a      	add	r2, r3
 8008c6e:	4b6c      	ldr	r3, [pc, #432]	; (8008e20 <tcp_receive+0xf18>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dd12      	ble.n	8008c9e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008c78:	4b69      	ldr	r3, [pc, #420]	; (8008e20 <tcp_receive+0xf18>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c94:	891b      	ldrh	r3, [r3, #8]
 8008c96:	4619      	mov	r1, r3
 8008c98:	4610      	mov	r0, r2
 8008c9a:	f7fb fecf 	bl	8004a3c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008c9e:	4b62      	ldr	r3, [pc, #392]	; (8008e28 <tcp_receive+0xf20>)
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	4b5e      	ldr	r3, [pc, #376]	; (8008e20 <tcp_receive+0xf18>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	441a      	add	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008cb2:	440b      	add	r3, r1
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f340 8089 	ble.w	8008dce <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	899b      	ldrh	r3, [r3, #12]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fa fd8a 	bl	80037e0 <lwip_htons>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d022      	beq.n	8008d1e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	899b      	ldrh	r3, [r3, #12]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ce8:	b21c      	sxth	r4, r3
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	899b      	ldrh	r3, [r3, #12]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fa fd73 	bl	80037e0 <lwip_htons>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fa fd6a 	bl	80037e0 <lwip_htons>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	b21b      	sxth	r3, r3
 8008d10:	4323      	orrs	r3, r4
 8008d12:	b21a      	sxth	r2, r3
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	b292      	uxth	r2, r2
 8008d1c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d28:	4413      	add	r3, r2
 8008d2a:	b299      	uxth	r1, r3
 8008d2c:	4b3c      	ldr	r3, [pc, #240]	; (8008e20 <tcp_receive+0xf18>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	1a8a      	subs	r2, r1, r2
 8008d38:	b292      	uxth	r2, r2
 8008d3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	891b      	ldrh	r3, [r3, #8]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f7fb fe76 	bl	8004a3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	891c      	ldrh	r4, [r3, #8]
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	899b      	ldrh	r3, [r3, #12]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fa fd3d 	bl	80037e0 <lwip_htons>
 8008d66:	4603      	mov	r3, r0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <tcp_receive+0xe6e>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <tcp_receive+0xe70>
 8008d76:	2300      	movs	r3, #0
 8008d78:	4423      	add	r3, r4
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	4b2a      	ldr	r3, [pc, #168]	; (8008e28 <tcp_receive+0xf20>)
 8008d7e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d80:	4b29      	ldr	r3, [pc, #164]	; (8008e28 <tcp_receive+0xf20>)
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	4b26      	ldr	r3, [pc, #152]	; (8008e20 <tcp_receive+0xf18>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	441a      	add	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d94:	440b      	add	r3, r1
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d019      	beq.n	8008dce <tcp_receive+0xec6>
 8008d9a:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <tcp_receive+0xf24>)
 8008d9c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008da0:	4923      	ldr	r1, [pc, #140]	; (8008e30 <tcp_receive+0xf28>)
 8008da2:	4824      	ldr	r0, [pc, #144]	; (8008e34 <tcp_receive+0xf2c>)
 8008da4:	f004 f9ce 	bl	800d144 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008da8:	e011      	b.n	8008dce <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f47f aea4 	bne.w	8008b00 <tcp_receive+0xbf8>
 8008db8:	e00a      	b.n	8008dd0 <tcp_receive+0xec8>
                break;
 8008dba:	bf00      	nop
 8008dbc:	e008      	b.n	8008dd0 <tcp_receive+0xec8>
                break;
 8008dbe:	bf00      	nop
 8008dc0:	e006      	b.n	8008dd0 <tcp_receive+0xec8>
                  break;
 8008dc2:	bf00      	nop
 8008dc4:	e004      	b.n	8008dd0 <tcp_receive+0xec8>
                  break;
 8008dc6:	bf00      	nop
 8008dc8:	e002      	b.n	8008dd0 <tcp_receive+0xec8>
                  break;
 8008dca:	bf00      	nop
 8008dcc:	e000      	b.n	8008dd0 <tcp_receive+0xec8>
                break;
 8008dce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 fa33 	bl	800a23c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008dd6:	e003      	b.n	8008de0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 fa2f 	bl	800a23c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008dde:	e01a      	b.n	8008e16 <tcp_receive+0xf0e>
 8008de0:	e019      	b.n	8008e16 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008de2:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <tcp_receive+0xf18>)
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	db0a      	blt.n	8008e06 <tcp_receive+0xefe>
 8008df0:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <tcp_receive+0xf18>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dfc:	440b      	add	r3, r1
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	3301      	adds	r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dd07      	ble.n	8008e16 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	8b5b      	ldrh	r3, [r3, #26]
 8008e0a:	f043 0302 	orr.w	r3, r3, #2
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008e14:	e7ff      	b.n	8008e16 <tcp_receive+0xf0e>
 8008e16:	bf00      	nop
 8008e18:	3750      	adds	r7, #80	; 0x50
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	20006778 	.word	0x20006778
 8008e24:	20006758 	.word	0x20006758
 8008e28:	20006782 	.word	0x20006782
 8008e2c:	0800f430 	.word	0x0800f430
 8008e30:	0800f7d8 	.word	0x0800f7d8
 8008e34:	0800f47c 	.word	0x0800f47c

08008e38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008e3e:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <tcp_get_next_optbyte+0x5c>)
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	b291      	uxth	r1, r2
 8008e46:	4a13      	ldr	r2, [pc, #76]	; (8008e94 <tcp_get_next_optbyte+0x5c>)
 8008e48:	8011      	strh	r1, [r2, #0]
 8008e4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008e4c:	4b12      	ldr	r3, [pc, #72]	; (8008e98 <tcp_get_next_optbyte+0x60>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <tcp_get_next_optbyte+0x26>
 8008e54:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <tcp_get_next_optbyte+0x64>)
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	88fa      	ldrh	r2, [r7, #6]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d208      	bcs.n	8008e70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008e5e:	4b10      	ldr	r3, [pc, #64]	; (8008ea0 <tcp_get_next_optbyte+0x68>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3314      	adds	r3, #20
 8008e64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008e66:	88fb      	ldrh	r3, [r7, #6]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	e00b      	b.n	8008e88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008e70:	88fb      	ldrh	r3, [r7, #6]
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <tcp_get_next_optbyte+0x64>)
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008e7e:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <tcp_get_next_optbyte+0x60>)
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	797b      	ldrb	r3, [r7, #5]
 8008e84:	4413      	add	r3, r2
 8008e86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	20006774 	.word	0x20006774
 8008e98:	20006770 	.word	0x20006770
 8008e9c:	2000676e 	.word	0x2000676e
 8008ea0:	20006768 	.word	0x20006768

08008ea4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <tcp_parseopt+0x1c>
 8008eb2:	4b32      	ldr	r3, [pc, #200]	; (8008f7c <tcp_parseopt+0xd8>)
 8008eb4:	f240 727d 	movw	r2, #1917	; 0x77d
 8008eb8:	4931      	ldr	r1, [pc, #196]	; (8008f80 <tcp_parseopt+0xdc>)
 8008eba:	4832      	ldr	r0, [pc, #200]	; (8008f84 <tcp_parseopt+0xe0>)
 8008ebc:	f004 f942 	bl	800d144 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008ec0:	4b31      	ldr	r3, [pc, #196]	; (8008f88 <tcp_parseopt+0xe4>)
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d055      	beq.n	8008f74 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008ec8:	4b30      	ldr	r3, [pc, #192]	; (8008f8c <tcp_parseopt+0xe8>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	801a      	strh	r2, [r3, #0]
 8008ece:	e045      	b.n	8008f5c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8008ed0:	f7ff ffb2 	bl	8008e38 <tcp_get_next_optbyte>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d006      	beq.n	8008eec <tcp_parseopt+0x48>
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	dc2b      	bgt.n	8008f3a <tcp_parseopt+0x96>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d041      	beq.n	8008f6a <tcp_parseopt+0xc6>
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d127      	bne.n	8008f3a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8008eea:	e037      	b.n	8008f5c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008eec:	f7ff ffa4 	bl	8008e38 <tcp_get_next_optbyte>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d13b      	bne.n	8008f6e <tcp_parseopt+0xca>
 8008ef6:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <tcp_parseopt+0xe8>)
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	3301      	adds	r3, #1
 8008efc:	4a22      	ldr	r2, [pc, #136]	; (8008f88 <tcp_parseopt+0xe4>)
 8008efe:	8812      	ldrh	r2, [r2, #0]
 8008f00:	4293      	cmp	r3, r2
 8008f02:	da34      	bge.n	8008f6e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8008f04:	f7ff ff98 	bl	8008e38 <tcp_get_next_optbyte>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8008f10:	f7ff ff92 	bl	8008e38 <tcp_get_next_optbyte>
 8008f14:	4603      	mov	r3, r0
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	89bb      	ldrh	r3, [r7, #12]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008f1e:	89bb      	ldrh	r3, [r7, #12]
 8008f20:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008f24:	d804      	bhi.n	8008f30 <tcp_parseopt+0x8c>
 8008f26:	89bb      	ldrh	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <tcp_parseopt+0x8c>
 8008f2c:	89ba      	ldrh	r2, [r7, #12]
 8008f2e:	e001      	b.n	8008f34 <tcp_parseopt+0x90>
 8008f30:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8008f38:	e010      	b.n	8008f5c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8008f3a:	f7ff ff7d 	bl	8008e38 <tcp_get_next_optbyte>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8008f42:	7afb      	ldrb	r3, [r7, #11]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d914      	bls.n	8008f72 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <tcp_parseopt+0xe8>)
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	4413      	add	r3, r2
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	3b02      	subs	r3, #2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <tcp_parseopt+0xe8>)
 8008f5a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008f5c:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <tcp_parseopt+0xe8>)
 8008f5e:	881a      	ldrh	r2, [r3, #0]
 8008f60:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <tcp_parseopt+0xe4>)
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d3b3      	bcc.n	8008ed0 <tcp_parseopt+0x2c>
 8008f68:	e004      	b.n	8008f74 <tcp_parseopt+0xd0>
          return;
 8008f6a:	bf00      	nop
 8008f6c:	e002      	b.n	8008f74 <tcp_parseopt+0xd0>
            return;
 8008f6e:	bf00      	nop
 8008f70:	e000      	b.n	8008f74 <tcp_parseopt+0xd0>
            return;
 8008f72:	bf00      	nop
      }
    }
  }
}
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	0800f430 	.word	0x0800f430
 8008f80:	0800f894 	.word	0x0800f894
 8008f84:	0800f47c 	.word	0x0800f47c
 8008f88:	2000676c 	.word	0x2000676c
 8008f8c:	20006774 	.word	0x20006774

08008f90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008f90:	b480      	push	{r7}
 8008f92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <tcp_trigger_input_pcb_close+0x1c>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	f043 0310 	orr.w	r3, r3, #16
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	4b03      	ldr	r3, [pc, #12]	; (8008fac <tcp_trigger_input_pcb_close+0x1c>)
 8008fa0:	701a      	strb	r2, [r3, #0]
}
 8008fa2:	bf00      	nop
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	20006785 	.word	0x20006785

08008fb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <tcp_route+0x28>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	7a1b      	ldrb	r3, [r3, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d006      	beq.n	8008fd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	7a1b      	ldrb	r3, [r3, #8]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fb fb5a 	bl	8004688 <netif_get_by_index>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	e003      	b.n	8008fe0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f002 fe7d 	bl	800bcd8 <ip4_route>
 8008fde:	4603      	mov	r3, r0
  }
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d105      	bne.n	800900a <tcp_create_segment+0x22>
 8008ffe:	4b44      	ldr	r3, [pc, #272]	; (8009110 <tcp_create_segment+0x128>)
 8009000:	22a3      	movs	r2, #163	; 0xa3
 8009002:	4944      	ldr	r1, [pc, #272]	; (8009114 <tcp_create_segment+0x12c>)
 8009004:	4844      	ldr	r0, [pc, #272]	; (8009118 <tcp_create_segment+0x130>)
 8009006:	f004 f89d 	bl	800d144 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d105      	bne.n	800901c <tcp_create_segment+0x34>
 8009010:	4b3f      	ldr	r3, [pc, #252]	; (8009110 <tcp_create_segment+0x128>)
 8009012:	22a4      	movs	r2, #164	; 0xa4
 8009014:	4941      	ldr	r1, [pc, #260]	; (800911c <tcp_create_segment+0x134>)
 8009016:	4840      	ldr	r0, [pc, #256]	; (8009118 <tcp_create_segment+0x130>)
 8009018:	f004 f894 	bl	800d144 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800901c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0304 	and.w	r3, r3, #4
 8009028:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800902a:	2003      	movs	r0, #3
 800902c:	f7fb f82e 	bl	800408c <memp_malloc>
 8009030:	6138      	str	r0, [r7, #16]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d104      	bne.n	8009042 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009038:	68b8      	ldr	r0, [r7, #8]
 800903a:	f7fb fe85 	bl	8004d48 <pbuf_free>
    return NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	e061      	b.n	8009106 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009048:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	891a      	ldrh	r2, [r3, #8]
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	b29b      	uxth	r3, r3
 800905e:	429a      	cmp	r2, r3
 8009060:	d205      	bcs.n	800906e <tcp_create_segment+0x86>
 8009062:	4b2b      	ldr	r3, [pc, #172]	; (8009110 <tcp_create_segment+0x128>)
 8009064:	22b0      	movs	r2, #176	; 0xb0
 8009066:	492e      	ldr	r1, [pc, #184]	; (8009120 <tcp_create_segment+0x138>)
 8009068:	482b      	ldr	r0, [pc, #172]	; (8009118 <tcp_create_segment+0x130>)
 800906a:	f004 f86b 	bl	800d144 <iprintf>
  seg->len = p->tot_len - optlen;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	891a      	ldrh	r2, [r3, #8]
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	b29b      	uxth	r3, r3
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	b29a      	uxth	r2, r3
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800907e:	2114      	movs	r1, #20
 8009080:	68b8      	ldr	r0, [r7, #8]
 8009082:	f7fb fdcb 	bl	8004c1c <pbuf_add_header>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d004      	beq.n	8009096 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800908c:	6938      	ldr	r0, [r7, #16]
 800908e:	f7fd f8ce 	bl	800622e <tcp_seg_free>
    return NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	e037      	b.n	8009106 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8ada      	ldrh	r2, [r3, #22]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	68dc      	ldr	r4, [r3, #12]
 80090a8:	4610      	mov	r0, r2
 80090aa:	f7fa fb99 	bl	80037e0 <lwip_htons>
 80090ae:	4603      	mov	r3, r0
 80090b0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8b1a      	ldrh	r2, [r3, #24]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	68dc      	ldr	r4, [r3, #12]
 80090ba:	4610      	mov	r0, r2
 80090bc:	f7fa fb90 	bl	80037e0 <lwip_htons>
 80090c0:	4603      	mov	r3, r0
 80090c2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	68dc      	ldr	r4, [r3, #12]
 80090c8:	6838      	ldr	r0, [r7, #0]
 80090ca:	f7fa fb9e 	bl	800380a <lwip_htonl>
 80090ce:	4603      	mov	r3, r0
 80090d0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
 80090d4:	089b      	lsrs	r3, r3, #2
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3305      	adds	r3, #5
 80090dc:	b29b      	uxth	r3, r3
 80090de:	031b      	lsls	r3, r3, #12
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	4313      	orrs	r3, r2
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	68dc      	ldr	r4, [r3, #12]
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fa fb76 	bl	80037e0 <lwip_htons>
 80090f4:	4603      	mov	r3, r0
 80090f6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	749a      	strb	r2, [r3, #18]
 8009100:	2200      	movs	r2, #0
 8009102:	74da      	strb	r2, [r3, #19]
  return seg;
 8009104:	693b      	ldr	r3, [r7, #16]
}
 8009106:	4618      	mov	r0, r3
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	bd90      	pop	{r4, r7, pc}
 800910e:	bf00      	nop
 8009110:	0800f8b0 	.word	0x0800f8b0
 8009114:	0800f8e4 	.word	0x0800f8e4
 8009118:	0800f904 	.word	0x0800f904
 800911c:	0800f92c 	.word	0x0800f92c
 8009120:	0800f950 	.word	0x0800f950

08009124 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009124:	b590      	push	{r4, r7, lr}
 8009126:	b08b      	sub	sp, #44	; 0x2c
 8009128:	af02      	add	r7, sp, #8
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009138:	2300      	movs	r3, #0
 800913a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <tcp_split_unsent_seg+0x2c>
 8009142:	4b95      	ldr	r3, [pc, #596]	; (8009398 <tcp_split_unsent_seg+0x274>)
 8009144:	f240 324b 	movw	r2, #843	; 0x34b
 8009148:	4994      	ldr	r1, [pc, #592]	; (800939c <tcp_split_unsent_seg+0x278>)
 800914a:	4895      	ldr	r0, [pc, #596]	; (80093a0 <tcp_split_unsent_seg+0x27c>)
 800914c:	f003 fffa 	bl	800d144 <iprintf>

  useg = pcb->unsent;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009154:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800915c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009160:	e116      	b.n	8009390 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009162:	887b      	ldrh	r3, [r7, #2]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009168:	4b8b      	ldr	r3, [pc, #556]	; (8009398 <tcp_split_unsent_seg+0x274>)
 800916a:	f240 3253 	movw	r2, #851	; 0x353
 800916e:	498d      	ldr	r1, [pc, #564]	; (80093a4 <tcp_split_unsent_seg+0x280>)
 8009170:	488b      	ldr	r0, [pc, #556]	; (80093a0 <tcp_split_unsent_seg+0x27c>)
 8009172:	f003 ffe7 	bl	800d144 <iprintf>
    return ERR_VAL;
 8009176:	f06f 0305 	mvn.w	r3, #5
 800917a:	e109      	b.n	8009390 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	891b      	ldrh	r3, [r3, #8]
 8009180:	887a      	ldrh	r2, [r7, #2]
 8009182:	429a      	cmp	r2, r3
 8009184:	d301      	bcc.n	800918a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	e102      	b.n	8009390 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800918e:	887a      	ldrh	r2, [r7, #2]
 8009190:	429a      	cmp	r2, r3
 8009192:	d906      	bls.n	80091a2 <tcp_split_unsent_seg+0x7e>
 8009194:	4b80      	ldr	r3, [pc, #512]	; (8009398 <tcp_split_unsent_seg+0x274>)
 8009196:	f240 325b 	movw	r2, #859	; 0x35b
 800919a:	4983      	ldr	r1, [pc, #524]	; (80093a8 <tcp_split_unsent_seg+0x284>)
 800919c:	4880      	ldr	r0, [pc, #512]	; (80093a0 <tcp_split_unsent_seg+0x27c>)
 800919e:	f003 ffd1 	bl	800d144 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	891b      	ldrh	r3, [r3, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d106      	bne.n	80091b8 <tcp_split_unsent_seg+0x94>
 80091aa:	4b7b      	ldr	r3, [pc, #492]	; (8009398 <tcp_split_unsent_seg+0x274>)
 80091ac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80091b0:	497e      	ldr	r1, [pc, #504]	; (80093ac <tcp_split_unsent_seg+0x288>)
 80091b2:	487b      	ldr	r0, [pc, #492]	; (80093a0 <tcp_split_unsent_seg+0x27c>)
 80091b4:	f003 ffc6 	bl	800d144 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	7a9b      	ldrb	r3, [r3, #10]
 80091bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	891a      	ldrh	r2, [r3, #8]
 80091ce:	887b      	ldrh	r3, [r7, #2]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	89bb      	ldrh	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80091e2:	4619      	mov	r1, r3
 80091e4:	2036      	movs	r0, #54	; 0x36
 80091e6:	f7fb facb 	bl	8004780 <pbuf_alloc>
 80091ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 80b7 	beq.w	8009362 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	891a      	ldrh	r2, [r3, #8]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	891b      	ldrh	r3, [r3, #8]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	b29a      	uxth	r2, r3
 8009202:	887b      	ldrh	r3, [r7, #2]
 8009204:	4413      	add	r3, r2
 8009206:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	6858      	ldr	r0, [r3, #4]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	7bbb      	ldrb	r3, [r7, #14]
 8009212:	18d1      	adds	r1, r2, r3
 8009214:	897b      	ldrh	r3, [r7, #10]
 8009216:	89ba      	ldrh	r2, [r7, #12]
 8009218:	f7fb ff80 	bl	800511c <pbuf_copy_partial>
 800921c:	4603      	mov	r3, r0
 800921e:	461a      	mov	r2, r3
 8009220:	89bb      	ldrh	r3, [r7, #12]
 8009222:	4293      	cmp	r3, r2
 8009224:	f040 809f 	bne.w	8009366 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	899b      	ldrh	r3, [r3, #12]
 800922e:	b29b      	uxth	r3, r3
 8009230:	4618      	mov	r0, r3
 8009232:	f7fa fad5 	bl	80037e0 <lwip_htons>
 8009236:	4603      	mov	r3, r0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800923e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009240:	2300      	movs	r3, #0
 8009242:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009244:	7efb      	ldrb	r3, [r7, #27]
 8009246:	f003 0308 	and.w	r3, r3, #8
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800924e:	7efb      	ldrb	r3, [r7, #27]
 8009250:	f023 0308 	bic.w	r3, r3, #8
 8009254:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009256:	7ebb      	ldrb	r3, [r7, #26]
 8009258:	f043 0308 	orr.w	r3, r3, #8
 800925c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800925e:	7efb      	ldrb	r3, [r7, #27]
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	2b00      	cmp	r3, #0
 8009266:	d007      	beq.n	8009278 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009268:	7efb      	ldrb	r3, [r7, #27]
 800926a:	f023 0301 	bic.w	r3, r3, #1
 800926e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009270:	7ebb      	ldrb	r3, [r7, #26]
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	4618      	mov	r0, r3
 8009280:	f7fa fac3 	bl	800380a <lwip_htonl>
 8009284:	4602      	mov	r2, r0
 8009286:	887b      	ldrh	r3, [r7, #2]
 8009288:	18d1      	adds	r1, r2, r3
 800928a:	7eba      	ldrb	r2, [r7, #26]
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	460b      	mov	r3, r1
 8009292:	6939      	ldr	r1, [r7, #16]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff fea7 	bl	8008fe8 <tcp_create_segment>
 800929a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d063      	beq.n	800936a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fb fdd6 	bl	8004e58 <pbuf_clen>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	6858      	ldr	r0, [r3, #4]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	891a      	ldrh	r2, [r3, #8]
 80092ca:	89bb      	ldrh	r3, [r7, #12]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	4619      	mov	r1, r3
 80092d2:	f7fb fbb3 	bl	8004a3c <pbuf_realloc>
  useg->len -= remainder;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	891a      	ldrh	r2, [r3, #8]
 80092da:	89bb      	ldrh	r3, [r7, #12]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	b29a      	uxth	r2, r3
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	899b      	ldrh	r3, [r3, #12]
 80092ea:	b29c      	uxth	r4, r3
 80092ec:	7efb      	ldrb	r3, [r7, #27]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fa fa75 	bl	80037e0 <lwip_htons>
 80092f6:	4603      	mov	r3, r0
 80092f8:	461a      	mov	r2, r3
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	4322      	orrs	r2, r4
 8009300:	b292      	uxth	r2, r2
 8009302:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	4618      	mov	r0, r3
 800930a:	f7fb fda5 	bl	8004e58 <pbuf_clen>
 800930e:	4603      	mov	r3, r0
 8009310:	461a      	mov	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009318:	4413      	add	r3, r2
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	4618      	mov	r0, r3
 8009328:	f7fb fd96 	bl	8004e58 <pbuf_clen>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009336:	4413      	add	r3, r2
 8009338:	b29a      	uxth	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d103      	bne.n	800935e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	e016      	b.n	8009390 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009362:	bf00      	nop
 8009364:	e002      	b.n	800936c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009366:	bf00      	nop
 8009368:	e000      	b.n	800936c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800936a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d006      	beq.n	8009380 <tcp_split_unsent_seg+0x25c>
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <tcp_split_unsent_seg+0x274>)
 8009374:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009378:	490d      	ldr	r1, [pc, #52]	; (80093b0 <tcp_split_unsent_seg+0x28c>)
 800937a:	4809      	ldr	r0, [pc, #36]	; (80093a0 <tcp_split_unsent_seg+0x27c>)
 800937c:	f003 fee2 	bl	800d144 <iprintf>
  if (p != NULL) {
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009386:	6938      	ldr	r0, [r7, #16]
 8009388:	f7fb fcde 	bl	8004d48 <pbuf_free>
  }

  return ERR_MEM;
 800938c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009390:	4618      	mov	r0, r3
 8009392:	3724      	adds	r7, #36	; 0x24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd90      	pop	{r4, r7, pc}
 8009398:	0800f8b0 	.word	0x0800f8b0
 800939c:	0800fc44 	.word	0x0800fc44
 80093a0:	0800f904 	.word	0x0800f904
 80093a4:	0800fc68 	.word	0x0800fc68
 80093a8:	0800fc8c 	.word	0x0800fc8c
 80093ac:	0800fc9c 	.word	0x0800fc9c
 80093b0:	0800fcac 	.word	0x0800fcac

080093b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80093b4:	b590      	push	{r4, r7, lr}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <tcp_send_fin+0x1c>
 80093c2:	4b21      	ldr	r3, [pc, #132]	; (8009448 <tcp_send_fin+0x94>)
 80093c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80093c8:	4920      	ldr	r1, [pc, #128]	; (800944c <tcp_send_fin+0x98>)
 80093ca:	4821      	ldr	r0, [pc, #132]	; (8009450 <tcp_send_fin+0x9c>)
 80093cc:	f003 feba 	bl	800d144 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d02e      	beq.n	8009436 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	e002      	b.n	80093e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1f8      	bne.n	80093e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	899b      	ldrh	r3, [r3, #12]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fa f9f2 	bl	80037e0 <lwip_htons>
 80093fc:	4603      	mov	r3, r0
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	2b00      	cmp	r3, #0
 8009406:	d116      	bne.n	8009436 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	899b      	ldrh	r3, [r3, #12]
 800940e:	b29c      	uxth	r4, r3
 8009410:	2001      	movs	r0, #1
 8009412:	f7fa f9e5 	bl	80037e0 <lwip_htons>
 8009416:	4603      	mov	r3, r0
 8009418:	461a      	mov	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	4322      	orrs	r2, r4
 8009420:	b292      	uxth	r2, r2
 8009422:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8b5b      	ldrh	r3, [r3, #26]
 8009428:	f043 0320 	orr.w	r3, r3, #32
 800942c:	b29a      	uxth	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	e004      	b.n	8009440 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009436:	2101      	movs	r1, #1
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f80b 	bl	8009454 <tcp_enqueue_flags>
 800943e:	4603      	mov	r3, r0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	bd90      	pop	{r4, r7, pc}
 8009448:	0800f8b0 	.word	0x0800f8b0
 800944c:	0800fcb8 	.word	0x0800fcb8
 8009450:	0800f904 	.word	0x0800f904

08009454 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08a      	sub	sp, #40	; 0x28
 8009458:	af02      	add	r7, sp, #8
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <tcp_enqueue_flags+0x2c>
 8009472:	4b67      	ldr	r3, [pc, #412]	; (8009610 <tcp_enqueue_flags+0x1bc>)
 8009474:	f240 4211 	movw	r2, #1041	; 0x411
 8009478:	4966      	ldr	r1, [pc, #408]	; (8009614 <tcp_enqueue_flags+0x1c0>)
 800947a:	4867      	ldr	r0, [pc, #412]	; (8009618 <tcp_enqueue_flags+0x1c4>)
 800947c:	f003 fe62 	bl	800d144 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d106      	bne.n	8009494 <tcp_enqueue_flags+0x40>
 8009486:	4b62      	ldr	r3, [pc, #392]	; (8009610 <tcp_enqueue_flags+0x1bc>)
 8009488:	f240 4213 	movw	r2, #1043	; 0x413
 800948c:	4963      	ldr	r1, [pc, #396]	; (800961c <tcp_enqueue_flags+0x1c8>)
 800948e:	4862      	ldr	r0, [pc, #392]	; (8009618 <tcp_enqueue_flags+0x1c4>)
 8009490:	f003 fe58 	bl	800d144 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800949e:	2301      	movs	r3, #1
 80094a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80094a2:	7ffb      	ldrb	r3, [r7, #31]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80094b6:	4619      	mov	r1, r3
 80094b8:	2036      	movs	r0, #54	; 0x36
 80094ba:	f7fb f961 	bl	8004780 <pbuf_alloc>
 80094be:	6138      	str	r0, [r7, #16]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d109      	bne.n	80094da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	8b5b      	ldrh	r3, [r3, #26]
 80094ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80094d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094d8:	e095      	b.n	8009606 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	895a      	ldrh	r2, [r3, #10]
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d206      	bcs.n	80094f4 <tcp_enqueue_flags+0xa0>
 80094e6:	4b4a      	ldr	r3, [pc, #296]	; (8009610 <tcp_enqueue_flags+0x1bc>)
 80094e8:	f240 4239 	movw	r2, #1081	; 0x439
 80094ec:	494c      	ldr	r1, [pc, #304]	; (8009620 <tcp_enqueue_flags+0x1cc>)
 80094ee:	484a      	ldr	r0, [pc, #296]	; (8009618 <tcp_enqueue_flags+0x1c4>)
 80094f0:	f003 fe28 	bl	800d144 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	7ffb      	ldrb	r3, [r7, #31]
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	460b      	mov	r3, r1
 8009500:	6939      	ldr	r1, [r7, #16]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff fd70 	bl	8008fe8 <tcp_create_segment>
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d109      	bne.n	8009524 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8b5b      	ldrh	r3, [r3, #26]
 8009514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009518:	b29a      	uxth	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800951e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009522:	e070      	b.n	8009606 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0303 	and.w	r3, r3, #3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d006      	beq.n	800953e <tcp_enqueue_flags+0xea>
 8009530:	4b37      	ldr	r3, [pc, #220]	; (8009610 <tcp_enqueue_flags+0x1bc>)
 8009532:	f240 4242 	movw	r2, #1090	; 0x442
 8009536:	493b      	ldr	r1, [pc, #236]	; (8009624 <tcp_enqueue_flags+0x1d0>)
 8009538:	4837      	ldr	r0, [pc, #220]	; (8009618 <tcp_enqueue_flags+0x1c4>)
 800953a:	f003 fe03 	bl	800d144 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	891b      	ldrh	r3, [r3, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d006      	beq.n	8009554 <tcp_enqueue_flags+0x100>
 8009546:	4b32      	ldr	r3, [pc, #200]	; (8009610 <tcp_enqueue_flags+0x1bc>)
 8009548:	f240 4243 	movw	r2, #1091	; 0x443
 800954c:	4936      	ldr	r1, [pc, #216]	; (8009628 <tcp_enqueue_flags+0x1d4>)
 800954e:	4832      	ldr	r0, [pc, #200]	; (8009618 <tcp_enqueue_flags+0x1c4>)
 8009550:	f003 fdf8 	bl	800d144 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d103      	bne.n	8009564 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	66da      	str	r2, [r3, #108]	; 0x6c
 8009562:	e00d      	b.n	8009580 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e002      	b.n	8009572 <tcp_enqueue_flags+0x11e>
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1f8      	bne.n	800956c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d104      	bne.n	800959c <tcp_enqueue_flags+0x148>
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b00      	cmp	r3, #0
 800959a:	d004      	beq.n	80095a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80095a6:	78fb      	ldrb	r3, [r7, #3]
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d006      	beq.n	80095be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8b5b      	ldrh	r3, [r3, #26]
 80095b4:	f043 0320 	orr.w	r3, r3, #32
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fb fc48 	bl	8004e58 <pbuf_clen>
 80095c8:	4603      	mov	r3, r0
 80095ca:	461a      	mov	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80095d2:	4413      	add	r3, r2
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00e      	beq.n	8009604 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <tcp_enqueue_flags+0x1b0>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <tcp_enqueue_flags+0x1b0>
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <tcp_enqueue_flags+0x1bc>)
 80095f8:	f240 4265 	movw	r2, #1125	; 0x465
 80095fc:	490b      	ldr	r1, [pc, #44]	; (800962c <tcp_enqueue_flags+0x1d8>)
 80095fe:	4806      	ldr	r0, [pc, #24]	; (8009618 <tcp_enqueue_flags+0x1c4>)
 8009600:	f003 fda0 	bl	800d144 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3720      	adds	r7, #32
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	0800f8b0 	.word	0x0800f8b0
 8009614:	0800fcd4 	.word	0x0800fcd4
 8009618:	0800f904 	.word	0x0800f904
 800961c:	0800fd2c 	.word	0x0800fd2c
 8009620:	0800fd4c 	.word	0x0800fd4c
 8009624:	0800fd88 	.word	0x0800fd88
 8009628:	0800fda0 	.word	0x0800fda0
 800962c:	0800fdcc 	.word	0x0800fdcc

08009630 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009630:	b5b0      	push	{r4, r5, r7, lr}
 8009632:	b08a      	sub	sp, #40	; 0x28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <tcp_output+0x1c>
 800963e:	4b8a      	ldr	r3, [pc, #552]	; (8009868 <tcp_output+0x238>)
 8009640:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009644:	4989      	ldr	r1, [pc, #548]	; (800986c <tcp_output+0x23c>)
 8009646:	488a      	ldr	r0, [pc, #552]	; (8009870 <tcp_output+0x240>)
 8009648:	f003 fd7c 	bl	800d144 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	7d1b      	ldrb	r3, [r3, #20]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d106      	bne.n	8009662 <tcp_output+0x32>
 8009654:	4b84      	ldr	r3, [pc, #528]	; (8009868 <tcp_output+0x238>)
 8009656:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800965a:	4986      	ldr	r1, [pc, #536]	; (8009874 <tcp_output+0x244>)
 800965c:	4884      	ldr	r0, [pc, #528]	; (8009870 <tcp_output+0x240>)
 800965e:	f003 fd71 	bl	800d144 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009662:	4b85      	ldr	r3, [pc, #532]	; (8009878 <tcp_output+0x248>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	429a      	cmp	r2, r3
 800966a:	d101      	bne.n	8009670 <tcp_output+0x40>
    return ERR_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	e1ce      	b.n	8009a0e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800967c:	4293      	cmp	r3, r2
 800967e:	bf28      	it	cs
 8009680:	4613      	movcs	r3, r2
 8009682:	b29b      	uxth	r3, r3
 8009684:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10b      	bne.n	80096aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	8b5b      	ldrh	r3, [r3, #26]
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 81aa 	beq.w	80099f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fdcb 	bl	800a23c <tcp_send_empty_ack>
 80096a6:	4603      	mov	r3, r0
 80096a8:	e1b1      	b.n	8009a0e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3304      	adds	r3, #4
 80096b0:	461a      	mov	r2, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff fc7c 	bl	8008fb0 <tcp_route>
 80096b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <tcp_output+0x96>
    return ERR_RTE;
 80096c0:	f06f 0303 	mvn.w	r3, #3
 80096c4:	e1a3      	b.n	8009a0e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d003      	beq.n	80096d4 <tcp_output+0xa4>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d111      	bne.n	80096f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <tcp_output+0xb0>
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	3304      	adds	r3, #4
 80096de:	e000      	b.n	80096e2 <tcp_output+0xb2>
 80096e0:	2300      	movs	r3, #0
 80096e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d102      	bne.n	80096f0 <tcp_output+0xc0>
      return ERR_RTE;
 80096ea:	f06f 0303 	mvn.w	r3, #3
 80096ee:	e18e      	b.n	8009a0e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fa f883 	bl	800380a <lwip_htonl>
 8009704:	4602      	mov	r2, r0
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970e:	8912      	ldrh	r2, [r2, #8]
 8009710:	4413      	add	r3, r2
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	429a      	cmp	r2, r3
 8009716:	d227      	bcs.n	8009768 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800971e:	461a      	mov	r2, r3
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	4293      	cmp	r3, r2
 8009724:	d114      	bne.n	8009750 <tcp_output+0x120>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972a:	2b00      	cmp	r3, #0
 800972c:	d110      	bne.n	8009750 <tcp_output+0x120>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10b      	bne.n	8009750 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8b5b      	ldrh	r3, [r3, #26]
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 814d 	beq.w	80099f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fd6c 	bl	800a23c <tcp_send_empty_ack>
 8009764:	4603      	mov	r3, r0
 8009766:	e152      	b.n	8009a0e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009774:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 811c 	beq.w	80099b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800977e:	e002      	b.n	8009786 <tcp_output+0x156>
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	623b      	str	r3, [r7, #32]
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1f8      	bne.n	8009780 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800978e:	e112      	b.n	80099b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	899b      	ldrh	r3, [r3, #12]
 8009796:	b29b      	uxth	r3, r3
 8009798:	4618      	mov	r0, r3
 800979a:	f7fa f821 	bl	80037e0 <lwip_htons>
 800979e:	4603      	mov	r3, r0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d006      	beq.n	80097b8 <tcp_output+0x188>
 80097aa:	4b2f      	ldr	r3, [pc, #188]	; (8009868 <tcp_output+0x238>)
 80097ac:	f240 5236 	movw	r2, #1334	; 0x536
 80097b0:	4932      	ldr	r1, [pc, #200]	; (800987c <tcp_output+0x24c>)
 80097b2:	482f      	ldr	r0, [pc, #188]	; (8009870 <tcp_output+0x240>)
 80097b4:	f003 fcc6 	bl	800d144 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01f      	beq.n	8009800 <tcp_output+0x1d0>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8b5b      	ldrh	r3, [r3, #26]
 80097c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d119      	bne.n	8009800 <tcp_output+0x1d0>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <tcp_output+0x1bc>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d110      	bne.n	8009800 <tcp_output+0x1d0>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e2:	891a      	ldrh	r2, [r3, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d209      	bcs.n	8009800 <tcp_output+0x1d0>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <tcp_output+0x1d0>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097fc:	2b08      	cmp	r3, #8
 80097fe:	d901      	bls.n	8009804 <tcp_output+0x1d4>
 8009800:	2301      	movs	r3, #1
 8009802:	e000      	b.n	8009806 <tcp_output+0x1d6>
 8009804:	2300      	movs	r3, #0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	8b5b      	ldrh	r3, [r3, #26]
 800980e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 80e4 	beq.w	80099e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7d1b      	ldrb	r3, [r3, #20]
 800981c:	2b02      	cmp	r3, #2
 800981e:	d00d      	beq.n	800983c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	899b      	ldrh	r3, [r3, #12]
 8009826:	b29c      	uxth	r4, r3
 8009828:	2010      	movs	r0, #16
 800982a:	f7f9 ffd9 	bl	80037e0 <lwip_htons>
 800982e:	4603      	mov	r3, r0
 8009830:	461a      	mov	r2, r3
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	4322      	orrs	r2, r4
 8009838:	b292      	uxth	r2, r2
 800983a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009842:	f000 f909 	bl	8009a58 <tcp_output_segment>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800984a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d016      	beq.n	8009880 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	8b5b      	ldrh	r3, [r3, #26]
 8009856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	835a      	strh	r2, [r3, #26]
      return err;
 8009860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009864:	e0d3      	b.n	8009a0e <tcp_output+0x3de>
 8009866:	bf00      	nop
 8009868:	0800f8b0 	.word	0x0800f8b0
 800986c:	0800fdf4 	.word	0x0800fdf4
 8009870:	0800f904 	.word	0x0800f904
 8009874:	0800fe0c 	.word	0x0800fe0c
 8009878:	2000678c 	.word	0x2000678c
 800987c:	0800fe34 	.word	0x0800fe34
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d006      	beq.n	800989e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	8b5b      	ldrh	r3, [r3, #26]
 8009894:	f023 0303 	bic.w	r3, r3, #3
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7f9 ffb0 	bl	800380a <lwip_htonl>
 80098aa:	4604      	mov	r4, r0
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	891b      	ldrh	r3, [r3, #8]
 80098b0:	461d      	mov	r5, r3
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	899b      	ldrh	r3, [r3, #12]
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f9 ff90 	bl	80037e0 <lwip_htons>
 80098c0:	4603      	mov	r3, r0
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <tcp_output+0x2a0>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <tcp_output+0x2a2>
 80098d0:	2300      	movs	r3, #0
 80098d2:	442b      	add	r3, r5
 80098d4:	4423      	add	r3, r4
 80098d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	da02      	bge.n	80098ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	891b      	ldrh	r3, [r3, #8]
 80098ee:	461c      	mov	r4, r3
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	899b      	ldrh	r3, [r3, #12]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7f9 ff71 	bl	80037e0 <lwip_htons>
 80098fe:	4603      	mov	r3, r0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <tcp_output+0x2de>
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <tcp_output+0x2e0>
 800990e:	2300      	movs	r3, #0
 8009910:	4423      	add	r3, r4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d049      	beq.n	80099aa <tcp_output+0x37a>
      seg->next = NULL;
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009920:	2b00      	cmp	r3, #0
 8009922:	d105      	bne.n	8009930 <tcp_output+0x300>
        pcb->unacked = seg;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009928:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	623b      	str	r3, [r7, #32]
 800992e:	e03f      	b.n	80099b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	4618      	mov	r0, r3
 8009938:	f7f9 ff67 	bl	800380a <lwip_htonl>
 800993c:	4604      	mov	r4, r0
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	4618      	mov	r0, r3
 8009946:	f7f9 ff60 	bl	800380a <lwip_htonl>
 800994a:	4603      	mov	r3, r0
 800994c:	1ae3      	subs	r3, r4, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	da24      	bge.n	800999c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3370      	adds	r3, #112	; 0x70
 8009956:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009958:	e002      	b.n	8009960 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d011      	beq.n	800998c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	4618      	mov	r0, r3
 8009972:	f7f9 ff4a 	bl	800380a <lwip_htonl>
 8009976:	4604      	mov	r4, r0
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	4618      	mov	r0, r3
 8009980:	f7f9 ff43 	bl	800380a <lwip_htonl>
 8009984:	4603      	mov	r3, r0
 8009986:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009988:	2b00      	cmp	r3, #0
 800998a:	dbe6      	blt.n	800995a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	e009      	b.n	80099b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	623b      	str	r3, [r7, #32]
 80099a8:	e002      	b.n	80099b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80099aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099ac:	f7fc fc3f 	bl	800622e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d012      	beq.n	80099e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f9 ff21 	bl	800380a <lwip_htonl>
 80099c8:	4602      	mov	r2, r0
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d2:	8912      	ldrh	r2, [r2, #8]
 80099d4:	4413      	add	r3, r2
  while (seg != NULL &&
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	429a      	cmp	r2, r3
 80099da:	f4bf aed9 	bcs.w	8009790 <tcp_output+0x160>
 80099de:	e000      	b.n	80099e2 <tcp_output+0x3b2>
      break;
 80099e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d108      	bne.n	80099fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80099f2:	e004      	b.n	80099fe <tcp_output+0x3ce>
    goto output_done;
 80099f4:	bf00      	nop
 80099f6:	e002      	b.n	80099fe <tcp_output+0x3ce>
    goto output_done;
 80099f8:	bf00      	nop
 80099fa:	e000      	b.n	80099fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80099fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	8b5b      	ldrh	r3, [r3, #26]
 8009a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3728      	adds	r7, #40	; 0x28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bdb0      	pop	{r4, r5, r7, pc}
 8009a16:	bf00      	nop

08009a18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d106      	bne.n	8009a34 <tcp_output_segment_busy+0x1c>
 8009a26:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <tcp_output_segment_busy+0x34>)
 8009a28:	f240 529a 	movw	r2, #1434	; 0x59a
 8009a2c:	4908      	ldr	r1, [pc, #32]	; (8009a50 <tcp_output_segment_busy+0x38>)
 8009a2e:	4809      	ldr	r0, [pc, #36]	; (8009a54 <tcp_output_segment_busy+0x3c>)
 8009a30:	f003 fb88 	bl	800d144 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	7b9b      	ldrb	r3, [r3, #14]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d001      	beq.n	8009a42 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e000      	b.n	8009a44 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	0800f8b0 	.word	0x0800f8b0
 8009a50:	0800fe4c 	.word	0x0800fe4c
 8009a54:	0800f904 	.word	0x0800f904

08009a58 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009a58:	b5b0      	push	{r4, r5, r7, lr}
 8009a5a:	b08c      	sub	sp, #48	; 0x30
 8009a5c:	af04      	add	r7, sp, #16
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d106      	bne.n	8009a78 <tcp_output_segment+0x20>
 8009a6a:	4b63      	ldr	r3, [pc, #396]	; (8009bf8 <tcp_output_segment+0x1a0>)
 8009a6c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009a70:	4962      	ldr	r1, [pc, #392]	; (8009bfc <tcp_output_segment+0x1a4>)
 8009a72:	4863      	ldr	r0, [pc, #396]	; (8009c00 <tcp_output_segment+0x1a8>)
 8009a74:	f003 fb66 	bl	800d144 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <tcp_output_segment+0x34>
 8009a7e:	4b5e      	ldr	r3, [pc, #376]	; (8009bf8 <tcp_output_segment+0x1a0>)
 8009a80:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009a84:	495f      	ldr	r1, [pc, #380]	; (8009c04 <tcp_output_segment+0x1ac>)
 8009a86:	485e      	ldr	r0, [pc, #376]	; (8009c00 <tcp_output_segment+0x1a8>)
 8009a88:	f003 fb5c 	bl	800d144 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <tcp_output_segment+0x48>
 8009a92:	4b59      	ldr	r3, [pc, #356]	; (8009bf8 <tcp_output_segment+0x1a0>)
 8009a94:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009a98:	495b      	ldr	r1, [pc, #364]	; (8009c08 <tcp_output_segment+0x1b0>)
 8009a9a:	4859      	ldr	r0, [pc, #356]	; (8009c00 <tcp_output_segment+0x1a8>)
 8009a9c:	f003 fb52 	bl	800d144 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f7ff ffb9 	bl	8009a18 <tcp_output_segment_busy>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	e09f      	b.n	8009bf0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	68dc      	ldr	r4, [r3, #12]
 8009ab8:	4610      	mov	r0, r2
 8009aba:	f7f9 fea6 	bl	800380a <lwip_htonl>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	68dc      	ldr	r4, [r3, #12]
 8009aca:	4610      	mov	r0, r2
 8009acc:	f7f9 fe88 	bl	80037e0 <lwip_htons>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009adc:	441a      	add	r2, r3
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	3314      	adds	r3, #20
 8009ae8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	7a9b      	ldrb	r3, [r3, #10]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d015      	beq.n	8009b22 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	3304      	adds	r3, #4
 8009afa:	461a      	mov	r2, r3
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009b02:	f7fc fe8b 	bl	800681c <tcp_eff_send_mss_netif>
 8009b06:	4603      	mov	r3, r0
 8009b08:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009b0a:	8b7b      	ldrh	r3, [r7, #26]
 8009b0c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7f9 fe7a 	bl	800380a <lwip_htonl>
 8009b16:	4602      	mov	r2, r0
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	da02      	bge.n	8009b32 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10c      	bne.n	8009b54 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009b3a:	4b34      	ldr	r3, [pc, #208]	; (8009c0c <tcp_output_segment+0x1b4>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7f9 fe5e 	bl	800380a <lwip_htonl>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	8959      	ldrh	r1, [r3, #10]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	8b3a      	ldrh	r2, [r7, #24]
 8009b6e:	1a8a      	subs	r2, r1, r2
 8009b70:	b292      	uxth	r2, r2
 8009b72:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	8919      	ldrh	r1, [r3, #8]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	8b3a      	ldrh	r2, [r7, #24]
 8009b80:	1a8a      	subs	r2, r1, r2
 8009b82:	b292      	uxth	r2, r2
 8009b84:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	68d2      	ldr	r2, [r2, #12]
 8009b8e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	741a      	strb	r2, [r3, #16]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f103 0214 	add.w	r2, r3, #20
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	7a9b      	ldrb	r3, [r3, #10]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	f003 0304 	and.w	r3, r3, #4
 8009bae:	4413      	add	r3, r2
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d006      	beq.n	8009bc4 <tcp_output_segment+0x16c>
 8009bb6:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <tcp_output_segment+0x1a0>)
 8009bb8:	f240 621c 	movw	r2, #1564	; 0x61c
 8009bbc:	4914      	ldr	r1, [pc, #80]	; (8009c10 <tcp_output_segment+0x1b8>)
 8009bbe:	4810      	ldr	r0, [pc, #64]	; (8009c00 <tcp_output_segment+0x1a8>)
 8009bc0:	f003 fac0 	bl	800d144 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6858      	ldr	r0, [r3, #4]
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	1d1c      	adds	r4, r3, #4
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	7add      	ldrb	r5, [r3, #11]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	7a9b      	ldrb	r3, [r3, #10]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	9202      	str	r2, [sp, #8]
 8009bda:	2206      	movs	r2, #6
 8009bdc:	9201      	str	r2, [sp, #4]
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	462b      	mov	r3, r5
 8009be2:	4622      	mov	r2, r4
 8009be4:	f002 fa36 	bl	800c054 <ip4_output_if>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3720      	adds	r7, #32
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8009bf8:	0800f8b0 	.word	0x0800f8b0
 8009bfc:	0800fe74 	.word	0x0800fe74
 8009c00:	0800f904 	.word	0x0800f904
 8009c04:	0800fe94 	.word	0x0800fe94
 8009c08:	0800feb4 	.word	0x0800feb4
 8009c0c:	20006740 	.word	0x20006740
 8009c10:	0800fed8 	.word	0x0800fed8

08009c14 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009c14:	b5b0      	push	{r4, r5, r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d106      	bne.n	8009c30 <tcp_rexmit_rto_prepare+0x1c>
 8009c22:	4b31      	ldr	r3, [pc, #196]	; (8009ce8 <tcp_rexmit_rto_prepare+0xd4>)
 8009c24:	f240 6263 	movw	r2, #1635	; 0x663
 8009c28:	4930      	ldr	r1, [pc, #192]	; (8009cec <tcp_rexmit_rto_prepare+0xd8>)
 8009c2a:	4831      	ldr	r0, [pc, #196]	; (8009cf0 <tcp_rexmit_rto_prepare+0xdc>)
 8009c2c:	f003 fa8a 	bl	800d144 <iprintf>

  if (pcb->unacked == NULL) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d102      	bne.n	8009c3e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009c38:	f06f 0305 	mvn.w	r3, #5
 8009c3c:	e050      	b.n	8009ce0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e00b      	b.n	8009c5e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff fee6 	bl	8009a18 <tcp_output_segment_busy>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8009c52:	f06f 0305 	mvn.w	r3, #5
 8009c56:	e043      	b.n	8009ce0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1ef      	bne.n	8009c46 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff fed6 	bl	8009a18 <tcp_output_segment_busy>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009c72:	f06f 0305 	mvn.w	r3, #5
 8009c76:	e033      	b.n	8009ce0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	8b5b      	ldrh	r3, [r3, #26]
 8009c92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7f9 fdb1 	bl	800380a <lwip_htonl>
 8009ca8:	4604      	mov	r4, r0
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	891b      	ldrh	r3, [r3, #8]
 8009cae:	461d      	mov	r5, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	899b      	ldrh	r3, [r3, #12]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f9 fd91 	bl	80037e0 <lwip_htons>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <tcp_rexmit_rto_prepare+0xba>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <tcp_rexmit_rto_prepare+0xbc>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	442b      	add	r3, r5
 8009cd2:	18e2      	adds	r2, r4, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce8:	0800f8b0 	.word	0x0800f8b0
 8009cec:	0800feec 	.word	0x0800feec
 8009cf0:	0800f904 	.word	0x0800f904

08009cf4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <tcp_rexmit_rto_commit+0x1c>
 8009d02:	4b0d      	ldr	r3, [pc, #52]	; (8009d38 <tcp_rexmit_rto_commit+0x44>)
 8009d04:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009d08:	490c      	ldr	r1, [pc, #48]	; (8009d3c <tcp_rexmit_rto_commit+0x48>)
 8009d0a:	480d      	ldr	r0, [pc, #52]	; (8009d40 <tcp_rexmit_rto_commit+0x4c>)
 8009d0c:	f003 fa1a 	bl	800d144 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d16:	2bff      	cmp	r3, #255	; 0xff
 8009d18:	d007      	beq.n	8009d2a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d20:	3301      	adds	r3, #1
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff fc80 	bl	8009630 <tcp_output>
}
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	0800f8b0 	.word	0x0800f8b0
 8009d3c:	0800ff10 	.word	0x0800ff10
 8009d40:	0800f904 	.word	0x0800f904

08009d44 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <tcp_rexmit_rto+0x1c>
 8009d52:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <tcp_rexmit_rto+0x38>)
 8009d54:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009d58:	4909      	ldr	r1, [pc, #36]	; (8009d80 <tcp_rexmit_rto+0x3c>)
 8009d5a:	480a      	ldr	r0, [pc, #40]	; (8009d84 <tcp_rexmit_rto+0x40>)
 8009d5c:	f003 f9f2 	bl	800d144 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff ff57 	bl	8009c14 <tcp_rexmit_rto_prepare>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7ff ffc1 	bl	8009cf4 <tcp_rexmit_rto_commit>
  }
}
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800f8b0 	.word	0x0800f8b0
 8009d80:	0800ff34 	.word	0x0800ff34
 8009d84:	0800f904 	.word	0x0800f904

08009d88 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009d88:	b590      	push	{r4, r7, lr}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <tcp_rexmit+0x1c>
 8009d96:	4b2f      	ldr	r3, [pc, #188]	; (8009e54 <tcp_rexmit+0xcc>)
 8009d98:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009d9c:	492e      	ldr	r1, [pc, #184]	; (8009e58 <tcp_rexmit+0xd0>)
 8009d9e:	482f      	ldr	r0, [pc, #188]	; (8009e5c <tcp_rexmit+0xd4>)
 8009da0:	f003 f9d0 	bl	800d144 <iprintf>

  if (pcb->unacked == NULL) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009dac:	f06f 0305 	mvn.w	r3, #5
 8009db0:	e04c      	b.n	8009e4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009db8:	68b8      	ldr	r0, [r7, #8]
 8009dba:	f7ff fe2d 	bl	8009a18 <tcp_output_segment_busy>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009dc4:	f06f 0305 	mvn.w	r3, #5
 8009dc8:	e040      	b.n	8009e4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	336c      	adds	r3, #108	; 0x6c
 8009dd6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009dd8:	e002      	b.n	8009de0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d011      	beq.n	8009e0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7f9 fd0a 	bl	800380a <lwip_htonl>
 8009df6:	4604      	mov	r4, r0
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7f9 fd03 	bl	800380a <lwip_htonl>
 8009e04:	4603      	mov	r3, r0
 8009e06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dbe6      	blt.n	8009dda <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d103      	bne.n	8009e2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e30:	2bff      	cmp	r3, #255	; 0xff
 8009e32:	d007      	beq.n	8009e44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd90      	pop	{r4, r7, pc}
 8009e54:	0800f8b0 	.word	0x0800f8b0
 8009e58:	0800ff50 	.word	0x0800ff50
 8009e5c:	0800f904 	.word	0x0800f904

08009e60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <tcp_rexmit_fast+0x1c>
 8009e6e:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <tcp_rexmit_fast+0xb8>)
 8009e70:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009e74:	4929      	ldr	r1, [pc, #164]	; (8009f1c <tcp_rexmit_fast+0xbc>)
 8009e76:	482a      	ldr	r0, [pc, #168]	; (8009f20 <tcp_rexmit_fast+0xc0>)
 8009e78:	f003 f964 	bl	800d144 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d045      	beq.n	8009f10 <tcp_rexmit_fast+0xb0>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	8b5b      	ldrh	r3, [r3, #26]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d13f      	bne.n	8009f10 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff ff79 	bl	8009d88 <tcp_rexmit>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d139      	bne.n	8009f10 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	bf28      	it	cs
 8009eac:	4613      	movcs	r3, r2
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	da00      	bge.n	8009eb6 <tcp_rexmit_fast+0x56>
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	105b      	asrs	r3, r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d206      	bcs.n	8009ee0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009eea:	4619      	mov	r1, r3
 8009eec:	0049      	lsls	r1, r1, #1
 8009eee:	440b      	add	r3, r1
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	4413      	add	r3, r2
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	8b5b      	ldrh	r3, [r3, #26]
 8009f00:	f043 0304 	orr.w	r3, r3, #4
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	0800f8b0 	.word	0x0800f8b0
 8009f1c:	0800ff68 	.word	0x0800ff68
 8009f20:	0800f904 	.word	0x0800f904

08009f24 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	607b      	str	r3, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	817b      	strh	r3, [r7, #10]
 8009f32:	4613      	mov	r3, r2
 8009f34:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009f36:	897a      	ldrh	r2, [r7, #10]
 8009f38:	893b      	ldrh	r3, [r7, #8]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	3314      	adds	r3, #20
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009f46:	4619      	mov	r1, r3
 8009f48:	2022      	movs	r0, #34	; 0x22
 8009f4a:	f7fa fc19 	bl	8004780 <pbuf_alloc>
 8009f4e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d04d      	beq.n	8009ff2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009f56:	897b      	ldrh	r3, [r7, #10]
 8009f58:	3313      	adds	r3, #19
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	8952      	ldrh	r2, [r2, #10]
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	db06      	blt.n	8009f70 <tcp_output_alloc_header_common+0x4c>
 8009f62:	4b26      	ldr	r3, [pc, #152]	; (8009ffc <tcp_output_alloc_header_common+0xd8>)
 8009f64:	f240 7223 	movw	r2, #1827	; 0x723
 8009f68:	4925      	ldr	r1, [pc, #148]	; (800a000 <tcp_output_alloc_header_common+0xdc>)
 8009f6a:	4826      	ldr	r0, [pc, #152]	; (800a004 <tcp_output_alloc_header_common+0xe0>)
 8009f6c:	f003 f8ea 	bl	800d144 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8009f76:	8c3b      	ldrh	r3, [r7, #32]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7f9 fc31 	bl	80037e0 <lwip_htons>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	461a      	mov	r2, r3
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7f9 fc29 	bl	80037e0 <lwip_htons>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	461a      	mov	r2, r3
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7f9 fc34 	bl	800380a <lwip_htonl>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009fa8:	897b      	ldrh	r3, [r7, #10]
 8009faa:	089b      	lsrs	r3, r3, #2
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	3305      	adds	r3, #5
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	031b      	lsls	r3, r3, #12
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7f9 fc0d 	bl	80037e0 <lwip_htons>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	461a      	mov	r2, r3
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7f9 fc05 	bl	80037e0 <lwip_htons>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	461a      	mov	r2, r3
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	741a      	strb	r2, [r3, #16]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2200      	movs	r2, #0
 8009fec:	749a      	strb	r2, [r3, #18]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8009ff2:	697b      	ldr	r3, [r7, #20]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	0800f8b0 	.word	0x0800f8b0
 800a000:	0800ff88 	.word	0x0800ff88
 800a004:	0800f904 	.word	0x0800f904

0800a008 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a008:	b5b0      	push	{r4, r5, r7, lr}
 800a00a:	b08a      	sub	sp, #40	; 0x28
 800a00c:	af04      	add	r7, sp, #16
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	607b      	str	r3, [r7, #4]
 800a012:	460b      	mov	r3, r1
 800a014:	817b      	strh	r3, [r7, #10]
 800a016:	4613      	mov	r3, r2
 800a018:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d106      	bne.n	800a02e <tcp_output_alloc_header+0x26>
 800a020:	4b15      	ldr	r3, [pc, #84]	; (800a078 <tcp_output_alloc_header+0x70>)
 800a022:	f240 7242 	movw	r2, #1858	; 0x742
 800a026:	4915      	ldr	r1, [pc, #84]	; (800a07c <tcp_output_alloc_header+0x74>)
 800a028:	4815      	ldr	r0, [pc, #84]	; (800a080 <tcp_output_alloc_header+0x78>)
 800a02a:	f003 f88b 	bl	800d144 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	8adb      	ldrh	r3, [r3, #22]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	8b12      	ldrh	r2, [r2, #24]
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a03e:	893d      	ldrh	r5, [r7, #8]
 800a040:	897c      	ldrh	r4, [r7, #10]
 800a042:	9103      	str	r1, [sp, #12]
 800a044:	2110      	movs	r1, #16
 800a046:	9102      	str	r1, [sp, #8]
 800a048:	9201      	str	r2, [sp, #4]
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	462a      	mov	r2, r5
 800a050:	4621      	mov	r1, r4
 800a052:	f7ff ff67 	bl	8009f24 <tcp_output_alloc_header_common>
 800a056:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d006      	beq.n	800a06c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a066:	441a      	add	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a06c:	697b      	ldr	r3, [r7, #20]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bdb0      	pop	{r4, r5, r7, pc}
 800a076:	bf00      	nop
 800a078:	0800f8b0 	.word	0x0800f8b0
 800a07c:	0800ffb8 	.word	0x0800ffb8
 800a080:	0800f904 	.word	0x0800f904

0800a084 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4611      	mov	r1, r2
 800a090:	461a      	mov	r2, r3
 800a092:	460b      	mov	r3, r1
 800a094:	71fb      	strb	r3, [r7, #7]
 800a096:	4613      	mov	r3, r2
 800a098:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d106      	bne.n	800a0b2 <tcp_output_fill_options+0x2e>
 800a0a4:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <tcp_output_fill_options+0x70>)
 800a0a6:	f240 7256 	movw	r2, #1878	; 0x756
 800a0aa:	4913      	ldr	r1, [pc, #76]	; (800a0f8 <tcp_output_fill_options+0x74>)
 800a0ac:	4813      	ldr	r0, [pc, #76]	; (800a0fc <tcp_output_fill_options+0x78>)
 800a0ae:	f003 f849 	bl	800d144 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	3314      	adds	r3, #20
 800a0bc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	f103 0214 	add.w	r2, r3, #20
 800a0c4:	8bfb      	ldrh	r3, [r7, #30]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	440b      	add	r3, r1
 800a0d4:	4413      	add	r3, r2
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d006      	beq.n	800a0ea <tcp_output_fill_options+0x66>
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <tcp_output_fill_options+0x70>)
 800a0de:	f240 7275 	movw	r2, #1909	; 0x775
 800a0e2:	4907      	ldr	r1, [pc, #28]	; (800a100 <tcp_output_fill_options+0x7c>)
 800a0e4:	4805      	ldr	r0, [pc, #20]	; (800a0fc <tcp_output_fill_options+0x78>)
 800a0e6:	f003 f82d 	bl	800d144 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a0ea:	bf00      	nop
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0800f8b0 	.word	0x0800f8b0
 800a0f8:	0800ffe0 	.word	0x0800ffe0
 800a0fc:	0800f904 	.word	0x0800f904
 800a100:	0800fed8 	.word	0x0800fed8

0800a104 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	; 0x28
 800a108:	af04      	add	r7, sp, #16
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d106      	bne.n	800a126 <tcp_output_control_segment+0x22>
 800a118:	4b1c      	ldr	r3, [pc, #112]	; (800a18c <tcp_output_control_segment+0x88>)
 800a11a:	f240 7287 	movw	r2, #1927	; 0x787
 800a11e:	491c      	ldr	r1, [pc, #112]	; (800a190 <tcp_output_control_segment+0x8c>)
 800a120:	481c      	ldr	r0, [pc, #112]	; (800a194 <tcp_output_control_segment+0x90>)
 800a122:	f003 f80f 	bl	800d144 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f7fe ff40 	bl	8008fb0 <tcp_route>
 800a130:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d102      	bne.n	800a13e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a138:	23fc      	movs	r3, #252	; 0xfc
 800a13a:	75fb      	strb	r3, [r7, #23]
 800a13c:	e01c      	b.n	800a178 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d006      	beq.n	800a152 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	7adb      	ldrb	r3, [r3, #11]
 800a148:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	7a9b      	ldrb	r3, [r3, #10]
 800a14e:	757b      	strb	r3, [r7, #21]
 800a150:	e003      	b.n	800a15a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a152:	23ff      	movs	r3, #255	; 0xff
 800a154:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a15a:	7dba      	ldrb	r2, [r7, #22]
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	9302      	str	r3, [sp, #8]
 800a160:	2306      	movs	r3, #6
 800a162:	9301      	str	r3, [sp, #4]
 800a164:	7d7b      	ldrb	r3, [r7, #21]
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	4613      	mov	r3, r2
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	68b8      	ldr	r0, [r7, #8]
 800a170:	f001 ff70 	bl	800c054 <ip4_output_if>
 800a174:	4603      	mov	r3, r0
 800a176:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a178:	68b8      	ldr	r0, [r7, #8]
 800a17a:	f7fa fde5 	bl	8004d48 <pbuf_free>
  return err;
 800a17e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	0800f8b0 	.word	0x0800f8b0
 800a190:	08010008 	.word	0x08010008
 800a194:	0800f904 	.word	0x0800f904

0800a198 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a198:	b590      	push	{r4, r7, lr}
 800a19a:	b08b      	sub	sp, #44	; 0x2c
 800a19c:	af04      	add	r7, sp, #16
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <tcp_rst+0x22>
 800a1ac:	4b1f      	ldr	r3, [pc, #124]	; (800a22c <tcp_rst+0x94>)
 800a1ae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a1b2:	491f      	ldr	r1, [pc, #124]	; (800a230 <tcp_rst+0x98>)
 800a1b4:	481f      	ldr	r0, [pc, #124]	; (800a234 <tcp_rst+0x9c>)
 800a1b6:	f002 ffc5 	bl	800d144 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <tcp_rst+0x36>
 800a1c0:	4b1a      	ldr	r3, [pc, #104]	; (800a22c <tcp_rst+0x94>)
 800a1c2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a1c6:	491c      	ldr	r1, [pc, #112]	; (800a238 <tcp_rst+0xa0>)
 800a1c8:	481a      	ldr	r0, [pc, #104]	; (800a234 <tcp_rst+0x9c>)
 800a1ca:	f002 ffbb 	bl	800d144 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a1d2:	f246 0308 	movw	r3, #24584	; 0x6008
 800a1d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	b29c      	uxth	r4, r3
 800a1dc:	68b8      	ldr	r0, [r7, #8]
 800a1de:	f7f9 fb14 	bl	800380a <lwip_htonl>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	8abb      	ldrh	r3, [r7, #20]
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	2314      	movs	r3, #20
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff fe92 	bl	8009f24 <tcp_output_alloc_header_common>
 800a200:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00c      	beq.n	800a222 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	2200      	movs	r2, #0
 800a20c:	6939      	ldr	r1, [r7, #16]
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff ff38 	bl	800a084 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	6939      	ldr	r1, [r7, #16]
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f7ff ff72 	bl	800a104 <tcp_output_control_segment>
 800a220:	e000      	b.n	800a224 <tcp_rst+0x8c>
    return;
 800a222:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a224:	371c      	adds	r7, #28
 800a226:	46bd      	mov	sp, r7
 800a228:	bd90      	pop	{r4, r7, pc}
 800a22a:	bf00      	nop
 800a22c:	0800f8b0 	.word	0x0800f8b0
 800a230:	08010034 	.word	0x08010034
 800a234:	0800f904 	.word	0x0800f904
 800a238:	08010050 	.word	0x08010050

0800a23c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a23c:	b590      	push	{r4, r7, lr}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <tcp_send_empty_ack+0x24>
 800a252:	4b28      	ldr	r3, [pc, #160]	; (800a2f4 <tcp_send_empty_ack+0xb8>)
 800a254:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a258:	4927      	ldr	r1, [pc, #156]	; (800a2f8 <tcp_send_empty_ack+0xbc>)
 800a25a:	4828      	ldr	r0, [pc, #160]	; (800a2fc <tcp_send_empty_ack+0xc0>)
 800a25c:	f002 ff72 	bl	800d144 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	b2db      	uxtb	r3, r3
 800a266:	f003 0304 	and.w	r3, r3, #4
 800a26a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a26c:	7d7b      	ldrb	r3, [r7, #21]
 800a26e:	b29c      	uxth	r4, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a274:	4618      	mov	r0, r3
 800a276:	f7f9 fac8 	bl	800380a <lwip_htonl>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2200      	movs	r2, #0
 800a27e:	4621      	mov	r1, r4
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff fec1 	bl	800a008 <tcp_output_alloc_header>
 800a286:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d109      	bne.n	800a2a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8b5b      	ldrh	r3, [r3, #26]
 800a292:	f043 0303 	orr.w	r3, r3, #3
 800a296:	b29a      	uxth	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a29c:	f06f 0301 	mvn.w	r3, #1
 800a2a0:	e023      	b.n	800a2ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a2a2:	7dbb      	ldrb	r3, [r7, #22]
 800a2a4:	7dfa      	ldrb	r2, [r7, #23]
 800a2a6:	6939      	ldr	r1, [r7, #16]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff feeb 	bl	800a084 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	6939      	ldr	r1, [r7, #16]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff ff24 	bl	800a104 <tcp_output_control_segment>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a2c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	8b5b      	ldrh	r3, [r3, #26]
 800a2cc:	f043 0303 	orr.w	r3, r3, #3
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	835a      	strh	r2, [r3, #26]
 800a2d6:	e006      	b.n	800a2e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	8b5b      	ldrh	r3, [r3, #26]
 800a2dc:	f023 0303 	bic.w	r3, r3, #3
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd90      	pop	{r4, r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	0800f8b0 	.word	0x0800f8b0
 800a2f8:	0801006c 	.word	0x0801006c
 800a2fc:	0800f904 	.word	0x0800f904

0800a300 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a300:	b590      	push	{r4, r7, lr}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d106      	bne.n	800a320 <tcp_keepalive+0x20>
 800a312:	4b18      	ldr	r3, [pc, #96]	; (800a374 <tcp_keepalive+0x74>)
 800a314:	f640 0224 	movw	r2, #2084	; 0x824
 800a318:	4917      	ldr	r1, [pc, #92]	; (800a378 <tcp_keepalive+0x78>)
 800a31a:	4818      	ldr	r0, [pc, #96]	; (800a37c <tcp_keepalive+0x7c>)
 800a31c:	f002 ff12 	bl	800d144 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	b29c      	uxth	r4, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a328:	3b01      	subs	r3, #1
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f9 fa6d 	bl	800380a <lwip_htonl>
 800a330:	4603      	mov	r3, r0
 800a332:	2200      	movs	r2, #0
 800a334:	4621      	mov	r1, r4
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7ff fe66 	bl	800a008 <tcp_output_alloc_header>
 800a33c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d102      	bne.n	800a34a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a348:	e010      	b.n	800a36c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	2200      	movs	r2, #0
 800a34e:	6939      	ldr	r1, [r7, #16]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff fe97 	bl	800a084 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3304      	adds	r3, #4
 800a35c:	6939      	ldr	r1, [r7, #16]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff fed0 	bl	800a104 <tcp_output_control_segment>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	371c      	adds	r7, #28
 800a370:	46bd      	mov	sp, r7
 800a372:	bd90      	pop	{r4, r7, pc}
 800a374:	0800f8b0 	.word	0x0800f8b0
 800a378:	0801008c 	.word	0x0801008c
 800a37c:	0800f904 	.word	0x0800f904

0800a380 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a380:	b590      	push	{r4, r7, lr}
 800a382:	b08b      	sub	sp, #44	; 0x2c
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d106      	bne.n	800a3a2 <tcp_zero_window_probe+0x22>
 800a394:	4b4c      	ldr	r3, [pc, #304]	; (800a4c8 <tcp_zero_window_probe+0x148>)
 800a396:	f640 024f 	movw	r2, #2127	; 0x84f
 800a39a:	494c      	ldr	r1, [pc, #304]	; (800a4cc <tcp_zero_window_probe+0x14c>)
 800a39c:	484c      	ldr	r0, [pc, #304]	; (800a4d0 <tcp_zero_window_probe+0x150>)
 800a39e:	f002 fed1 	bl	800d144 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e086      	b.n	800a4c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a3b8:	2bff      	cmp	r3, #255	; 0xff
 800a3ba:	d007      	beq.n	800a3cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	899b      	ldrh	r3, [r3, #12]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7f9 fa03 	bl	80037e0 <lwip_htons>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d005      	beq.n	800a3f2 <tcp_zero_window_probe+0x72>
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	891b      	ldrh	r3, [r3, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <tcp_zero_window_probe+0x72>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e000      	b.n	800a3f4 <tcp_zero_window_probe+0x74>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a3f6:	7ffb      	ldrb	r3, [r7, #31]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bf0c      	ite	eq
 800a3fc:	2301      	moveq	r3, #1
 800a3fe:	2300      	movne	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a408:	b299      	uxth	r1, r3
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	8bba      	ldrh	r2, [r7, #28]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff fdf8 	bl	800a008 <tcp_output_alloc_header>
 800a418:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a424:	e04c      	b.n	800a4c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a42c:	7ffb      	ldrb	r3, [r7, #31]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d011      	beq.n	800a456 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	899b      	ldrh	r3, [r3, #12]
 800a436:	b29b      	uxth	r3, r3
 800a438:	b21b      	sxth	r3, r3
 800a43a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a43e:	b21c      	sxth	r4, r3
 800a440:	2011      	movs	r0, #17
 800a442:	f7f9 f9cd 	bl	80037e0 <lwip_htons>
 800a446:	4603      	mov	r3, r0
 800a448:	b21b      	sxth	r3, r3
 800a44a:	4323      	orrs	r3, r4
 800a44c:	b21b      	sxth	r3, r3
 800a44e:	b29a      	uxth	r2, r3
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	819a      	strh	r2, [r3, #12]
 800a454:	e010      	b.n	800a478 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	3314      	adds	r3, #20
 800a45c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	6858      	ldr	r0, [r3, #4]
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	891a      	ldrh	r2, [r3, #8]
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	891b      	ldrh	r3, [r3, #8]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	b29b      	uxth	r3, r3
 800a470:	2201      	movs	r2, #1
 800a472:	6939      	ldr	r1, [r7, #16]
 800a474:	f7fa fe52 	bl	800511c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f9 f9c3 	bl	800380a <lwip_htonl>
 800a484:	4603      	mov	r3, r0
 800a486:	3301      	adds	r3, #1
 800a488:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	da02      	bge.n	800a49c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	69b9      	ldr	r1, [r7, #24]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff fded 	bl	800a084 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	69b9      	ldr	r1, [r7, #24]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff fe26 	bl	800a104 <tcp_output_control_segment>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a4bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	372c      	adds	r7, #44	; 0x2c
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd90      	pop	{r4, r7, pc}
 800a4c8:	0800f8b0 	.word	0x0800f8b0
 800a4cc:	080100a8 	.word	0x080100a8
 800a4d0:	0800f904 	.word	0x0800f904

0800a4d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a4dc:	f7fa ff0c 	bl	80052f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <tcpip_tcp_timer+0x38>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d103      	bne.n	800a4f0 <tcpip_tcp_timer+0x1c>
 800a4e8:	4b09      	ldr	r3, [pc, #36]	; (800a510 <tcpip_tcp_timer+0x3c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d005      	beq.n	800a4fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4908      	ldr	r1, [pc, #32]	; (800a514 <tcpip_tcp_timer+0x40>)
 800a4f4:	20fa      	movs	r0, #250	; 0xfa
 800a4f6:	f000 f8f3 	bl	800a6e0 <sys_timeout>
 800a4fa:	e003      	b.n	800a504 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <tcpip_tcp_timer+0x44>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]
  }
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	2000674c 	.word	0x2000674c
 800a510:	20006750 	.word	0x20006750
 800a514:	0800a4d5 	.word	0x0800a4d5
 800a518:	20006798 	.word	0x20006798

0800a51c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a520:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <tcp_timer_needed+0x30>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10f      	bne.n	800a548 <tcp_timer_needed+0x2c>
 800a528:	4b09      	ldr	r3, [pc, #36]	; (800a550 <tcp_timer_needed+0x34>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d103      	bne.n	800a538 <tcp_timer_needed+0x1c>
 800a530:	4b08      	ldr	r3, [pc, #32]	; (800a554 <tcp_timer_needed+0x38>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d007      	beq.n	800a548 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a538:	4b04      	ldr	r3, [pc, #16]	; (800a54c <tcp_timer_needed+0x30>)
 800a53a:	2201      	movs	r2, #1
 800a53c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a53e:	2200      	movs	r2, #0
 800a540:	4905      	ldr	r1, [pc, #20]	; (800a558 <tcp_timer_needed+0x3c>)
 800a542:	20fa      	movs	r0, #250	; 0xfa
 800a544:	f000 f8cc 	bl	800a6e0 <sys_timeout>
  }
}
 800a548:	bf00      	nop
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20006798 	.word	0x20006798
 800a550:	2000674c 	.word	0x2000674c
 800a554:	20006750 	.word	0x20006750
 800a558:	0800a4d5 	.word	0x0800a4d5

0800a55c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a568:	2006      	movs	r0, #6
 800a56a:	f7f9 fd8f 	bl	800408c <memp_malloc>
 800a56e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d109      	bne.n	800a58a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d151      	bne.n	800a620 <sys_timeout_abs+0xc4>
 800a57c:	4b2a      	ldr	r3, [pc, #168]	; (800a628 <sys_timeout_abs+0xcc>)
 800a57e:	22be      	movs	r2, #190	; 0xbe
 800a580:	492a      	ldr	r1, [pc, #168]	; (800a62c <sys_timeout_abs+0xd0>)
 800a582:	482b      	ldr	r0, [pc, #172]	; (800a630 <sys_timeout_abs+0xd4>)
 800a584:	f002 fdde 	bl	800d144 <iprintf>
    return;
 800a588:	e04a      	b.n	800a620 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2200      	movs	r2, #0
 800a58e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a5a2:	4b24      	ldr	r3, [pc, #144]	; (800a634 <sys_timeout_abs+0xd8>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d103      	bne.n	800a5b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a5aa:	4a22      	ldr	r2, [pc, #136]	; (800a634 <sys_timeout_abs+0xd8>)
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	6013      	str	r3, [r2, #0]
    return;
 800a5b0:	e037      	b.n	800a622 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	4b1f      	ldr	r3, [pc, #124]	; (800a634 <sys_timeout_abs+0xd8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	0fdb      	lsrs	r3, r3, #31
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d007      	beq.n	800a5da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a5ca:	4b1a      	ldr	r3, [pc, #104]	; (800a634 <sys_timeout_abs+0xd8>)
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a5d2:	4a18      	ldr	r2, [pc, #96]	; (800a634 <sys_timeout_abs+0xd8>)
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	e023      	b.n	800a622 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <sys_timeout_abs+0xd8>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e01a      	b.n	800a618 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00b      	beq.n	800a602 <sys_timeout_abs+0xa6>
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	0fdb      	lsrs	r3, r3, #31
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d007      	beq.n	800a612 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	601a      	str	r2, [r3, #0]
        break;
 800a610:	e007      	b.n	800a622 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e1      	bne.n	800a5e2 <sys_timeout_abs+0x86>
 800a61e:	e000      	b.n	800a622 <sys_timeout_abs+0xc6>
    return;
 800a620:	bf00      	nop
      }
    }
  }
}
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	080100cc 	.word	0x080100cc
 800a62c:	08010100 	.word	0x08010100
 800a630:	08010140 	.word	0x08010140
 800a634:	20006790 	.word	0x20006790

0800a638 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	4798      	blx	r3

  now = sys_now();
 800a64a:	f7f9 f83b 	bl	80036c4 <sys_now>
 800a64e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <lwip_cyclic_timer+0x5c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4413      	add	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	0fdb      	lsrs	r3, r3, #31
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	4413      	add	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	4907      	ldr	r1, [pc, #28]	; (800a698 <lwip_cyclic_timer+0x60>)
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff ff6e 	bl	800a55c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a680:	e004      	b.n	800a68c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	4904      	ldr	r1, [pc, #16]	; (800a698 <lwip_cyclic_timer+0x60>)
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f7ff ff68 	bl	800a55c <sys_timeout_abs>
}
 800a68c:	bf00      	nop
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20006794 	.word	0x20006794
 800a698:	0800a639 	.word	0x0800a639

0800a69c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	607b      	str	r3, [r7, #4]
 800a6a6:	e00e      	b.n	800a6c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a6a8:	4a0b      	ldr	r2, [pc, #44]	; (800a6d8 <sys_timeouts_init+0x3c>)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	4a08      	ldr	r2, [pc, #32]	; (800a6d8 <sys_timeouts_init+0x3c>)
 800a6b6:	4413      	add	r3, r2
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4908      	ldr	r1, [pc, #32]	; (800a6dc <sys_timeouts_init+0x40>)
 800a6bc:	f000 f810 	bl	800a6e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	607b      	str	r3, [r7, #4]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d9ed      	bls.n	800a6a8 <sys_timeouts_init+0xc>
  }
}
 800a6cc:	bf00      	nop
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	08010ca4 	.word	0x08010ca4
 800a6dc:	0800a639 	.word	0x0800a639

0800a6e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f2:	d306      	bcc.n	800a702 <sys_timeout+0x22>
 800a6f4:	4b0a      	ldr	r3, [pc, #40]	; (800a720 <sys_timeout+0x40>)
 800a6f6:	f240 1229 	movw	r2, #297	; 0x129
 800a6fa:	490a      	ldr	r1, [pc, #40]	; (800a724 <sys_timeout+0x44>)
 800a6fc:	480a      	ldr	r0, [pc, #40]	; (800a728 <sys_timeout+0x48>)
 800a6fe:	f002 fd21 	bl	800d144 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a702:	f7f8 ffdf 	bl	80036c4 <sys_now>
 800a706:	4602      	mov	r2, r0
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4413      	add	r3, r2
 800a70c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	68b9      	ldr	r1, [r7, #8]
 800a712:	6978      	ldr	r0, [r7, #20]
 800a714:	f7ff ff22 	bl	800a55c <sys_timeout_abs>
#endif
}
 800a718:	bf00      	nop
 800a71a:	3718      	adds	r7, #24
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	080100cc 	.word	0x080100cc
 800a724:	08010168 	.word	0x08010168
 800a728:	08010140 	.word	0x08010140

0800a72c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a732:	f7f8 ffc7 	bl	80036c4 <sys_now>
 800a736:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800a738:	4b1a      	ldr	r3, [pc, #104]	; (800a7a4 <sys_check_timeouts+0x78>)
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <sys_check_timeouts+0x1a>
 800a742:	f7f9 ffc7 	bl	80046d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800a746:	4b18      	ldr	r3, [pc, #96]	; (800a7a8 <sys_check_timeouts+0x7c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d022      	beq.n	800a798 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	0fdb      	lsrs	r3, r3, #31
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d11a      	bne.n	800a79c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a0f      	ldr	r2, [pc, #60]	; (800a7a8 <sys_check_timeouts+0x7c>)
 800a76c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	4a0b      	ldr	r2, [pc, #44]	; (800a7ac <sys_check_timeouts+0x80>)
 800a780:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	2006      	movs	r0, #6
 800a786:	f7f9 fccd 	bl	8004124 <memp_free>
    if (handler != NULL) {
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0d3      	beq.n	800a738 <sys_check_timeouts+0xc>
      handler(arg);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6838      	ldr	r0, [r7, #0]
 800a794:	4798      	blx	r3
  do {
 800a796:	e7cf      	b.n	800a738 <sys_check_timeouts+0xc>
      return;
 800a798:	bf00      	nop
 800a79a:	e000      	b.n	800a79e <sys_check_timeouts+0x72>
      return;
 800a79c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	2000673d 	.word	0x2000673d
 800a7a8:	20006790 	.word	0x20006790
 800a7ac:	20006794 	.word	0x20006794

0800a7b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a7b4:	f002 fcde 	bl	800d174 <rand>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	4b01      	ldr	r3, [pc, #4]	; (800a7d0 <udp_init+0x20>)
 800a7ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a7cc:	bf00      	nop
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000010 	.word	0x20000010

0800a7d4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d105      	bne.n	800a7f4 <udp_input_local_match+0x20>
 800a7e8:	4b27      	ldr	r3, [pc, #156]	; (800a888 <udp_input_local_match+0xb4>)
 800a7ea:	2287      	movs	r2, #135	; 0x87
 800a7ec:	4927      	ldr	r1, [pc, #156]	; (800a88c <udp_input_local_match+0xb8>)
 800a7ee:	4828      	ldr	r0, [pc, #160]	; (800a890 <udp_input_local_match+0xbc>)
 800a7f0:	f002 fca8 	bl	800d144 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d105      	bne.n	800a806 <udp_input_local_match+0x32>
 800a7fa:	4b23      	ldr	r3, [pc, #140]	; (800a888 <udp_input_local_match+0xb4>)
 800a7fc:	2288      	movs	r2, #136	; 0x88
 800a7fe:	4925      	ldr	r1, [pc, #148]	; (800a894 <udp_input_local_match+0xc0>)
 800a800:	4823      	ldr	r0, [pc, #140]	; (800a890 <udp_input_local_match+0xbc>)
 800a802:	f002 fc9f 	bl	800d144 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	7a1b      	ldrb	r3, [r3, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00b      	beq.n	800a826 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	7a1a      	ldrb	r2, [r3, #8]
 800a812:	4b21      	ldr	r3, [pc, #132]	; (800a898 <udp_input_local_match+0xc4>)
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a81a:	3301      	adds	r3, #1
 800a81c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a81e:	429a      	cmp	r2, r3
 800a820:	d001      	beq.n	800a826 <udp_input_local_match+0x52>
    return 0;
 800a822:	2300      	movs	r3, #0
 800a824:	e02b      	b.n	800a87e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d018      	beq.n	800a85e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d013      	beq.n	800a85a <udp_input_local_match+0x86>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00f      	beq.n	800a85a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a83a:	4b17      	ldr	r3, [pc, #92]	; (800a898 <udp_input_local_match+0xc4>)
 800a83c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a83e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a842:	d00a      	beq.n	800a85a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	4b13      	ldr	r3, [pc, #76]	; (800a898 <udp_input_local_match+0xc4>)
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	405a      	eors	r2, r3
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	3308      	adds	r3, #8
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a856:	2b00      	cmp	r3, #0
 800a858:	d110      	bne.n	800a87c <udp_input_local_match+0xa8>
          return 1;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e00f      	b.n	800a87e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d009      	beq.n	800a878 <udp_input_local_match+0xa4>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <udp_input_local_match+0xa4>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b09      	ldr	r3, [pc, #36]	; (800a898 <udp_input_local_match+0xc4>)
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	429a      	cmp	r2, r3
 800a876:	d101      	bne.n	800a87c <udp_input_local_match+0xa8>
        return 1;
 800a878:	2301      	movs	r3, #1
 800a87a:	e000      	b.n	800a87e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	080101b4 	.word	0x080101b4
 800a88c:	080101e4 	.word	0x080101e4
 800a890:	08010208 	.word	0x08010208
 800a894:	08010230 	.word	0x08010230
 800a898:	200031d0 	.word	0x200031d0

0800a89c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a89c:	b590      	push	{r4, r7, lr}
 800a89e:	b08d      	sub	sp, #52	; 0x34
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d105      	bne.n	800a8bc <udp_input+0x20>
 800a8b0:	4b7c      	ldr	r3, [pc, #496]	; (800aaa4 <udp_input+0x208>)
 800a8b2:	22cf      	movs	r2, #207	; 0xcf
 800a8b4:	497c      	ldr	r1, [pc, #496]	; (800aaa8 <udp_input+0x20c>)
 800a8b6:	487d      	ldr	r0, [pc, #500]	; (800aaac <udp_input+0x210>)
 800a8b8:	f002 fc44 	bl	800d144 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d105      	bne.n	800a8ce <udp_input+0x32>
 800a8c2:	4b78      	ldr	r3, [pc, #480]	; (800aaa4 <udp_input+0x208>)
 800a8c4:	22d0      	movs	r2, #208	; 0xd0
 800a8c6:	497a      	ldr	r1, [pc, #488]	; (800aab0 <udp_input+0x214>)
 800a8c8:	4878      	ldr	r0, [pc, #480]	; (800aaac <udp_input+0x210>)
 800a8ca:	f002 fc3b 	bl	800d144 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	895b      	ldrh	r3, [r3, #10]
 800a8d2:	2b07      	cmp	r3, #7
 800a8d4:	d803      	bhi.n	800a8de <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7fa fa36 	bl	8004d48 <pbuf_free>
    goto end;
 800a8dc:	e0de      	b.n	800aa9c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a8e4:	4b73      	ldr	r3, [pc, #460]	; (800aab4 <udp_input+0x218>)
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	4a72      	ldr	r2, [pc, #456]	; (800aab4 <udp_input+0x218>)
 800a8ea:	6812      	ldr	r2, [r2, #0]
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f001 fc88 	bl	800c204 <ip4_addr_isbroadcast_u32>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7f8 ff6e 	bl	80037e0 <lwip_htons>
 800a904:	4603      	mov	r3, r0
 800a906:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	885b      	ldrh	r3, [r3, #2]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f8 ff66 	bl	80037e0 <lwip_htons>
 800a914:	4603      	mov	r3, r0
 800a916:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a918:	2300      	movs	r3, #0
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a91c:	2300      	movs	r3, #0
 800a91e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a920:	2300      	movs	r3, #0
 800a922:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a924:	4b64      	ldr	r3, [pc, #400]	; (800aab8 <udp_input+0x21c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
 800a92a:	e054      	b.n	800a9d6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	8a5b      	ldrh	r3, [r3, #18]
 800a930:	89fa      	ldrh	r2, [r7, #14]
 800a932:	429a      	cmp	r2, r3
 800a934:	d14a      	bne.n	800a9cc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a936:	7cfb      	ldrb	r3, [r7, #19]
 800a938:	461a      	mov	r2, r3
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a93e:	f7ff ff49 	bl	800a7d4 <udp_input_local_match>
 800a942:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a944:	2b00      	cmp	r3, #0
 800a946:	d041      	beq.n	800a9cc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	7c1b      	ldrb	r3, [r3, #16]
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	d11d      	bne.n	800a990 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	61fb      	str	r3, [r7, #28]
 800a95e:	e017      	b.n	800a990 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800a960:	7cfb      	ldrb	r3, [r7, #19]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d014      	beq.n	800a990 <udp_input+0xf4>
 800a966:	4b53      	ldr	r3, [pc, #332]	; (800aab4 <udp_input+0x218>)
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a96e:	d10f      	bne.n	800a990 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	3304      	adds	r3, #4
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d008      	beq.n	800a990 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	3304      	adds	r3, #4
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d101      	bne.n	800a990 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	8a9b      	ldrh	r3, [r3, #20]
 800a994:	8a3a      	ldrh	r2, [r7, #16]
 800a996:	429a      	cmp	r2, r3
 800a998:	d118      	bne.n	800a9cc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d005      	beq.n	800a9ae <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	4b43      	ldr	r3, [pc, #268]	; (800aab4 <udp_input+0x218>)
 800a9a8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d10e      	bne.n	800a9cc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d014      	beq.n	800a9de <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	68da      	ldr	r2, [r3, #12]
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a9bc:	4b3e      	ldr	r3, [pc, #248]	; (800aab8 <udp_input+0x21c>)
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a9c4:	4a3c      	ldr	r2, [pc, #240]	; (800aab8 <udp_input+0x21c>)
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a9ca:	e008      	b.n	800a9de <udp_input+0x142>
      }
    }

    prev = pcb;
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1a7      	bne.n	800a92c <udp_input+0x90>
 800a9dc:	e000      	b.n	800a9e0 <udp_input+0x144>
        break;
 800a9de:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <udp_input+0x14e>
    pcb = uncon_pcb;
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d002      	beq.n	800a9f6 <udp_input+0x15a>
    for_us = 1;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	76fb      	strb	r3, [r7, #27]
 800a9f4:	e00a      	b.n	800aa0c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	4b2d      	ldr	r3, [pc, #180]	; (800aab4 <udp_input+0x218>)
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	bf0c      	ite	eq
 800aa04:	2301      	moveq	r3, #1
 800aa06:	2300      	movne	r3, #0
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800aa0c:	7efb      	ldrb	r3, [r7, #27]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d041      	beq.n	800aa96 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800aa12:	2108      	movs	r1, #8
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7fa f911 	bl	8004c3c <pbuf_remove_header>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00a      	beq.n	800aa36 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800aa20:	4b20      	ldr	r3, [pc, #128]	; (800aaa4 <udp_input+0x208>)
 800aa22:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800aa26:	4925      	ldr	r1, [pc, #148]	; (800aabc <udp_input+0x220>)
 800aa28:	4820      	ldr	r0, [pc, #128]	; (800aaac <udp_input+0x210>)
 800aa2a:	f002 fb8b 	bl	800d144 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7fa f98a 	bl	8004d48 <pbuf_free>
      goto end;
 800aa34:	e032      	b.n	800aa9c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d012      	beq.n	800aa62 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00a      	beq.n	800aa5a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	699c      	ldr	r4, [r3, #24]
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	69d8      	ldr	r0, [r3, #28]
 800aa4c:	8a3b      	ldrh	r3, [r7, #16]
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	4b1b      	ldr	r3, [pc, #108]	; (800aac0 <udp_input+0x224>)
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa56:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800aa58:	e021      	b.n	800aa9e <udp_input+0x202>
        pbuf_free(p);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7fa f974 	bl	8004d48 <pbuf_free>
        goto end;
 800aa60:	e01c      	b.n	800aa9c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800aa62:	7cfb      	ldrb	r3, [r7, #19]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d112      	bne.n	800aa8e <udp_input+0x1f2>
 800aa68:	4b12      	ldr	r3, [pc, #72]	; (800aab4 <udp_input+0x218>)
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa70:	2be0      	cmp	r3, #224	; 0xe0
 800aa72:	d00c      	beq.n	800aa8e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800aa74:	4b0f      	ldr	r3, [pc, #60]	; (800aab4 <udp_input+0x218>)
 800aa76:	899b      	ldrh	r3, [r3, #12]
 800aa78:	3308      	adds	r3, #8
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	b21b      	sxth	r3, r3
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7fa f94e 	bl	8004d22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800aa86:	2103      	movs	r1, #3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 f89b 	bl	800bbc4 <icmp_dest_unreach>
      pbuf_free(p);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7fa f95a 	bl	8004d48 <pbuf_free>
  return;
 800aa94:	e003      	b.n	800aa9e <udp_input+0x202>
    pbuf_free(p);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7fa f956 	bl	8004d48 <pbuf_free>
  return;
 800aa9c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800aa9e:	372c      	adds	r7, #44	; 0x2c
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd90      	pop	{r4, r7, pc}
 800aaa4:	080101b4 	.word	0x080101b4
 800aaa8:	08010258 	.word	0x08010258
 800aaac:	08010208 	.word	0x08010208
 800aab0:	08010270 	.word	0x08010270
 800aab4:	200031d0 	.word	0x200031d0
 800aab8:	2000679c 	.word	0x2000679c
 800aabc:	0801028c 	.word	0x0801028c
 800aac0:	200031e0 	.word	0x200031e0

0800aac4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d01e      	beq.n	800ab12 <udp_netif_ip_addr_changed+0x4e>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d01a      	beq.n	800ab12 <udp_netif_ip_addr_changed+0x4e>
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d017      	beq.n	800ab12 <udp_netif_ip_addr_changed+0x4e>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d013      	beq.n	800ab12 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aaea:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <udp_netif_ip_addr_changed+0x5c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	e00c      	b.n	800ab0c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d103      	bne.n	800ab06 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1ef      	bne.n	800aaf2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ab12:	bf00      	nop
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	2000679c 	.word	0x2000679c

0800ab24 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ab2c:	4915      	ldr	r1, [pc, #84]	; (800ab84 <etharp_free_entry+0x60>)
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	4613      	mov	r3, r2
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	4413      	add	r3, r2
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	440b      	add	r3, r1
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d013      	beq.n	800ab68 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ab40:	4910      	ldr	r1, [pc, #64]	; (800ab84 <etharp_free_entry+0x60>)
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	4613      	mov	r3, r2
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	4413      	add	r3, r2
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	440b      	add	r3, r1
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fa f8f9 	bl	8004d48 <pbuf_free>
    arp_table[i].q = NULL;
 800ab56:	490b      	ldr	r1, [pc, #44]	; (800ab84 <etharp_free_entry+0x60>)
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	4413      	add	r3, r2
 800ab60:	00db      	lsls	r3, r3, #3
 800ab62:	440b      	add	r3, r1
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ab68:	4906      	ldr	r1, [pc, #24]	; (800ab84 <etharp_free_entry+0x60>)
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	4413      	add	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	440b      	add	r3, r1
 800ab76:	3314      	adds	r3, #20
 800ab78:	2200      	movs	r2, #0
 800ab7a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	200067a0 	.word	0x200067a0

0800ab88 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ab8e:	2300      	movs	r3, #0
 800ab90:	607b      	str	r3, [r7, #4]
 800ab92:	e096      	b.n	800acc2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ab94:	494f      	ldr	r1, [pc, #316]	; (800acd4 <etharp_tmr+0x14c>)
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	440b      	add	r3, r1
 800aba2:	3314      	adds	r3, #20
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 8086 	beq.w	800acbc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800abb0:	4948      	ldr	r1, [pc, #288]	; (800acd4 <etharp_tmr+0x14c>)
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	4613      	mov	r3, r2
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	4413      	add	r3, r2
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	440b      	add	r3, r1
 800abbe:	3312      	adds	r3, #18
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	3301      	adds	r3, #1
 800abc4:	b298      	uxth	r0, r3
 800abc6:	4943      	ldr	r1, [pc, #268]	; (800acd4 <etharp_tmr+0x14c>)
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	4613      	mov	r3, r2
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	4413      	add	r3, r2
 800abd0:	00db      	lsls	r3, r3, #3
 800abd2:	440b      	add	r3, r1
 800abd4:	3312      	adds	r3, #18
 800abd6:	4602      	mov	r2, r0
 800abd8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800abda:	493e      	ldr	r1, [pc, #248]	; (800acd4 <etharp_tmr+0x14c>)
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	4613      	mov	r3, r2
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	4413      	add	r3, r2
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	440b      	add	r3, r1
 800abe8:	3312      	adds	r3, #18
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800abf0:	d215      	bcs.n	800ac1e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800abf2:	4938      	ldr	r1, [pc, #224]	; (800acd4 <etharp_tmr+0x14c>)
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	4413      	add	r3, r2
 800abfc:	00db      	lsls	r3, r3, #3
 800abfe:	440b      	add	r3, r1
 800ac00:	3314      	adds	r3, #20
 800ac02:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d10e      	bne.n	800ac26 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ac08:	4932      	ldr	r1, [pc, #200]	; (800acd4 <etharp_tmr+0x14c>)
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	4413      	add	r3, r2
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	440b      	add	r3, r1
 800ac16:	3312      	adds	r3, #18
 800ac18:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	d903      	bls.n	800ac26 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff ff80 	bl	800ab24 <etharp_free_entry>
 800ac24:	e04a      	b.n	800acbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ac26:	492b      	ldr	r1, [pc, #172]	; (800acd4 <etharp_tmr+0x14c>)
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	005b      	lsls	r3, r3, #1
 800ac2e:	4413      	add	r3, r2
 800ac30:	00db      	lsls	r3, r3, #3
 800ac32:	440b      	add	r3, r1
 800ac34:	3314      	adds	r3, #20
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d10a      	bne.n	800ac52 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ac3c:	4925      	ldr	r1, [pc, #148]	; (800acd4 <etharp_tmr+0x14c>)
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	4613      	mov	r3, r2
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	4413      	add	r3, r2
 800ac46:	00db      	lsls	r3, r3, #3
 800ac48:	440b      	add	r3, r1
 800ac4a:	3314      	adds	r3, #20
 800ac4c:	2204      	movs	r2, #4
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	e034      	b.n	800acbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ac52:	4920      	ldr	r1, [pc, #128]	; (800acd4 <etharp_tmr+0x14c>)
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	4613      	mov	r3, r2
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	4413      	add	r3, r2
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	440b      	add	r3, r1
 800ac60:	3314      	adds	r3, #20
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d10a      	bne.n	800ac7e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ac68:	491a      	ldr	r1, [pc, #104]	; (800acd4 <etharp_tmr+0x14c>)
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	4413      	add	r3, r2
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	440b      	add	r3, r1
 800ac76:	3314      	adds	r3, #20
 800ac78:	2202      	movs	r2, #2
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	e01e      	b.n	800acbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ac7e:	4915      	ldr	r1, [pc, #84]	; (800acd4 <etharp_tmr+0x14c>)
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	4413      	add	r3, r2
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3314      	adds	r3, #20
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d113      	bne.n	800acbc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ac94:	490f      	ldr	r1, [pc, #60]	; (800acd4 <etharp_tmr+0x14c>)
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	4413      	add	r3, r2
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	440b      	add	r3, r1
 800aca2:	3308      	adds	r3, #8
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	4613      	mov	r3, r2
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	4413      	add	r3, r2
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	4a08      	ldr	r2, [pc, #32]	; (800acd4 <etharp_tmr+0x14c>)
 800acb2:	4413      	add	r3, r2
 800acb4:	3304      	adds	r3, #4
 800acb6:	4619      	mov	r1, r3
 800acb8:	f000 fe6e 	bl	800b998 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3301      	adds	r3, #1
 800acc0:	607b      	str	r3, [r7, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b09      	cmp	r3, #9
 800acc6:	f77f af65 	ble.w	800ab94 <etharp_tmr+0xc>
      }
    }
  }
}
 800acca:	bf00      	nop
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	200067a0 	.word	0x200067a0

0800acd8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08a      	sub	sp, #40	; 0x28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	460b      	mov	r3, r1
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ace6:	230a      	movs	r3, #10
 800ace8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800acea:	230a      	movs	r3, #10
 800acec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800acee:	230a      	movs	r3, #10
 800acf0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800acf6:	230a      	movs	r3, #10
 800acf8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	83bb      	strh	r3, [r7, #28]
 800acfe:	2300      	movs	r3, #0
 800ad00:	837b      	strh	r3, [r7, #26]
 800ad02:	2300      	movs	r3, #0
 800ad04:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad06:	2300      	movs	r3, #0
 800ad08:	843b      	strh	r3, [r7, #32]
 800ad0a:	e0ae      	b.n	800ae6a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ad0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ad10:	49a6      	ldr	r1, [pc, #664]	; (800afac <etharp_find_entry+0x2d4>)
 800ad12:	4613      	mov	r3, r2
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	4413      	add	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3314      	adds	r3, #20
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ad22:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ad26:	2b0a      	cmp	r3, #10
 800ad28:	d105      	bne.n	800ad36 <etharp_find_entry+0x5e>
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d102      	bne.n	800ad36 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ad30:	8c3b      	ldrh	r3, [r7, #32]
 800ad32:	847b      	strh	r3, [r7, #34]	; 0x22
 800ad34:	e095      	b.n	800ae62 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 8092 	beq.w	800ae62 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d009      	beq.n	800ad58 <etharp_find_entry+0x80>
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d806      	bhi.n	800ad58 <etharp_find_entry+0x80>
 800ad4a:	4b99      	ldr	r3, [pc, #612]	; (800afb0 <etharp_find_entry+0x2d8>)
 800ad4c:	f240 1223 	movw	r2, #291	; 0x123
 800ad50:	4998      	ldr	r1, [pc, #608]	; (800afb4 <etharp_find_entry+0x2dc>)
 800ad52:	4899      	ldr	r0, [pc, #612]	; (800afb8 <etharp_find_entry+0x2e0>)
 800ad54:	f002 f9f6 	bl	800d144 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d020      	beq.n	800ada0 <etharp_find_entry+0xc8>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6819      	ldr	r1, [r3, #0]
 800ad62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ad66:	4891      	ldr	r0, [pc, #580]	; (800afac <etharp_find_entry+0x2d4>)
 800ad68:	4613      	mov	r3, r2
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	4413      	add	r3, r2
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	4403      	add	r3, r0
 800ad72:	3304      	adds	r3, #4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4299      	cmp	r1, r3
 800ad78:	d112      	bne.n	800ada0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00c      	beq.n	800ad9a <etharp_find_entry+0xc2>
 800ad80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ad84:	4989      	ldr	r1, [pc, #548]	; (800afac <etharp_find_entry+0x2d4>)
 800ad86:	4613      	mov	r3, r2
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	4413      	add	r3, r2
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	440b      	add	r3, r1
 800ad90:	3308      	adds	r3, #8
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d102      	bne.n	800ada0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ad9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ad9e:	e100      	b.n	800afa2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ada0:	7dfb      	ldrb	r3, [r7, #23]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d140      	bne.n	800ae28 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ada6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800adaa:	4980      	ldr	r1, [pc, #512]	; (800afac <etharp_find_entry+0x2d4>)
 800adac:	4613      	mov	r3, r2
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	4413      	add	r3, r2
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	440b      	add	r3, r1
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01a      	beq.n	800adf2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800adbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800adc0:	497a      	ldr	r1, [pc, #488]	; (800afac <etharp_find_entry+0x2d4>)
 800adc2:	4613      	mov	r3, r2
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	4413      	add	r3, r2
 800adc8:	00db      	lsls	r3, r3, #3
 800adca:	440b      	add	r3, r1
 800adcc:	3312      	adds	r3, #18
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	8bba      	ldrh	r2, [r7, #28]
 800add2:	429a      	cmp	r2, r3
 800add4:	d845      	bhi.n	800ae62 <etharp_find_entry+0x18a>
            old_queue = i;
 800add6:	8c3b      	ldrh	r3, [r7, #32]
 800add8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800adda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800adde:	4973      	ldr	r1, [pc, #460]	; (800afac <etharp_find_entry+0x2d4>)
 800ade0:	4613      	mov	r3, r2
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	4413      	add	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	440b      	add	r3, r1
 800adea:	3312      	adds	r3, #18
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	83bb      	strh	r3, [r7, #28]
 800adf0:	e037      	b.n	800ae62 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800adf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800adf6:	496d      	ldr	r1, [pc, #436]	; (800afac <etharp_find_entry+0x2d4>)
 800adf8:	4613      	mov	r3, r2
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	4413      	add	r3, r2
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	440b      	add	r3, r1
 800ae02:	3312      	adds	r3, #18
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	8b7a      	ldrh	r2, [r7, #26]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d82a      	bhi.n	800ae62 <etharp_find_entry+0x18a>
            old_pending = i;
 800ae0c:	8c3b      	ldrh	r3, [r7, #32]
 800ae0e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ae10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae14:	4965      	ldr	r1, [pc, #404]	; (800afac <etharp_find_entry+0x2d4>)
 800ae16:	4613      	mov	r3, r2
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	4413      	add	r3, r2
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	440b      	add	r3, r1
 800ae20:	3312      	adds	r3, #18
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	837b      	strh	r3, [r7, #26]
 800ae26:	e01c      	b.n	800ae62 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d919      	bls.n	800ae62 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ae2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae32:	495e      	ldr	r1, [pc, #376]	; (800afac <etharp_find_entry+0x2d4>)
 800ae34:	4613      	mov	r3, r2
 800ae36:	005b      	lsls	r3, r3, #1
 800ae38:	4413      	add	r3, r2
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	440b      	add	r3, r1
 800ae3e:	3312      	adds	r3, #18
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	8b3a      	ldrh	r2, [r7, #24]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d80c      	bhi.n	800ae62 <etharp_find_entry+0x18a>
            old_stable = i;
 800ae48:	8c3b      	ldrh	r3, [r7, #32]
 800ae4a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ae4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae50:	4956      	ldr	r1, [pc, #344]	; (800afac <etharp_find_entry+0x2d4>)
 800ae52:	4613      	mov	r3, r2
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	4413      	add	r3, r2
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	440b      	add	r3, r1
 800ae5c:	3312      	adds	r3, #18
 800ae5e:	881b      	ldrh	r3, [r3, #0]
 800ae60:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae62:	8c3b      	ldrh	r3, [r7, #32]
 800ae64:	3301      	adds	r3, #1
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	843b      	strh	r3, [r7, #32]
 800ae6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	f77f af4c 	ble.w	800ad0c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d108      	bne.n	800ae90 <etharp_find_entry+0x1b8>
 800ae7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ae82:	2b0a      	cmp	r3, #10
 800ae84:	d107      	bne.n	800ae96 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ae86:	7afb      	ldrb	r3, [r7, #11]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d102      	bne.n	800ae96 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae94:	e085      	b.n	800afa2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ae96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ae9a:	2b09      	cmp	r3, #9
 800ae9c:	dc02      	bgt.n	800aea4 <etharp_find_entry+0x1cc>
    i = empty;
 800ae9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aea0:	843b      	strh	r3, [r7, #32]
 800aea2:	e039      	b.n	800af18 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800aea4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800aea8:	2b09      	cmp	r3, #9
 800aeaa:	dc14      	bgt.n	800aed6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800aeac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800aeb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aeb4:	493d      	ldr	r1, [pc, #244]	; (800afac <etharp_find_entry+0x2d4>)
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	4413      	add	r3, r2
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	440b      	add	r3, r1
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d018      	beq.n	800aef8 <etharp_find_entry+0x220>
 800aec6:	4b3a      	ldr	r3, [pc, #232]	; (800afb0 <etharp_find_entry+0x2d8>)
 800aec8:	f240 126d 	movw	r2, #365	; 0x16d
 800aecc:	493b      	ldr	r1, [pc, #236]	; (800afbc <etharp_find_entry+0x2e4>)
 800aece:	483a      	ldr	r0, [pc, #232]	; (800afb8 <etharp_find_entry+0x2e0>)
 800aed0:	f002 f938 	bl	800d144 <iprintf>
 800aed4:	e010      	b.n	800aef8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800aed6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800aeda:	2b09      	cmp	r3, #9
 800aedc:	dc02      	bgt.n	800aee4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800aede:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aee0:	843b      	strh	r3, [r7, #32]
 800aee2:	e009      	b.n	800aef8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800aee4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aee8:	2b09      	cmp	r3, #9
 800aeea:	dc02      	bgt.n	800aef2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800aeec:	8bfb      	ldrh	r3, [r7, #30]
 800aeee:	843b      	strh	r3, [r7, #32]
 800aef0:	e002      	b.n	800aef8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800aef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aef6:	e054      	b.n	800afa2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800aef8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aefc:	2b09      	cmp	r3, #9
 800aefe:	dd06      	ble.n	800af0e <etharp_find_entry+0x236>
 800af00:	4b2b      	ldr	r3, [pc, #172]	; (800afb0 <etharp_find_entry+0x2d8>)
 800af02:	f240 127f 	movw	r2, #383	; 0x17f
 800af06:	492e      	ldr	r1, [pc, #184]	; (800afc0 <etharp_find_entry+0x2e8>)
 800af08:	482b      	ldr	r0, [pc, #172]	; (800afb8 <etharp_find_entry+0x2e0>)
 800af0a:	f002 f91b 	bl	800d144 <iprintf>
    etharp_free_entry(i);
 800af0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800af12:	4618      	mov	r0, r3
 800af14:	f7ff fe06 	bl	800ab24 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800af18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800af1c:	2b09      	cmp	r3, #9
 800af1e:	dd06      	ble.n	800af2e <etharp_find_entry+0x256>
 800af20:	4b23      	ldr	r3, [pc, #140]	; (800afb0 <etharp_find_entry+0x2d8>)
 800af22:	f240 1283 	movw	r2, #387	; 0x183
 800af26:	4926      	ldr	r1, [pc, #152]	; (800afc0 <etharp_find_entry+0x2e8>)
 800af28:	4823      	ldr	r0, [pc, #140]	; (800afb8 <etharp_find_entry+0x2e0>)
 800af2a:	f002 f90b 	bl	800d144 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800af2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af32:	491e      	ldr	r1, [pc, #120]	; (800afac <etharp_find_entry+0x2d4>)
 800af34:	4613      	mov	r3, r2
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	4413      	add	r3, r2
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	440b      	add	r3, r1
 800af3e:	3314      	adds	r3, #20
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d006      	beq.n	800af54 <etharp_find_entry+0x27c>
 800af46:	4b1a      	ldr	r3, [pc, #104]	; (800afb0 <etharp_find_entry+0x2d8>)
 800af48:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800af4c:	491d      	ldr	r1, [pc, #116]	; (800afc4 <etharp_find_entry+0x2ec>)
 800af4e:	481a      	ldr	r0, [pc, #104]	; (800afb8 <etharp_find_entry+0x2e0>)
 800af50:	f002 f8f8 	bl	800d144 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00b      	beq.n	800af72 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800af5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	4812      	ldr	r0, [pc, #72]	; (800afac <etharp_find_entry+0x2d4>)
 800af64:	4613      	mov	r3, r2
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	4413      	add	r3, r2
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	4403      	add	r3, r0
 800af6e:	3304      	adds	r3, #4
 800af70:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800af72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af76:	490d      	ldr	r1, [pc, #52]	; (800afac <etharp_find_entry+0x2d4>)
 800af78:	4613      	mov	r3, r2
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	4413      	add	r3, r2
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	440b      	add	r3, r1
 800af82:	3312      	adds	r3, #18
 800af84:	2200      	movs	r2, #0
 800af86:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800af88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af8c:	4907      	ldr	r1, [pc, #28]	; (800afac <etharp_find_entry+0x2d4>)
 800af8e:	4613      	mov	r3, r2
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	4413      	add	r3, r2
 800af94:	00db      	lsls	r3, r3, #3
 800af96:	440b      	add	r3, r1
 800af98:	3308      	adds	r3, #8
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800af9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3728      	adds	r7, #40	; 0x28
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	200067a0 	.word	0x200067a0
 800afb0:	08010518 	.word	0x08010518
 800afb4:	08010550 	.word	0x08010550
 800afb8:	08010590 	.word	0x08010590
 800afbc:	080105b8 	.word	0x080105b8
 800afc0:	080105d0 	.word	0x080105d0
 800afc4:	080105e4 	.word	0x080105e4

0800afc8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af02      	add	r7, sp, #8
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800afdc:	2b06      	cmp	r3, #6
 800afde:	d006      	beq.n	800afee <etharp_update_arp_entry+0x26>
 800afe0:	4b48      	ldr	r3, [pc, #288]	; (800b104 <etharp_update_arp_entry+0x13c>)
 800afe2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800afe6:	4948      	ldr	r1, [pc, #288]	; (800b108 <etharp_update_arp_entry+0x140>)
 800afe8:	4848      	ldr	r0, [pc, #288]	; (800b10c <etharp_update_arp_entry+0x144>)
 800afea:	f002 f8ab 	bl	800d144 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d012      	beq.n	800b01a <etharp_update_arp_entry+0x52>
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00e      	beq.n	800b01a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68f9      	ldr	r1, [r7, #12]
 800b002:	4618      	mov	r0, r3
 800b004:	f001 f8fe 	bl	800c204 <ip4_addr_isbroadcast_u32>
 800b008:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d105      	bne.n	800b01a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b016:	2be0      	cmp	r3, #224	; 0xe0
 800b018:	d102      	bne.n	800b020 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b01a:	f06f 030f 	mvn.w	r3, #15
 800b01e:	e06c      	b.n	800b0fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	4619      	mov	r1, r3
 800b026:	68b8      	ldr	r0, [r7, #8]
 800b028:	f7ff fe56 	bl	800acd8 <etharp_find_entry>
 800b02c:	4603      	mov	r3, r0
 800b02e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b030:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b034:	2b00      	cmp	r3, #0
 800b036:	da02      	bge.n	800b03e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b038:	8afb      	ldrh	r3, [r7, #22]
 800b03a:	b25b      	sxtb	r3, r3
 800b03c:	e05d      	b.n	800b0fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b03e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b042:	4933      	ldr	r1, [pc, #204]	; (800b110 <etharp_update_arp_entry+0x148>)
 800b044:	4613      	mov	r3, r2
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	4413      	add	r3, r2
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	440b      	add	r3, r1
 800b04e:	3314      	adds	r3, #20
 800b050:	2202      	movs	r2, #2
 800b052:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b054:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b058:	492d      	ldr	r1, [pc, #180]	; (800b110 <etharp_update_arp_entry+0x148>)
 800b05a:	4613      	mov	r3, r2
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	4413      	add	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	440b      	add	r3, r1
 800b064:	3308      	adds	r3, #8
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b06a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b06e:	4613      	mov	r3, r2
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	4413      	add	r3, r2
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	3308      	adds	r3, #8
 800b078:	4a25      	ldr	r2, [pc, #148]	; (800b110 <etharp_update_arp_entry+0x148>)
 800b07a:	4413      	add	r3, r2
 800b07c:	3304      	adds	r3, #4
 800b07e:	2206      	movs	r2, #6
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	4618      	mov	r0, r3
 800b084:	f002 f848 	bl	800d118 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b088:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b08c:	4920      	ldr	r1, [pc, #128]	; (800b110 <etharp_update_arp_entry+0x148>)
 800b08e:	4613      	mov	r3, r2
 800b090:	005b      	lsls	r3, r3, #1
 800b092:	4413      	add	r3, r2
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	440b      	add	r3, r1
 800b098:	3312      	adds	r3, #18
 800b09a:	2200      	movs	r2, #0
 800b09c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b09e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b0a2:	491b      	ldr	r1, [pc, #108]	; (800b110 <etharp_update_arp_entry+0x148>)
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	4413      	add	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	440b      	add	r3, r1
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d021      	beq.n	800b0f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b0b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b0b8:	4915      	ldr	r1, [pc, #84]	; (800b110 <etharp_update_arp_entry+0x148>)
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	4413      	add	r3, r2
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	440b      	add	r3, r1
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b0c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b0cc:	4910      	ldr	r1, [pc, #64]	; (800b110 <etharp_update_arp_entry+0x148>)
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	4413      	add	r3, r2
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	440b      	add	r3, r1
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b0e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6939      	ldr	r1, [r7, #16]
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f001 ff97 	bl	800d020 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b0f2:	6938      	ldr	r0, [r7, #16]
 800b0f4:	f7f9 fe28 	bl	8004d48 <pbuf_free>
  }
  return ERR_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	08010518 	.word	0x08010518
 800b108:	08010610 	.word	0x08010610
 800b10c:	08010590 	.word	0x08010590
 800b110:	200067a0 	.word	0x200067a0

0800b114 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	e01e      	b.n	800b160 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b122:	4913      	ldr	r1, [pc, #76]	; (800b170 <etharp_cleanup_netif+0x5c>)
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	4613      	mov	r3, r2
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	4413      	add	r3, r2
 800b12c:	00db      	lsls	r3, r3, #3
 800b12e:	440b      	add	r3, r1
 800b130:	3314      	adds	r3, #20
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b136:	7afb      	ldrb	r3, [r7, #11]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00e      	beq.n	800b15a <etharp_cleanup_netif+0x46>
 800b13c:	490c      	ldr	r1, [pc, #48]	; (800b170 <etharp_cleanup_netif+0x5c>)
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	4613      	mov	r3, r2
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	4413      	add	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	440b      	add	r3, r1
 800b14a:	3308      	adds	r3, #8
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	429a      	cmp	r2, r3
 800b152:	d102      	bne.n	800b15a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f7ff fce5 	bl	800ab24 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3301      	adds	r3, #1
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b09      	cmp	r3, #9
 800b164:	dddd      	ble.n	800b122 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b166:	bf00      	nop
 800b168:	bf00      	nop
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	200067a0 	.word	0x200067a0

0800b174 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b174:	b5b0      	push	{r4, r5, r7, lr}
 800b176:	b08a      	sub	sp, #40	; 0x28
 800b178:	af04      	add	r7, sp, #16
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d107      	bne.n	800b194 <etharp_input+0x20>
 800b184:	4b3d      	ldr	r3, [pc, #244]	; (800b27c <etharp_input+0x108>)
 800b186:	f240 228a 	movw	r2, #650	; 0x28a
 800b18a:	493d      	ldr	r1, [pc, #244]	; (800b280 <etharp_input+0x10c>)
 800b18c:	483d      	ldr	r0, [pc, #244]	; (800b284 <etharp_input+0x110>)
 800b18e:	f001 ffd9 	bl	800d144 <iprintf>
 800b192:	e06f      	b.n	800b274 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1a4:	d10c      	bne.n	800b1c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b1aa:	2b06      	cmp	r3, #6
 800b1ac:	d108      	bne.n	800b1c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d104      	bne.n	800b1c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	885b      	ldrh	r3, [r3, #2]
 800b1ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	d003      	beq.n	800b1c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7f9 fdc1 	bl	8004d48 <pbuf_free>
    return;
 800b1c6:	e055      	b.n	800b274 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	330e      	adds	r3, #14
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	3318      	adds	r3, #24
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d102      	bne.n	800b1e8 <etharp_input+0x74>
    for_us = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75fb      	strb	r3, [r7, #23]
 800b1e6:	e009      	b.n	800b1fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	bf0c      	ite	eq
 800b1f4:	2301      	moveq	r3, #1
 800b1f6:	2300      	movne	r3, #0
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f103 0208 	add.w	r2, r3, #8
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <etharp_input+0x98>
 800b208:	2301      	movs	r3, #1
 800b20a:	e000      	b.n	800b20e <etharp_input+0x9a>
 800b20c:	2302      	movs	r3, #2
 800b20e:	f107 010c 	add.w	r1, r7, #12
 800b212:	6838      	ldr	r0, [r7, #0]
 800b214:	f7ff fed8 	bl	800afc8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	88db      	ldrh	r3, [r3, #6]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b222:	d003      	beq.n	800b22c <etharp_input+0xb8>
 800b224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b228:	d01e      	beq.n	800b268 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b22a:	e020      	b.n	800b26e <etharp_input+0xfa>
      if (for_us) {
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01c      	beq.n	800b26c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b24c:	2102      	movs	r1, #2
 800b24e:	9103      	str	r1, [sp, #12]
 800b250:	f107 010c 	add.w	r1, r7, #12
 800b254:	9102      	str	r1, [sp, #8]
 800b256:	9201      	str	r2, [sp, #4]
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	462b      	mov	r3, r5
 800b25c:	4622      	mov	r2, r4
 800b25e:	4601      	mov	r1, r0
 800b260:	6838      	ldr	r0, [r7, #0]
 800b262:	f000 faeb 	bl	800b83c <etharp_raw>
      break;
 800b266:	e001      	b.n	800b26c <etharp_input+0xf8>
      break;
 800b268:	bf00      	nop
 800b26a:	e000      	b.n	800b26e <etharp_input+0xfa>
      break;
 800b26c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7f9 fd6a 	bl	8004d48 <pbuf_free>
}
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bdb0      	pop	{r4, r5, r7, pc}
 800b27a:	bf00      	nop
 800b27c:	08010518 	.word	0x08010518
 800b280:	08010668 	.word	0x08010668
 800b284:	08010590 	.word	0x08010590

0800b288 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	4613      	mov	r3, r2
 800b294:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b296:	79fa      	ldrb	r2, [r7, #7]
 800b298:	4944      	ldr	r1, [pc, #272]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b29a:	4613      	mov	r3, r2
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	4413      	add	r3, r2
 800b2a0:	00db      	lsls	r3, r3, #3
 800b2a2:	440b      	add	r3, r1
 800b2a4:	3314      	adds	r3, #20
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d806      	bhi.n	800b2ba <etharp_output_to_arp_index+0x32>
 800b2ac:	4b40      	ldr	r3, [pc, #256]	; (800b3b0 <etharp_output_to_arp_index+0x128>)
 800b2ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b2b2:	4940      	ldr	r1, [pc, #256]	; (800b3b4 <etharp_output_to_arp_index+0x12c>)
 800b2b4:	4840      	ldr	r0, [pc, #256]	; (800b3b8 <etharp_output_to_arp_index+0x130>)
 800b2b6:	f001 ff45 	bl	800d144 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b2ba:	79fa      	ldrb	r2, [r7, #7]
 800b2bc:	493b      	ldr	r1, [pc, #236]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b2be:	4613      	mov	r3, r2
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	4413      	add	r3, r2
 800b2c4:	00db      	lsls	r3, r3, #3
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3314      	adds	r3, #20
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d153      	bne.n	800b378 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b2d0:	79fa      	ldrb	r2, [r7, #7]
 800b2d2:	4936      	ldr	r1, [pc, #216]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	4413      	add	r3, r2
 800b2da:	00db      	lsls	r3, r3, #3
 800b2dc:	440b      	add	r3, r1
 800b2de:	3312      	adds	r3, #18
 800b2e0:	881b      	ldrh	r3, [r3, #0]
 800b2e2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b2e6:	d919      	bls.n	800b31c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b2e8:	79fa      	ldrb	r2, [r7, #7]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	4a2e      	ldr	r2, [pc, #184]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b2f4:	4413      	add	r3, r2
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f000 fb4c 	bl	800b998 <etharp_request>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d138      	bne.n	800b378 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b306:	79fa      	ldrb	r2, [r7, #7]
 800b308:	4928      	ldr	r1, [pc, #160]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b30a:	4613      	mov	r3, r2
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	4413      	add	r3, r2
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	440b      	add	r3, r1
 800b314:	3314      	adds	r3, #20
 800b316:	2203      	movs	r2, #3
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	e02d      	b.n	800b378 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b31c:	79fa      	ldrb	r2, [r7, #7]
 800b31e:	4923      	ldr	r1, [pc, #140]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b320:	4613      	mov	r3, r2
 800b322:	005b      	lsls	r3, r3, #1
 800b324:	4413      	add	r3, r2
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	440b      	add	r3, r1
 800b32a:	3312      	adds	r3, #18
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b332:	d321      	bcc.n	800b378 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b334:	79fa      	ldrb	r2, [r7, #7]
 800b336:	4613      	mov	r3, r2
 800b338:	005b      	lsls	r3, r3, #1
 800b33a:	4413      	add	r3, r2
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	4a1b      	ldr	r2, [pc, #108]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b340:	4413      	add	r3, r2
 800b342:	1d19      	adds	r1, r3, #4
 800b344:	79fa      	ldrb	r2, [r7, #7]
 800b346:	4613      	mov	r3, r2
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	4413      	add	r3, r2
 800b34c:	00db      	lsls	r3, r3, #3
 800b34e:	3308      	adds	r3, #8
 800b350:	4a16      	ldr	r2, [pc, #88]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b352:	4413      	add	r3, r2
 800b354:	3304      	adds	r3, #4
 800b356:	461a      	mov	r2, r3
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f000 fafb 	bl	800b954 <etharp_request_dst>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b364:	79fa      	ldrb	r2, [r7, #7]
 800b366:	4911      	ldr	r1, [pc, #68]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b368:	4613      	mov	r3, r2
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	4413      	add	r3, r2
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	440b      	add	r3, r1
 800b372:	3314      	adds	r3, #20
 800b374:	2203      	movs	r2, #3
 800b376:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b37e:	79fa      	ldrb	r2, [r7, #7]
 800b380:	4613      	mov	r3, r2
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	4413      	add	r3, r2
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	3308      	adds	r3, #8
 800b38a:	4a08      	ldr	r2, [pc, #32]	; (800b3ac <etharp_output_to_arp_index+0x124>)
 800b38c:	4413      	add	r3, r2
 800b38e:	3304      	adds	r3, #4
 800b390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b394:	9200      	str	r2, [sp, #0]
 800b396:	460a      	mov	r2, r1
 800b398:	68b9      	ldr	r1, [r7, #8]
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f001 fe40 	bl	800d020 <ethernet_output>
 800b3a0:	4603      	mov	r3, r0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	200067a0 	.word	0x200067a0
 800b3b0:	08010518 	.word	0x08010518
 800b3b4:	08010688 	.word	0x08010688
 800b3b8:	08010590 	.word	0x08010590

0800b3bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08a      	sub	sp, #40	; 0x28
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d106      	bne.n	800b3e0 <etharp_output+0x24>
 800b3d2:	4b73      	ldr	r3, [pc, #460]	; (800b5a0 <etharp_output+0x1e4>)
 800b3d4:	f240 321e 	movw	r2, #798	; 0x31e
 800b3d8:	4972      	ldr	r1, [pc, #456]	; (800b5a4 <etharp_output+0x1e8>)
 800b3da:	4873      	ldr	r0, [pc, #460]	; (800b5a8 <etharp_output+0x1ec>)
 800b3dc:	f001 feb2 	bl	800d144 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d106      	bne.n	800b3f4 <etharp_output+0x38>
 800b3e6:	4b6e      	ldr	r3, [pc, #440]	; (800b5a0 <etharp_output+0x1e4>)
 800b3e8:	f240 321f 	movw	r2, #799	; 0x31f
 800b3ec:	496f      	ldr	r1, [pc, #444]	; (800b5ac <etharp_output+0x1f0>)
 800b3ee:	486e      	ldr	r0, [pc, #440]	; (800b5a8 <etharp_output+0x1ec>)
 800b3f0:	f001 fea8 	bl	800d144 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <etharp_output+0x4c>
 800b3fa:	4b69      	ldr	r3, [pc, #420]	; (800b5a0 <etharp_output+0x1e4>)
 800b3fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b400:	496b      	ldr	r1, [pc, #428]	; (800b5b0 <etharp_output+0x1f4>)
 800b402:	4869      	ldr	r0, [pc, #420]	; (800b5a8 <etharp_output+0x1ec>)
 800b404:	f001 fe9e 	bl	800d144 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68f9      	ldr	r1, [r7, #12]
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 fef8 	bl	800c204 <ip4_addr_isbroadcast_u32>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b41a:	4b66      	ldr	r3, [pc, #408]	; (800b5b4 <etharp_output+0x1f8>)
 800b41c:	61fb      	str	r3, [r7, #28]
 800b41e:	e0af      	b.n	800b580 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b428:	2be0      	cmp	r3, #224	; 0xe0
 800b42a:	d118      	bne.n	800b45e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b42c:	2301      	movs	r3, #1
 800b42e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b430:	2300      	movs	r3, #0
 800b432:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b434:	235e      	movs	r3, #94	; 0x5e
 800b436:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3301      	adds	r3, #1
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b442:	b2db      	uxtb	r3, r3
 800b444:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3302      	adds	r3, #2
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3303      	adds	r3, #3
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b456:	f107 0310 	add.w	r3, r7, #16
 800b45a:	61fb      	str	r3, [r7, #28]
 800b45c:	e090      	b.n	800b580 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3304      	adds	r3, #4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	405a      	eors	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3308      	adds	r3, #8
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4013      	ands	r3, r2
 800b472:	2b00      	cmp	r3, #0
 800b474:	d012      	beq.n	800b49c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b47c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b480:	4293      	cmp	r3, r2
 800b482:	d00b      	beq.n	800b49c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	330c      	adds	r3, #12
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	330c      	adds	r3, #12
 800b492:	61bb      	str	r3, [r7, #24]
 800b494:	e002      	b.n	800b49c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b496:	f06f 0303 	mvn.w	r3, #3
 800b49a:	e07d      	b.n	800b598 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b49c:	4b46      	ldr	r3, [pc, #280]	; (800b5b8 <etharp_output+0x1fc>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4a46      	ldr	r2, [pc, #280]	; (800b5bc <etharp_output+0x200>)
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	440b      	add	r3, r1
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	4413      	add	r3, r2
 800b4ae:	3314      	adds	r3, #20
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d925      	bls.n	800b502 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b4b6:	4b40      	ldr	r3, [pc, #256]	; (800b5b8 <etharp_output+0x1fc>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4a3f      	ldr	r2, [pc, #252]	; (800b5bc <etharp_output+0x200>)
 800b4be:	460b      	mov	r3, r1
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	440b      	add	r3, r1
 800b4c4:	00db      	lsls	r3, r3, #3
 800b4c6:	4413      	add	r3, r2
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d117      	bne.n	800b502 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	4b38      	ldr	r3, [pc, #224]	; (800b5b8 <etharp_output+0x1fc>)
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	4937      	ldr	r1, [pc, #220]	; (800b5bc <etharp_output+0x200>)
 800b4de:	4603      	mov	r3, r0
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	4403      	add	r3, r0
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	440b      	add	r3, r1
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d108      	bne.n	800b502 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b4f0:	4b31      	ldr	r3, [pc, #196]	; (800b5b8 <etharp_output+0x1fc>)
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff fec5 	bl	800b288 <etharp_output_to_arp_index>
 800b4fe:	4603      	mov	r3, r0
 800b500:	e04a      	b.n	800b598 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b502:	2300      	movs	r3, #0
 800b504:	75fb      	strb	r3, [r7, #23]
 800b506:	e031      	b.n	800b56c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b508:	7dfa      	ldrb	r2, [r7, #23]
 800b50a:	492c      	ldr	r1, [pc, #176]	; (800b5bc <etharp_output+0x200>)
 800b50c:	4613      	mov	r3, r2
 800b50e:	005b      	lsls	r3, r3, #1
 800b510:	4413      	add	r3, r2
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	440b      	add	r3, r1
 800b516:	3314      	adds	r3, #20
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d923      	bls.n	800b566 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b51e:	7dfa      	ldrb	r2, [r7, #23]
 800b520:	4926      	ldr	r1, [pc, #152]	; (800b5bc <etharp_output+0x200>)
 800b522:	4613      	mov	r3, r2
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	4413      	add	r3, r2
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	440b      	add	r3, r1
 800b52c:	3308      	adds	r3, #8
 800b52e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	429a      	cmp	r2, r3
 800b534:	d117      	bne.n	800b566 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	6819      	ldr	r1, [r3, #0]
 800b53a:	7dfa      	ldrb	r2, [r7, #23]
 800b53c:	481f      	ldr	r0, [pc, #124]	; (800b5bc <etharp_output+0x200>)
 800b53e:	4613      	mov	r3, r2
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	4413      	add	r3, r2
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	4403      	add	r3, r0
 800b548:	3304      	adds	r3, #4
 800b54a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b54c:	4299      	cmp	r1, r3
 800b54e:	d10a      	bne.n	800b566 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b550:	4a19      	ldr	r2, [pc, #100]	; (800b5b8 <etharp_output+0x1fc>)
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b556:	7dfb      	ldrb	r3, [r7, #23]
 800b558:	461a      	mov	r2, r3
 800b55a:	68b9      	ldr	r1, [r7, #8]
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7ff fe93 	bl	800b288 <etharp_output_to_arp_index>
 800b562:	4603      	mov	r3, r0
 800b564:	e018      	b.n	800b598 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	3301      	adds	r3, #1
 800b56a:	75fb      	strb	r3, [r7, #23]
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	2b09      	cmp	r3, #9
 800b570:	d9ca      	bls.n	800b508 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b572:	68ba      	ldr	r2, [r7, #8]
 800b574:	69b9      	ldr	r1, [r7, #24]
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 f822 	bl	800b5c0 <etharp_query>
 800b57c:	4603      	mov	r3, r0
 800b57e:	e00b      	b.n	800b598 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f001 fd45 	bl	800d020 <ethernet_output>
 800b596:	4603      	mov	r3, r0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	08010518 	.word	0x08010518
 800b5a4:	08010668 	.word	0x08010668
 800b5a8:	08010590 	.word	0x08010590
 800b5ac:	080106b8 	.word	0x080106b8
 800b5b0:	08010658 	.word	0x08010658
 800b5b4:	08010cc0 	.word	0x08010cc0
 800b5b8:	20006890 	.word	0x20006890
 800b5bc:	200067a0 	.word	0x200067a0

0800b5c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08c      	sub	sp, #48	; 0x30
 800b5c4:	af02      	add	r7, sp, #8
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3326      	adds	r3, #38	; 0x26
 800b5d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b5d2:	23ff      	movs	r3, #255	; 0xff
 800b5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68f9      	ldr	r1, [r7, #12]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 fe0e 	bl	800c204 <ip4_addr_isbroadcast_u32>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10c      	bne.n	800b608 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b5f6:	2be0      	cmp	r3, #224	; 0xe0
 800b5f8:	d006      	beq.n	800b608 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b608:	f06f 030f 	mvn.w	r3, #15
 800b60c:	e101      	b.n	800b812 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	2101      	movs	r1, #1
 800b612:	68b8      	ldr	r0, [r7, #8]
 800b614:	f7ff fb60 	bl	800acd8 <etharp_find_entry>
 800b618:	4603      	mov	r3, r0
 800b61a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b61c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b620:	2b00      	cmp	r3, #0
 800b622:	da02      	bge.n	800b62a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b624:	8a7b      	ldrh	r3, [r7, #18]
 800b626:	b25b      	sxtb	r3, r3
 800b628:	e0f3      	b.n	800b812 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b62a:	8a7b      	ldrh	r3, [r7, #18]
 800b62c:	2b7e      	cmp	r3, #126	; 0x7e
 800b62e:	d906      	bls.n	800b63e <etharp_query+0x7e>
 800b630:	4b7a      	ldr	r3, [pc, #488]	; (800b81c <etharp_query+0x25c>)
 800b632:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b636:	497a      	ldr	r1, [pc, #488]	; (800b820 <etharp_query+0x260>)
 800b638:	487a      	ldr	r0, [pc, #488]	; (800b824 <etharp_query+0x264>)
 800b63a:	f001 fd83 	bl	800d144 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b63e:	8a7b      	ldrh	r3, [r7, #18]
 800b640:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b642:	7c7a      	ldrb	r2, [r7, #17]
 800b644:	4978      	ldr	r1, [pc, #480]	; (800b828 <etharp_query+0x268>)
 800b646:	4613      	mov	r3, r2
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	4413      	add	r3, r2
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	440b      	add	r3, r1
 800b650:	3314      	adds	r3, #20
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d115      	bne.n	800b684 <etharp_query+0xc4>
    is_new_entry = 1;
 800b658:	2301      	movs	r3, #1
 800b65a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b65c:	7c7a      	ldrb	r2, [r7, #17]
 800b65e:	4972      	ldr	r1, [pc, #456]	; (800b828 <etharp_query+0x268>)
 800b660:	4613      	mov	r3, r2
 800b662:	005b      	lsls	r3, r3, #1
 800b664:	4413      	add	r3, r2
 800b666:	00db      	lsls	r3, r3, #3
 800b668:	440b      	add	r3, r1
 800b66a:	3314      	adds	r3, #20
 800b66c:	2201      	movs	r2, #1
 800b66e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b670:	7c7a      	ldrb	r2, [r7, #17]
 800b672:	496d      	ldr	r1, [pc, #436]	; (800b828 <etharp_query+0x268>)
 800b674:	4613      	mov	r3, r2
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	4413      	add	r3, r2
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	440b      	add	r3, r1
 800b67e:	3308      	adds	r3, #8
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b684:	7c7a      	ldrb	r2, [r7, #17]
 800b686:	4968      	ldr	r1, [pc, #416]	; (800b828 <etharp_query+0x268>)
 800b688:	4613      	mov	r3, r2
 800b68a:	005b      	lsls	r3, r3, #1
 800b68c:	4413      	add	r3, r2
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	440b      	add	r3, r1
 800b692:	3314      	adds	r3, #20
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d011      	beq.n	800b6be <etharp_query+0xfe>
 800b69a:	7c7a      	ldrb	r2, [r7, #17]
 800b69c:	4962      	ldr	r1, [pc, #392]	; (800b828 <etharp_query+0x268>)
 800b69e:	4613      	mov	r3, r2
 800b6a0:	005b      	lsls	r3, r3, #1
 800b6a2:	4413      	add	r3, r2
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	440b      	add	r3, r1
 800b6a8:	3314      	adds	r3, #20
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d806      	bhi.n	800b6be <etharp_query+0xfe>
 800b6b0:	4b5a      	ldr	r3, [pc, #360]	; (800b81c <etharp_query+0x25c>)
 800b6b2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b6b6:	495d      	ldr	r1, [pc, #372]	; (800b82c <etharp_query+0x26c>)
 800b6b8:	485a      	ldr	r0, [pc, #360]	; (800b824 <etharp_query+0x264>)
 800b6ba:	f001 fd43 	bl	800d144 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d102      	bne.n	800b6ca <etharp_query+0x10a>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10c      	bne.n	800b6e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 f963 	bl	800b998 <etharp_request>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d102      	bne.n	800b6e4 <etharp_query+0x124>
      return result;
 800b6de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6e2:	e096      	b.n	800b812 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d106      	bne.n	800b6f8 <etharp_query+0x138>
 800b6ea:	4b4c      	ldr	r3, [pc, #304]	; (800b81c <etharp_query+0x25c>)
 800b6ec:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b6f0:	494f      	ldr	r1, [pc, #316]	; (800b830 <etharp_query+0x270>)
 800b6f2:	484c      	ldr	r0, [pc, #304]	; (800b824 <etharp_query+0x264>)
 800b6f4:	f001 fd26 	bl	800d144 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b6f8:	7c7a      	ldrb	r2, [r7, #17]
 800b6fa:	494b      	ldr	r1, [pc, #300]	; (800b828 <etharp_query+0x268>)
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	005b      	lsls	r3, r3, #1
 800b700:	4413      	add	r3, r2
 800b702:	00db      	lsls	r3, r3, #3
 800b704:	440b      	add	r3, r1
 800b706:	3314      	adds	r3, #20
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d917      	bls.n	800b73e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b70e:	4a49      	ldr	r2, [pc, #292]	; (800b834 <etharp_query+0x274>)
 800b710:	7c7b      	ldrb	r3, [r7, #17]
 800b712:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b714:	7c7a      	ldrb	r2, [r7, #17]
 800b716:	4613      	mov	r3, r2
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	4413      	add	r3, r2
 800b71c:	00db      	lsls	r3, r3, #3
 800b71e:	3308      	adds	r3, #8
 800b720:	4a41      	ldr	r2, [pc, #260]	; (800b828 <etharp_query+0x268>)
 800b722:	4413      	add	r3, r2
 800b724:	3304      	adds	r3, #4
 800b726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b72a:	9200      	str	r2, [sp, #0]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f001 fc75 	bl	800d020 <ethernet_output>
 800b736:	4603      	mov	r3, r0
 800b738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b73c:	e067      	b.n	800b80e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b73e:	7c7a      	ldrb	r2, [r7, #17]
 800b740:	4939      	ldr	r1, [pc, #228]	; (800b828 <etharp_query+0x268>)
 800b742:	4613      	mov	r3, r2
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	4413      	add	r3, r2
 800b748:	00db      	lsls	r3, r3, #3
 800b74a:	440b      	add	r3, r1
 800b74c:	3314      	adds	r3, #20
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d15c      	bne.n	800b80e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b75c:	e01c      	b.n	800b798 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	895a      	ldrh	r2, [r3, #10]
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	891b      	ldrh	r3, [r3, #8]
 800b766:	429a      	cmp	r2, r3
 800b768:	d10a      	bne.n	800b780 <etharp_query+0x1c0>
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d006      	beq.n	800b780 <etharp_query+0x1c0>
 800b772:	4b2a      	ldr	r3, [pc, #168]	; (800b81c <etharp_query+0x25c>)
 800b774:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b778:	492f      	ldr	r1, [pc, #188]	; (800b838 <etharp_query+0x278>)
 800b77a:	482a      	ldr	r0, [pc, #168]	; (800b824 <etharp_query+0x264>)
 800b77c:	f001 fce2 	bl	800d144 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	7b1b      	ldrb	r3, [r3, #12]
 800b784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <etharp_query+0x1d2>
        copy_needed = 1;
 800b78c:	2301      	movs	r3, #1
 800b78e:	61bb      	str	r3, [r7, #24]
        break;
 800b790:	e005      	b.n	800b79e <etharp_query+0x1de>
      }
      p = p->next;
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1df      	bne.n	800b75e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d007      	beq.n	800b7b4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b7aa:	200e      	movs	r0, #14
 800b7ac:	f7f9 fd28 	bl	8005200 <pbuf_clone>
 800b7b0:	61f8      	str	r0, [r7, #28]
 800b7b2:	e004      	b.n	800b7be <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b7b8:	69f8      	ldr	r0, [r7, #28]
 800b7ba:	f7f9 fb65 	bl	8004e88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d021      	beq.n	800b808 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b7c4:	7c7a      	ldrb	r2, [r7, #17]
 800b7c6:	4918      	ldr	r1, [pc, #96]	; (800b828 <etharp_query+0x268>)
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	005b      	lsls	r3, r3, #1
 800b7cc:	4413      	add	r3, r2
 800b7ce:	00db      	lsls	r3, r3, #3
 800b7d0:	440b      	add	r3, r1
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00a      	beq.n	800b7ee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b7d8:	7c7a      	ldrb	r2, [r7, #17]
 800b7da:	4913      	ldr	r1, [pc, #76]	; (800b828 <etharp_query+0x268>)
 800b7dc:	4613      	mov	r3, r2
 800b7de:	005b      	lsls	r3, r3, #1
 800b7e0:	4413      	add	r3, r2
 800b7e2:	00db      	lsls	r3, r3, #3
 800b7e4:	440b      	add	r3, r1
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f9 faad 	bl	8004d48 <pbuf_free>
      }
      arp_table[i].q = p;
 800b7ee:	7c7a      	ldrb	r2, [r7, #17]
 800b7f0:	490d      	ldr	r1, [pc, #52]	; (800b828 <etharp_query+0x268>)
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	005b      	lsls	r3, r3, #1
 800b7f6:	4413      	add	r3, r2
 800b7f8:	00db      	lsls	r3, r3, #3
 800b7fa:	440b      	add	r3, r1
 800b7fc:	69fa      	ldr	r2, [r7, #28]
 800b7fe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b806:	e002      	b.n	800b80e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b808:	23ff      	movs	r3, #255	; 0xff
 800b80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b80e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b812:	4618      	mov	r0, r3
 800b814:	3728      	adds	r7, #40	; 0x28
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	08010518 	.word	0x08010518
 800b820:	080106c4 	.word	0x080106c4
 800b824:	08010590 	.word	0x08010590
 800b828:	200067a0 	.word	0x200067a0
 800b82c:	080106d4 	.word	0x080106d4
 800b830:	080106b8 	.word	0x080106b8
 800b834:	20006890 	.word	0x20006890
 800b838:	080106fc 	.word	0x080106fc

0800b83c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08a      	sub	sp, #40	; 0x28
 800b840:	af02      	add	r7, sp, #8
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
 800b848:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d106      	bne.n	800b862 <etharp_raw+0x26>
 800b854:	4b3a      	ldr	r3, [pc, #232]	; (800b940 <etharp_raw+0x104>)
 800b856:	f240 4257 	movw	r2, #1111	; 0x457
 800b85a:	493a      	ldr	r1, [pc, #232]	; (800b944 <etharp_raw+0x108>)
 800b85c:	483a      	ldr	r0, [pc, #232]	; (800b948 <etharp_raw+0x10c>)
 800b85e:	f001 fc71 	bl	800d144 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b866:	211c      	movs	r1, #28
 800b868:	200e      	movs	r0, #14
 800b86a:	f7f8 ff89 	bl	8004780 <pbuf_alloc>
 800b86e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d102      	bne.n	800b87c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b87a:	e05d      	b.n	800b938 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	895b      	ldrh	r3, [r3, #10]
 800b880:	2b1b      	cmp	r3, #27
 800b882:	d806      	bhi.n	800b892 <etharp_raw+0x56>
 800b884:	4b2e      	ldr	r3, [pc, #184]	; (800b940 <etharp_raw+0x104>)
 800b886:	f240 4262 	movw	r2, #1122	; 0x462
 800b88a:	4930      	ldr	r1, [pc, #192]	; (800b94c <etharp_raw+0x110>)
 800b88c:	482e      	ldr	r0, [pc, #184]	; (800b948 <etharp_raw+0x10c>)
 800b88e:	f001 fc59 	bl	800d144 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7f7 ffa0 	bl	80037e0 <lwip_htons>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b8ae:	2b06      	cmp	r3, #6
 800b8b0:	d006      	beq.n	800b8c0 <etharp_raw+0x84>
 800b8b2:	4b23      	ldr	r3, [pc, #140]	; (800b940 <etharp_raw+0x104>)
 800b8b4:	f240 4269 	movw	r2, #1129	; 0x469
 800b8b8:	4925      	ldr	r1, [pc, #148]	; (800b950 <etharp_raw+0x114>)
 800b8ba:	4823      	ldr	r0, [pc, #140]	; (800b948 <etharp_raw+0x10c>)
 800b8bc:	f001 fc42 	bl	800d144 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	2206      	movs	r2, #6
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f001 fc25 	bl	800d118 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	3312      	adds	r3, #18
 800b8d2:	2206      	movs	r2, #6
 800b8d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f001 fc1e 	bl	800d118 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	330e      	adds	r3, #14
 800b8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8e2:	6812      	ldr	r2, [r2, #0]
 800b8e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	3318      	adds	r3, #24
 800b8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ec:	6812      	ldr	r2, [r2, #0]
 800b8ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	701a      	strb	r2, [r3, #0]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f042 0201 	orr.w	r2, r2, #1
 800b8fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2200      	movs	r2, #0
 800b902:	f042 0208 	orr.w	r2, r2, #8
 800b906:	709a      	strb	r2, [r3, #2]
 800b908:	2200      	movs	r2, #0
 800b90a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	2206      	movs	r2, #6
 800b910:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2204      	movs	r2, #4
 800b916:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b918:	f640 0306 	movw	r3, #2054	; 0x806
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	69b9      	ldr	r1, [r7, #24]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f001 fb7b 	bl	800d020 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b92a:	69b8      	ldr	r0, [r7, #24]
 800b92c:	f7f9 fa0c 	bl	8004d48 <pbuf_free>
  p = NULL;
 800b930:	2300      	movs	r3, #0
 800b932:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b934:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3720      	adds	r7, #32
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	08010518 	.word	0x08010518
 800b944:	08010668 	.word	0x08010668
 800b948:	08010590 	.word	0x08010590
 800b94c:	08010718 	.word	0x08010718
 800b950:	0801074c 	.word	0x0801074c

0800b954 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b088      	sub	sp, #32
 800b958:	af04      	add	r7, sp, #16
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b970:	2201      	movs	r2, #1
 800b972:	9203      	str	r2, [sp, #12]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	9202      	str	r2, [sp, #8]
 800b978:	4a06      	ldr	r2, [pc, #24]	; (800b994 <etharp_request_dst+0x40>)
 800b97a:	9201      	str	r2, [sp, #4]
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	4603      	mov	r3, r0
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7ff ff5a 	bl	800b83c <etharp_raw>
 800b988:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	08010cc8 	.word	0x08010cc8

0800b998 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b9a2:	4a05      	ldr	r2, [pc, #20]	; (800b9b8 <etharp_request+0x20>)
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7ff ffd4 	bl	800b954 <etharp_request_dst>
 800b9ac:	4603      	mov	r3, r0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	08010cc0 	.word	0x08010cc0

0800b9bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08e      	sub	sp, #56	; 0x38
 800b9c0:	af04      	add	r7, sp, #16
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b9c6:	4b79      	ldr	r3, [pc, #484]	; (800bbac <icmp_input+0x1f0>)
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	f003 030f 	and.w	r3, r3, #15
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800b9dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9de:	2b13      	cmp	r3, #19
 800b9e0:	f240 80cd 	bls.w	800bb7e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	895b      	ldrh	r3, [r3, #10]
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	f240 80ca 	bls.w	800bb82 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b9f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 80b7 	beq.w	800bb70 <icmp_input+0x1b4>
 800ba02:	2b08      	cmp	r3, #8
 800ba04:	f040 80b7 	bne.w	800bb76 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ba08:	4b69      	ldr	r3, [pc, #420]	; (800bbb0 <icmp_input+0x1f4>)
 800ba0a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ba0c:	4b67      	ldr	r3, [pc, #412]	; (800bbac <icmp_input+0x1f0>)
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba14:	2be0      	cmp	r3, #224	; 0xe0
 800ba16:	f000 80bb 	beq.w	800bb90 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ba1a:	4b64      	ldr	r3, [pc, #400]	; (800bbac <icmp_input+0x1f0>)
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	4a63      	ldr	r2, [pc, #396]	; (800bbac <icmp_input+0x1f0>)
 800ba20:	6812      	ldr	r2, [r2, #0]
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fbed 	bl	800c204 <ip4_addr_isbroadcast_u32>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f040 80b1 	bne.w	800bb94 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	891b      	ldrh	r3, [r3, #8]
 800ba36:	2b07      	cmp	r3, #7
 800ba38:	f240 80a5 	bls.w	800bb86 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ba3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba3e:	330e      	adds	r3, #14
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7f9 f8ea 	bl	8004c1c <pbuf_add_header>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d04b      	beq.n	800bae6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	891a      	ldrh	r2, [r3, #8]
 800ba52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba54:	4413      	add	r3, r2
 800ba56:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	891b      	ldrh	r3, [r3, #8]
 800ba5c:	8b7a      	ldrh	r2, [r7, #26]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	f0c0 809a 	bcc.w	800bb98 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ba64:	8b7b      	ldrh	r3, [r7, #26]
 800ba66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	200e      	movs	r0, #14
 800ba6e:	f7f8 fe87 	bl	8004780 <pbuf_alloc>
 800ba72:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8090 	beq.w	800bb9c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	895b      	ldrh	r3, [r3, #10]
 800ba80:	461a      	mov	r2, r3
 800ba82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba84:	3308      	adds	r3, #8
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d203      	bcs.n	800ba92 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ba8a:	6978      	ldr	r0, [r7, #20]
 800ba8c:	f7f9 f95c 	bl	8004d48 <pbuf_free>
          goto icmperr;
 800ba90:	e085      	b.n	800bb9e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 fb3c 	bl	800d118 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800baa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800baa2:	4619      	mov	r1, r3
 800baa4:	6978      	ldr	r0, [r7, #20]
 800baa6:	f7f9 f8c9 	bl	8004c3c <pbuf_remove_header>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d009      	beq.n	800bac4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bab0:	4b40      	ldr	r3, [pc, #256]	; (800bbb4 <icmp_input+0x1f8>)
 800bab2:	22b6      	movs	r2, #182	; 0xb6
 800bab4:	4940      	ldr	r1, [pc, #256]	; (800bbb8 <icmp_input+0x1fc>)
 800bab6:	4841      	ldr	r0, [pc, #260]	; (800bbbc <icmp_input+0x200>)
 800bab8:	f001 fb44 	bl	800d144 <iprintf>
          pbuf_free(r);
 800babc:	6978      	ldr	r0, [r7, #20]
 800babe:	f7f9 f943 	bl	8004d48 <pbuf_free>
          goto icmperr;
 800bac2:	e06c      	b.n	800bb9e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800bac4:	6879      	ldr	r1, [r7, #4]
 800bac6:	6978      	ldr	r0, [r7, #20]
 800bac8:	f7f9 fa56 	bl	8004f78 <pbuf_copy>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800bad2:	6978      	ldr	r0, [r7, #20]
 800bad4:	f7f9 f938 	bl	8004d48 <pbuf_free>
          goto icmperr;
 800bad8:	e061      	b.n	800bb9e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7f9 f934 	bl	8004d48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	607b      	str	r3, [r7, #4]
 800bae4:	e00f      	b.n	800bb06 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bae6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bae8:	330e      	adds	r3, #14
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7f9 f8a5 	bl	8004c3c <pbuf_remove_header>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d006      	beq.n	800bb06 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800baf8:	4b2e      	ldr	r3, [pc, #184]	; (800bbb4 <icmp_input+0x1f8>)
 800bafa:	22c7      	movs	r2, #199	; 0xc7
 800bafc:	4930      	ldr	r1, [pc, #192]	; (800bbc0 <icmp_input+0x204>)
 800bafe:	482f      	ldr	r0, [pc, #188]	; (800bbbc <icmp_input+0x200>)
 800bb00:	f001 fb20 	bl	800d144 <iprintf>
          goto icmperr;
 800bb04:	e04b      	b.n	800bb9e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800bb0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7f9 f883 	bl	8004c1c <pbuf_add_header>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d12b      	bne.n	800bb74 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bb2a:	4b20      	ldr	r3, [pc, #128]	; (800bbac <icmp_input+0x1f0>)
 800bb2c:	691a      	ldr	r2, [r3, #16]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2200      	movs	r2, #0
 800bb36:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	709a      	strb	r2, [r3, #2]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	22ff      	movs	r2, #255	; 0xff
 800bb46:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	729a      	strb	r2, [r3, #10]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	9302      	str	r3, [sp, #8]
 800bb56:	2301      	movs	r3, #1
 800bb58:	9301      	str	r3, [sp, #4]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	23ff      	movs	r3, #255	; 0xff
 800bb60:	2200      	movs	r2, #0
 800bb62:	69f9      	ldr	r1, [r7, #28]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fa75 	bl	800c054 <ip4_output_if>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800bb6e:	e001      	b.n	800bb74 <icmp_input+0x1b8>
      break;
 800bb70:	bf00      	nop
 800bb72:	e000      	b.n	800bb76 <icmp_input+0x1ba>
      break;
 800bb74:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7f9 f8e6 	bl	8004d48 <pbuf_free>
  return;
 800bb7c:	e013      	b.n	800bba6 <icmp_input+0x1ea>
    goto lenerr;
 800bb7e:	bf00      	nop
 800bb80:	e002      	b.n	800bb88 <icmp_input+0x1cc>
    goto lenerr;
 800bb82:	bf00      	nop
 800bb84:	e000      	b.n	800bb88 <icmp_input+0x1cc>
        goto lenerr;
 800bb86:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7f9 f8dd 	bl	8004d48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bb8e:	e00a      	b.n	800bba6 <icmp_input+0x1ea>
        goto icmperr;
 800bb90:	bf00      	nop
 800bb92:	e004      	b.n	800bb9e <icmp_input+0x1e2>
        goto icmperr;
 800bb94:	bf00      	nop
 800bb96:	e002      	b.n	800bb9e <icmp_input+0x1e2>
          goto icmperr;
 800bb98:	bf00      	nop
 800bb9a:	e000      	b.n	800bb9e <icmp_input+0x1e2>
          goto icmperr;
 800bb9c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7f9 f8d2 	bl	8004d48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bba4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bba6:	3728      	adds	r7, #40	; 0x28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	200031d0 	.word	0x200031d0
 800bbb0:	200031e4 	.word	0x200031e4
 800bbb4:	08010790 	.word	0x08010790
 800bbb8:	080107c8 	.word	0x080107c8
 800bbbc:	08010800 	.word	0x08010800
 800bbc0:	08010828 	.word	0x08010828

0800bbc4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bbd0:	78fb      	ldrb	r3, [r7, #3]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	2103      	movs	r1, #3
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f814 	bl	800bc04 <icmp_send_response>
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	210b      	movs	r1, #11
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f804 	bl	800bc04 <icmp_send_response>
}
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08c      	sub	sp, #48	; 0x30
 800bc08:	af04      	add	r7, sp, #16
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	70fb      	strb	r3, [r7, #3]
 800bc10:	4613      	mov	r3, r2
 800bc12:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bc14:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc18:	2124      	movs	r1, #36	; 0x24
 800bc1a:	2022      	movs	r0, #34	; 0x22
 800bc1c:	f7f8 fdb0 	bl	8004780 <pbuf_alloc>
 800bc20:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d04c      	beq.n	800bcc2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	895b      	ldrh	r3, [r3, #10]
 800bc2c:	2b23      	cmp	r3, #35	; 0x23
 800bc2e:	d806      	bhi.n	800bc3e <icmp_send_response+0x3a>
 800bc30:	4b26      	ldr	r3, [pc, #152]	; (800bccc <icmp_send_response+0xc8>)
 800bc32:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc36:	4926      	ldr	r1, [pc, #152]	; (800bcd0 <icmp_send_response+0xcc>)
 800bc38:	4826      	ldr	r0, [pc, #152]	; (800bcd4 <icmp_send_response+0xd0>)
 800bc3a:	f001 fa83 	bl	800d144 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	78fa      	ldrb	r2, [r7, #3]
 800bc4e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	78ba      	ldrb	r2, [r7, #2]
 800bc54:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	711a      	strb	r2, [r3, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	2200      	movs	r2, #0
 800bc64:	719a      	strb	r2, [r3, #6]
 800bc66:	2200      	movs	r2, #0
 800bc68:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	f103 0008 	add.w	r0, r3, #8
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	221c      	movs	r2, #28
 800bc78:	4619      	mov	r1, r3
 800bc7a:	f001 fa4d 	bl	800d118 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bc84:	f107 030c 	add.w	r3, r7, #12
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f000 f825 	bl	800bcd8 <ip4_route>
 800bc8e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d011      	beq.n	800bcba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	709a      	strb	r2, [r3, #2]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800bca0:	f107 020c 	add.w	r2, r7, #12
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	9302      	str	r3, [sp, #8]
 800bca8:	2301      	movs	r3, #1
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	2300      	movs	r3, #0
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	23ff      	movs	r3, #255	; 0xff
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	69f8      	ldr	r0, [r7, #28]
 800bcb6:	f000 f9cd 	bl	800c054 <ip4_output_if>
  }
  pbuf_free(q);
 800bcba:	69f8      	ldr	r0, [r7, #28]
 800bcbc:	f7f9 f844 	bl	8004d48 <pbuf_free>
 800bcc0:	e000      	b.n	800bcc4 <icmp_send_response+0xc0>
    return;
 800bcc2:	bf00      	nop
}
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	08010790 	.word	0x08010790
 800bcd0:	0801085c 	.word	0x0801085c
 800bcd4:	08010800 	.word	0x08010800

0800bcd8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800bce0:	4b33      	ldr	r3, [pc, #204]	; (800bdb0 <ip4_route+0xd8>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	e036      	b.n	800bd56 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bcee:	f003 0301 	and.w	r3, r3, #1
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d02b      	beq.n	800bd50 <ip4_route+0x78>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bcfe:	089b      	lsrs	r3, r3, #2
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d022      	beq.n	800bd50 <ip4_route+0x78>
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d01d      	beq.n	800bd50 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	405a      	eors	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3308      	adds	r3, #8
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4013      	ands	r3, r2
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	e038      	b.n	800bda2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d108      	bne.n	800bd50 <ip4_route+0x78>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	330c      	adds	r3, #12
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d101      	bne.n	800bd50 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	e028      	b.n	800bda2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1c5      	bne.n	800bce8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bd5c:	4b15      	ldr	r3, [pc, #84]	; (800bdb4 <ip4_route+0xdc>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d01a      	beq.n	800bd9a <ip4_route+0xc2>
 800bd64:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <ip4_route+0xdc>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d012      	beq.n	800bd9a <ip4_route+0xc2>
 800bd74:	4b0f      	ldr	r3, [pc, #60]	; (800bdb4 <ip4_route+0xdc>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00a      	beq.n	800bd9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bd84:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <ip4_route+0xdc>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d004      	beq.n	800bd9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b7f      	cmp	r3, #127	; 0x7f
 800bd98:	d101      	bne.n	800bd9e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	e001      	b.n	800bda2 <ip4_route+0xca>
  }

  return netif_default;
 800bd9e:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <ip4_route+0xdc>)
 800bda0:	681b      	ldr	r3, [r3, #0]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	20006734 	.word	0x20006734
 800bdb4:	20006738 	.word	0x20006738

0800bdb8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bdc6:	f003 0301 	and.w	r3, r3, #1
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d016      	beq.n	800bdfe <ip4_input_accept+0x46>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d011      	beq.n	800bdfe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bdda:	4b0b      	ldr	r3, [pc, #44]	; (800be08 <ip4_input_accept+0x50>)
 800bddc:	695a      	ldr	r2, [r3, #20]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3304      	adds	r3, #4
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d008      	beq.n	800bdfa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bde8:	4b07      	ldr	r3, [pc, #28]	; (800be08 <ip4_input_accept+0x50>)
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	6879      	ldr	r1, [r7, #4]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fa08 	bl	800c204 <ip4_addr_isbroadcast_u32>
 800bdf4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e000      	b.n	800be00 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	200031d0 	.word	0x200031d0

0800be0c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	091b      	lsrs	r3, r3, #4
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b04      	cmp	r3, #4
 800be26:	d004      	beq.n	800be32 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7f8 ff8d 	bl	8004d48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	e107      	b.n	800c042 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	f003 030f 	and.w	r3, r3, #15
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	885b      	ldrh	r3, [r3, #2]
 800be46:	b29b      	uxth	r3, r3
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f7 fcc9 	bl	80037e0 <lwip_htons>
 800be4e:	4603      	mov	r3, r0
 800be50:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	891b      	ldrh	r3, [r3, #8]
 800be56:	89ba      	ldrh	r2, [r7, #12]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d204      	bcs.n	800be66 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800be5c:	89bb      	ldrh	r3, [r7, #12]
 800be5e:	4619      	mov	r1, r3
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7f8 fdeb 	bl	8004a3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	895b      	ldrh	r3, [r3, #10]
 800be6a:	89fa      	ldrh	r2, [r7, #14]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d807      	bhi.n	800be80 <ip4_input+0x74>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	891b      	ldrh	r3, [r3, #8]
 800be74:	89ba      	ldrh	r2, [r7, #12]
 800be76:	429a      	cmp	r2, r3
 800be78:	d802      	bhi.n	800be80 <ip4_input+0x74>
 800be7a:	89fb      	ldrh	r3, [r7, #14]
 800be7c:	2b13      	cmp	r3, #19
 800be7e:	d804      	bhi.n	800be8a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7f8 ff61 	bl	8004d48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	e0db      	b.n	800c042 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	4a6f      	ldr	r2, [pc, #444]	; (800c04c <ip4_input+0x240>)
 800be90:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	4a6d      	ldr	r2, [pc, #436]	; (800c04c <ip4_input+0x240>)
 800be98:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800be9a:	4b6c      	ldr	r3, [pc, #432]	; (800c04c <ip4_input+0x240>)
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bea2:	2be0      	cmp	r3, #224	; 0xe0
 800bea4:	d112      	bne.n	800becc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800beac:	f003 0301 	and.w	r3, r3, #1
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d007      	beq.n	800bec6 <ip4_input+0xba>
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	3304      	adds	r3, #4
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <ip4_input+0xba>
      netif = inp;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	613b      	str	r3, [r7, #16]
 800bec4:	e02a      	b.n	800bf1c <ip4_input+0x110>
    } else {
      netif = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	613b      	str	r3, [r7, #16]
 800beca:	e027      	b.n	800bf1c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800becc:	6838      	ldr	r0, [r7, #0]
 800bece:	f7ff ff73 	bl	800bdb8 <ip4_input_accept>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <ip4_input+0xd2>
      netif = inp;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	613b      	str	r3, [r7, #16]
 800bedc:	e01e      	b.n	800bf1c <ip4_input+0x110>
    } else {
      netif = NULL;
 800bede:	2300      	movs	r3, #0
 800bee0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800bee2:	4b5a      	ldr	r3, [pc, #360]	; (800c04c <ip4_input+0x240>)
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b7f      	cmp	r3, #127	; 0x7f
 800beea:	d017      	beq.n	800bf1c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800beec:	4b58      	ldr	r3, [pc, #352]	; (800c050 <ip4_input+0x244>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	613b      	str	r3, [r7, #16]
 800bef2:	e00e      	b.n	800bf12 <ip4_input+0x106>
          if (netif == inp) {
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d006      	beq.n	800bf0a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800befc:	6938      	ldr	r0, [r7, #16]
 800befe:	f7ff ff5b 	bl	800bdb8 <ip4_input_accept>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d108      	bne.n	800bf1a <ip4_input+0x10e>
 800bf08:	e000      	b.n	800bf0c <ip4_input+0x100>
            continue;
 800bf0a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	613b      	str	r3, [r7, #16]
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d1ed      	bne.n	800bef4 <ip4_input+0xe8>
 800bf18:	e000      	b.n	800bf1c <ip4_input+0x110>
            break;
 800bf1a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bf1c:	4b4b      	ldr	r3, [pc, #300]	; (800c04c <ip4_input+0x240>)
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 f96e 	bl	800c204 <ip4_addr_isbroadcast_u32>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d105      	bne.n	800bf3a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800bf2e:	4b47      	ldr	r3, [pc, #284]	; (800c04c <ip4_input+0x240>)
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bf36:	2be0      	cmp	r3, #224	; 0xe0
 800bf38:	d104      	bne.n	800bf44 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7f8 ff04 	bl	8004d48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e07e      	b.n	800c042 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d104      	bne.n	800bf54 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7f8 fefc 	bl	8004d48 <pbuf_free>
    return ERR_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	e076      	b.n	800c042 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	88db      	ldrh	r3, [r3, #6]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800bf60:	4013      	ands	r3, r2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00b      	beq.n	800bf7e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fc92 	bl	800c890 <ip4_reass>
 800bf6c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <ip4_input+0x16c>
      return ERR_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	e064      	b.n	800c042 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bf7e:	4a33      	ldr	r2, [pc, #204]	; (800c04c <ip4_input+0x240>)
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800bf84:	4a31      	ldr	r2, [pc, #196]	; (800c04c <ip4_input+0x240>)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bf8a:	4a30      	ldr	r2, [pc, #192]	; (800c04c <ip4_input+0x240>)
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	f003 030f 	and.w	r3, r3, #15
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	4b2a      	ldr	r3, [pc, #168]	; (800c04c <ip4_input+0x240>)
 800bfa2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800bfa4:	89fb      	ldrh	r3, [r7, #14]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7f8 fe47 	bl	8004c3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	7a5b      	ldrb	r3, [r3, #9]
 800bfb2:	2b11      	cmp	r3, #17
 800bfb4:	d006      	beq.n	800bfc4 <ip4_input+0x1b8>
 800bfb6:	2b11      	cmp	r3, #17
 800bfb8:	dc13      	bgt.n	800bfe2 <ip4_input+0x1d6>
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d00c      	beq.n	800bfd8 <ip4_input+0x1cc>
 800bfbe:	2b06      	cmp	r3, #6
 800bfc0:	d005      	beq.n	800bfce <ip4_input+0x1c2>
 800bfc2:	e00e      	b.n	800bfe2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7fe fc68 	bl	800a89c <udp_input>
        break;
 800bfcc:	e026      	b.n	800c01c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7fa fce1 	bl	8006998 <tcp_input>
        break;
 800bfd6:	e021      	b.n	800c01c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff fcee 	bl	800b9bc <icmp_input>
        break;
 800bfe0:	e01c      	b.n	800c01c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bfe2:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <ip4_input+0x240>)
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	6939      	ldr	r1, [r7, #16]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 f90b 	bl	800c204 <ip4_addr_isbroadcast_u32>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10f      	bne.n	800c014 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bff4:	4b15      	ldr	r3, [pc, #84]	; (800c04c <ip4_input+0x240>)
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bffc:	2be0      	cmp	r3, #224	; 0xe0
 800bffe:	d009      	beq.n	800c014 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c000:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7f8 fe8b 	bl	8004d22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c00c:	2102      	movs	r1, #2
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff fdd8 	bl	800bbc4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7f8 fe97 	bl	8004d48 <pbuf_free>
        break;
 800c01a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c01c:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <ip4_input+0x240>)
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c022:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <ip4_input+0x240>)
 800c024:	2200      	movs	r2, #0
 800c026:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c028:	4b08      	ldr	r3, [pc, #32]	; (800c04c <ip4_input+0x240>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c02e:	4b07      	ldr	r3, [pc, #28]	; (800c04c <ip4_input+0x240>)
 800c030:	2200      	movs	r2, #0
 800c032:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <ip4_input+0x240>)
 800c036:	2200      	movs	r2, #0
 800c038:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c03a:	4b04      	ldr	r3, [pc, #16]	; (800c04c <ip4_input+0x240>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	200031d0 	.word	0x200031d0
 800c050:	20006734 	.word	0x20006734

0800c054 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b08a      	sub	sp, #40	; 0x28
 800c058:	af04      	add	r7, sp, #16
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d009      	beq.n	800c080 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d003      	beq.n	800c07a <ip4_output_if+0x26>
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d102      	bne.n	800c080 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	3304      	adds	r3, #4
 800c07e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c080:	78fa      	ldrb	r2, [r7, #3]
 800c082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c084:	9302      	str	r3, [sp, #8]
 800c086:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	4613      	mov	r3, r2
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	6979      	ldr	r1, [r7, #20]
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f000 f805 	bl	800c0a8 <ip4_output_if_src>
 800c09e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	7b9b      	ldrb	r3, [r3, #14]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d006      	beq.n	800c0cc <ip4_output_if_src+0x24>
 800c0be:	4b4b      	ldr	r3, [pc, #300]	; (800c1ec <ip4_output_if_src+0x144>)
 800c0c0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c0c4:	494a      	ldr	r1, [pc, #296]	; (800c1f0 <ip4_output_if_src+0x148>)
 800c0c6:	484b      	ldr	r0, [pc, #300]	; (800c1f4 <ip4_output_if_src+0x14c>)
 800c0c8:	f001 f83c 	bl	800d144 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d060      	beq.n	800c194 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c0d2:	2314      	movs	r3, #20
 800c0d4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c0d6:	2114      	movs	r1, #20
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	f7f8 fd9f 	bl	8004c1c <pbuf_add_header>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c0e4:	f06f 0301 	mvn.w	r3, #1
 800c0e8:	e07c      	b.n	800c1e4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	895b      	ldrh	r3, [r3, #10]
 800c0f4:	2b13      	cmp	r3, #19
 800c0f6:	d806      	bhi.n	800c106 <ip4_output_if_src+0x5e>
 800c0f8:	4b3c      	ldr	r3, [pc, #240]	; (800c1ec <ip4_output_if_src+0x144>)
 800c0fa:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c0fe:	493e      	ldr	r1, [pc, #248]	; (800c1f8 <ip4_output_if_src+0x150>)
 800c100:	483c      	ldr	r0, [pc, #240]	; (800c1f4 <ip4_output_if_src+0x14c>)
 800c102:	f001 f81f 	bl	800d144 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	78fa      	ldrb	r2, [r7, #3]
 800c10a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c112:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c11c:	8b7b      	ldrh	r3, [r7, #26]
 800c11e:	089b      	lsrs	r3, r3, #2
 800c120:	b29b      	uxth	r3, r3
 800c122:	b2db      	uxtb	r3, r3
 800c124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c134:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	891b      	ldrh	r3, [r3, #8]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7f7 fb50 	bl	80037e0 <lwip_htons>
 800c140:	4603      	mov	r3, r0
 800c142:	461a      	mov	r2, r3
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	2200      	movs	r2, #0
 800c14c:	719a      	strb	r2, [r3, #6]
 800c14e:	2200      	movs	r2, #0
 800c150:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c152:	4b2a      	ldr	r3, [pc, #168]	; (800c1fc <ip4_output_if_src+0x154>)
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	4618      	mov	r0, r3
 800c158:	f7f7 fb42 	bl	80037e0 <lwip_htons>
 800c15c:	4603      	mov	r3, r0
 800c15e:	461a      	mov	r2, r3
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c164:	4b25      	ldr	r3, [pc, #148]	; (800c1fc <ip4_output_if_src+0x154>)
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	3301      	adds	r3, #1
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	4b23      	ldr	r3, [pc, #140]	; (800c1fc <ip4_output_if_src+0x154>)
 800c16e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d104      	bne.n	800c180 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c176:	4b22      	ldr	r3, [pc, #136]	; (800c200 <ip4_output_if_src+0x158>)
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	60da      	str	r2, [r3, #12]
 800c17e:	e003      	b.n	800c188 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	2200      	movs	r2, #0
 800c18c:	729a      	strb	r2, [r3, #10]
 800c18e:	2200      	movs	r2, #0
 800c190:	72da      	strb	r2, [r3, #11]
 800c192:	e00f      	b.n	800c1b4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	895b      	ldrh	r3, [r3, #10]
 800c198:	2b13      	cmp	r3, #19
 800c19a:	d802      	bhi.n	800c1a2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c19c:	f06f 0301 	mvn.w	r3, #1
 800c1a0:	e020      	b.n	800c1e4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c1ae:	f107 0314 	add.w	r3, r7, #20
 800c1b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00c      	beq.n	800c1d6 <ip4_output_if_src+0x12e>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	891a      	ldrh	r2, [r3, #8]
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d906      	bls.n	800c1d6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 fd53 	bl	800cc78 <ip4_frag>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	e006      	b.n	800c1e4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	695b      	ldr	r3, [r3, #20]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	68f9      	ldr	r1, [r7, #12]
 800c1de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3720      	adds	r7, #32
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	08010888 	.word	0x08010888
 800c1f0:	080108bc 	.word	0x080108bc
 800c1f4:	080108c8 	.word	0x080108c8
 800c1f8:	080108f0 	.word	0x080108f0
 800c1fc:	20006892 	.word	0x20006892
 800c200:	08010cbc 	.word	0x08010cbc

0800c204 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c218:	d002      	beq.n	800c220 <ip4_addr_isbroadcast_u32+0x1c>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c220:	2301      	movs	r3, #1
 800c222:	e02a      	b.n	800c27a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c22a:	f003 0302 	and.w	r3, r3, #2
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c232:	2300      	movs	r3, #0
 800c234:	e021      	b.n	800c27a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	3304      	adds	r3, #4
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d101      	bne.n	800c246 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c242:	2300      	movs	r3, #0
 800c244:	e019      	b.n	800c27a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	3304      	adds	r3, #4
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	405a      	eors	r2, r3
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	3308      	adds	r3, #8
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4013      	ands	r3, r2
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10d      	bne.n	800c278 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	3308      	adds	r3, #8
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	43da      	mvns	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	3308      	adds	r3, #8
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c270:	429a      	cmp	r2, r3
 800c272:	d101      	bne.n	800c278 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c278:	2300      	movs	r3, #0
  }
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
	...

0800c288 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c292:	4b12      	ldr	r3, [pc, #72]	; (800c2dc <ip_reass_tmr+0x54>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c298:	e018      	b.n	800c2cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	7fdb      	ldrb	r3, [r3, #31]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00b      	beq.n	800c2ba <ip_reass_tmr+0x32>
      r->timer--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	7fdb      	ldrb	r3, [r3, #31]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	e008      	b.n	800c2cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f80a 	bl	800c2e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1e3      	bne.n	800c29a <ip_reass_tmr+0x12>
    }
  }
}
 800c2d2:	bf00      	nop
 800c2d4:	bf00      	nop
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	20006894 	.word	0x20006894

0800c2e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b088      	sub	sp, #32
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d105      	bne.n	800c302 <ip_reass_free_complete_datagram+0x22>
 800c2f6:	4b45      	ldr	r3, [pc, #276]	; (800c40c <ip_reass_free_complete_datagram+0x12c>)
 800c2f8:	22ab      	movs	r2, #171	; 0xab
 800c2fa:	4945      	ldr	r1, [pc, #276]	; (800c410 <ip_reass_free_complete_datagram+0x130>)
 800c2fc:	4845      	ldr	r0, [pc, #276]	; (800c414 <ip_reass_free_complete_datagram+0x134>)
 800c2fe:	f000 ff21 	bl	800d144 <iprintf>
  if (prev != NULL) {
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00a      	beq.n	800c31e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d005      	beq.n	800c31e <ip_reass_free_complete_datagram+0x3e>
 800c312:	4b3e      	ldr	r3, [pc, #248]	; (800c40c <ip_reass_free_complete_datagram+0x12c>)
 800c314:	22ad      	movs	r2, #173	; 0xad
 800c316:	4940      	ldr	r1, [pc, #256]	; (800c418 <ip_reass_free_complete_datagram+0x138>)
 800c318:	483e      	ldr	r0, [pc, #248]	; (800c414 <ip_reass_free_complete_datagram+0x134>)
 800c31a:	f000 ff13 	bl	800d144 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	889b      	ldrh	r3, [r3, #4]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d12a      	bne.n	800c386 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	6858      	ldr	r0, [r3, #4]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	3308      	adds	r3, #8
 800c346:	2214      	movs	r2, #20
 800c348:	4619      	mov	r1, r3
 800c34a:	f000 fee5 	bl	800d118 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c34e:	2101      	movs	r1, #1
 800c350:	69b8      	ldr	r0, [r7, #24]
 800c352:	f7ff fc47 	bl	800bbe4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c356:	69b8      	ldr	r0, [r7, #24]
 800c358:	f7f8 fd7e 	bl	8004e58 <pbuf_clen>
 800c35c:	4603      	mov	r3, r0
 800c35e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c360:	8bfa      	ldrh	r2, [r7, #30]
 800c362:	8a7b      	ldrh	r3, [r7, #18]
 800c364:	4413      	add	r3, r2
 800c366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c36a:	db05      	blt.n	800c378 <ip_reass_free_complete_datagram+0x98>
 800c36c:	4b27      	ldr	r3, [pc, #156]	; (800c40c <ip_reass_free_complete_datagram+0x12c>)
 800c36e:	22bc      	movs	r2, #188	; 0xbc
 800c370:	492a      	ldr	r1, [pc, #168]	; (800c41c <ip_reass_free_complete_datagram+0x13c>)
 800c372:	4828      	ldr	r0, [pc, #160]	; (800c414 <ip_reass_free_complete_datagram+0x134>)
 800c374:	f000 fee6 	bl	800d144 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c378:	8bfa      	ldrh	r2, [r7, #30]
 800c37a:	8a7b      	ldrh	r3, [r7, #18]
 800c37c:	4413      	add	r3, r2
 800c37e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c380:	69b8      	ldr	r0, [r7, #24]
 800c382:	f7f8 fce1 	bl	8004d48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c38c:	e01f      	b.n	800c3ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f7f8 fd5a 	bl	8004e58 <pbuf_clen>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c3a8:	8bfa      	ldrh	r2, [r7, #30]
 800c3aa:	8a7b      	ldrh	r3, [r7, #18]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3b2:	db05      	blt.n	800c3c0 <ip_reass_free_complete_datagram+0xe0>
 800c3b4:	4b15      	ldr	r3, [pc, #84]	; (800c40c <ip_reass_free_complete_datagram+0x12c>)
 800c3b6:	22cc      	movs	r2, #204	; 0xcc
 800c3b8:	4918      	ldr	r1, [pc, #96]	; (800c41c <ip_reass_free_complete_datagram+0x13c>)
 800c3ba:	4816      	ldr	r0, [pc, #88]	; (800c414 <ip_reass_free_complete_datagram+0x134>)
 800c3bc:	f000 fec2 	bl	800d144 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c3c0:	8bfa      	ldrh	r2, [r7, #30]
 800c3c2:	8a7b      	ldrh	r3, [r7, #18]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f7f8 fcbd 	bl	8004d48 <pbuf_free>
  while (p != NULL) {
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1dc      	bne.n	800c38e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f8c2 	bl	800c560 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c3dc:	4b10      	ldr	r3, [pc, #64]	; (800c420 <ip_reass_free_complete_datagram+0x140>)
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	8bfa      	ldrh	r2, [r7, #30]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d905      	bls.n	800c3f2 <ip_reass_free_complete_datagram+0x112>
 800c3e6:	4b09      	ldr	r3, [pc, #36]	; (800c40c <ip_reass_free_complete_datagram+0x12c>)
 800c3e8:	22d2      	movs	r2, #210	; 0xd2
 800c3ea:	490e      	ldr	r1, [pc, #56]	; (800c424 <ip_reass_free_complete_datagram+0x144>)
 800c3ec:	4809      	ldr	r0, [pc, #36]	; (800c414 <ip_reass_free_complete_datagram+0x134>)
 800c3ee:	f000 fea9 	bl	800d144 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <ip_reass_free_complete_datagram+0x140>)
 800c3f4:	881a      	ldrh	r2, [r3, #0]
 800c3f6:	8bfb      	ldrh	r3, [r7, #30]
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	4b08      	ldr	r3, [pc, #32]	; (800c420 <ip_reass_free_complete_datagram+0x140>)
 800c3fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c400:	8bfb      	ldrh	r3, [r7, #30]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3720      	adds	r7, #32
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	08010920 	.word	0x08010920
 800c410:	0801095c 	.word	0x0801095c
 800c414:	08010968 	.word	0x08010968
 800c418:	08010990 	.word	0x08010990
 800c41c:	080109a4 	.word	0x080109a4
 800c420:	20006898 	.word	0x20006898
 800c424:	080109c4 	.word	0x080109c4

0800c428 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08a      	sub	sp, #40	; 0x28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c432:	2300      	movs	r3, #0
 800c434:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c43a:	2300      	movs	r3, #0
 800c43c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c446:	4b28      	ldr	r3, [pc, #160]	; (800c4e8 <ip_reass_remove_oldest_datagram+0xc0>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c44c:	e030      	b.n	800c4b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c450:	695a      	ldr	r2, [r3, #20]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	429a      	cmp	r2, r3
 800c458:	d10c      	bne.n	800c474 <ip_reass_remove_oldest_datagram+0x4c>
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	429a      	cmp	r2, r3
 800c464:	d106      	bne.n	800c474 <ip_reass_remove_oldest_datagram+0x4c>
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	899a      	ldrh	r2, [r3, #12]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	889b      	ldrh	r3, [r3, #4]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	429a      	cmp	r2, r3
 800c472:	d014      	beq.n	800c49e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	3301      	adds	r3, #1
 800c478:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d104      	bne.n	800c48a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	61bb      	str	r3, [r7, #24]
 800c488:	e009      	b.n	800c49e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	7fda      	ldrb	r2, [r3, #31]
 800c48e:	6a3b      	ldr	r3, [r7, #32]
 800c490:	7fdb      	ldrb	r3, [r3, #31]
 800c492:	429a      	cmp	r2, r3
 800c494:	d803      	bhi.n	800c49e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c498:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1cb      	bne.n	800c44e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d008      	beq.n	800c4ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c4bc:	69b9      	ldr	r1, [r7, #24]
 800c4be:	6a38      	ldr	r0, [r7, #32]
 800c4c0:	f7ff ff0e 	bl	800c2e0 <ip_reass_free_complete_datagram>
 800c4c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	da02      	bge.n	800c4dc <ip_reass_remove_oldest_datagram+0xb4>
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	dcac      	bgt.n	800c436 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c4dc:	697b      	ldr	r3, [r7, #20]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3728      	adds	r7, #40	; 0x28
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20006894 	.word	0x20006894

0800c4ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c4f6:	2004      	movs	r0, #4
 800c4f8:	f7f7 fdc8 	bl	800408c <memp_malloc>
 800c4fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d110      	bne.n	800c526 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff ff8e 	bl	800c428 <ip_reass_remove_oldest_datagram>
 800c50c:	4602      	mov	r2, r0
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	4293      	cmp	r3, r2
 800c512:	dc03      	bgt.n	800c51c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c514:	2004      	movs	r0, #4
 800c516:	f7f7 fdb9 	bl	800408c <memp_malloc>
 800c51a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c522:	2300      	movs	r3, #0
 800c524:	e016      	b.n	800c554 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c526:	2220      	movs	r2, #32
 800c528:	2100      	movs	r1, #0
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f000 fe02 	bl	800d134 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	220f      	movs	r2, #15
 800c534:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c536:	4b09      	ldr	r3, [pc, #36]	; (800c55c <ip_reass_enqueue_new_datagram+0x70>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c53e:	4a07      	ldr	r2, [pc, #28]	; (800c55c <ip_reass_enqueue_new_datagram+0x70>)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	3308      	adds	r3, #8
 800c548:	2214      	movs	r2, #20
 800c54a:	6879      	ldr	r1, [r7, #4]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 fde3 	bl	800d118 <memcpy>
  return ipr;
 800c552:	68fb      	ldr	r3, [r7, #12]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	20006894 	.word	0x20006894

0800c560 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c56a:	4b10      	ldr	r3, [pc, #64]	; (800c5ac <ip_reass_dequeue_datagram+0x4c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	429a      	cmp	r2, r3
 800c572:	d104      	bne.n	800c57e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a0c      	ldr	r2, [pc, #48]	; (800c5ac <ip_reass_dequeue_datagram+0x4c>)
 800c57a:	6013      	str	r3, [r2, #0]
 800c57c:	e00d      	b.n	800c59a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d106      	bne.n	800c592 <ip_reass_dequeue_datagram+0x32>
 800c584:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <ip_reass_dequeue_datagram+0x50>)
 800c586:	f240 1245 	movw	r2, #325	; 0x145
 800c58a:	490a      	ldr	r1, [pc, #40]	; (800c5b4 <ip_reass_dequeue_datagram+0x54>)
 800c58c:	480a      	ldr	r0, [pc, #40]	; (800c5b8 <ip_reass_dequeue_datagram+0x58>)
 800c58e:	f000 fdd9 	bl	800d144 <iprintf>
    prev->next = ipr->next;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c59a:	6879      	ldr	r1, [r7, #4]
 800c59c:	2004      	movs	r0, #4
 800c59e:	f7f7 fdc1 	bl	8004124 <memp_free>
}
 800c5a2:	bf00      	nop
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20006894 	.word	0x20006894
 800c5b0:	08010920 	.word	0x08010920
 800c5b4:	080109e8 	.word	0x080109e8
 800c5b8:	08010968 	.word	0x08010968

0800c5bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08c      	sub	sp, #48	; 0x30
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7f7 f8ff 	bl	80037e0 <lwip_htons>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 030f 	and.w	r3, r3, #15
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c5f4:	7e7b      	ldrb	r3, [r7, #25]
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	8b7a      	ldrh	r2, [r7, #26]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d202      	bcs.n	800c604 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c5fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c602:	e135      	b.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c604:	7e7b      	ldrb	r3, [r7, #25]
 800c606:	b29b      	uxth	r3, r3
 800c608:	8b7a      	ldrh	r2, [r7, #26]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	88db      	ldrh	r3, [r3, #6]
 800c612:	b29b      	uxth	r3, r3
 800c614:	4618      	mov	r0, r3
 800c616:	f7f7 f8e3 	bl	80037e0 <lwip_htons>
 800c61a:	4603      	mov	r3, r0
 800c61c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c620:	b29b      	uxth	r3, r3
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62e:	2200      	movs	r2, #0
 800c630:	701a      	strb	r2, [r3, #0]
 800c632:	2200      	movs	r2, #0
 800c634:	705a      	strb	r2, [r3, #1]
 800c636:	2200      	movs	r2, #0
 800c638:	709a      	strb	r2, [r3, #2]
 800c63a:	2200      	movs	r2, #0
 800c63c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	8afa      	ldrh	r2, [r7, #22]
 800c642:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c644:	8afa      	ldrh	r2, [r7, #22]
 800c646:	8b7b      	ldrh	r3, [r7, #26]
 800c648:	4413      	add	r3, r2
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c652:	88db      	ldrh	r3, [r3, #6]
 800c654:	b29b      	uxth	r3, r3
 800c656:	8afa      	ldrh	r2, [r7, #22]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d902      	bls.n	800c662 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c65c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c660:	e106      	b.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	627b      	str	r3, [r7, #36]	; 0x24
 800c668:	e068      	b.n	800c73c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	889b      	ldrh	r3, [r3, #4]
 800c674:	b29a      	uxth	r2, r3
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	889b      	ldrh	r3, [r3, #4]
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d235      	bcs.n	800c6ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c684:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d020      	beq.n	800c6ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	889b      	ldrh	r3, [r3, #4]
 800c690:	b29a      	uxth	r2, r3
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	88db      	ldrh	r3, [r3, #6]
 800c696:	b29b      	uxth	r3, r3
 800c698:	429a      	cmp	r2, r3
 800c69a:	d307      	bcc.n	800c6ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69e:	88db      	ldrh	r3, [r3, #6]
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	889b      	ldrh	r3, [r3, #4]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d902      	bls.n	800c6b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c6ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6b0:	e0de      	b.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	88db      	ldrh	r3, [r3, #6]
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	889b      	ldrh	r3, [r3, #4]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d03d      	beq.n	800c744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c6cc:	e03a      	b.n	800c744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	88db      	ldrh	r3, [r3, #6]
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	889b      	ldrh	r3, [r3, #4]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d902      	bls.n	800c6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c6de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6e2:	e0c5      	b.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	68ba      	ldr	r2, [r7, #8]
 800c6e8:	605a      	str	r2, [r3, #4]
      break;
 800c6ea:	e02b      	b.n	800c744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	889b      	ldrh	r3, [r3, #4]
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	889b      	ldrh	r3, [r3, #4]
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d102      	bne.n	800c702 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c6fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c700:	e0b6      	b.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c704:	889b      	ldrh	r3, [r3, #4]
 800c706:	b29a      	uxth	r2, r3
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	88db      	ldrh	r3, [r3, #6]
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	429a      	cmp	r2, r3
 800c710:	d202      	bcs.n	800c718 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c716:	e0ab      	b.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d009      	beq.n	800c732 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c720:	88db      	ldrh	r3, [r3, #6]
 800c722:	b29a      	uxth	r2, r3
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	889b      	ldrh	r3, [r3, #4]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d001      	beq.n	800c732 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d193      	bne.n	800c66a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c742:	e000      	b.n	800c746 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c744:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d12d      	bne.n	800c7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d01c      	beq.n	800c78c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	88db      	ldrh	r3, [r3, #6]
 800c756:	b29a      	uxth	r2, r3
 800c758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75a:	889b      	ldrh	r3, [r3, #4]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	429a      	cmp	r2, r3
 800c760:	d906      	bls.n	800c770 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c762:	4b45      	ldr	r3, [pc, #276]	; (800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c764:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c768:	4944      	ldr	r1, [pc, #272]	; (800c87c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c76a:	4845      	ldr	r0, [pc, #276]	; (800c880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c76c:	f000 fcea 	bl	800d144 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c778:	88db      	ldrh	r3, [r3, #6]
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	889b      	ldrh	r3, [r3, #4]
 800c780:	b29b      	uxth	r3, r3
 800c782:	429a      	cmp	r2, r3
 800c784:	d010      	beq.n	800c7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	623b      	str	r3, [r7, #32]
 800c78a:	e00d      	b.n	800c7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d006      	beq.n	800c7a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c794:	4b38      	ldr	r3, [pc, #224]	; (800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c796:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800c79a:	493a      	ldr	r1, [pc, #232]	; (800c884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c79c:	4838      	ldr	r0, [pc, #224]	; (800c880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c79e:	f000 fcd1 	bl	800d144 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d105      	bne.n	800c7ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	7f9b      	ldrb	r3, [r3, #30]
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d059      	beq.n	800c86e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d04f      	beq.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d006      	beq.n	800c7d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	889b      	ldrh	r3, [r3, #4]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d002      	beq.n	800c7dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	623b      	str	r3, [r7, #32]
 800c7da:	e041      	b.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c7e6:	e012      	b.n	800c80e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	88db      	ldrh	r3, [r3, #6]
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	889b      	ldrh	r3, [r3, #4]
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d002      	beq.n	800c804 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	623b      	str	r3, [r7, #32]
            break;
 800c802:	e007      	b.n	800c814 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1e9      	bne.n	800c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c814:	6a3b      	ldr	r3, [r7, #32]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d022      	beq.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c822:	4b15      	ldr	r3, [pc, #84]	; (800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c824:	f240 12df 	movw	r2, #479	; 0x1df
 800c828:	4917      	ldr	r1, [pc, #92]	; (800c888 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c82a:	4815      	ldr	r0, [pc, #84]	; (800c880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c82c:	f000 fc8a 	bl	800d144 <iprintf>
          LWIP_ASSERT("sanity check",
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c838:	429a      	cmp	r2, r3
 800c83a:	d106      	bne.n	800c84a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c83c:	4b0e      	ldr	r3, [pc, #56]	; (800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c83e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c842:	4911      	ldr	r1, [pc, #68]	; (800c888 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c844:	480e      	ldr	r0, [pc, #56]	; (800c880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c846:	f000 fc7d 	bl	800d144 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d006      	beq.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c852:	4b09      	ldr	r3, [pc, #36]	; (800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c854:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800c858:	490c      	ldr	r1, [pc, #48]	; (800c88c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c85a:	4809      	ldr	r0, [pc, #36]	; (800c880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c85c:	f000 fc72 	bl	800d144 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	2b00      	cmp	r3, #0
 800c864:	bf14      	ite	ne
 800c866:	2301      	movne	r3, #1
 800c868:	2300      	moveq	r3, #0
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	e000      	b.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3730      	adds	r7, #48	; 0x30
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	08010920 	.word	0x08010920
 800c87c:	08010a04 	.word	0x08010a04
 800c880:	08010968 	.word	0x08010968
 800c884:	08010a24 	.word	0x08010a24
 800c888:	08010a5c 	.word	0x08010a5c
 800c88c:	08010a6c 	.word	0x08010a6c

0800c890 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08e      	sub	sp, #56	; 0x38
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	f003 030f 	and.w	r3, r3, #15
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	2b14      	cmp	r3, #20
 800c8ae:	f040 8171 	bne.w	800cb94 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	88db      	ldrh	r3, [r3, #6]
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7f6 ff91 	bl	80037e0 <lwip_htons>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8cc:	885b      	ldrh	r3, [r3, #2]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7f6 ff85 	bl	80037e0 <lwip_htons>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	f003 030f 	and.w	r3, r3, #15
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800c8ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	f0c0 8150 	bcc.w	800cb98 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c8f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7f8 faa7 	bl	8004e58 <pbuf_clen>
 800c90a:	4603      	mov	r3, r0
 800c90c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c90e:	4b8c      	ldr	r3, [pc, #560]	; (800cb40 <ip4_reass+0x2b0>)
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	8c3b      	ldrh	r3, [r7, #32]
 800c916:	4413      	add	r3, r2
 800c918:	2b0a      	cmp	r3, #10
 800c91a:	dd10      	ble.n	800c93e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c91c:	8c3b      	ldrh	r3, [r7, #32]
 800c91e:	4619      	mov	r1, r3
 800c920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c922:	f7ff fd81 	bl	800c428 <ip_reass_remove_oldest_datagram>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 8137 	beq.w	800cb9c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c92e:	4b84      	ldr	r3, [pc, #528]	; (800cb40 <ip4_reass+0x2b0>)
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	8c3b      	ldrh	r3, [r7, #32]
 800c936:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c938:	2b0a      	cmp	r3, #10
 800c93a:	f300 812f 	bgt.w	800cb9c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c93e:	4b81      	ldr	r3, [pc, #516]	; (800cb44 <ip4_reass+0x2b4>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	633b      	str	r3, [r7, #48]	; 0x30
 800c944:	e015      	b.n	800c972 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	695a      	ldr	r2, [r3, #20]
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d10c      	bne.n	800c96c <ip4_reass+0xdc>
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	699a      	ldr	r2, [r3, #24]
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d106      	bne.n	800c96c <ip4_reass+0xdc>
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	899a      	ldrh	r2, [r3, #12]
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	889b      	ldrh	r3, [r3, #4]
 800c966:	b29b      	uxth	r3, r3
 800c968:	429a      	cmp	r2, r3
 800c96a:	d006      	beq.n	800c97a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	633b      	str	r3, [r7, #48]	; 0x30
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1e6      	bne.n	800c946 <ip4_reass+0xb6>
 800c978:	e000      	b.n	800c97c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c97a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c982:	8c3b      	ldrh	r3, [r7, #32]
 800c984:	4619      	mov	r1, r3
 800c986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c988:	f7ff fdb0 	bl	800c4ec <ip_reass_enqueue_new_datagram>
 800c98c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	2b00      	cmp	r3, #0
 800c992:	d11c      	bne.n	800c9ce <ip4_reass+0x13e>
      goto nullreturn;
 800c994:	e105      	b.n	800cba2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c998:	88db      	ldrh	r3, [r3, #6]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7f6 ff1f 	bl	80037e0 <lwip_htons>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d110      	bne.n	800c9ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ae:	89db      	ldrh	r3, [r3, #14]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7f6 ff15 	bl	80037e0 <lwip_htons>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	2214      	movs	r2, #20
 800c9c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 fba5 	bl	800d118 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d0:	88db      	ldrh	r3, [r3, #6]
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	f003 0320 	and.w	r3, r3, #32
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bf0c      	ite	eq
 800c9dc:	2301      	moveq	r3, #1
 800c9de:	2300      	movne	r3, #0
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00e      	beq.n	800ca08 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800c9ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c9ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9ee:	4413      	add	r3, r2
 800c9f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c9f2:	8b7a      	ldrh	r2, [r7, #26]
 800c9f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	f0c0 80a0 	bcc.w	800cb3c <ip4_reass+0x2ac>
 800c9fc:	8b7b      	ldrh	r3, [r7, #26]
 800c9fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ca02:	4293      	cmp	r3, r2
 800ca04:	f200 809a 	bhi.w	800cb3c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca0e:	f7ff fdd5 	bl	800c5bc <ip_reass_chain_frag_into_datagram_and_validate>
 800ca12:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca1a:	f000 809b 	beq.w	800cb54 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ca1e:	4b48      	ldr	r3, [pc, #288]	; (800cb40 <ip4_reass+0x2b0>)
 800ca20:	881a      	ldrh	r2, [r3, #0]
 800ca22:	8c3b      	ldrh	r3, [r7, #32]
 800ca24:	4413      	add	r3, r2
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	4b45      	ldr	r3, [pc, #276]	; (800cb40 <ip4_reass+0x2b0>)
 800ca2a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00d      	beq.n	800ca4e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ca32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ca34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca36:	4413      	add	r3, r2
 800ca38:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	8a7a      	ldrh	r2, [r7, #18]
 800ca3e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	7f9b      	ldrb	r3, [r3, #30]
 800ca44:	f043 0301 	orr.w	r3, r3, #1
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d171      	bne.n	800cb38 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	8b9b      	ldrh	r3, [r3, #28]
 800ca58:	3314      	adds	r3, #20
 800ca5a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca70:	3308      	adds	r3, #8
 800ca72:	2214      	movs	r2, #20
 800ca74:	4619      	mov	r1, r3
 800ca76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca78:	f000 fb4e 	bl	800d118 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ca7c:	8a3b      	ldrh	r3, [r7, #16]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7f6 feae 	bl	80037e0 <lwip_htons>
 800ca84:	4603      	mov	r3, r0
 800ca86:	461a      	mov	r2, r3
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8e:	2200      	movs	r2, #0
 800ca90:	719a      	strb	r2, [r3, #6]
 800ca92:	2200      	movs	r2, #0
 800ca94:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ca96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca98:	2200      	movs	r2, #0
 800ca9a:	729a      	strb	r2, [r3, #10]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800caa6:	e00d      	b.n	800cac4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800caa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800caae:	2114      	movs	r1, #20
 800cab0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cab2:	f7f8 f8c3 	bl	8004c3c <pbuf_remove_header>
      pbuf_cat(p, r);
 800cab6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7f8 fa07 	bl	8004ecc <pbuf_cat>
      r = iprh->next_pbuf;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1ee      	bne.n	800caa8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800caca:	4b1e      	ldr	r3, [pc, #120]	; (800cb44 <ip4_reass+0x2b4>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d102      	bne.n	800cada <ip4_reass+0x24a>
      ipr_prev = NULL;
 800cad4:	2300      	movs	r3, #0
 800cad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cad8:	e010      	b.n	800cafc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cada:	4b1a      	ldr	r3, [pc, #104]	; (800cb44 <ip4_reass+0x2b4>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cae0:	e007      	b.n	800caf2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae8:	429a      	cmp	r2, r3
 800caea:	d006      	beq.n	800cafa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1f4      	bne.n	800cae2 <ip4_reass+0x252>
 800caf8:	e000      	b.n	800cafc <ip4_reass+0x26c>
          break;
 800cafa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cafc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cafe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb00:	f7ff fd2e 	bl	800c560 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7f8 f9a7 	bl	8004e58 <pbuf_clen>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800cb0e:	4b0c      	ldr	r3, [pc, #48]	; (800cb40 <ip4_reass+0x2b0>)
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	8c3a      	ldrh	r2, [r7, #32]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d906      	bls.n	800cb26 <ip4_reass+0x296>
 800cb18:	4b0b      	ldr	r3, [pc, #44]	; (800cb48 <ip4_reass+0x2b8>)
 800cb1a:	f240 229b 	movw	r2, #667	; 0x29b
 800cb1e:	490b      	ldr	r1, [pc, #44]	; (800cb4c <ip4_reass+0x2bc>)
 800cb20:	480b      	ldr	r0, [pc, #44]	; (800cb50 <ip4_reass+0x2c0>)
 800cb22:	f000 fb0f 	bl	800d144 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800cb26:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <ip4_reass+0x2b0>)
 800cb28:	881a      	ldrh	r2, [r3, #0]
 800cb2a:	8c3b      	ldrh	r3, [r7, #32]
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	4b03      	ldr	r3, [pc, #12]	; (800cb40 <ip4_reass+0x2b0>)
 800cb32:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	e038      	b.n	800cbaa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e036      	b.n	800cbaa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800cb3c:	bf00      	nop
 800cb3e:	e00a      	b.n	800cb56 <ip4_reass+0x2c6>
 800cb40:	20006898 	.word	0x20006898
 800cb44:	20006894 	.word	0x20006894
 800cb48:	08010920 	.word	0x08010920
 800cb4c:	08010a90 	.word	0x08010a90
 800cb50:	08010968 	.word	0x08010968
    goto nullreturn_ipr;
 800cb54:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d106      	bne.n	800cb6a <ip4_reass+0x2da>
 800cb5c:	4b15      	ldr	r3, [pc, #84]	; (800cbb4 <ip4_reass+0x324>)
 800cb5e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800cb62:	4915      	ldr	r1, [pc, #84]	; (800cbb8 <ip4_reass+0x328>)
 800cb64:	4815      	ldr	r0, [pc, #84]	; (800cbbc <ip4_reass+0x32c>)
 800cb66:	f000 faed 	bl	800d144 <iprintf>
  if (ipr->p == NULL) {
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d116      	bne.n	800cba0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800cb72:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <ip4_reass+0x330>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d006      	beq.n	800cb8a <ip4_reass+0x2fa>
 800cb7c:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <ip4_reass+0x324>)
 800cb7e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cb82:	4910      	ldr	r1, [pc, #64]	; (800cbc4 <ip4_reass+0x334>)
 800cb84:	480d      	ldr	r0, [pc, #52]	; (800cbbc <ip4_reass+0x32c>)
 800cb86:	f000 fadd 	bl	800d144 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb8e:	f7ff fce7 	bl	800c560 <ip_reass_dequeue_datagram>
 800cb92:	e006      	b.n	800cba2 <ip4_reass+0x312>
    goto nullreturn;
 800cb94:	bf00      	nop
 800cb96:	e004      	b.n	800cba2 <ip4_reass+0x312>
    goto nullreturn;
 800cb98:	bf00      	nop
 800cb9a:	e002      	b.n	800cba2 <ip4_reass+0x312>
      goto nullreturn;
 800cb9c:	bf00      	nop
 800cb9e:	e000      	b.n	800cba2 <ip4_reass+0x312>
  }

nullreturn:
 800cba0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7f8 f8d0 	bl	8004d48 <pbuf_free>
  return NULL;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3738      	adds	r7, #56	; 0x38
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	08010920 	.word	0x08010920
 800cbb8:	08010aac 	.word	0x08010aac
 800cbbc:	08010968 	.word	0x08010968
 800cbc0:	20006894 	.word	0x20006894
 800cbc4:	08010ab8 	.word	0x08010ab8

0800cbc8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800cbcc:	2005      	movs	r0, #5
 800cbce:	f7f7 fa5d 	bl	800408c <memp_malloc>
 800cbd2:	4603      	mov	r3, r0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cbe6:	4b07      	ldr	r3, [pc, #28]	; (800cc04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cbe8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800cbec:	4906      	ldr	r1, [pc, #24]	; (800cc08 <ip_frag_free_pbuf_custom_ref+0x30>)
 800cbee:	4807      	ldr	r0, [pc, #28]	; (800cc0c <ip_frag_free_pbuf_custom_ref+0x34>)
 800cbf0:	f000 faa8 	bl	800d144 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cbf4:	6879      	ldr	r1, [r7, #4]
 800cbf6:	2005      	movs	r0, #5
 800cbf8:	f7f7 fa94 	bl	8004124 <memp_free>
}
 800cbfc:	bf00      	nop
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	08010920 	.word	0x08010920
 800cc08:	08010ad8 	.word	0x08010ad8
 800cc0c:	08010968 	.word	0x08010968

0800cc10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <ipfrag_free_pbuf_custom+0x20>
 800cc22:	4b11      	ldr	r3, [pc, #68]	; (800cc68 <ipfrag_free_pbuf_custom+0x58>)
 800cc24:	f240 22ce 	movw	r2, #718	; 0x2ce
 800cc28:	4910      	ldr	r1, [pc, #64]	; (800cc6c <ipfrag_free_pbuf_custom+0x5c>)
 800cc2a:	4811      	ldr	r0, [pc, #68]	; (800cc70 <ipfrag_free_pbuf_custom+0x60>)
 800cc2c:	f000 fa8a 	bl	800d144 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d006      	beq.n	800cc46 <ipfrag_free_pbuf_custom+0x36>
 800cc38:	4b0b      	ldr	r3, [pc, #44]	; (800cc68 <ipfrag_free_pbuf_custom+0x58>)
 800cc3a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800cc3e:	490d      	ldr	r1, [pc, #52]	; (800cc74 <ipfrag_free_pbuf_custom+0x64>)
 800cc40:	480b      	ldr	r0, [pc, #44]	; (800cc70 <ipfrag_free_pbuf_custom+0x60>)
 800cc42:	f000 fa7f 	bl	800d144 <iprintf>
  if (pcr->original != NULL) {
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	695b      	ldr	r3, [r3, #20]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7f8 f878 	bl	8004d48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f7ff ffbd 	bl	800cbd8 <ip_frag_free_pbuf_custom_ref>
}
 800cc5e:	bf00      	nop
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	08010920 	.word	0x08010920
 800cc6c:	08010ae4 	.word	0x08010ae4
 800cc70:	08010968 	.word	0x08010968
 800cc74:	08010af0 	.word	0x08010af0

0800cc78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b094      	sub	sp, #80	; 0x50
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc8e:	3b14      	subs	r3, #20
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	da00      	bge.n	800cc96 <ip4_frag+0x1e>
 800cc94:	3307      	adds	r3, #7
 800cc96:	10db      	asrs	r3, r3, #3
 800cc98:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800cc9a:	2314      	movs	r3, #20
 800cc9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800cca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800cca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	f003 030f 	and.w	r3, r3, #15
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b14      	cmp	r3, #20
 800ccb8:	d002      	beq.n	800ccc0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ccba:	f06f 0305 	mvn.w	r3, #5
 800ccbe:	e110      	b.n	800cee2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	895b      	ldrh	r3, [r3, #10]
 800ccc4:	2b13      	cmp	r3, #19
 800ccc6:	d809      	bhi.n	800ccdc <ip4_frag+0x64>
 800ccc8:	4b88      	ldr	r3, [pc, #544]	; (800ceec <ip4_frag+0x274>)
 800ccca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ccce:	4988      	ldr	r1, [pc, #544]	; (800cef0 <ip4_frag+0x278>)
 800ccd0:	4888      	ldr	r0, [pc, #544]	; (800cef4 <ip4_frag+0x27c>)
 800ccd2:	f000 fa37 	bl	800d144 <iprintf>
 800ccd6:	f06f 0305 	mvn.w	r3, #5
 800ccda:	e102      	b.n	800cee2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	88db      	ldrh	r3, [r3, #6]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7f6 fd7c 	bl	80037e0 <lwip_htons>
 800cce8:	4603      	mov	r3, r0
 800ccea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ccec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ccf6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ccfc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	891b      	ldrh	r3, [r3, #8]
 800cd02:	3b14      	subs	r3, #20
 800cd04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800cd08:	e0e1      	b.n	800cece <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cd0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd14:	4293      	cmp	r3, r2
 800cd16:	bf28      	it	cs
 800cd18:	4613      	movcs	r3, r2
 800cd1a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cd1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd20:	2114      	movs	r1, #20
 800cd22:	200e      	movs	r0, #14
 800cd24:	f7f7 fd2c 	bl	8004780 <pbuf_alloc>
 800cd28:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f000 80d5 	beq.w	800cedc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	895b      	ldrh	r3, [r3, #10]
 800cd36:	2b13      	cmp	r3, #19
 800cd38:	d806      	bhi.n	800cd48 <ip4_frag+0xd0>
 800cd3a:	4b6c      	ldr	r3, [pc, #432]	; (800ceec <ip4_frag+0x274>)
 800cd3c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800cd40:	496d      	ldr	r1, [pc, #436]	; (800cef8 <ip4_frag+0x280>)
 800cd42:	486c      	ldr	r0, [pc, #432]	; (800cef4 <ip4_frag+0x27c>)
 800cd44:	f000 f9fe 	bl	800d144 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	2214      	movs	r2, #20
 800cd4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 f9e1 	bl	800d118 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800cd5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cd5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800cd62:	e064      	b.n	800ce2e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	895a      	ldrh	r2, [r3, #10]
 800cd68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	895b      	ldrh	r3, [r3, #10]
 800cd72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d906      	bls.n	800cd86 <ip4_frag+0x10e>
 800cd78:	4b5c      	ldr	r3, [pc, #368]	; (800ceec <ip4_frag+0x274>)
 800cd7a:	f240 322d 	movw	r2, #813	; 0x32d
 800cd7e:	495f      	ldr	r1, [pc, #380]	; (800cefc <ip4_frag+0x284>)
 800cd80:	485c      	ldr	r0, [pc, #368]	; (800cef4 <ip4_frag+0x27c>)
 800cd82:	f000 f9df 	bl	800d144 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cd86:	8bfa      	ldrh	r2, [r7, #30]
 800cd88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	bf28      	it	cs
 800cd90:	4613      	movcs	r3, r2
 800cd92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cd96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d105      	bne.n	800cdaa <ip4_frag+0x132>
        poff = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	60fb      	str	r3, [r7, #12]
        continue;
 800cda8:	e041      	b.n	800ce2e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cdaa:	f7ff ff0d 	bl	800cbc8 <ip_frag_alloc_pbuf_custom_ref>
 800cdae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d103      	bne.n	800cdbe <ip4_frag+0x146>
        pbuf_free(rambuf);
 800cdb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdb8:	f7f7 ffc6 	bl	8004d48 <pbuf_free>
        goto memerr;
 800cdbc:	e08f      	b.n	800cede <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cdbe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cdc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800cdcc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cdd0:	9201      	str	r2, [sp, #4]
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2241      	movs	r2, #65	; 0x41
 800cdd8:	2000      	movs	r0, #0
 800cdda:	f7f7 fdfb 	bl	80049d4 <pbuf_alloced_custom>
 800cdde:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d106      	bne.n	800cdf4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cde6:	69b8      	ldr	r0, [r7, #24]
 800cde8:	f7ff fef6 	bl	800cbd8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cdec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdee:	f7f7 ffab 	bl	8004d48 <pbuf_free>
        goto memerr;
 800cdf2:	e074      	b.n	800cede <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7f8 f847 	bl	8004e88 <pbuf_ref>
      pcr->original = p;
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	4a3f      	ldr	r2, [pc, #252]	; (800cf00 <ip4_frag+0x288>)
 800ce04:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ce06:	6979      	ldr	r1, [r7, #20]
 800ce08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce0a:	f7f8 f85f 	bl	8004ecc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ce0e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ce12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ce1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d004      	beq.n	800ce2e <ip4_frag+0x1b6>
        poff = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ce2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d196      	bne.n	800cd64 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ce36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ce38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce3c:	4413      	add	r3, r2
 800ce3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce44:	f1a3 0213 	sub.w	r2, r3, #19
 800ce48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	bfcc      	ite	gt
 800ce50:	2301      	movgt	r3, #1
 800ce52:	2300      	movle	r3, #0
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ce58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ce5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce60:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <ip4_frag+0x1f6>
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ce6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ce74:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ce76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7f6 fcb1 	bl	80037e0 <lwip_htons>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	461a      	mov	r2, r3
 800ce82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce84:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ce86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ce88:	3314      	adds	r3, #20
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f6 fca7 	bl	80037e0 <lwip_htons>
 800ce92:	4603      	mov	r3, r0
 800ce94:	461a      	mov	r2, r3
 800ce96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce98:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	729a      	strb	r2, [r3, #10]
 800cea0:	2200      	movs	r2, #0
 800cea2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ceac:	68b8      	ldr	r0, [r7, #8]
 800ceae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ceb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ceb2:	f7f7 ff49 	bl	8004d48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ceb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ceba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800cec2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cec6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cec8:	4413      	add	r3, r2
 800ceca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800cece:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f47f af19 	bne.w	800cd0a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ced8:	2300      	movs	r3, #0
 800ceda:	e002      	b.n	800cee2 <ip4_frag+0x26a>
      goto memerr;
 800cedc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3748      	adds	r7, #72	; 0x48
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	08010920 	.word	0x08010920
 800cef0:	08010afc 	.word	0x08010afc
 800cef4:	08010968 	.word	0x08010968
 800cef8:	08010b18 	.word	0x08010b18
 800cefc:	08010b38 	.word	0x08010b38
 800cf00:	0800cc11 	.word	0x0800cc11

0800cf04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800cf0e:	230e      	movs	r3, #14
 800cf10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	895b      	ldrh	r3, [r3, #10]
 800cf16:	2b0e      	cmp	r3, #14
 800cf18:	d96e      	bls.n	800cff8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	7bdb      	ldrb	r3, [r3, #15]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf28:	3301      	adds	r3, #1
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	7b1a      	ldrb	r2, [r3, #12]
 800cf3a:	7b5b      	ldrb	r3, [r3, #13]
 800cf3c:	021b      	lsls	r3, r3, #8
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	f003 0301 	and.w	r3, r3, #1
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d023      	beq.n	800cf96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d10f      	bne.n	800cf76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	785b      	ldrb	r3, [r3, #1]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d11b      	bne.n	800cf96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cf62:	2b5e      	cmp	r3, #94	; 0x5e
 800cf64:	d117      	bne.n	800cf96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	7b5b      	ldrb	r3, [r3, #13]
 800cf6a:	f043 0310 	orr.w	r3, r3, #16
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	735a      	strb	r2, [r3, #13]
 800cf74:	e00f      	b.n	800cf96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	2206      	movs	r2, #6
 800cf7a:	4928      	ldr	r1, [pc, #160]	; (800d01c <ethernet_input+0x118>)
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f000 f8bb 	bl	800d0f8 <memcmp>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d106      	bne.n	800cf96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	7b5b      	ldrb	r3, [r3, #13]
 800cf8c:	f043 0308 	orr.w	r3, r3, #8
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cf96:	89fb      	ldrh	r3, [r7, #14]
 800cf98:	2b08      	cmp	r3, #8
 800cf9a:	d003      	beq.n	800cfa4 <ethernet_input+0xa0>
 800cf9c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cfa0:	d014      	beq.n	800cfcc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cfa2:	e032      	b.n	800d00a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfaa:	f003 0308 	and.w	r3, r3, #8
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d024      	beq.n	800cffc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cfb2:	8afb      	ldrh	r3, [r7, #22]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7f7 fe40 	bl	8004c3c <pbuf_remove_header>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d11e      	bne.n	800d000 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7fe ff21 	bl	800be0c <ip4_input>
      break;
 800cfca:	e013      	b.n	800cff4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfd2:	f003 0308 	and.w	r3, r3, #8
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d014      	beq.n	800d004 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cfda:	8afb      	ldrh	r3, [r7, #22]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7f7 fe2c 	bl	8004c3c <pbuf_remove_header>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10e      	bne.n	800d008 <ethernet_input+0x104>
        etharp_input(p, netif);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7fe f8c1 	bl	800b174 <etharp_input>
      break;
 800cff2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800cff4:	2300      	movs	r3, #0
 800cff6:	e00c      	b.n	800d012 <ethernet_input+0x10e>
    goto free_and_return;
 800cff8:	bf00      	nop
 800cffa:	e006      	b.n	800d00a <ethernet_input+0x106>
        goto free_and_return;
 800cffc:	bf00      	nop
 800cffe:	e004      	b.n	800d00a <ethernet_input+0x106>
        goto free_and_return;
 800d000:	bf00      	nop
 800d002:	e002      	b.n	800d00a <ethernet_input+0x106>
        goto free_and_return;
 800d004:	bf00      	nop
 800d006:	e000      	b.n	800d00a <ethernet_input+0x106>
        goto free_and_return;
 800d008:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7f7 fe9c 	bl	8004d48 <pbuf_free>
  return ERR_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	08010cc0 	.word	0x08010cc0

0800d020 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d02e:	8c3b      	ldrh	r3, [r7, #32]
 800d030:	4618      	mov	r0, r3
 800d032:	f7f6 fbd5 	bl	80037e0 <lwip_htons>
 800d036:	4603      	mov	r3, r0
 800d038:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d03a:	210e      	movs	r1, #14
 800d03c:	68b8      	ldr	r0, [r7, #8]
 800d03e:	f7f7 fded 	bl	8004c1c <pbuf_add_header>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d125      	bne.n	800d094 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	8afa      	ldrh	r2, [r7, #22]
 800d052:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	2206      	movs	r2, #6
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 f85c 	bl	800d118 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	3306      	adds	r3, #6
 800d064:	2206      	movs	r2, #6
 800d066:	6879      	ldr	r1, [r7, #4]
 800d068:	4618      	mov	r0, r3
 800d06a:	f000 f855 	bl	800d118 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d074:	2b06      	cmp	r3, #6
 800d076:	d006      	beq.n	800d086 <ethernet_output+0x66>
 800d078:	4b0a      	ldr	r3, [pc, #40]	; (800d0a4 <ethernet_output+0x84>)
 800d07a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d07e:	490a      	ldr	r1, [pc, #40]	; (800d0a8 <ethernet_output+0x88>)
 800d080:	480a      	ldr	r0, [pc, #40]	; (800d0ac <ethernet_output+0x8c>)
 800d082:	f000 f85f 	bl	800d144 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	699b      	ldr	r3, [r3, #24]
 800d08a:	68b9      	ldr	r1, [r7, #8]
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	4798      	blx	r3
 800d090:	4603      	mov	r3, r0
 800d092:	e002      	b.n	800d09a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d094:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d096:	f06f 0301 	mvn.w	r3, #1
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3718      	adds	r7, #24
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	08010b48 	.word	0x08010b48
 800d0a8:	08010b80 	.word	0x08010b80
 800d0ac:	08010bb4 	.word	0x08010bb4

0800d0b0 <__libc_init_array>:
 800d0b0:	b570      	push	{r4, r5, r6, lr}
 800d0b2:	4d0d      	ldr	r5, [pc, #52]	; (800d0e8 <__libc_init_array+0x38>)
 800d0b4:	4c0d      	ldr	r4, [pc, #52]	; (800d0ec <__libc_init_array+0x3c>)
 800d0b6:	1b64      	subs	r4, r4, r5
 800d0b8:	10a4      	asrs	r4, r4, #2
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	42a6      	cmp	r6, r4
 800d0be:	d109      	bne.n	800d0d4 <__libc_init_array+0x24>
 800d0c0:	4d0b      	ldr	r5, [pc, #44]	; (800d0f0 <__libc_init_array+0x40>)
 800d0c2:	4c0c      	ldr	r4, [pc, #48]	; (800d0f4 <__libc_init_array+0x44>)
 800d0c4:	f001 f88e 	bl	800e1e4 <_init>
 800d0c8:	1b64      	subs	r4, r4, r5
 800d0ca:	10a4      	asrs	r4, r4, #2
 800d0cc:	2600      	movs	r6, #0
 800d0ce:	42a6      	cmp	r6, r4
 800d0d0:	d105      	bne.n	800d0de <__libc_init_array+0x2e>
 800d0d2:	bd70      	pop	{r4, r5, r6, pc}
 800d0d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0d8:	4798      	blx	r3
 800d0da:	3601      	adds	r6, #1
 800d0dc:	e7ee      	b.n	800d0bc <__libc_init_array+0xc>
 800d0de:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e2:	4798      	blx	r3
 800d0e4:	3601      	adds	r6, #1
 800d0e6:	e7f2      	b.n	800d0ce <__libc_init_array+0x1e>
 800d0e8:	08010e20 	.word	0x08010e20
 800d0ec:	08010e20 	.word	0x08010e20
 800d0f0:	08010e20 	.word	0x08010e20
 800d0f4:	08010e24 	.word	0x08010e24

0800d0f8 <memcmp>:
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	3901      	subs	r1, #1
 800d0fc:	4402      	add	r2, r0
 800d0fe:	4290      	cmp	r0, r2
 800d100:	d101      	bne.n	800d106 <memcmp+0xe>
 800d102:	2000      	movs	r0, #0
 800d104:	e005      	b.n	800d112 <memcmp+0x1a>
 800d106:	7803      	ldrb	r3, [r0, #0]
 800d108:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d10c:	42a3      	cmp	r3, r4
 800d10e:	d001      	beq.n	800d114 <memcmp+0x1c>
 800d110:	1b18      	subs	r0, r3, r4
 800d112:	bd10      	pop	{r4, pc}
 800d114:	3001      	adds	r0, #1
 800d116:	e7f2      	b.n	800d0fe <memcmp+0x6>

0800d118 <memcpy>:
 800d118:	440a      	add	r2, r1
 800d11a:	4291      	cmp	r1, r2
 800d11c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d120:	d100      	bne.n	800d124 <memcpy+0xc>
 800d122:	4770      	bx	lr
 800d124:	b510      	push	{r4, lr}
 800d126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d12a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d12e:	4291      	cmp	r1, r2
 800d130:	d1f9      	bne.n	800d126 <memcpy+0xe>
 800d132:	bd10      	pop	{r4, pc}

0800d134 <memset>:
 800d134:	4402      	add	r2, r0
 800d136:	4603      	mov	r3, r0
 800d138:	4293      	cmp	r3, r2
 800d13a:	d100      	bne.n	800d13e <memset+0xa>
 800d13c:	4770      	bx	lr
 800d13e:	f803 1b01 	strb.w	r1, [r3], #1
 800d142:	e7f9      	b.n	800d138 <memset+0x4>

0800d144 <iprintf>:
 800d144:	b40f      	push	{r0, r1, r2, r3}
 800d146:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <iprintf+0x2c>)
 800d148:	b513      	push	{r0, r1, r4, lr}
 800d14a:	681c      	ldr	r4, [r3, #0]
 800d14c:	b124      	cbz	r4, 800d158 <iprintf+0x14>
 800d14e:	69a3      	ldr	r3, [r4, #24]
 800d150:	b913      	cbnz	r3, 800d158 <iprintf+0x14>
 800d152:	4620      	mov	r0, r4
 800d154:	f000 f8c2 	bl	800d2dc <__sinit>
 800d158:	ab05      	add	r3, sp, #20
 800d15a:	9a04      	ldr	r2, [sp, #16]
 800d15c:	68a1      	ldr	r1, [r4, #8]
 800d15e:	9301      	str	r3, [sp, #4]
 800d160:	4620      	mov	r0, r4
 800d162:	f000 fa7f 	bl	800d664 <_vfiprintf_r>
 800d166:	b002      	add	sp, #8
 800d168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d16c:	b004      	add	sp, #16
 800d16e:	4770      	bx	lr
 800d170:	20000014 	.word	0x20000014

0800d174 <rand>:
 800d174:	4b16      	ldr	r3, [pc, #88]	; (800d1d0 <rand+0x5c>)
 800d176:	b510      	push	{r4, lr}
 800d178:	681c      	ldr	r4, [r3, #0]
 800d17a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d17c:	b9b3      	cbnz	r3, 800d1ac <rand+0x38>
 800d17e:	2018      	movs	r0, #24
 800d180:	f000 f95e 	bl	800d440 <malloc>
 800d184:	63a0      	str	r0, [r4, #56]	; 0x38
 800d186:	b928      	cbnz	r0, 800d194 <rand+0x20>
 800d188:	4602      	mov	r2, r0
 800d18a:	4b12      	ldr	r3, [pc, #72]	; (800d1d4 <rand+0x60>)
 800d18c:	4812      	ldr	r0, [pc, #72]	; (800d1d8 <rand+0x64>)
 800d18e:	214e      	movs	r1, #78	; 0x4e
 800d190:	f000 f82e 	bl	800d1f0 <__assert_func>
 800d194:	4a11      	ldr	r2, [pc, #68]	; (800d1dc <rand+0x68>)
 800d196:	4b12      	ldr	r3, [pc, #72]	; (800d1e0 <rand+0x6c>)
 800d198:	e9c0 2300 	strd	r2, r3, [r0]
 800d19c:	4b11      	ldr	r3, [pc, #68]	; (800d1e4 <rand+0x70>)
 800d19e:	6083      	str	r3, [r0, #8]
 800d1a0:	230b      	movs	r3, #11
 800d1a2:	8183      	strh	r3, [r0, #12]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d1ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d1ae:	4a0e      	ldr	r2, [pc, #56]	; (800d1e8 <rand+0x74>)
 800d1b0:	6920      	ldr	r0, [r4, #16]
 800d1b2:	6963      	ldr	r3, [r4, #20]
 800d1b4:	490d      	ldr	r1, [pc, #52]	; (800d1ec <rand+0x78>)
 800d1b6:	4342      	muls	r2, r0
 800d1b8:	fb01 2203 	mla	r2, r1, r3, r2
 800d1bc:	fba0 0101 	umull	r0, r1, r0, r1
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	eb42 0001 	adc.w	r0, r2, r1
 800d1c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d1ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d1ce:	bd10      	pop	{r4, pc}
 800d1d0:	20000014 	.word	0x20000014
 800d1d4:	08010cd4 	.word	0x08010cd4
 800d1d8:	08010ceb 	.word	0x08010ceb
 800d1dc:	abcd330e 	.word	0xabcd330e
 800d1e0:	e66d1234 	.word	0xe66d1234
 800d1e4:	0005deec 	.word	0x0005deec
 800d1e8:	5851f42d 	.word	0x5851f42d
 800d1ec:	4c957f2d 	.word	0x4c957f2d

0800d1f0 <__assert_func>:
 800d1f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1f2:	4614      	mov	r4, r2
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	4b09      	ldr	r3, [pc, #36]	; (800d21c <__assert_func+0x2c>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	68d8      	ldr	r0, [r3, #12]
 800d1fe:	b14c      	cbz	r4, 800d214 <__assert_func+0x24>
 800d200:	4b07      	ldr	r3, [pc, #28]	; (800d220 <__assert_func+0x30>)
 800d202:	9100      	str	r1, [sp, #0]
 800d204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d208:	4906      	ldr	r1, [pc, #24]	; (800d224 <__assert_func+0x34>)
 800d20a:	462b      	mov	r3, r5
 800d20c:	f000 f8e4 	bl	800d3d8 <fiprintf>
 800d210:	f000 fe12 	bl	800de38 <abort>
 800d214:	4b04      	ldr	r3, [pc, #16]	; (800d228 <__assert_func+0x38>)
 800d216:	461c      	mov	r4, r3
 800d218:	e7f3      	b.n	800d202 <__assert_func+0x12>
 800d21a:	bf00      	nop
 800d21c:	20000014 	.word	0x20000014
 800d220:	08010d46 	.word	0x08010d46
 800d224:	08010d53 	.word	0x08010d53
 800d228:	08010d81 	.word	0x08010d81

0800d22c <std>:
 800d22c:	2300      	movs	r3, #0
 800d22e:	b510      	push	{r4, lr}
 800d230:	4604      	mov	r4, r0
 800d232:	e9c0 3300 	strd	r3, r3, [r0]
 800d236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d23a:	6083      	str	r3, [r0, #8]
 800d23c:	8181      	strh	r1, [r0, #12]
 800d23e:	6643      	str	r3, [r0, #100]	; 0x64
 800d240:	81c2      	strh	r2, [r0, #14]
 800d242:	6183      	str	r3, [r0, #24]
 800d244:	4619      	mov	r1, r3
 800d246:	2208      	movs	r2, #8
 800d248:	305c      	adds	r0, #92	; 0x5c
 800d24a:	f7ff ff73 	bl	800d134 <memset>
 800d24e:	4b05      	ldr	r3, [pc, #20]	; (800d264 <std+0x38>)
 800d250:	6263      	str	r3, [r4, #36]	; 0x24
 800d252:	4b05      	ldr	r3, [pc, #20]	; (800d268 <std+0x3c>)
 800d254:	62a3      	str	r3, [r4, #40]	; 0x28
 800d256:	4b05      	ldr	r3, [pc, #20]	; (800d26c <std+0x40>)
 800d258:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d25a:	4b05      	ldr	r3, [pc, #20]	; (800d270 <std+0x44>)
 800d25c:	6224      	str	r4, [r4, #32]
 800d25e:	6323      	str	r3, [r4, #48]	; 0x30
 800d260:	bd10      	pop	{r4, pc}
 800d262:	bf00      	nop
 800d264:	0800dc0d 	.word	0x0800dc0d
 800d268:	0800dc2f 	.word	0x0800dc2f
 800d26c:	0800dc67 	.word	0x0800dc67
 800d270:	0800dc8b 	.word	0x0800dc8b

0800d274 <_cleanup_r>:
 800d274:	4901      	ldr	r1, [pc, #4]	; (800d27c <_cleanup_r+0x8>)
 800d276:	f000 b8c1 	b.w	800d3fc <_fwalk_reent>
 800d27a:	bf00      	nop
 800d27c:	0800df75 	.word	0x0800df75

0800d280 <__sfmoreglue>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	2268      	movs	r2, #104	; 0x68
 800d284:	1e4d      	subs	r5, r1, #1
 800d286:	4355      	muls	r5, r2
 800d288:	460e      	mov	r6, r1
 800d28a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d28e:	f000 f94b 	bl	800d528 <_malloc_r>
 800d292:	4604      	mov	r4, r0
 800d294:	b140      	cbz	r0, 800d2a8 <__sfmoreglue+0x28>
 800d296:	2100      	movs	r1, #0
 800d298:	e9c0 1600 	strd	r1, r6, [r0]
 800d29c:	300c      	adds	r0, #12
 800d29e:	60a0      	str	r0, [r4, #8]
 800d2a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2a4:	f7ff ff46 	bl	800d134 <memset>
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	bd70      	pop	{r4, r5, r6, pc}

0800d2ac <__sfp_lock_acquire>:
 800d2ac:	4801      	ldr	r0, [pc, #4]	; (800d2b4 <__sfp_lock_acquire+0x8>)
 800d2ae:	f000 b8c5 	b.w	800d43c <__retarget_lock_acquire_recursive>
 800d2b2:	bf00      	nop
 800d2b4:	200068a1 	.word	0x200068a1

0800d2b8 <__sfp_lock_release>:
 800d2b8:	4801      	ldr	r0, [pc, #4]	; (800d2c0 <__sfp_lock_release+0x8>)
 800d2ba:	f000 b8c0 	b.w	800d43e <__retarget_lock_release_recursive>
 800d2be:	bf00      	nop
 800d2c0:	200068a1 	.word	0x200068a1

0800d2c4 <__sinit_lock_acquire>:
 800d2c4:	4801      	ldr	r0, [pc, #4]	; (800d2cc <__sinit_lock_acquire+0x8>)
 800d2c6:	f000 b8b9 	b.w	800d43c <__retarget_lock_acquire_recursive>
 800d2ca:	bf00      	nop
 800d2cc:	200068a2 	.word	0x200068a2

0800d2d0 <__sinit_lock_release>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	; (800d2d8 <__sinit_lock_release+0x8>)
 800d2d2:	f000 b8b4 	b.w	800d43e <__retarget_lock_release_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	200068a2 	.word	0x200068a2

0800d2dc <__sinit>:
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	4604      	mov	r4, r0
 800d2e0:	f7ff fff0 	bl	800d2c4 <__sinit_lock_acquire>
 800d2e4:	69a3      	ldr	r3, [r4, #24]
 800d2e6:	b11b      	cbz	r3, 800d2f0 <__sinit+0x14>
 800d2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ec:	f7ff bff0 	b.w	800d2d0 <__sinit_lock_release>
 800d2f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d2f4:	6523      	str	r3, [r4, #80]	; 0x50
 800d2f6:	4b13      	ldr	r3, [pc, #76]	; (800d344 <__sinit+0x68>)
 800d2f8:	4a13      	ldr	r2, [pc, #76]	; (800d348 <__sinit+0x6c>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2fe:	42a3      	cmp	r3, r4
 800d300:	bf04      	itt	eq
 800d302:	2301      	moveq	r3, #1
 800d304:	61a3      	streq	r3, [r4, #24]
 800d306:	4620      	mov	r0, r4
 800d308:	f000 f820 	bl	800d34c <__sfp>
 800d30c:	6060      	str	r0, [r4, #4]
 800d30e:	4620      	mov	r0, r4
 800d310:	f000 f81c 	bl	800d34c <__sfp>
 800d314:	60a0      	str	r0, [r4, #8]
 800d316:	4620      	mov	r0, r4
 800d318:	f000 f818 	bl	800d34c <__sfp>
 800d31c:	2200      	movs	r2, #0
 800d31e:	60e0      	str	r0, [r4, #12]
 800d320:	2104      	movs	r1, #4
 800d322:	6860      	ldr	r0, [r4, #4]
 800d324:	f7ff ff82 	bl	800d22c <std>
 800d328:	68a0      	ldr	r0, [r4, #8]
 800d32a:	2201      	movs	r2, #1
 800d32c:	2109      	movs	r1, #9
 800d32e:	f7ff ff7d 	bl	800d22c <std>
 800d332:	68e0      	ldr	r0, [r4, #12]
 800d334:	2202      	movs	r2, #2
 800d336:	2112      	movs	r1, #18
 800d338:	f7ff ff78 	bl	800d22c <std>
 800d33c:	2301      	movs	r3, #1
 800d33e:	61a3      	str	r3, [r4, #24]
 800d340:	e7d2      	b.n	800d2e8 <__sinit+0xc>
 800d342:	bf00      	nop
 800d344:	08010cd0 	.word	0x08010cd0
 800d348:	0800d275 	.word	0x0800d275

0800d34c <__sfp>:
 800d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34e:	4607      	mov	r7, r0
 800d350:	f7ff ffac 	bl	800d2ac <__sfp_lock_acquire>
 800d354:	4b1e      	ldr	r3, [pc, #120]	; (800d3d0 <__sfp+0x84>)
 800d356:	681e      	ldr	r6, [r3, #0]
 800d358:	69b3      	ldr	r3, [r6, #24]
 800d35a:	b913      	cbnz	r3, 800d362 <__sfp+0x16>
 800d35c:	4630      	mov	r0, r6
 800d35e:	f7ff ffbd 	bl	800d2dc <__sinit>
 800d362:	3648      	adds	r6, #72	; 0x48
 800d364:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d368:	3b01      	subs	r3, #1
 800d36a:	d503      	bpl.n	800d374 <__sfp+0x28>
 800d36c:	6833      	ldr	r3, [r6, #0]
 800d36e:	b30b      	cbz	r3, 800d3b4 <__sfp+0x68>
 800d370:	6836      	ldr	r6, [r6, #0]
 800d372:	e7f7      	b.n	800d364 <__sfp+0x18>
 800d374:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d378:	b9d5      	cbnz	r5, 800d3b0 <__sfp+0x64>
 800d37a:	4b16      	ldr	r3, [pc, #88]	; (800d3d4 <__sfp+0x88>)
 800d37c:	60e3      	str	r3, [r4, #12]
 800d37e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d382:	6665      	str	r5, [r4, #100]	; 0x64
 800d384:	f000 f859 	bl	800d43a <__retarget_lock_init_recursive>
 800d388:	f7ff ff96 	bl	800d2b8 <__sfp_lock_release>
 800d38c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d394:	6025      	str	r5, [r4, #0]
 800d396:	61a5      	str	r5, [r4, #24]
 800d398:	2208      	movs	r2, #8
 800d39a:	4629      	mov	r1, r5
 800d39c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3a0:	f7ff fec8 	bl	800d134 <memset>
 800d3a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d3a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3b0:	3468      	adds	r4, #104	; 0x68
 800d3b2:	e7d9      	b.n	800d368 <__sfp+0x1c>
 800d3b4:	2104      	movs	r1, #4
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	f7ff ff62 	bl	800d280 <__sfmoreglue>
 800d3bc:	4604      	mov	r4, r0
 800d3be:	6030      	str	r0, [r6, #0]
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d1d5      	bne.n	800d370 <__sfp+0x24>
 800d3c4:	f7ff ff78 	bl	800d2b8 <__sfp_lock_release>
 800d3c8:	230c      	movs	r3, #12
 800d3ca:	603b      	str	r3, [r7, #0]
 800d3cc:	e7ee      	b.n	800d3ac <__sfp+0x60>
 800d3ce:	bf00      	nop
 800d3d0:	08010cd0 	.word	0x08010cd0
 800d3d4:	ffff0001 	.word	0xffff0001

0800d3d8 <fiprintf>:
 800d3d8:	b40e      	push	{r1, r2, r3}
 800d3da:	b503      	push	{r0, r1, lr}
 800d3dc:	4601      	mov	r1, r0
 800d3de:	ab03      	add	r3, sp, #12
 800d3e0:	4805      	ldr	r0, [pc, #20]	; (800d3f8 <fiprintf+0x20>)
 800d3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3e6:	6800      	ldr	r0, [r0, #0]
 800d3e8:	9301      	str	r3, [sp, #4]
 800d3ea:	f000 f93b 	bl	800d664 <_vfiprintf_r>
 800d3ee:	b002      	add	sp, #8
 800d3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3f4:	b003      	add	sp, #12
 800d3f6:	4770      	bx	lr
 800d3f8:	20000014 	.word	0x20000014

0800d3fc <_fwalk_reent>:
 800d3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d400:	4606      	mov	r6, r0
 800d402:	4688      	mov	r8, r1
 800d404:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d408:	2700      	movs	r7, #0
 800d40a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d40e:	f1b9 0901 	subs.w	r9, r9, #1
 800d412:	d505      	bpl.n	800d420 <_fwalk_reent+0x24>
 800d414:	6824      	ldr	r4, [r4, #0]
 800d416:	2c00      	cmp	r4, #0
 800d418:	d1f7      	bne.n	800d40a <_fwalk_reent+0xe>
 800d41a:	4638      	mov	r0, r7
 800d41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d420:	89ab      	ldrh	r3, [r5, #12]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d907      	bls.n	800d436 <_fwalk_reent+0x3a>
 800d426:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d42a:	3301      	adds	r3, #1
 800d42c:	d003      	beq.n	800d436 <_fwalk_reent+0x3a>
 800d42e:	4629      	mov	r1, r5
 800d430:	4630      	mov	r0, r6
 800d432:	47c0      	blx	r8
 800d434:	4307      	orrs	r7, r0
 800d436:	3568      	adds	r5, #104	; 0x68
 800d438:	e7e9      	b.n	800d40e <_fwalk_reent+0x12>

0800d43a <__retarget_lock_init_recursive>:
 800d43a:	4770      	bx	lr

0800d43c <__retarget_lock_acquire_recursive>:
 800d43c:	4770      	bx	lr

0800d43e <__retarget_lock_release_recursive>:
 800d43e:	4770      	bx	lr

0800d440 <malloc>:
 800d440:	4b02      	ldr	r3, [pc, #8]	; (800d44c <malloc+0xc>)
 800d442:	4601      	mov	r1, r0
 800d444:	6818      	ldr	r0, [r3, #0]
 800d446:	f000 b86f 	b.w	800d528 <_malloc_r>
 800d44a:	bf00      	nop
 800d44c:	20000014 	.word	0x20000014

0800d450 <_free_r>:
 800d450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d452:	2900      	cmp	r1, #0
 800d454:	d044      	beq.n	800d4e0 <_free_r+0x90>
 800d456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d45a:	9001      	str	r0, [sp, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f1a1 0404 	sub.w	r4, r1, #4
 800d462:	bfb8      	it	lt
 800d464:	18e4      	addlt	r4, r4, r3
 800d466:	f000 fe39 	bl	800e0dc <__malloc_lock>
 800d46a:	4a1e      	ldr	r2, [pc, #120]	; (800d4e4 <_free_r+0x94>)
 800d46c:	9801      	ldr	r0, [sp, #4]
 800d46e:	6813      	ldr	r3, [r2, #0]
 800d470:	b933      	cbnz	r3, 800d480 <_free_r+0x30>
 800d472:	6063      	str	r3, [r4, #4]
 800d474:	6014      	str	r4, [r2, #0]
 800d476:	b003      	add	sp, #12
 800d478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d47c:	f000 be34 	b.w	800e0e8 <__malloc_unlock>
 800d480:	42a3      	cmp	r3, r4
 800d482:	d908      	bls.n	800d496 <_free_r+0x46>
 800d484:	6825      	ldr	r5, [r4, #0]
 800d486:	1961      	adds	r1, r4, r5
 800d488:	428b      	cmp	r3, r1
 800d48a:	bf01      	itttt	eq
 800d48c:	6819      	ldreq	r1, [r3, #0]
 800d48e:	685b      	ldreq	r3, [r3, #4]
 800d490:	1949      	addeq	r1, r1, r5
 800d492:	6021      	streq	r1, [r4, #0]
 800d494:	e7ed      	b.n	800d472 <_free_r+0x22>
 800d496:	461a      	mov	r2, r3
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	b10b      	cbz	r3, 800d4a0 <_free_r+0x50>
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	d9fa      	bls.n	800d496 <_free_r+0x46>
 800d4a0:	6811      	ldr	r1, [r2, #0]
 800d4a2:	1855      	adds	r5, r2, r1
 800d4a4:	42a5      	cmp	r5, r4
 800d4a6:	d10b      	bne.n	800d4c0 <_free_r+0x70>
 800d4a8:	6824      	ldr	r4, [r4, #0]
 800d4aa:	4421      	add	r1, r4
 800d4ac:	1854      	adds	r4, r2, r1
 800d4ae:	42a3      	cmp	r3, r4
 800d4b0:	6011      	str	r1, [r2, #0]
 800d4b2:	d1e0      	bne.n	800d476 <_free_r+0x26>
 800d4b4:	681c      	ldr	r4, [r3, #0]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	6053      	str	r3, [r2, #4]
 800d4ba:	4421      	add	r1, r4
 800d4bc:	6011      	str	r1, [r2, #0]
 800d4be:	e7da      	b.n	800d476 <_free_r+0x26>
 800d4c0:	d902      	bls.n	800d4c8 <_free_r+0x78>
 800d4c2:	230c      	movs	r3, #12
 800d4c4:	6003      	str	r3, [r0, #0]
 800d4c6:	e7d6      	b.n	800d476 <_free_r+0x26>
 800d4c8:	6825      	ldr	r5, [r4, #0]
 800d4ca:	1961      	adds	r1, r4, r5
 800d4cc:	428b      	cmp	r3, r1
 800d4ce:	bf04      	itt	eq
 800d4d0:	6819      	ldreq	r1, [r3, #0]
 800d4d2:	685b      	ldreq	r3, [r3, #4]
 800d4d4:	6063      	str	r3, [r4, #4]
 800d4d6:	bf04      	itt	eq
 800d4d8:	1949      	addeq	r1, r1, r5
 800d4da:	6021      	streq	r1, [r4, #0]
 800d4dc:	6054      	str	r4, [r2, #4]
 800d4de:	e7ca      	b.n	800d476 <_free_r+0x26>
 800d4e0:	b003      	add	sp, #12
 800d4e2:	bd30      	pop	{r4, r5, pc}
 800d4e4:	200068a4 	.word	0x200068a4

0800d4e8 <sbrk_aligned>:
 800d4e8:	b570      	push	{r4, r5, r6, lr}
 800d4ea:	4e0e      	ldr	r6, [pc, #56]	; (800d524 <sbrk_aligned+0x3c>)
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	6831      	ldr	r1, [r6, #0]
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	b911      	cbnz	r1, 800d4fa <sbrk_aligned+0x12>
 800d4f4:	f000 fb7a 	bl	800dbec <_sbrk_r>
 800d4f8:	6030      	str	r0, [r6, #0]
 800d4fa:	4621      	mov	r1, r4
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	f000 fb75 	bl	800dbec <_sbrk_r>
 800d502:	1c43      	adds	r3, r0, #1
 800d504:	d00a      	beq.n	800d51c <sbrk_aligned+0x34>
 800d506:	1cc4      	adds	r4, r0, #3
 800d508:	f024 0403 	bic.w	r4, r4, #3
 800d50c:	42a0      	cmp	r0, r4
 800d50e:	d007      	beq.n	800d520 <sbrk_aligned+0x38>
 800d510:	1a21      	subs	r1, r4, r0
 800d512:	4628      	mov	r0, r5
 800d514:	f000 fb6a 	bl	800dbec <_sbrk_r>
 800d518:	3001      	adds	r0, #1
 800d51a:	d101      	bne.n	800d520 <sbrk_aligned+0x38>
 800d51c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d520:	4620      	mov	r0, r4
 800d522:	bd70      	pop	{r4, r5, r6, pc}
 800d524:	200068a8 	.word	0x200068a8

0800d528 <_malloc_r>:
 800d528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52c:	1ccd      	adds	r5, r1, #3
 800d52e:	f025 0503 	bic.w	r5, r5, #3
 800d532:	3508      	adds	r5, #8
 800d534:	2d0c      	cmp	r5, #12
 800d536:	bf38      	it	cc
 800d538:	250c      	movcc	r5, #12
 800d53a:	2d00      	cmp	r5, #0
 800d53c:	4607      	mov	r7, r0
 800d53e:	db01      	blt.n	800d544 <_malloc_r+0x1c>
 800d540:	42a9      	cmp	r1, r5
 800d542:	d905      	bls.n	800d550 <_malloc_r+0x28>
 800d544:	230c      	movs	r3, #12
 800d546:	603b      	str	r3, [r7, #0]
 800d548:	2600      	movs	r6, #0
 800d54a:	4630      	mov	r0, r6
 800d54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d550:	4e2e      	ldr	r6, [pc, #184]	; (800d60c <_malloc_r+0xe4>)
 800d552:	f000 fdc3 	bl	800e0dc <__malloc_lock>
 800d556:	6833      	ldr	r3, [r6, #0]
 800d558:	461c      	mov	r4, r3
 800d55a:	bb34      	cbnz	r4, 800d5aa <_malloc_r+0x82>
 800d55c:	4629      	mov	r1, r5
 800d55e:	4638      	mov	r0, r7
 800d560:	f7ff ffc2 	bl	800d4e8 <sbrk_aligned>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	4604      	mov	r4, r0
 800d568:	d14d      	bne.n	800d606 <_malloc_r+0xde>
 800d56a:	6834      	ldr	r4, [r6, #0]
 800d56c:	4626      	mov	r6, r4
 800d56e:	2e00      	cmp	r6, #0
 800d570:	d140      	bne.n	800d5f4 <_malloc_r+0xcc>
 800d572:	6823      	ldr	r3, [r4, #0]
 800d574:	4631      	mov	r1, r6
 800d576:	4638      	mov	r0, r7
 800d578:	eb04 0803 	add.w	r8, r4, r3
 800d57c:	f000 fb36 	bl	800dbec <_sbrk_r>
 800d580:	4580      	cmp	r8, r0
 800d582:	d13a      	bne.n	800d5fa <_malloc_r+0xd2>
 800d584:	6821      	ldr	r1, [r4, #0]
 800d586:	3503      	adds	r5, #3
 800d588:	1a6d      	subs	r5, r5, r1
 800d58a:	f025 0503 	bic.w	r5, r5, #3
 800d58e:	3508      	adds	r5, #8
 800d590:	2d0c      	cmp	r5, #12
 800d592:	bf38      	it	cc
 800d594:	250c      	movcc	r5, #12
 800d596:	4629      	mov	r1, r5
 800d598:	4638      	mov	r0, r7
 800d59a:	f7ff ffa5 	bl	800d4e8 <sbrk_aligned>
 800d59e:	3001      	adds	r0, #1
 800d5a0:	d02b      	beq.n	800d5fa <_malloc_r+0xd2>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	442b      	add	r3, r5
 800d5a6:	6023      	str	r3, [r4, #0]
 800d5a8:	e00e      	b.n	800d5c8 <_malloc_r+0xa0>
 800d5aa:	6822      	ldr	r2, [r4, #0]
 800d5ac:	1b52      	subs	r2, r2, r5
 800d5ae:	d41e      	bmi.n	800d5ee <_malloc_r+0xc6>
 800d5b0:	2a0b      	cmp	r2, #11
 800d5b2:	d916      	bls.n	800d5e2 <_malloc_r+0xba>
 800d5b4:	1961      	adds	r1, r4, r5
 800d5b6:	42a3      	cmp	r3, r4
 800d5b8:	6025      	str	r5, [r4, #0]
 800d5ba:	bf18      	it	ne
 800d5bc:	6059      	strne	r1, [r3, #4]
 800d5be:	6863      	ldr	r3, [r4, #4]
 800d5c0:	bf08      	it	eq
 800d5c2:	6031      	streq	r1, [r6, #0]
 800d5c4:	5162      	str	r2, [r4, r5]
 800d5c6:	604b      	str	r3, [r1, #4]
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	f104 060b 	add.w	r6, r4, #11
 800d5ce:	f000 fd8b 	bl	800e0e8 <__malloc_unlock>
 800d5d2:	f026 0607 	bic.w	r6, r6, #7
 800d5d6:	1d23      	adds	r3, r4, #4
 800d5d8:	1af2      	subs	r2, r6, r3
 800d5da:	d0b6      	beq.n	800d54a <_malloc_r+0x22>
 800d5dc:	1b9b      	subs	r3, r3, r6
 800d5de:	50a3      	str	r3, [r4, r2]
 800d5e0:	e7b3      	b.n	800d54a <_malloc_r+0x22>
 800d5e2:	6862      	ldr	r2, [r4, #4]
 800d5e4:	42a3      	cmp	r3, r4
 800d5e6:	bf0c      	ite	eq
 800d5e8:	6032      	streq	r2, [r6, #0]
 800d5ea:	605a      	strne	r2, [r3, #4]
 800d5ec:	e7ec      	b.n	800d5c8 <_malloc_r+0xa0>
 800d5ee:	4623      	mov	r3, r4
 800d5f0:	6864      	ldr	r4, [r4, #4]
 800d5f2:	e7b2      	b.n	800d55a <_malloc_r+0x32>
 800d5f4:	4634      	mov	r4, r6
 800d5f6:	6876      	ldr	r6, [r6, #4]
 800d5f8:	e7b9      	b.n	800d56e <_malloc_r+0x46>
 800d5fa:	230c      	movs	r3, #12
 800d5fc:	603b      	str	r3, [r7, #0]
 800d5fe:	4638      	mov	r0, r7
 800d600:	f000 fd72 	bl	800e0e8 <__malloc_unlock>
 800d604:	e7a1      	b.n	800d54a <_malloc_r+0x22>
 800d606:	6025      	str	r5, [r4, #0]
 800d608:	e7de      	b.n	800d5c8 <_malloc_r+0xa0>
 800d60a:	bf00      	nop
 800d60c:	200068a4 	.word	0x200068a4

0800d610 <__sfputc_r>:
 800d610:	6893      	ldr	r3, [r2, #8]
 800d612:	3b01      	subs	r3, #1
 800d614:	2b00      	cmp	r3, #0
 800d616:	b410      	push	{r4}
 800d618:	6093      	str	r3, [r2, #8]
 800d61a:	da08      	bge.n	800d62e <__sfputc_r+0x1e>
 800d61c:	6994      	ldr	r4, [r2, #24]
 800d61e:	42a3      	cmp	r3, r4
 800d620:	db01      	blt.n	800d626 <__sfputc_r+0x16>
 800d622:	290a      	cmp	r1, #10
 800d624:	d103      	bne.n	800d62e <__sfputc_r+0x1e>
 800d626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d62a:	f000 bb33 	b.w	800dc94 <__swbuf_r>
 800d62e:	6813      	ldr	r3, [r2, #0]
 800d630:	1c58      	adds	r0, r3, #1
 800d632:	6010      	str	r0, [r2, #0]
 800d634:	7019      	strb	r1, [r3, #0]
 800d636:	4608      	mov	r0, r1
 800d638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d63c:	4770      	bx	lr

0800d63e <__sfputs_r>:
 800d63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d640:	4606      	mov	r6, r0
 800d642:	460f      	mov	r7, r1
 800d644:	4614      	mov	r4, r2
 800d646:	18d5      	adds	r5, r2, r3
 800d648:	42ac      	cmp	r4, r5
 800d64a:	d101      	bne.n	800d650 <__sfputs_r+0x12>
 800d64c:	2000      	movs	r0, #0
 800d64e:	e007      	b.n	800d660 <__sfputs_r+0x22>
 800d650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d654:	463a      	mov	r2, r7
 800d656:	4630      	mov	r0, r6
 800d658:	f7ff ffda 	bl	800d610 <__sfputc_r>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d1f3      	bne.n	800d648 <__sfputs_r+0xa>
 800d660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d664 <_vfiprintf_r>:
 800d664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d668:	460d      	mov	r5, r1
 800d66a:	b09d      	sub	sp, #116	; 0x74
 800d66c:	4614      	mov	r4, r2
 800d66e:	4698      	mov	r8, r3
 800d670:	4606      	mov	r6, r0
 800d672:	b118      	cbz	r0, 800d67c <_vfiprintf_r+0x18>
 800d674:	6983      	ldr	r3, [r0, #24]
 800d676:	b90b      	cbnz	r3, 800d67c <_vfiprintf_r+0x18>
 800d678:	f7ff fe30 	bl	800d2dc <__sinit>
 800d67c:	4b89      	ldr	r3, [pc, #548]	; (800d8a4 <_vfiprintf_r+0x240>)
 800d67e:	429d      	cmp	r5, r3
 800d680:	d11b      	bne.n	800d6ba <_vfiprintf_r+0x56>
 800d682:	6875      	ldr	r5, [r6, #4]
 800d684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d686:	07d9      	lsls	r1, r3, #31
 800d688:	d405      	bmi.n	800d696 <_vfiprintf_r+0x32>
 800d68a:	89ab      	ldrh	r3, [r5, #12]
 800d68c:	059a      	lsls	r2, r3, #22
 800d68e:	d402      	bmi.n	800d696 <_vfiprintf_r+0x32>
 800d690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d692:	f7ff fed3 	bl	800d43c <__retarget_lock_acquire_recursive>
 800d696:	89ab      	ldrh	r3, [r5, #12]
 800d698:	071b      	lsls	r3, r3, #28
 800d69a:	d501      	bpl.n	800d6a0 <_vfiprintf_r+0x3c>
 800d69c:	692b      	ldr	r3, [r5, #16]
 800d69e:	b9eb      	cbnz	r3, 800d6dc <_vfiprintf_r+0x78>
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	f000 fb5a 	bl	800dd5c <__swsetup_r>
 800d6a8:	b1c0      	cbz	r0, 800d6dc <_vfiprintf_r+0x78>
 800d6aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ac:	07dc      	lsls	r4, r3, #31
 800d6ae:	d50e      	bpl.n	800d6ce <_vfiprintf_r+0x6a>
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b4:	b01d      	add	sp, #116	; 0x74
 800d6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ba:	4b7b      	ldr	r3, [pc, #492]	; (800d8a8 <_vfiprintf_r+0x244>)
 800d6bc:	429d      	cmp	r5, r3
 800d6be:	d101      	bne.n	800d6c4 <_vfiprintf_r+0x60>
 800d6c0:	68b5      	ldr	r5, [r6, #8]
 800d6c2:	e7df      	b.n	800d684 <_vfiprintf_r+0x20>
 800d6c4:	4b79      	ldr	r3, [pc, #484]	; (800d8ac <_vfiprintf_r+0x248>)
 800d6c6:	429d      	cmp	r5, r3
 800d6c8:	bf08      	it	eq
 800d6ca:	68f5      	ldreq	r5, [r6, #12]
 800d6cc:	e7da      	b.n	800d684 <_vfiprintf_r+0x20>
 800d6ce:	89ab      	ldrh	r3, [r5, #12]
 800d6d0:	0598      	lsls	r0, r3, #22
 800d6d2:	d4ed      	bmi.n	800d6b0 <_vfiprintf_r+0x4c>
 800d6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6d6:	f7ff feb2 	bl	800d43e <__retarget_lock_release_recursive>
 800d6da:	e7e9      	b.n	800d6b0 <_vfiprintf_r+0x4c>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	9309      	str	r3, [sp, #36]	; 0x24
 800d6e0:	2320      	movs	r3, #32
 800d6e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6ea:	2330      	movs	r3, #48	; 0x30
 800d6ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8b0 <_vfiprintf_r+0x24c>
 800d6f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6f4:	f04f 0901 	mov.w	r9, #1
 800d6f8:	4623      	mov	r3, r4
 800d6fa:	469a      	mov	sl, r3
 800d6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d700:	b10a      	cbz	r2, 800d706 <_vfiprintf_r+0xa2>
 800d702:	2a25      	cmp	r2, #37	; 0x25
 800d704:	d1f9      	bne.n	800d6fa <_vfiprintf_r+0x96>
 800d706:	ebba 0b04 	subs.w	fp, sl, r4
 800d70a:	d00b      	beq.n	800d724 <_vfiprintf_r+0xc0>
 800d70c:	465b      	mov	r3, fp
 800d70e:	4622      	mov	r2, r4
 800d710:	4629      	mov	r1, r5
 800d712:	4630      	mov	r0, r6
 800d714:	f7ff ff93 	bl	800d63e <__sfputs_r>
 800d718:	3001      	adds	r0, #1
 800d71a:	f000 80aa 	beq.w	800d872 <_vfiprintf_r+0x20e>
 800d71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d720:	445a      	add	r2, fp
 800d722:	9209      	str	r2, [sp, #36]	; 0x24
 800d724:	f89a 3000 	ldrb.w	r3, [sl]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f000 80a2 	beq.w	800d872 <_vfiprintf_r+0x20e>
 800d72e:	2300      	movs	r3, #0
 800d730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d738:	f10a 0a01 	add.w	sl, sl, #1
 800d73c:	9304      	str	r3, [sp, #16]
 800d73e:	9307      	str	r3, [sp, #28]
 800d740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d744:	931a      	str	r3, [sp, #104]	; 0x68
 800d746:	4654      	mov	r4, sl
 800d748:	2205      	movs	r2, #5
 800d74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d74e:	4858      	ldr	r0, [pc, #352]	; (800d8b0 <_vfiprintf_r+0x24c>)
 800d750:	f7f2 fd76 	bl	8000240 <memchr>
 800d754:	9a04      	ldr	r2, [sp, #16]
 800d756:	b9d8      	cbnz	r0, 800d790 <_vfiprintf_r+0x12c>
 800d758:	06d1      	lsls	r1, r2, #27
 800d75a:	bf44      	itt	mi
 800d75c:	2320      	movmi	r3, #32
 800d75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d762:	0713      	lsls	r3, r2, #28
 800d764:	bf44      	itt	mi
 800d766:	232b      	movmi	r3, #43	; 0x2b
 800d768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d76c:	f89a 3000 	ldrb.w	r3, [sl]
 800d770:	2b2a      	cmp	r3, #42	; 0x2a
 800d772:	d015      	beq.n	800d7a0 <_vfiprintf_r+0x13c>
 800d774:	9a07      	ldr	r2, [sp, #28]
 800d776:	4654      	mov	r4, sl
 800d778:	2000      	movs	r0, #0
 800d77a:	f04f 0c0a 	mov.w	ip, #10
 800d77e:	4621      	mov	r1, r4
 800d780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d784:	3b30      	subs	r3, #48	; 0x30
 800d786:	2b09      	cmp	r3, #9
 800d788:	d94e      	bls.n	800d828 <_vfiprintf_r+0x1c4>
 800d78a:	b1b0      	cbz	r0, 800d7ba <_vfiprintf_r+0x156>
 800d78c:	9207      	str	r2, [sp, #28]
 800d78e:	e014      	b.n	800d7ba <_vfiprintf_r+0x156>
 800d790:	eba0 0308 	sub.w	r3, r0, r8
 800d794:	fa09 f303 	lsl.w	r3, r9, r3
 800d798:	4313      	orrs	r3, r2
 800d79a:	9304      	str	r3, [sp, #16]
 800d79c:	46a2      	mov	sl, r4
 800d79e:	e7d2      	b.n	800d746 <_vfiprintf_r+0xe2>
 800d7a0:	9b03      	ldr	r3, [sp, #12]
 800d7a2:	1d19      	adds	r1, r3, #4
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	9103      	str	r1, [sp, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	bfbb      	ittet	lt
 800d7ac:	425b      	neglt	r3, r3
 800d7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d7b2:	9307      	strge	r3, [sp, #28]
 800d7b4:	9307      	strlt	r3, [sp, #28]
 800d7b6:	bfb8      	it	lt
 800d7b8:	9204      	strlt	r2, [sp, #16]
 800d7ba:	7823      	ldrb	r3, [r4, #0]
 800d7bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d7be:	d10c      	bne.n	800d7da <_vfiprintf_r+0x176>
 800d7c0:	7863      	ldrb	r3, [r4, #1]
 800d7c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d7c4:	d135      	bne.n	800d832 <_vfiprintf_r+0x1ce>
 800d7c6:	9b03      	ldr	r3, [sp, #12]
 800d7c8:	1d1a      	adds	r2, r3, #4
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	9203      	str	r2, [sp, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	bfb8      	it	lt
 800d7d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d7d6:	3402      	adds	r4, #2
 800d7d8:	9305      	str	r3, [sp, #20]
 800d7da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8c0 <_vfiprintf_r+0x25c>
 800d7de:	7821      	ldrb	r1, [r4, #0]
 800d7e0:	2203      	movs	r2, #3
 800d7e2:	4650      	mov	r0, sl
 800d7e4:	f7f2 fd2c 	bl	8000240 <memchr>
 800d7e8:	b140      	cbz	r0, 800d7fc <_vfiprintf_r+0x198>
 800d7ea:	2340      	movs	r3, #64	; 0x40
 800d7ec:	eba0 000a 	sub.w	r0, r0, sl
 800d7f0:	fa03 f000 	lsl.w	r0, r3, r0
 800d7f4:	9b04      	ldr	r3, [sp, #16]
 800d7f6:	4303      	orrs	r3, r0
 800d7f8:	3401      	adds	r4, #1
 800d7fa:	9304      	str	r3, [sp, #16]
 800d7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d800:	482c      	ldr	r0, [pc, #176]	; (800d8b4 <_vfiprintf_r+0x250>)
 800d802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d806:	2206      	movs	r2, #6
 800d808:	f7f2 fd1a 	bl	8000240 <memchr>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d03f      	beq.n	800d890 <_vfiprintf_r+0x22c>
 800d810:	4b29      	ldr	r3, [pc, #164]	; (800d8b8 <_vfiprintf_r+0x254>)
 800d812:	bb1b      	cbnz	r3, 800d85c <_vfiprintf_r+0x1f8>
 800d814:	9b03      	ldr	r3, [sp, #12]
 800d816:	3307      	adds	r3, #7
 800d818:	f023 0307 	bic.w	r3, r3, #7
 800d81c:	3308      	adds	r3, #8
 800d81e:	9303      	str	r3, [sp, #12]
 800d820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d822:	443b      	add	r3, r7
 800d824:	9309      	str	r3, [sp, #36]	; 0x24
 800d826:	e767      	b.n	800d6f8 <_vfiprintf_r+0x94>
 800d828:	fb0c 3202 	mla	r2, ip, r2, r3
 800d82c:	460c      	mov	r4, r1
 800d82e:	2001      	movs	r0, #1
 800d830:	e7a5      	b.n	800d77e <_vfiprintf_r+0x11a>
 800d832:	2300      	movs	r3, #0
 800d834:	3401      	adds	r4, #1
 800d836:	9305      	str	r3, [sp, #20]
 800d838:	4619      	mov	r1, r3
 800d83a:	f04f 0c0a 	mov.w	ip, #10
 800d83e:	4620      	mov	r0, r4
 800d840:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d844:	3a30      	subs	r2, #48	; 0x30
 800d846:	2a09      	cmp	r2, #9
 800d848:	d903      	bls.n	800d852 <_vfiprintf_r+0x1ee>
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d0c5      	beq.n	800d7da <_vfiprintf_r+0x176>
 800d84e:	9105      	str	r1, [sp, #20]
 800d850:	e7c3      	b.n	800d7da <_vfiprintf_r+0x176>
 800d852:	fb0c 2101 	mla	r1, ip, r1, r2
 800d856:	4604      	mov	r4, r0
 800d858:	2301      	movs	r3, #1
 800d85a:	e7f0      	b.n	800d83e <_vfiprintf_r+0x1da>
 800d85c:	ab03      	add	r3, sp, #12
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	462a      	mov	r2, r5
 800d862:	4b16      	ldr	r3, [pc, #88]	; (800d8bc <_vfiprintf_r+0x258>)
 800d864:	a904      	add	r1, sp, #16
 800d866:	4630      	mov	r0, r6
 800d868:	f3af 8000 	nop.w
 800d86c:	4607      	mov	r7, r0
 800d86e:	1c78      	adds	r0, r7, #1
 800d870:	d1d6      	bne.n	800d820 <_vfiprintf_r+0x1bc>
 800d872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d874:	07d9      	lsls	r1, r3, #31
 800d876:	d405      	bmi.n	800d884 <_vfiprintf_r+0x220>
 800d878:	89ab      	ldrh	r3, [r5, #12]
 800d87a:	059a      	lsls	r2, r3, #22
 800d87c:	d402      	bmi.n	800d884 <_vfiprintf_r+0x220>
 800d87e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d880:	f7ff fddd 	bl	800d43e <__retarget_lock_release_recursive>
 800d884:	89ab      	ldrh	r3, [r5, #12]
 800d886:	065b      	lsls	r3, r3, #25
 800d888:	f53f af12 	bmi.w	800d6b0 <_vfiprintf_r+0x4c>
 800d88c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d88e:	e711      	b.n	800d6b4 <_vfiprintf_r+0x50>
 800d890:	ab03      	add	r3, sp, #12
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	462a      	mov	r2, r5
 800d896:	4b09      	ldr	r3, [pc, #36]	; (800d8bc <_vfiprintf_r+0x258>)
 800d898:	a904      	add	r1, sp, #16
 800d89a:	4630      	mov	r0, r6
 800d89c:	f000 f880 	bl	800d9a0 <_printf_i>
 800d8a0:	e7e4      	b.n	800d86c <_vfiprintf_r+0x208>
 800d8a2:	bf00      	nop
 800d8a4:	08010da4 	.word	0x08010da4
 800d8a8:	08010dc4 	.word	0x08010dc4
 800d8ac:	08010d84 	.word	0x08010d84
 800d8b0:	08010de4 	.word	0x08010de4
 800d8b4:	08010dee 	.word	0x08010dee
 800d8b8:	00000000 	.word	0x00000000
 800d8bc:	0800d63f 	.word	0x0800d63f
 800d8c0:	08010dea 	.word	0x08010dea

0800d8c4 <_printf_common>:
 800d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c8:	4616      	mov	r6, r2
 800d8ca:	4699      	mov	r9, r3
 800d8cc:	688a      	ldr	r2, [r1, #8]
 800d8ce:	690b      	ldr	r3, [r1, #16]
 800d8d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	bfb8      	it	lt
 800d8d8:	4613      	movlt	r3, r2
 800d8da:	6033      	str	r3, [r6, #0]
 800d8dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8e0:	4607      	mov	r7, r0
 800d8e2:	460c      	mov	r4, r1
 800d8e4:	b10a      	cbz	r2, 800d8ea <_printf_common+0x26>
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	6033      	str	r3, [r6, #0]
 800d8ea:	6823      	ldr	r3, [r4, #0]
 800d8ec:	0699      	lsls	r1, r3, #26
 800d8ee:	bf42      	ittt	mi
 800d8f0:	6833      	ldrmi	r3, [r6, #0]
 800d8f2:	3302      	addmi	r3, #2
 800d8f4:	6033      	strmi	r3, [r6, #0]
 800d8f6:	6825      	ldr	r5, [r4, #0]
 800d8f8:	f015 0506 	ands.w	r5, r5, #6
 800d8fc:	d106      	bne.n	800d90c <_printf_common+0x48>
 800d8fe:	f104 0a19 	add.w	sl, r4, #25
 800d902:	68e3      	ldr	r3, [r4, #12]
 800d904:	6832      	ldr	r2, [r6, #0]
 800d906:	1a9b      	subs	r3, r3, r2
 800d908:	42ab      	cmp	r3, r5
 800d90a:	dc26      	bgt.n	800d95a <_printf_common+0x96>
 800d90c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d910:	1e13      	subs	r3, r2, #0
 800d912:	6822      	ldr	r2, [r4, #0]
 800d914:	bf18      	it	ne
 800d916:	2301      	movne	r3, #1
 800d918:	0692      	lsls	r2, r2, #26
 800d91a:	d42b      	bmi.n	800d974 <_printf_common+0xb0>
 800d91c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d920:	4649      	mov	r1, r9
 800d922:	4638      	mov	r0, r7
 800d924:	47c0      	blx	r8
 800d926:	3001      	adds	r0, #1
 800d928:	d01e      	beq.n	800d968 <_printf_common+0xa4>
 800d92a:	6823      	ldr	r3, [r4, #0]
 800d92c:	68e5      	ldr	r5, [r4, #12]
 800d92e:	6832      	ldr	r2, [r6, #0]
 800d930:	f003 0306 	and.w	r3, r3, #6
 800d934:	2b04      	cmp	r3, #4
 800d936:	bf08      	it	eq
 800d938:	1aad      	subeq	r5, r5, r2
 800d93a:	68a3      	ldr	r3, [r4, #8]
 800d93c:	6922      	ldr	r2, [r4, #16]
 800d93e:	bf0c      	ite	eq
 800d940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d944:	2500      	movne	r5, #0
 800d946:	4293      	cmp	r3, r2
 800d948:	bfc4      	itt	gt
 800d94a:	1a9b      	subgt	r3, r3, r2
 800d94c:	18ed      	addgt	r5, r5, r3
 800d94e:	2600      	movs	r6, #0
 800d950:	341a      	adds	r4, #26
 800d952:	42b5      	cmp	r5, r6
 800d954:	d11a      	bne.n	800d98c <_printf_common+0xc8>
 800d956:	2000      	movs	r0, #0
 800d958:	e008      	b.n	800d96c <_printf_common+0xa8>
 800d95a:	2301      	movs	r3, #1
 800d95c:	4652      	mov	r2, sl
 800d95e:	4649      	mov	r1, r9
 800d960:	4638      	mov	r0, r7
 800d962:	47c0      	blx	r8
 800d964:	3001      	adds	r0, #1
 800d966:	d103      	bne.n	800d970 <_printf_common+0xac>
 800d968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d970:	3501      	adds	r5, #1
 800d972:	e7c6      	b.n	800d902 <_printf_common+0x3e>
 800d974:	18e1      	adds	r1, r4, r3
 800d976:	1c5a      	adds	r2, r3, #1
 800d978:	2030      	movs	r0, #48	; 0x30
 800d97a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d97e:	4422      	add	r2, r4
 800d980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d988:	3302      	adds	r3, #2
 800d98a:	e7c7      	b.n	800d91c <_printf_common+0x58>
 800d98c:	2301      	movs	r3, #1
 800d98e:	4622      	mov	r2, r4
 800d990:	4649      	mov	r1, r9
 800d992:	4638      	mov	r0, r7
 800d994:	47c0      	blx	r8
 800d996:	3001      	adds	r0, #1
 800d998:	d0e6      	beq.n	800d968 <_printf_common+0xa4>
 800d99a:	3601      	adds	r6, #1
 800d99c:	e7d9      	b.n	800d952 <_printf_common+0x8e>
	...

0800d9a0 <_printf_i>:
 800d9a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a4:	7e0f      	ldrb	r7, [r1, #24]
 800d9a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9a8:	2f78      	cmp	r7, #120	; 0x78
 800d9aa:	4691      	mov	r9, r2
 800d9ac:	4680      	mov	r8, r0
 800d9ae:	460c      	mov	r4, r1
 800d9b0:	469a      	mov	sl, r3
 800d9b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d9b6:	d807      	bhi.n	800d9c8 <_printf_i+0x28>
 800d9b8:	2f62      	cmp	r7, #98	; 0x62
 800d9ba:	d80a      	bhi.n	800d9d2 <_printf_i+0x32>
 800d9bc:	2f00      	cmp	r7, #0
 800d9be:	f000 80d8 	beq.w	800db72 <_printf_i+0x1d2>
 800d9c2:	2f58      	cmp	r7, #88	; 0x58
 800d9c4:	f000 80a3 	beq.w	800db0e <_printf_i+0x16e>
 800d9c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9d0:	e03a      	b.n	800da48 <_printf_i+0xa8>
 800d9d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9d6:	2b15      	cmp	r3, #21
 800d9d8:	d8f6      	bhi.n	800d9c8 <_printf_i+0x28>
 800d9da:	a101      	add	r1, pc, #4	; (adr r1, 800d9e0 <_printf_i+0x40>)
 800d9dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9e0:	0800da39 	.word	0x0800da39
 800d9e4:	0800da4d 	.word	0x0800da4d
 800d9e8:	0800d9c9 	.word	0x0800d9c9
 800d9ec:	0800d9c9 	.word	0x0800d9c9
 800d9f0:	0800d9c9 	.word	0x0800d9c9
 800d9f4:	0800d9c9 	.word	0x0800d9c9
 800d9f8:	0800da4d 	.word	0x0800da4d
 800d9fc:	0800d9c9 	.word	0x0800d9c9
 800da00:	0800d9c9 	.word	0x0800d9c9
 800da04:	0800d9c9 	.word	0x0800d9c9
 800da08:	0800d9c9 	.word	0x0800d9c9
 800da0c:	0800db59 	.word	0x0800db59
 800da10:	0800da7d 	.word	0x0800da7d
 800da14:	0800db3b 	.word	0x0800db3b
 800da18:	0800d9c9 	.word	0x0800d9c9
 800da1c:	0800d9c9 	.word	0x0800d9c9
 800da20:	0800db7b 	.word	0x0800db7b
 800da24:	0800d9c9 	.word	0x0800d9c9
 800da28:	0800da7d 	.word	0x0800da7d
 800da2c:	0800d9c9 	.word	0x0800d9c9
 800da30:	0800d9c9 	.word	0x0800d9c9
 800da34:	0800db43 	.word	0x0800db43
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	1d1a      	adds	r2, r3, #4
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	602a      	str	r2, [r5, #0]
 800da40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da48:	2301      	movs	r3, #1
 800da4a:	e0a3      	b.n	800db94 <_printf_i+0x1f4>
 800da4c:	6820      	ldr	r0, [r4, #0]
 800da4e:	6829      	ldr	r1, [r5, #0]
 800da50:	0606      	lsls	r6, r0, #24
 800da52:	f101 0304 	add.w	r3, r1, #4
 800da56:	d50a      	bpl.n	800da6e <_printf_i+0xce>
 800da58:	680e      	ldr	r6, [r1, #0]
 800da5a:	602b      	str	r3, [r5, #0]
 800da5c:	2e00      	cmp	r6, #0
 800da5e:	da03      	bge.n	800da68 <_printf_i+0xc8>
 800da60:	232d      	movs	r3, #45	; 0x2d
 800da62:	4276      	negs	r6, r6
 800da64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da68:	485e      	ldr	r0, [pc, #376]	; (800dbe4 <_printf_i+0x244>)
 800da6a:	230a      	movs	r3, #10
 800da6c:	e019      	b.n	800daa2 <_printf_i+0x102>
 800da6e:	680e      	ldr	r6, [r1, #0]
 800da70:	602b      	str	r3, [r5, #0]
 800da72:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da76:	bf18      	it	ne
 800da78:	b236      	sxthne	r6, r6
 800da7a:	e7ef      	b.n	800da5c <_printf_i+0xbc>
 800da7c:	682b      	ldr	r3, [r5, #0]
 800da7e:	6820      	ldr	r0, [r4, #0]
 800da80:	1d19      	adds	r1, r3, #4
 800da82:	6029      	str	r1, [r5, #0]
 800da84:	0601      	lsls	r1, r0, #24
 800da86:	d501      	bpl.n	800da8c <_printf_i+0xec>
 800da88:	681e      	ldr	r6, [r3, #0]
 800da8a:	e002      	b.n	800da92 <_printf_i+0xf2>
 800da8c:	0646      	lsls	r6, r0, #25
 800da8e:	d5fb      	bpl.n	800da88 <_printf_i+0xe8>
 800da90:	881e      	ldrh	r6, [r3, #0]
 800da92:	4854      	ldr	r0, [pc, #336]	; (800dbe4 <_printf_i+0x244>)
 800da94:	2f6f      	cmp	r7, #111	; 0x6f
 800da96:	bf0c      	ite	eq
 800da98:	2308      	moveq	r3, #8
 800da9a:	230a      	movne	r3, #10
 800da9c:	2100      	movs	r1, #0
 800da9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800daa2:	6865      	ldr	r5, [r4, #4]
 800daa4:	60a5      	str	r5, [r4, #8]
 800daa6:	2d00      	cmp	r5, #0
 800daa8:	bfa2      	ittt	ge
 800daaa:	6821      	ldrge	r1, [r4, #0]
 800daac:	f021 0104 	bicge.w	r1, r1, #4
 800dab0:	6021      	strge	r1, [r4, #0]
 800dab2:	b90e      	cbnz	r6, 800dab8 <_printf_i+0x118>
 800dab4:	2d00      	cmp	r5, #0
 800dab6:	d04d      	beq.n	800db54 <_printf_i+0x1b4>
 800dab8:	4615      	mov	r5, r2
 800daba:	fbb6 f1f3 	udiv	r1, r6, r3
 800dabe:	fb03 6711 	mls	r7, r3, r1, r6
 800dac2:	5dc7      	ldrb	r7, [r0, r7]
 800dac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dac8:	4637      	mov	r7, r6
 800daca:	42bb      	cmp	r3, r7
 800dacc:	460e      	mov	r6, r1
 800dace:	d9f4      	bls.n	800daba <_printf_i+0x11a>
 800dad0:	2b08      	cmp	r3, #8
 800dad2:	d10b      	bne.n	800daec <_printf_i+0x14c>
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	07de      	lsls	r6, r3, #31
 800dad8:	d508      	bpl.n	800daec <_printf_i+0x14c>
 800dada:	6923      	ldr	r3, [r4, #16]
 800dadc:	6861      	ldr	r1, [r4, #4]
 800dade:	4299      	cmp	r1, r3
 800dae0:	bfde      	ittt	le
 800dae2:	2330      	movle	r3, #48	; 0x30
 800dae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dae8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800daec:	1b52      	subs	r2, r2, r5
 800daee:	6122      	str	r2, [r4, #16]
 800daf0:	f8cd a000 	str.w	sl, [sp]
 800daf4:	464b      	mov	r3, r9
 800daf6:	aa03      	add	r2, sp, #12
 800daf8:	4621      	mov	r1, r4
 800dafa:	4640      	mov	r0, r8
 800dafc:	f7ff fee2 	bl	800d8c4 <_printf_common>
 800db00:	3001      	adds	r0, #1
 800db02:	d14c      	bne.n	800db9e <_printf_i+0x1fe>
 800db04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db08:	b004      	add	sp, #16
 800db0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db0e:	4835      	ldr	r0, [pc, #212]	; (800dbe4 <_printf_i+0x244>)
 800db10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db14:	6829      	ldr	r1, [r5, #0]
 800db16:	6823      	ldr	r3, [r4, #0]
 800db18:	f851 6b04 	ldr.w	r6, [r1], #4
 800db1c:	6029      	str	r1, [r5, #0]
 800db1e:	061d      	lsls	r5, r3, #24
 800db20:	d514      	bpl.n	800db4c <_printf_i+0x1ac>
 800db22:	07df      	lsls	r7, r3, #31
 800db24:	bf44      	itt	mi
 800db26:	f043 0320 	orrmi.w	r3, r3, #32
 800db2a:	6023      	strmi	r3, [r4, #0]
 800db2c:	b91e      	cbnz	r6, 800db36 <_printf_i+0x196>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	f023 0320 	bic.w	r3, r3, #32
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	2310      	movs	r3, #16
 800db38:	e7b0      	b.n	800da9c <_printf_i+0xfc>
 800db3a:	6823      	ldr	r3, [r4, #0]
 800db3c:	f043 0320 	orr.w	r3, r3, #32
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	2378      	movs	r3, #120	; 0x78
 800db44:	4828      	ldr	r0, [pc, #160]	; (800dbe8 <_printf_i+0x248>)
 800db46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db4a:	e7e3      	b.n	800db14 <_printf_i+0x174>
 800db4c:	0659      	lsls	r1, r3, #25
 800db4e:	bf48      	it	mi
 800db50:	b2b6      	uxthmi	r6, r6
 800db52:	e7e6      	b.n	800db22 <_printf_i+0x182>
 800db54:	4615      	mov	r5, r2
 800db56:	e7bb      	b.n	800dad0 <_printf_i+0x130>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	6826      	ldr	r6, [r4, #0]
 800db5c:	6961      	ldr	r1, [r4, #20]
 800db5e:	1d18      	adds	r0, r3, #4
 800db60:	6028      	str	r0, [r5, #0]
 800db62:	0635      	lsls	r5, r6, #24
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	d501      	bpl.n	800db6c <_printf_i+0x1cc>
 800db68:	6019      	str	r1, [r3, #0]
 800db6a:	e002      	b.n	800db72 <_printf_i+0x1d2>
 800db6c:	0670      	lsls	r0, r6, #25
 800db6e:	d5fb      	bpl.n	800db68 <_printf_i+0x1c8>
 800db70:	8019      	strh	r1, [r3, #0]
 800db72:	2300      	movs	r3, #0
 800db74:	6123      	str	r3, [r4, #16]
 800db76:	4615      	mov	r5, r2
 800db78:	e7ba      	b.n	800daf0 <_printf_i+0x150>
 800db7a:	682b      	ldr	r3, [r5, #0]
 800db7c:	1d1a      	adds	r2, r3, #4
 800db7e:	602a      	str	r2, [r5, #0]
 800db80:	681d      	ldr	r5, [r3, #0]
 800db82:	6862      	ldr	r2, [r4, #4]
 800db84:	2100      	movs	r1, #0
 800db86:	4628      	mov	r0, r5
 800db88:	f7f2 fb5a 	bl	8000240 <memchr>
 800db8c:	b108      	cbz	r0, 800db92 <_printf_i+0x1f2>
 800db8e:	1b40      	subs	r0, r0, r5
 800db90:	6060      	str	r0, [r4, #4]
 800db92:	6863      	ldr	r3, [r4, #4]
 800db94:	6123      	str	r3, [r4, #16]
 800db96:	2300      	movs	r3, #0
 800db98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db9c:	e7a8      	b.n	800daf0 <_printf_i+0x150>
 800db9e:	6923      	ldr	r3, [r4, #16]
 800dba0:	462a      	mov	r2, r5
 800dba2:	4649      	mov	r1, r9
 800dba4:	4640      	mov	r0, r8
 800dba6:	47d0      	blx	sl
 800dba8:	3001      	adds	r0, #1
 800dbaa:	d0ab      	beq.n	800db04 <_printf_i+0x164>
 800dbac:	6823      	ldr	r3, [r4, #0]
 800dbae:	079b      	lsls	r3, r3, #30
 800dbb0:	d413      	bmi.n	800dbda <_printf_i+0x23a>
 800dbb2:	68e0      	ldr	r0, [r4, #12]
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	4298      	cmp	r0, r3
 800dbb8:	bfb8      	it	lt
 800dbba:	4618      	movlt	r0, r3
 800dbbc:	e7a4      	b.n	800db08 <_printf_i+0x168>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	4632      	mov	r2, r6
 800dbc2:	4649      	mov	r1, r9
 800dbc4:	4640      	mov	r0, r8
 800dbc6:	47d0      	blx	sl
 800dbc8:	3001      	adds	r0, #1
 800dbca:	d09b      	beq.n	800db04 <_printf_i+0x164>
 800dbcc:	3501      	adds	r5, #1
 800dbce:	68e3      	ldr	r3, [r4, #12]
 800dbd0:	9903      	ldr	r1, [sp, #12]
 800dbd2:	1a5b      	subs	r3, r3, r1
 800dbd4:	42ab      	cmp	r3, r5
 800dbd6:	dcf2      	bgt.n	800dbbe <_printf_i+0x21e>
 800dbd8:	e7eb      	b.n	800dbb2 <_printf_i+0x212>
 800dbda:	2500      	movs	r5, #0
 800dbdc:	f104 0619 	add.w	r6, r4, #25
 800dbe0:	e7f5      	b.n	800dbce <_printf_i+0x22e>
 800dbe2:	bf00      	nop
 800dbe4:	08010df5 	.word	0x08010df5
 800dbe8:	08010e06 	.word	0x08010e06

0800dbec <_sbrk_r>:
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	4d06      	ldr	r5, [pc, #24]	; (800dc08 <_sbrk_r+0x1c>)
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	4608      	mov	r0, r1
 800dbf6:	602b      	str	r3, [r5, #0]
 800dbf8:	f7f2 ff86 	bl	8000b08 <_sbrk>
 800dbfc:	1c43      	adds	r3, r0, #1
 800dbfe:	d102      	bne.n	800dc06 <_sbrk_r+0x1a>
 800dc00:	682b      	ldr	r3, [r5, #0]
 800dc02:	b103      	cbz	r3, 800dc06 <_sbrk_r+0x1a>
 800dc04:	6023      	str	r3, [r4, #0]
 800dc06:	bd38      	pop	{r3, r4, r5, pc}
 800dc08:	2000689c 	.word	0x2000689c

0800dc0c <__sread>:
 800dc0c:	b510      	push	{r4, lr}
 800dc0e:	460c      	mov	r4, r1
 800dc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc14:	f000 fa6e 	bl	800e0f4 <_read_r>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	bfab      	itete	ge
 800dc1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc1e:	89a3      	ldrhlt	r3, [r4, #12]
 800dc20:	181b      	addge	r3, r3, r0
 800dc22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc26:	bfac      	ite	ge
 800dc28:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc2a:	81a3      	strhlt	r3, [r4, #12]
 800dc2c:	bd10      	pop	{r4, pc}

0800dc2e <__swrite>:
 800dc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc32:	461f      	mov	r7, r3
 800dc34:	898b      	ldrh	r3, [r1, #12]
 800dc36:	05db      	lsls	r3, r3, #23
 800dc38:	4605      	mov	r5, r0
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	4616      	mov	r6, r2
 800dc3e:	d505      	bpl.n	800dc4c <__swrite+0x1e>
 800dc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc44:	2302      	movs	r3, #2
 800dc46:	2200      	movs	r2, #0
 800dc48:	f000 f9d0 	bl	800dfec <_lseek_r>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc56:	81a3      	strh	r3, [r4, #12]
 800dc58:	4632      	mov	r2, r6
 800dc5a:	463b      	mov	r3, r7
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc62:	f000 b869 	b.w	800dd38 <_write_r>

0800dc66 <__sseek>:
 800dc66:	b510      	push	{r4, lr}
 800dc68:	460c      	mov	r4, r1
 800dc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc6e:	f000 f9bd 	bl	800dfec <_lseek_r>
 800dc72:	1c43      	adds	r3, r0, #1
 800dc74:	89a3      	ldrh	r3, [r4, #12]
 800dc76:	bf15      	itete	ne
 800dc78:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc82:	81a3      	strheq	r3, [r4, #12]
 800dc84:	bf18      	it	ne
 800dc86:	81a3      	strhne	r3, [r4, #12]
 800dc88:	bd10      	pop	{r4, pc}

0800dc8a <__sclose>:
 800dc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8e:	f000 b8db 	b.w	800de48 <_close_r>
	...

0800dc94 <__swbuf_r>:
 800dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc96:	460e      	mov	r6, r1
 800dc98:	4614      	mov	r4, r2
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	b118      	cbz	r0, 800dca6 <__swbuf_r+0x12>
 800dc9e:	6983      	ldr	r3, [r0, #24]
 800dca0:	b90b      	cbnz	r3, 800dca6 <__swbuf_r+0x12>
 800dca2:	f7ff fb1b 	bl	800d2dc <__sinit>
 800dca6:	4b21      	ldr	r3, [pc, #132]	; (800dd2c <__swbuf_r+0x98>)
 800dca8:	429c      	cmp	r4, r3
 800dcaa:	d12b      	bne.n	800dd04 <__swbuf_r+0x70>
 800dcac:	686c      	ldr	r4, [r5, #4]
 800dcae:	69a3      	ldr	r3, [r4, #24]
 800dcb0:	60a3      	str	r3, [r4, #8]
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	071a      	lsls	r2, r3, #28
 800dcb6:	d52f      	bpl.n	800dd18 <__swbuf_r+0x84>
 800dcb8:	6923      	ldr	r3, [r4, #16]
 800dcba:	b36b      	cbz	r3, 800dd18 <__swbuf_r+0x84>
 800dcbc:	6923      	ldr	r3, [r4, #16]
 800dcbe:	6820      	ldr	r0, [r4, #0]
 800dcc0:	1ac0      	subs	r0, r0, r3
 800dcc2:	6963      	ldr	r3, [r4, #20]
 800dcc4:	b2f6      	uxtb	r6, r6
 800dcc6:	4283      	cmp	r3, r0
 800dcc8:	4637      	mov	r7, r6
 800dcca:	dc04      	bgt.n	800dcd6 <__swbuf_r+0x42>
 800dccc:	4621      	mov	r1, r4
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f000 f950 	bl	800df74 <_fflush_r>
 800dcd4:	bb30      	cbnz	r0, 800dd24 <__swbuf_r+0x90>
 800dcd6:	68a3      	ldr	r3, [r4, #8]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	60a3      	str	r3, [r4, #8]
 800dcdc:	6823      	ldr	r3, [r4, #0]
 800dcde:	1c5a      	adds	r2, r3, #1
 800dce0:	6022      	str	r2, [r4, #0]
 800dce2:	701e      	strb	r6, [r3, #0]
 800dce4:	6963      	ldr	r3, [r4, #20]
 800dce6:	3001      	adds	r0, #1
 800dce8:	4283      	cmp	r3, r0
 800dcea:	d004      	beq.n	800dcf6 <__swbuf_r+0x62>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	07db      	lsls	r3, r3, #31
 800dcf0:	d506      	bpl.n	800dd00 <__swbuf_r+0x6c>
 800dcf2:	2e0a      	cmp	r6, #10
 800dcf4:	d104      	bne.n	800dd00 <__swbuf_r+0x6c>
 800dcf6:	4621      	mov	r1, r4
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	f000 f93b 	bl	800df74 <_fflush_r>
 800dcfe:	b988      	cbnz	r0, 800dd24 <__swbuf_r+0x90>
 800dd00:	4638      	mov	r0, r7
 800dd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd04:	4b0a      	ldr	r3, [pc, #40]	; (800dd30 <__swbuf_r+0x9c>)
 800dd06:	429c      	cmp	r4, r3
 800dd08:	d101      	bne.n	800dd0e <__swbuf_r+0x7a>
 800dd0a:	68ac      	ldr	r4, [r5, #8]
 800dd0c:	e7cf      	b.n	800dcae <__swbuf_r+0x1a>
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <__swbuf_r+0xa0>)
 800dd10:	429c      	cmp	r4, r3
 800dd12:	bf08      	it	eq
 800dd14:	68ec      	ldreq	r4, [r5, #12]
 800dd16:	e7ca      	b.n	800dcae <__swbuf_r+0x1a>
 800dd18:	4621      	mov	r1, r4
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	f000 f81e 	bl	800dd5c <__swsetup_r>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d0cb      	beq.n	800dcbc <__swbuf_r+0x28>
 800dd24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dd28:	e7ea      	b.n	800dd00 <__swbuf_r+0x6c>
 800dd2a:	bf00      	nop
 800dd2c:	08010da4 	.word	0x08010da4
 800dd30:	08010dc4 	.word	0x08010dc4
 800dd34:	08010d84 	.word	0x08010d84

0800dd38 <_write_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d07      	ldr	r5, [pc, #28]	; (800dd58 <_write_r+0x20>)
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	4608      	mov	r0, r1
 800dd40:	4611      	mov	r1, r2
 800dd42:	2200      	movs	r2, #0
 800dd44:	602a      	str	r2, [r5, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	f7f2 fe8d 	bl	8000a66 <_write>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	d102      	bne.n	800dd56 <_write_r+0x1e>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	b103      	cbz	r3, 800dd56 <_write_r+0x1e>
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	2000689c 	.word	0x2000689c

0800dd5c <__swsetup_r>:
 800dd5c:	4b32      	ldr	r3, [pc, #200]	; (800de28 <__swsetup_r+0xcc>)
 800dd5e:	b570      	push	{r4, r5, r6, lr}
 800dd60:	681d      	ldr	r5, [r3, #0]
 800dd62:	4606      	mov	r6, r0
 800dd64:	460c      	mov	r4, r1
 800dd66:	b125      	cbz	r5, 800dd72 <__swsetup_r+0x16>
 800dd68:	69ab      	ldr	r3, [r5, #24]
 800dd6a:	b913      	cbnz	r3, 800dd72 <__swsetup_r+0x16>
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f7ff fab5 	bl	800d2dc <__sinit>
 800dd72:	4b2e      	ldr	r3, [pc, #184]	; (800de2c <__swsetup_r+0xd0>)
 800dd74:	429c      	cmp	r4, r3
 800dd76:	d10f      	bne.n	800dd98 <__swsetup_r+0x3c>
 800dd78:	686c      	ldr	r4, [r5, #4]
 800dd7a:	89a3      	ldrh	r3, [r4, #12]
 800dd7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd80:	0719      	lsls	r1, r3, #28
 800dd82:	d42c      	bmi.n	800ddde <__swsetup_r+0x82>
 800dd84:	06dd      	lsls	r5, r3, #27
 800dd86:	d411      	bmi.n	800ddac <__swsetup_r+0x50>
 800dd88:	2309      	movs	r3, #9
 800dd8a:	6033      	str	r3, [r6, #0]
 800dd8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd90:	81a3      	strh	r3, [r4, #12]
 800dd92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd96:	e03e      	b.n	800de16 <__swsetup_r+0xba>
 800dd98:	4b25      	ldr	r3, [pc, #148]	; (800de30 <__swsetup_r+0xd4>)
 800dd9a:	429c      	cmp	r4, r3
 800dd9c:	d101      	bne.n	800dda2 <__swsetup_r+0x46>
 800dd9e:	68ac      	ldr	r4, [r5, #8]
 800dda0:	e7eb      	b.n	800dd7a <__swsetup_r+0x1e>
 800dda2:	4b24      	ldr	r3, [pc, #144]	; (800de34 <__swsetup_r+0xd8>)
 800dda4:	429c      	cmp	r4, r3
 800dda6:	bf08      	it	eq
 800dda8:	68ec      	ldreq	r4, [r5, #12]
 800ddaa:	e7e6      	b.n	800dd7a <__swsetup_r+0x1e>
 800ddac:	0758      	lsls	r0, r3, #29
 800ddae:	d512      	bpl.n	800ddd6 <__swsetup_r+0x7a>
 800ddb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddb2:	b141      	cbz	r1, 800ddc6 <__swsetup_r+0x6a>
 800ddb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddb8:	4299      	cmp	r1, r3
 800ddba:	d002      	beq.n	800ddc2 <__swsetup_r+0x66>
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f7ff fb47 	bl	800d450 <_free_r>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	6363      	str	r3, [r4, #52]	; 0x34
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddcc:	81a3      	strh	r3, [r4, #12]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	6063      	str	r3, [r4, #4]
 800ddd2:	6923      	ldr	r3, [r4, #16]
 800ddd4:	6023      	str	r3, [r4, #0]
 800ddd6:	89a3      	ldrh	r3, [r4, #12]
 800ddd8:	f043 0308 	orr.w	r3, r3, #8
 800dddc:	81a3      	strh	r3, [r4, #12]
 800ddde:	6923      	ldr	r3, [r4, #16]
 800dde0:	b94b      	cbnz	r3, 800ddf6 <__swsetup_r+0x9a>
 800dde2:	89a3      	ldrh	r3, [r4, #12]
 800dde4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dde8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddec:	d003      	beq.n	800ddf6 <__swsetup_r+0x9a>
 800ddee:	4621      	mov	r1, r4
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	f000 f933 	bl	800e05c <__smakebuf_r>
 800ddf6:	89a0      	ldrh	r0, [r4, #12]
 800ddf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddfc:	f010 0301 	ands.w	r3, r0, #1
 800de00:	d00a      	beq.n	800de18 <__swsetup_r+0xbc>
 800de02:	2300      	movs	r3, #0
 800de04:	60a3      	str	r3, [r4, #8]
 800de06:	6963      	ldr	r3, [r4, #20]
 800de08:	425b      	negs	r3, r3
 800de0a:	61a3      	str	r3, [r4, #24]
 800de0c:	6923      	ldr	r3, [r4, #16]
 800de0e:	b943      	cbnz	r3, 800de22 <__swsetup_r+0xc6>
 800de10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de14:	d1ba      	bne.n	800dd8c <__swsetup_r+0x30>
 800de16:	bd70      	pop	{r4, r5, r6, pc}
 800de18:	0781      	lsls	r1, r0, #30
 800de1a:	bf58      	it	pl
 800de1c:	6963      	ldrpl	r3, [r4, #20]
 800de1e:	60a3      	str	r3, [r4, #8]
 800de20:	e7f4      	b.n	800de0c <__swsetup_r+0xb0>
 800de22:	2000      	movs	r0, #0
 800de24:	e7f7      	b.n	800de16 <__swsetup_r+0xba>
 800de26:	bf00      	nop
 800de28:	20000014 	.word	0x20000014
 800de2c:	08010da4 	.word	0x08010da4
 800de30:	08010dc4 	.word	0x08010dc4
 800de34:	08010d84 	.word	0x08010d84

0800de38 <abort>:
 800de38:	b508      	push	{r3, lr}
 800de3a:	2006      	movs	r0, #6
 800de3c:	f000 f994 	bl	800e168 <raise>
 800de40:	2001      	movs	r0, #1
 800de42:	f7f2 fde9 	bl	8000a18 <_exit>
	...

0800de48 <_close_r>:
 800de48:	b538      	push	{r3, r4, r5, lr}
 800de4a:	4d06      	ldr	r5, [pc, #24]	; (800de64 <_close_r+0x1c>)
 800de4c:	2300      	movs	r3, #0
 800de4e:	4604      	mov	r4, r0
 800de50:	4608      	mov	r0, r1
 800de52:	602b      	str	r3, [r5, #0]
 800de54:	f7f2 fe23 	bl	8000a9e <_close>
 800de58:	1c43      	adds	r3, r0, #1
 800de5a:	d102      	bne.n	800de62 <_close_r+0x1a>
 800de5c:	682b      	ldr	r3, [r5, #0]
 800de5e:	b103      	cbz	r3, 800de62 <_close_r+0x1a>
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	bd38      	pop	{r3, r4, r5, pc}
 800de64:	2000689c 	.word	0x2000689c

0800de68 <__sflush_r>:
 800de68:	898a      	ldrh	r2, [r1, #12]
 800de6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de6e:	4605      	mov	r5, r0
 800de70:	0710      	lsls	r0, r2, #28
 800de72:	460c      	mov	r4, r1
 800de74:	d458      	bmi.n	800df28 <__sflush_r+0xc0>
 800de76:	684b      	ldr	r3, [r1, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	dc05      	bgt.n	800de88 <__sflush_r+0x20>
 800de7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de7e:	2b00      	cmp	r3, #0
 800de80:	dc02      	bgt.n	800de88 <__sflush_r+0x20>
 800de82:	2000      	movs	r0, #0
 800de84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de8a:	2e00      	cmp	r6, #0
 800de8c:	d0f9      	beq.n	800de82 <__sflush_r+0x1a>
 800de8e:	2300      	movs	r3, #0
 800de90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de94:	682f      	ldr	r7, [r5, #0]
 800de96:	602b      	str	r3, [r5, #0]
 800de98:	d032      	beq.n	800df00 <__sflush_r+0x98>
 800de9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de9c:	89a3      	ldrh	r3, [r4, #12]
 800de9e:	075a      	lsls	r2, r3, #29
 800dea0:	d505      	bpl.n	800deae <__sflush_r+0x46>
 800dea2:	6863      	ldr	r3, [r4, #4]
 800dea4:	1ac0      	subs	r0, r0, r3
 800dea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dea8:	b10b      	cbz	r3, 800deae <__sflush_r+0x46>
 800deaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800deac:	1ac0      	subs	r0, r0, r3
 800deae:	2300      	movs	r3, #0
 800deb0:	4602      	mov	r2, r0
 800deb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800deb4:	6a21      	ldr	r1, [r4, #32]
 800deb6:	4628      	mov	r0, r5
 800deb8:	47b0      	blx	r6
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	89a3      	ldrh	r3, [r4, #12]
 800debe:	d106      	bne.n	800dece <__sflush_r+0x66>
 800dec0:	6829      	ldr	r1, [r5, #0]
 800dec2:	291d      	cmp	r1, #29
 800dec4:	d82c      	bhi.n	800df20 <__sflush_r+0xb8>
 800dec6:	4a2a      	ldr	r2, [pc, #168]	; (800df70 <__sflush_r+0x108>)
 800dec8:	40ca      	lsrs	r2, r1
 800deca:	07d6      	lsls	r6, r2, #31
 800decc:	d528      	bpl.n	800df20 <__sflush_r+0xb8>
 800dece:	2200      	movs	r2, #0
 800ded0:	6062      	str	r2, [r4, #4]
 800ded2:	04d9      	lsls	r1, r3, #19
 800ded4:	6922      	ldr	r2, [r4, #16]
 800ded6:	6022      	str	r2, [r4, #0]
 800ded8:	d504      	bpl.n	800dee4 <__sflush_r+0x7c>
 800deda:	1c42      	adds	r2, r0, #1
 800dedc:	d101      	bne.n	800dee2 <__sflush_r+0x7a>
 800dede:	682b      	ldr	r3, [r5, #0]
 800dee0:	b903      	cbnz	r3, 800dee4 <__sflush_r+0x7c>
 800dee2:	6560      	str	r0, [r4, #84]	; 0x54
 800dee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dee6:	602f      	str	r7, [r5, #0]
 800dee8:	2900      	cmp	r1, #0
 800deea:	d0ca      	beq.n	800de82 <__sflush_r+0x1a>
 800deec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800def0:	4299      	cmp	r1, r3
 800def2:	d002      	beq.n	800defa <__sflush_r+0x92>
 800def4:	4628      	mov	r0, r5
 800def6:	f7ff faab 	bl	800d450 <_free_r>
 800defa:	2000      	movs	r0, #0
 800defc:	6360      	str	r0, [r4, #52]	; 0x34
 800defe:	e7c1      	b.n	800de84 <__sflush_r+0x1c>
 800df00:	6a21      	ldr	r1, [r4, #32]
 800df02:	2301      	movs	r3, #1
 800df04:	4628      	mov	r0, r5
 800df06:	47b0      	blx	r6
 800df08:	1c41      	adds	r1, r0, #1
 800df0a:	d1c7      	bne.n	800de9c <__sflush_r+0x34>
 800df0c:	682b      	ldr	r3, [r5, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d0c4      	beq.n	800de9c <__sflush_r+0x34>
 800df12:	2b1d      	cmp	r3, #29
 800df14:	d001      	beq.n	800df1a <__sflush_r+0xb2>
 800df16:	2b16      	cmp	r3, #22
 800df18:	d101      	bne.n	800df1e <__sflush_r+0xb6>
 800df1a:	602f      	str	r7, [r5, #0]
 800df1c:	e7b1      	b.n	800de82 <__sflush_r+0x1a>
 800df1e:	89a3      	ldrh	r3, [r4, #12]
 800df20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df24:	81a3      	strh	r3, [r4, #12]
 800df26:	e7ad      	b.n	800de84 <__sflush_r+0x1c>
 800df28:	690f      	ldr	r7, [r1, #16]
 800df2a:	2f00      	cmp	r7, #0
 800df2c:	d0a9      	beq.n	800de82 <__sflush_r+0x1a>
 800df2e:	0793      	lsls	r3, r2, #30
 800df30:	680e      	ldr	r6, [r1, #0]
 800df32:	bf08      	it	eq
 800df34:	694b      	ldreq	r3, [r1, #20]
 800df36:	600f      	str	r7, [r1, #0]
 800df38:	bf18      	it	ne
 800df3a:	2300      	movne	r3, #0
 800df3c:	eba6 0807 	sub.w	r8, r6, r7
 800df40:	608b      	str	r3, [r1, #8]
 800df42:	f1b8 0f00 	cmp.w	r8, #0
 800df46:	dd9c      	ble.n	800de82 <__sflush_r+0x1a>
 800df48:	6a21      	ldr	r1, [r4, #32]
 800df4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df4c:	4643      	mov	r3, r8
 800df4e:	463a      	mov	r2, r7
 800df50:	4628      	mov	r0, r5
 800df52:	47b0      	blx	r6
 800df54:	2800      	cmp	r0, #0
 800df56:	dc06      	bgt.n	800df66 <__sflush_r+0xfe>
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df5e:	81a3      	strh	r3, [r4, #12]
 800df60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df64:	e78e      	b.n	800de84 <__sflush_r+0x1c>
 800df66:	4407      	add	r7, r0
 800df68:	eba8 0800 	sub.w	r8, r8, r0
 800df6c:	e7e9      	b.n	800df42 <__sflush_r+0xda>
 800df6e:	bf00      	nop
 800df70:	20400001 	.word	0x20400001

0800df74 <_fflush_r>:
 800df74:	b538      	push	{r3, r4, r5, lr}
 800df76:	690b      	ldr	r3, [r1, #16]
 800df78:	4605      	mov	r5, r0
 800df7a:	460c      	mov	r4, r1
 800df7c:	b913      	cbnz	r3, 800df84 <_fflush_r+0x10>
 800df7e:	2500      	movs	r5, #0
 800df80:	4628      	mov	r0, r5
 800df82:	bd38      	pop	{r3, r4, r5, pc}
 800df84:	b118      	cbz	r0, 800df8e <_fflush_r+0x1a>
 800df86:	6983      	ldr	r3, [r0, #24]
 800df88:	b90b      	cbnz	r3, 800df8e <_fflush_r+0x1a>
 800df8a:	f7ff f9a7 	bl	800d2dc <__sinit>
 800df8e:	4b14      	ldr	r3, [pc, #80]	; (800dfe0 <_fflush_r+0x6c>)
 800df90:	429c      	cmp	r4, r3
 800df92:	d11b      	bne.n	800dfcc <_fflush_r+0x58>
 800df94:	686c      	ldr	r4, [r5, #4]
 800df96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d0ef      	beq.n	800df7e <_fflush_r+0xa>
 800df9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfa0:	07d0      	lsls	r0, r2, #31
 800dfa2:	d404      	bmi.n	800dfae <_fflush_r+0x3a>
 800dfa4:	0599      	lsls	r1, r3, #22
 800dfa6:	d402      	bmi.n	800dfae <_fflush_r+0x3a>
 800dfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfaa:	f7ff fa47 	bl	800d43c <__retarget_lock_acquire_recursive>
 800dfae:	4628      	mov	r0, r5
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	f7ff ff59 	bl	800de68 <__sflush_r>
 800dfb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfb8:	07da      	lsls	r2, r3, #31
 800dfba:	4605      	mov	r5, r0
 800dfbc:	d4e0      	bmi.n	800df80 <_fflush_r+0xc>
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	059b      	lsls	r3, r3, #22
 800dfc2:	d4dd      	bmi.n	800df80 <_fflush_r+0xc>
 800dfc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfc6:	f7ff fa3a 	bl	800d43e <__retarget_lock_release_recursive>
 800dfca:	e7d9      	b.n	800df80 <_fflush_r+0xc>
 800dfcc:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <_fflush_r+0x70>)
 800dfce:	429c      	cmp	r4, r3
 800dfd0:	d101      	bne.n	800dfd6 <_fflush_r+0x62>
 800dfd2:	68ac      	ldr	r4, [r5, #8]
 800dfd4:	e7df      	b.n	800df96 <_fflush_r+0x22>
 800dfd6:	4b04      	ldr	r3, [pc, #16]	; (800dfe8 <_fflush_r+0x74>)
 800dfd8:	429c      	cmp	r4, r3
 800dfda:	bf08      	it	eq
 800dfdc:	68ec      	ldreq	r4, [r5, #12]
 800dfde:	e7da      	b.n	800df96 <_fflush_r+0x22>
 800dfe0:	08010da4 	.word	0x08010da4
 800dfe4:	08010dc4 	.word	0x08010dc4
 800dfe8:	08010d84 	.word	0x08010d84

0800dfec <_lseek_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4d07      	ldr	r5, [pc, #28]	; (800e00c <_lseek_r+0x20>)
 800dff0:	4604      	mov	r4, r0
 800dff2:	4608      	mov	r0, r1
 800dff4:	4611      	mov	r1, r2
 800dff6:	2200      	movs	r2, #0
 800dff8:	602a      	str	r2, [r5, #0]
 800dffa:	461a      	mov	r2, r3
 800dffc:	f7f2 fd76 	bl	8000aec <_lseek>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	d102      	bne.n	800e00a <_lseek_r+0x1e>
 800e004:	682b      	ldr	r3, [r5, #0]
 800e006:	b103      	cbz	r3, 800e00a <_lseek_r+0x1e>
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	bd38      	pop	{r3, r4, r5, pc}
 800e00c:	2000689c 	.word	0x2000689c

0800e010 <__swhatbuf_r>:
 800e010:	b570      	push	{r4, r5, r6, lr}
 800e012:	460e      	mov	r6, r1
 800e014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e018:	2900      	cmp	r1, #0
 800e01a:	b096      	sub	sp, #88	; 0x58
 800e01c:	4614      	mov	r4, r2
 800e01e:	461d      	mov	r5, r3
 800e020:	da08      	bge.n	800e034 <__swhatbuf_r+0x24>
 800e022:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e026:	2200      	movs	r2, #0
 800e028:	602a      	str	r2, [r5, #0]
 800e02a:	061a      	lsls	r2, r3, #24
 800e02c:	d410      	bmi.n	800e050 <__swhatbuf_r+0x40>
 800e02e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e032:	e00e      	b.n	800e052 <__swhatbuf_r+0x42>
 800e034:	466a      	mov	r2, sp
 800e036:	f000 f8b3 	bl	800e1a0 <_fstat_r>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	dbf1      	blt.n	800e022 <__swhatbuf_r+0x12>
 800e03e:	9a01      	ldr	r2, [sp, #4]
 800e040:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e044:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e048:	425a      	negs	r2, r3
 800e04a:	415a      	adcs	r2, r3
 800e04c:	602a      	str	r2, [r5, #0]
 800e04e:	e7ee      	b.n	800e02e <__swhatbuf_r+0x1e>
 800e050:	2340      	movs	r3, #64	; 0x40
 800e052:	2000      	movs	r0, #0
 800e054:	6023      	str	r3, [r4, #0]
 800e056:	b016      	add	sp, #88	; 0x58
 800e058:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e05c <__smakebuf_r>:
 800e05c:	898b      	ldrh	r3, [r1, #12]
 800e05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e060:	079d      	lsls	r5, r3, #30
 800e062:	4606      	mov	r6, r0
 800e064:	460c      	mov	r4, r1
 800e066:	d507      	bpl.n	800e078 <__smakebuf_r+0x1c>
 800e068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	6123      	str	r3, [r4, #16]
 800e070:	2301      	movs	r3, #1
 800e072:	6163      	str	r3, [r4, #20]
 800e074:	b002      	add	sp, #8
 800e076:	bd70      	pop	{r4, r5, r6, pc}
 800e078:	ab01      	add	r3, sp, #4
 800e07a:	466a      	mov	r2, sp
 800e07c:	f7ff ffc8 	bl	800e010 <__swhatbuf_r>
 800e080:	9900      	ldr	r1, [sp, #0]
 800e082:	4605      	mov	r5, r0
 800e084:	4630      	mov	r0, r6
 800e086:	f7ff fa4f 	bl	800d528 <_malloc_r>
 800e08a:	b948      	cbnz	r0, 800e0a0 <__smakebuf_r+0x44>
 800e08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e090:	059a      	lsls	r2, r3, #22
 800e092:	d4ef      	bmi.n	800e074 <__smakebuf_r+0x18>
 800e094:	f023 0303 	bic.w	r3, r3, #3
 800e098:	f043 0302 	orr.w	r3, r3, #2
 800e09c:	81a3      	strh	r3, [r4, #12]
 800e09e:	e7e3      	b.n	800e068 <__smakebuf_r+0xc>
 800e0a0:	4b0d      	ldr	r3, [pc, #52]	; (800e0d8 <__smakebuf_r+0x7c>)
 800e0a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e0a4:	89a3      	ldrh	r3, [r4, #12]
 800e0a6:	6020      	str	r0, [r4, #0]
 800e0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0ac:	81a3      	strh	r3, [r4, #12]
 800e0ae:	9b00      	ldr	r3, [sp, #0]
 800e0b0:	6163      	str	r3, [r4, #20]
 800e0b2:	9b01      	ldr	r3, [sp, #4]
 800e0b4:	6120      	str	r0, [r4, #16]
 800e0b6:	b15b      	cbz	r3, 800e0d0 <__smakebuf_r+0x74>
 800e0b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f000 f881 	bl	800e1c4 <_isatty_r>
 800e0c2:	b128      	cbz	r0, 800e0d0 <__smakebuf_r+0x74>
 800e0c4:	89a3      	ldrh	r3, [r4, #12]
 800e0c6:	f023 0303 	bic.w	r3, r3, #3
 800e0ca:	f043 0301 	orr.w	r3, r3, #1
 800e0ce:	81a3      	strh	r3, [r4, #12]
 800e0d0:	89a0      	ldrh	r0, [r4, #12]
 800e0d2:	4305      	orrs	r5, r0
 800e0d4:	81a5      	strh	r5, [r4, #12]
 800e0d6:	e7cd      	b.n	800e074 <__smakebuf_r+0x18>
 800e0d8:	0800d275 	.word	0x0800d275

0800e0dc <__malloc_lock>:
 800e0dc:	4801      	ldr	r0, [pc, #4]	; (800e0e4 <__malloc_lock+0x8>)
 800e0de:	f7ff b9ad 	b.w	800d43c <__retarget_lock_acquire_recursive>
 800e0e2:	bf00      	nop
 800e0e4:	200068a0 	.word	0x200068a0

0800e0e8 <__malloc_unlock>:
 800e0e8:	4801      	ldr	r0, [pc, #4]	; (800e0f0 <__malloc_unlock+0x8>)
 800e0ea:	f7ff b9a8 	b.w	800d43e <__retarget_lock_release_recursive>
 800e0ee:	bf00      	nop
 800e0f0:	200068a0 	.word	0x200068a0

0800e0f4 <_read_r>:
 800e0f4:	b538      	push	{r3, r4, r5, lr}
 800e0f6:	4d07      	ldr	r5, [pc, #28]	; (800e114 <_read_r+0x20>)
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	4608      	mov	r0, r1
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	2200      	movs	r2, #0
 800e100:	602a      	str	r2, [r5, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	f7f2 fc92 	bl	8000a2c <_read>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	d102      	bne.n	800e112 <_read_r+0x1e>
 800e10c:	682b      	ldr	r3, [r5, #0]
 800e10e:	b103      	cbz	r3, 800e112 <_read_r+0x1e>
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	bd38      	pop	{r3, r4, r5, pc}
 800e114:	2000689c 	.word	0x2000689c

0800e118 <_raise_r>:
 800e118:	291f      	cmp	r1, #31
 800e11a:	b538      	push	{r3, r4, r5, lr}
 800e11c:	4604      	mov	r4, r0
 800e11e:	460d      	mov	r5, r1
 800e120:	d904      	bls.n	800e12c <_raise_r+0x14>
 800e122:	2316      	movs	r3, #22
 800e124:	6003      	str	r3, [r0, #0]
 800e126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e12a:	bd38      	pop	{r3, r4, r5, pc}
 800e12c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e12e:	b112      	cbz	r2, 800e136 <_raise_r+0x1e>
 800e130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e134:	b94b      	cbnz	r3, 800e14a <_raise_r+0x32>
 800e136:	4620      	mov	r0, r4
 800e138:	f000 f830 	bl	800e19c <_getpid_r>
 800e13c:	462a      	mov	r2, r5
 800e13e:	4601      	mov	r1, r0
 800e140:	4620      	mov	r0, r4
 800e142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e146:	f000 b817 	b.w	800e178 <_kill_r>
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d00a      	beq.n	800e164 <_raise_r+0x4c>
 800e14e:	1c59      	adds	r1, r3, #1
 800e150:	d103      	bne.n	800e15a <_raise_r+0x42>
 800e152:	2316      	movs	r3, #22
 800e154:	6003      	str	r3, [r0, #0]
 800e156:	2001      	movs	r0, #1
 800e158:	e7e7      	b.n	800e12a <_raise_r+0x12>
 800e15a:	2400      	movs	r4, #0
 800e15c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e160:	4628      	mov	r0, r5
 800e162:	4798      	blx	r3
 800e164:	2000      	movs	r0, #0
 800e166:	e7e0      	b.n	800e12a <_raise_r+0x12>

0800e168 <raise>:
 800e168:	4b02      	ldr	r3, [pc, #8]	; (800e174 <raise+0xc>)
 800e16a:	4601      	mov	r1, r0
 800e16c:	6818      	ldr	r0, [r3, #0]
 800e16e:	f7ff bfd3 	b.w	800e118 <_raise_r>
 800e172:	bf00      	nop
 800e174:	20000014 	.word	0x20000014

0800e178 <_kill_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d07      	ldr	r5, [pc, #28]	; (800e198 <_kill_r+0x20>)
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	4611      	mov	r1, r2
 800e184:	602b      	str	r3, [r5, #0]
 800e186:	f7f2 fc35 	bl	80009f4 <_kill>
 800e18a:	1c43      	adds	r3, r0, #1
 800e18c:	d102      	bne.n	800e194 <_kill_r+0x1c>
 800e18e:	682b      	ldr	r3, [r5, #0]
 800e190:	b103      	cbz	r3, 800e194 <_kill_r+0x1c>
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	bd38      	pop	{r3, r4, r5, pc}
 800e196:	bf00      	nop
 800e198:	2000689c 	.word	0x2000689c

0800e19c <_getpid_r>:
 800e19c:	f7f2 bc22 	b.w	80009e4 <_getpid>

0800e1a0 <_fstat_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4d07      	ldr	r5, [pc, #28]	; (800e1c0 <_fstat_r+0x20>)
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	602b      	str	r3, [r5, #0]
 800e1ae:	f7f2 fc82 	bl	8000ab6 <_fstat>
 800e1b2:	1c43      	adds	r3, r0, #1
 800e1b4:	d102      	bne.n	800e1bc <_fstat_r+0x1c>
 800e1b6:	682b      	ldr	r3, [r5, #0]
 800e1b8:	b103      	cbz	r3, 800e1bc <_fstat_r+0x1c>
 800e1ba:	6023      	str	r3, [r4, #0]
 800e1bc:	bd38      	pop	{r3, r4, r5, pc}
 800e1be:	bf00      	nop
 800e1c0:	2000689c 	.word	0x2000689c

0800e1c4 <_isatty_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d06      	ldr	r5, [pc, #24]	; (800e1e0 <_isatty_r+0x1c>)
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	4608      	mov	r0, r1
 800e1ce:	602b      	str	r3, [r5, #0]
 800e1d0:	f7f2 fc81 	bl	8000ad6 <_isatty>
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	d102      	bne.n	800e1de <_isatty_r+0x1a>
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	b103      	cbz	r3, 800e1de <_isatty_r+0x1a>
 800e1dc:	6023      	str	r3, [r4, #0]
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	2000689c 	.word	0x2000689c

0800e1e4 <_init>:
 800e1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1e6:	bf00      	nop
 800e1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ea:	bc08      	pop	{r3}
 800e1ec:	469e      	mov	lr, r3
 800e1ee:	4770      	bx	lr

0800e1f0 <_fini>:
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	bf00      	nop
 800e1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f6:	bc08      	pop	{r3}
 800e1f8:	469e      	mov	lr, r3
 800e1fa:	4770      	bx	lr
